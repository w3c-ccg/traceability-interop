{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "0e3e69d9-7d4c-48a1-8948-ec8048e4a79f",
        "name": "Clear Cache",
        "item": [
          {
            "id": "4a8eeb21-4090-419c-8564-13bbd0430e5f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "606e0f29-060f-4a07-ace2-94d5027b579f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "339efc1d-8aa2-4eb5-ab64-edcb98fbea0e"
                }
              }
            ]
          },
          {
            "id": "cfbccee7-ff4d-4540-93f8-f065b5329641",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "02f12250-a141-4d4e-ac4b-8039c01c9c53",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "bd871b50-b46a-4a83-aa8e-9f8c4f8a2a07"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "357034dd-e57d-4be8-bc93-e50fce85fb8e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "5265fb4b-5f45-4d71-b2df-7fe2852c8a54",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d75c2007-1437-4a78-9cf0-ece67a3ce903",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d31f047a-69fc-4882-b35e-c3a603036f96",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dc827faf-0a8c-4e04-a299-252ff781b46b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "df558ca0-89a1-4374-a759-c73220a7c44e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "15ecea30-0f0a-418f-8ec7-282e7c10c4e0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8998c293-e524-4c97-a8f0-27330f2bf257",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "12b87fbb-e516-46e7-a92d-f67c8e59d84c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c80f2e27-934e-43fc-a887-b32a93ad3d5b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "478766ce-9d44-45b1-a87b-fd3e82a02e35"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "36f9de27-ec0c-4356-a006-b5d657ada963",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7e47e4cd-cf8a-4050-a204-cc5fd6c6ecde"
            }
          }
        ]
      },
      {
        "id": "b941c887-83ae-4499-8e4f-16cb93d82da9",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ecf01d5a-65c3-42f4-9a04-1ced5317beb4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "081bfc95-6d7a-4d48-a070-a76d8241eb1f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7249e829-7ef5-40dd-8da9-baddf9205ea4",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a654336b-e0c8-4b8d-9fe3-cc96ad1b2e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c3f579c-f12c-4ea3-935e-e21227ab4451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c18967e0-b77b-4623-ac76-fdc8407713a0",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb5ce57d-3947-4e96-89d5-543400a407ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "04cd6481-bf58-42a6-8c26-0f6f676f11e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb3ae603-c66f-4ac1-aea4-c35b13ec965c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a039c6-636a-4520-8605-799774572bd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c07fa5e-dcdb-47a2-af32-c0eb5121db68"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3268a357-66ec-4263-8472-ef96ec15da4f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f025166c-a3e3-47d0-b81a-45ed9177b90c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0beb558c-508d-4be3-8324-5daff203fdd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e8a9597-3479-414f-a4c3-a64ea764d60d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df77242-c3ca-4fec-b9fc-0ed23f1a374f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "007449a8-3e46-421c-b3bb-22c3dde7bb95"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2fe1bb0d-d29b-476e-b6da-d9e4ee613d6d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7ad29d9f-b903-431c-aaa9-51ec12d484cb",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "851f2b57-7194-43e5-929f-7adfe4104527",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "8c60f826-33df-4f49-a9f6-684386cf1d8f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0728fd09-3cb5-4c23-8e4c-853c5faccc41",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "eb1373f1-5405-4715-a39f-ac608fc8c6a5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "25ccb51b-2b28-4e28-89c4-8004abb492ba",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "64bf984f-8e82-491d-bcf4-8d66ff3c8236"
            }
          }
        ]
      },
      {
        "id": "9331e3d6-0527-4e71-9a6b-dc0a94a15ae3",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9c0a9321-bfdf-4799-b848-e8706ce24ed0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "030d753e-5791-4d2c-af69-6f650e706433",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "22d91883-9438-464f-b99b-6b66d6039f02",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef937784-cfb9-456e-bbcb-fc13e6fd6ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d3a55c7-e2e4-4e0f-bcfe-021509798591"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f57ff8-e012-42bf-bc30-5098a9c5e833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85d90a5e-3e95-45f1-8ad5-37b813b773cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aca4fad-4cb0-40ad-b648-842d1ac8f379",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a3e6de5-6791-4b70-9394-b1e33f2a9b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f4ae37a-f7d9-4efc-abb2-e382c55ca069"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f0d9f1f-f367-468e-937b-8fc0e068a8ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f89e41a-75ff-4d41-bd10-f9fe9413de4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e68657-7fae-4958-92f4-9adc4b370b23",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af4002ef-0bda-4d83-8228-e18612ddc481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ff1ab78-a174-48c4-9364-fad1aa820e18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b951d085-fc86-4fce-a5d0-88b63f551c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "465ceb73-bff9-478e-9d57-160289eaa5d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac3532e1-5feb-4a68-8267-ac1e7ddc049c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa26e77-54f6-49fe-b5ca-da0216fca890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5af241bc-9658-4fca-8fc6-78d7c18d0072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9510f0e5-8048-4761-ba85-48f905b13aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f30e7fee-bb9a-451a-9fe6-22fd4106936c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2caa922-fb1e-409b-bf75-004323490a50",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f963f53e-27b2-4b83-a64b-7ac3618d1b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2b7b5bb-c752-42f2-a3e9-72a9da4fc92e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beaa357f-9910-4b46-86ad-973c7be24f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8eae6423-afae-4ed8-a32d-ddc7a4fb0164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b0fa226-27f0-49d0-a8fb-e53f8997c080",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea8f358b-39c3-4c5e-bee9-f391885232a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c13a4c9f-7bae-4f94-b569-9d1a50909a8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cff587e-8e0e-4664-9a1b-6bc6b2b95e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33a3280b-e29f-40c4-8139-6dbf436069a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bad776f-541c-4d1a-a6f6-65f567501919",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a484774e-f1f0-43d2-b356-fdf35537ba39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88edd0b3-ce8b-473c-a4d1-7ba2c6633062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb72b8b-8fc2-405a-91c6-30e51a054279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "442b7805-28b1-477a-a57a-0463c54c0e41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a917e9db-b51b-400b-aeb3-4d01918905e0",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "890854b5-5dce-4698-a2d3-65710e16cc08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55fb73c5-a7ea-4c7d-b111-63ed50e9f0cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05772452-0767-4ae2-83a5-9cdb776258fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a8f386f3-2b81-465e-a5c5-ea21bc467eab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72117e99-9186-45a7-83c9-a42e856430d9",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c00f5ae5-42cf-4346-8adb-e2ead8dde12f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16905330-8a4d-46d1-b9cf-53595dfb4ea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d1ffd3-9002-4fed-84fe-d21701ac7532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9d84496-b120-4e65-a554-82cc33aca3b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "772852fd-fa03-4c8f-af67-49fb376f12ae",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e574d9-099d-4301-ac30-dc92a2d2b69c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c00cfb5-b484-4be1-ad53-c0451dbd6393"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9907c5c-9a70-4f2f-9131-12a13862a20e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "430960ba-231f-490a-886b-55d653d17f04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "313022e2-a276-453f-9dea-370166579a47",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "996d3e55-6099-4a34-a2c9-4452cf74a2ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3c5e5fb-165f-4269-8c86-df3c7f04e0d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c20873-e323-4719-903b-48e6c1171d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1ed5752a-0641-4b74-a728-54458b576387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd0dc9ef-aebe-44d7-a958-0065ad1b61c3",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e380c7fd-b97d-4de4-9e1e-d7aa14aa6a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1e8ab39-ca62-40b0-951f-ebec0bf4f8f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef9af8f-c0cb-47da-9038-33fcbeafe2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1ff2cdb1-b30c-4b64-bf86-81f0244752af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22d484b4-fc12-4ff0-b486-365b2b99ee47",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f41e98fe-6e4e-415a-ab5e-356b08a18847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d172383e-38cb-49bd-b38b-2cb97bf7845f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99163dcf-5bbb-4d6b-9022-6e3d0590c28a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "829a3118-f150-4523-b772-fed1ab60c643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28dc1d7d-8af4-416c-bfe2-305bc63c9b50",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28228502-ae2a-4961-b7bd-3bc821d2dab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a18a4fbc-617a-4446-88dd-24cbb00979df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50445341-2afd-412d-8ffc-dd6c7becc0a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c388e6a8-3bd5-495a-9a74-54e5a693c69b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "099c0f49-b3ff-4b24-8d3a-630764c930f4",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64584d88-e1d5-4897-bf3e-d05b188c732d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f00bfc4e-a6e4-4cae-a38a-4d1adf989ac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114c66ca-35c9-45e9-b783-22147810b16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e14145e2-ecc0-494b-b0a5-c7aa8737ca38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96367a95-5a5b-4c6d-8b68-4e9969e9f2f1",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c2a850b-84c2-46a0-81dc-e034e6691c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "769e2216-a9e7-497b-a69c-5b43b08e8925"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e6034ac-78f8-4740-8feb-89365df3b8c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47fd7990-2d37-4352-af68-4c84b9bb4516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f57aecf-25d3-4ceb-b6ee-5a7d37d4cc4f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e95176-e545-4783-949b-64d59333e22c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "152f8ab6-9ab1-48ec-b5fb-360ea9146164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3d08ce6-f0cc-46f6-8b1d-575a620a2d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "35476152-7775-4b7f-bb94-1c3af4b5d7e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6a2705c-ec1d-4254-bf86-05c1268c6c3a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ebbaef-356d-490f-928e-b16f27bdb132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c63b6a5-296c-4a65-ac1c-723ad390f628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "128f6ddb-cace-4f86-9e9b-7d1345a1547e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0f95a4a-56ce-4776-9d99-26b65f73afc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ac469c-66a6-41f1-a9c3-213baefed08d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0578175-7f33-4b05-a727-6031a6e4b9a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2e74c17-941f-400d-9be8-8c59ad0bf5c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "391d8ad3-1d9c-4991-a915-40ba7dc604b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "03958677-8878-4ee6-aee8-aef44b7e4fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da27d1e7-0da6-4a6f-9c4f-025f922261be",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de21a7a7-8680-45cb-886c-d9d7524474cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebd04602-adf1-4316-b985-7d7f38c21e87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbdcab72-cbff-431f-8393-793280f6bbd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f888b07-1bd2-44a6-a262-cb1ba9d40a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78a1a48c-c974-4efd-9032-3e1ccf80e9ce",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96af1818-bf74-4bff-bed5-426816ef0437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0413aa8c-437d-4a9a-bfda-c28a92eb24d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1932c4a7-39a6-4250-a8b6-5f3e9772c677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7044d08-b92c-4434-98b6-85f3e6308080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6966f6b-c4a2-4cd5-83b7-0c73fa529667",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5bebb8a-c510-43de-a3c1-ba0130a73901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70966faa-9bf3-4d93-8b67-ddaf7915eb6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e25d237-f4cc-4910-8d62-d55aa48f334e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b76c96c1-1685-4ba1-842c-e8e862f9f532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c756a5ba-e45b-41a9-b161-45c9e829fa7a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00c1cd88-cdb6-4afb-8093-983ac9e15c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faddf5b4-b74c-4f74-b7f2-a82a6a20ae9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c05871fe-4ed5-40d7-8df0-17ed8005f940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9c159517-2ab0-4a2e-83d9-f6af9944bb44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "178f6040-9a25-4eed-a36b-c9b0455d15df",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f6fad84-d2ce-4d00-840f-c13669ebc5ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9501d172-5ea6-4ac6-b8d6-25c3934f388f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3438399-d4eb-4477-bb07-218cfbaaa885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8235ed3-b220-445a-acee-305b840dd6cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a3b7f25-0034-4afb-8ef3-a91366e829d9",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8cede8e-bafe-4502-801d-80189d1cbe2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6cd834c-dc51-4e4c-9c28-0e11b6cc9a75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08eeec4e-683a-40c2-b9b4-3f1d3986331a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "565447ee-e980-45e2-a7bc-7ca81fe05621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad2eb1e-6da2-41ba-acbb-12e3c95793cc",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f1454b0-6276-4f04-a2c8-b49aae87c87d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "184741bb-a921-463b-9095-7219420901dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96087ac7-7d39-403e-88bf-a6ec011facb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc366d82-e877-4633-ad26-c7a851a727ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6a85e79-0191-4478-94b0-b5ba419667d8",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c49fc459-24a0-4cca-a14b-d583cc2591f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1310ca66-5c92-4e45-a53b-1942ffd69da6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7cd836-bbd8-4cf4-b11d-67b87cedbc4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b330b1bb-78ec-4b85-95aa-630b9e04b76a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5df510ee-b6e5-4a29-88ca-bd13f3b9da2f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4de1815d-5056-42a2-9a98-aa10fe2a6f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6ea7e92-cf38-4cca-8f85-34d0bab644b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c46532-fffb-450e-b81b-4efaa94b3805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a8ba83d-6c63-4f6d-91e3-465356158663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b11aa7a-828e-4dc7-8220-12f8033a9b07",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f08e78a-c73c-4640-8cff-dcce97dc4e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9d203c2-81aa-4190-8e09-f7a6b6e9f8c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b48e8ed-8ed3-446c-9d78-345a19d56ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f42e0b4-5144-4c77-8959-42c9c83e774c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed87f63-0e79-4a43-9edd-32cb636e7582",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b02151-4503-4dbe-85db-9f5653ab121f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddb8ea8b-35dd-4130-8241-cf381c8f6bc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9381f104-4663-44a0-8c02-66331e88d954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "c25f580c-17ec-4db8-aaa5-1b64ca4bc53c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eea89338-a04b-4aad-9713-01e9e0128904",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "112b3199-466a-4427-a704-edc42e290281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "063a95f4-6662-4555-9eda-9b62ce82134a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1685b10-f6e8-4efb-9f5f-e3fe4184a5d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc0be49f-ce29-4d31-95c4-fc760d582095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "010673de-2589-4a51-a29a-a4e7b5e7c39f",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e8d82a-c18d-4d8e-9e1e-6767aa1d5bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2303d4e-3f04-4b65-b82a-ce7106e978b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d379ffd-344a-4c04-9d08-a68f142550f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fed181e-8e14-460a-8a72-aff2c4933904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66325038-b5f1-4857-8a05-74e373b81957",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcf32711-d232-4d26-bf23-31bbad7b62fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "698d184c-4e0f-484f-b0e6-1ed207e3aa2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94612b51-96ae-43dd-9b91-ace6120f857d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3055eae4-fca6-4b16-984c-e28b5cda3f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "685afd9c-27f8-4655-bb77-3165e055a59c",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15c2d36-dc49-47e7-ab32-7a3c829931b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f86dec3-39e1-469f-a243-19dfec87b63d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e92caa52-6df2-4e2a-bfed-78d7f6a98d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "19a2d484-5f1e-44a9-b2eb-439f19d981b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e2ffa59-cfdc-46ce-9e6e-9517adeb25dc",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9cd5694-92be-48e9-bcf9-366d8dfbef17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb84aff4-c76b-4e2f-b262-3c45bce80290"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "969f5422-8df3-4906-afd9-7c36bf85c256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "731c49ec-0b7d-4062-b0fe-d6afb50b6343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "728855a8-92a5-4bef-b3d1-ebe509829715",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02201bbf-85c6-4077-adfd-4284116f5c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "371da0e6-7cac-4e4f-8c98-fac292dacbbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92960182-eada-4a06-82e2-ac361ff5c718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6ab28e46-46a8-4147-aedd-53bcb5b0d6ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9824e59a-f224-43e9-bdac-0c749751a58e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b303f4d-a3e7-41e9-8513-2df78c703113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87216393-0fcf-408b-bef4-f49dc8948f49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a44619c-c24f-4b12-85b1-c6e22d938171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "60635f2e-f8cd-4563-bea9-033794c9c8cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcdea2bc-dbf1-4d02-822a-544d5e45fa71",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1953e2b6-a6bf-402e-873d-fcfe1a0a31c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f27af60e-c66b-45d0-b0a3-80d753a37b01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a3265af-dc46-44ef-9ba7-a41994208018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f783df15-9226-4ac7-9b17-2118f4abf3ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0964a9c9-c4fb-4439-b533-01b4c3a92359",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef56358-49d3-4edf-a7c9-4197dbc96987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abd6a746-78fb-45cf-87b1-22ed90e71228"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64eacf1e-d556-4f51-a9d0-79988688e23d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f17f9a8c-1c18-4cc5-9243-d4fb6239f096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b46932-7db0-4001-833a-9aba1af97f79",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5716b1b8-63bd-435b-8987-1b13bd018047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a217d77-80a3-4d14-bb93-19dd6eee9e9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcbad936-d293-4982-996b-47fd0dbba476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e87a0d8-722c-451e-bb0a-13409ec61e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9aa01ac-f2d3-4a28-9dbd-4eb7e352b717",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "722d9b96-93e0-4280-b9bd-66a894409062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4662e8d0-9ede-416b-b7cd-989bea015aa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eade466-140e-4c8b-b500-ec1782893a2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "af185dd2-020c-4670-8514-ec0edcd4ae44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87988c83-fb1c-49ef-b02b-a0e71245f377",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a0c4f3-8246-4426-a363-8843197a74e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "415fd322-f57e-4fcb-83a0-cb1d8927b4cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20f37877-1e87-40cb-b215-353226997840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5b93b971-c4ee-4a50-943d-a14def54ca64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "147484d4-1fdc-4585-8b1b-35943e522203",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ab6180-1601-49ab-99b4-cac890811f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7905441a-7dc0-4f5b-a588-83d8b0b2aa2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33980727-d95a-4f5d-a106-0c4f77fe1d87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1926a4ec-2e4b-48b6-a801-ec1db05706f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71181345-eec1-4429-99e2-e0a326f6622b",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "637deef7-b222-44b3-ad35-a2449c23812b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c55022bf-5d83-41c8-b750-04bf8abe7762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b56ecec-9b59-4d1a-a838-2cf7372364fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f20e5612-6c0b-4020-a4d7-bba4ab319fa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4d88bb7-1712-4a2e-96a7-4579dec12214",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e9398b-756d-4464-8290-b331df6414f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff99d171-2c31-4699-bed2-fbb400039a82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8f2fedb-7e5a-433d-9ac2-ae183f004862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f216656e-3fbb-494f-a140-cdf8bd0a2930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c5b2480-2845-4291-94a7-5bc07081f947",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4530e0ad-d547-4b3f-a98c-94ba32816336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17e00602-62fb-4ce0-b168-3a6e79318592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add916b6-6222-446a-a751-15e36e4fe257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b7da8c0-6aab-43e7-b474-255f0cf742c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d999297-92f8-4fa2-82f2-c0a851c90fa8",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "455d8d9d-bfc5-41fb-ba93-f39cd870a0cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f22f6d0-af99-4bf2-a80d-ea98b1a39c14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2c45174-ca93-4630-b96a-3a1bd19e7e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "70743ea8-ddcb-4364-9a9e-2d9e7d924b64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03b43c4e-de76-449a-a38e-b12dfe05eee1",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3896e16-4278-4240-8c6d-89f7b77127a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afb8f3d6-eea0-4100-b44c-24949b17104a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b539a7f-2caf-475f-a28a-ff1688158662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "85645633-a5f1-4dac-97d1-f051b3b30eb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5688644-66ab-44d3-a8e8-81afd0257397",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c34abf7c-3b29-4fa7-8a96-531d2a8ad88a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8569e71-61cd-470c-a005-7d1ecf159246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f7fd774-4092-4be6-b5d2-e5d6641b1a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a5d76bd-ed5e-4b9d-b94b-7e39a778825f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3095f25-f49a-42b8-8ca1-c93324acc8d0",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ac3449-8192-4d23-9094-6ba5a2862f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5498deb4-379c-4d5d-9373-ec785fc10646"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04d68542-cf07-406f-85d8-77edcddadc3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7ce6e2d9-fa89-4a0e-afa3-ef53536ac3e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee6586f0-6b19-4bee-8fe3-420ce6d63eec",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9646399-6ca4-470c-b7d1-374886551f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7dca753-ae0d-42a3-a2b7-82fab3533a80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "769ae431-9858-4eb1-a632-34cfd584e319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3383871b-1ba7-4473-91db-672800b15f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2aaa8d1-3f25-44ef-9285-29eb9900eb26",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d7125d-cb87-4616-9202-aad75112c88f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "618c3e15-4101-4051-8469-bce690bc02f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf76165-523f-414e-9db0-1f1ac5e98304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca4ba434-b651-49dc-a22a-92eaac0d9a2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15404182-4504-4276-a461-a7db463da516",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a809412-f365-4f32-9c1a-8bbcc1fdeaea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbbde133-1aa9-4daa-8639-0c430e8fdd7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d60a2b0f-4167-49e7-a7a3-ca30934d7d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "21074784-40e4-44b3-a8b1-4daddc81d473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef70ac88-ba36-4695-b17d-b3ebe6dfd45d",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c9ea994-671d-4285-84e1-f5bb76a7425b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23397513-f625-42f7-9694-d59b67bb243e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9208aa22-3a2e-493d-a61f-23eee612aac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b9989be-de40-4b3a-b0a8-38a9e4029408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d6a7d7c-b824-4690-8a6d-20df70b4da2f",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "812afdbf-5731-45c3-8716-08997b1372cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf563a4c-a60c-45ef-a798-c2d7f3b07594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "877b68f5-676b-4227-ac2a-9b2b657b0b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4c5e549-703f-477c-8087-fca04491b5d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e6e964-c313-4566-9656-cbfc53f078ff",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ae58e3-ae07-4844-94b7-0fa9a7e1c7ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd1e6c7a-67d1-49d0-908b-28ebbc1611c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dbb8a69-e636-4e92-8442-7741e1a65302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "0838a235-d71c-4b1a-a20e-d3d46634653a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c7d4ea8-6e8b-4915-bbb3-ad17902fa040",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27abfd89-4366-4fdc-9d8c-723193a10e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5213a5b-e10e-4f34-abb1-2d34553660ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5f13862-fde5-42b8-917e-0ccd0bec3d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "49fd5173-5ecf-4a0c-b1be-4d91a29facc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c95ddf71-54f3-4243-ac21-9151eafe3c44",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de2a14c0-3177-4c3d-b954-d243a5c1ef31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b287d5d9-3657-4a65-80ab-97e31719cfbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb92001a-8a26-4013-8c89-d48d01ab9e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2ab03ff-9e0d-4893-9ec0-15b3116a9383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e1bf7c6-f24a-4def-85ad-8cd59edb37a5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af2e41b-86da-428d-90b6-85082b4b9ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaa118eb-7fc6-46e2-aaac-1684c60a4de1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e8b795-1ac1-46c6-bcc8-982bb59cb285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "211b6644-9e05-4e55-8687-4d52498213bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ac1362-692e-4518-8bd7-0a79c2fd67ab",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44bb1455-41e6-4bd6-9096-44b5816c276e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28420922-3570-4e54-8a60-69da00ad6148"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94fb392b-d4e6-4d77-a0fc-319c9beb8353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3177ef5f-f670-48aa-9613-a9304302b567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78fb189e-7e01-4865-9584-bf0985f4fa97",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "363dfa08-5dc1-48e4-b665-b9966beff83f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11b43613-542d-4668-b2df-33c121431e43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6ce5a3-ddb1-4b08-b37b-7b83e7130b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f90f38d6-7fdb-42fb-a584-3803135949e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad167029-4c22-4a57-b36d-e9386be79a34",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a7c061-1754-477f-8f58-d764791184df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf6cbc2c-7344-47ef-a68c-3493fbda01eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d06874-8e2f-474d-89bd-30905acc3093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "b35ac4fa-7606-40ec-a148-777f9f29d54b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec33da6c-30e9-4bfd-a34f-c6071a455a5e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab4b77c-f037-4e6e-b9e3-c4ed20a02509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "266c38f5-f337-4de3-89a1-c3a9428f0b85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20fde02b-2304-4a0e-bb1a-0a381df7f806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2b27103-0786-4491-8aec-5cc6b35e6b3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d974aa2-6dd8-4a1f-a347-f9dd291c64dd",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86dac6d5-908b-4bab-aa75-d733f55e22fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fc4ccf8-5cb9-4575-8bc9-2553acb15354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1c36b68-eddb-49b9-9fb5-7b60242f62a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "da1fdc8e-059f-4426-a20c-7adb77dddf0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46880f3b-e727-4c07-9ecd-c1cdb10a795c",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2116315-1231-4fd0-aabf-aac1fef4a094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "878b4ee5-e909-485c-a891-9c01f6331a0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cfd23c9-2232-4cde-a7f7-9228b744b4d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "df2e378c-0684-4a7e-9c83-65707b05db63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9422522-9ee8-4d5e-86e9-5bfa59a1a70f",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7828b254-2840-4c46-8864-dddae587034a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe48ec00-5113-4c5e-9efc-006b021d86da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c74836f3-2ead-472d-be75-cad044b337ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "233881fc-c745-4d28-95eb-78c1f3565646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9660e1b1-ae20-49dd-85e7-fe4264eb0f5b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07bf673b-7708-4b47-acd1-543938c3e020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae964492-1aeb-4dd4-a140-14f8e6c7dc69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f5c2ec-80a1-4b2a-9116-20c52dc808df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b5e95a6f-3085-4d87-8420-f397b9243ec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92023358-e2be-41ba-9c3f-946c21e4bac3",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "431bfacd-32bd-438d-ba07-dd67e5c17f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9060156f-b16b-45ed-bc91-7664ffd3bcda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09587f40-e19f-40fe-b850-e233cd0e64a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b1dac04-4c1c-44d1-8236-1a3bb5326547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b38baff-005e-4a85-b2f4-f3ff80d6d013",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2eda367-bcca-4c0c-9789-01b02da5af07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17610088-9eac-427f-87b3-a935a352ba4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315533a0-05fd-4b81-893a-13c50c1f88b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "46bdfa64-b27f-4f0d-8c71-9f772a1cf282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86a259b-806f-436f-9cbe-8fa09327273f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7608d50-ef61-47fc-aa80-04dfd69fae12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee86d342-7a8b-4539-b23a-bee30b275f81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d912aac0-7868-4f92-b0c2-f7d3d391089a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f83186de-83d3-4686-b7e9-97db4e5c2099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73cf7ca2-3341-4867-9deb-0e18965af10b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "195947bc-01a2-4059-851c-181dde71560f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3512fae2-dd1b-4eee-a8c1-19b82d146980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c1a44f4-8098-4a59-ac29-119a376e55e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc7b3fa9-10ce-48fe-a1f8-d0575016097d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4724eee4-98b0-466f-8116-b39f4b60e37c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00c1b79e-8d69-475e-b1b7-9ac0b4fe0494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06801021-9e2f-4d22-9120-20a885e6a565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1c7b505-5407-41c6-b902-799ad7b1c6c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "caf83d6f-2a9f-4d92-af07-4fe006e256b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0062abe-2fc4-4036-8156-377d61bac9e4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16be3236-8793-4be3-b5b5-0200e3bb942b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27eae360-7dc5-4cfb-a04d-ef703e4e07bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82d8715-455c-4a83-9a4b-d31bfa44ec3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c7c04a0-a5b8-4524-a298-4d1a311614b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a573432-35c7-46e3-9778-ab92d8643d54",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ef232a-5e71-495c-ad2d-5b717203233b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a90a4f85-274b-45ce-93a8-9cef5bf79b23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82848616-4b6e-4a6f-97b7-ba3cc30cde4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0e5bde5a-a842-4069-90fc-c7b0cae808bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a44c1c50-f828-445d-993f-0a6f6ecffb6c",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9522764a-f20c-433c-bf99-3051ed914c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acc80307-a77b-49fe-a67e-63f5dbabca86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad991047-73ec-44af-9e29-700b68c4fd85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4fc74ca-e0d7-42b4-bb01-3774fca4a613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1089f17-c129-40dc-8a9e-1f130bcab0ff",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0148825a-94b3-48cd-b6d7-5afabf152d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bd723dd-6dd3-4dc5-be85-2d0bc11a7593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec7c6af7-116e-4d94-a189-7065f0222f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "49047210-58c7-44fc-9e33-6f299d698f93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f9376e-7303-4ac9-a81c-afb47ea95c77",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d8ebab6-5fa0-4e72-b06b-ebd02b93d80f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3f71af8-cfd6-4a45-a72f-9a1f7eb40b48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b7b6b5-cb71-441d-8b87-08529ef71199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e242986e-18c1-4d8c-86ba-f194a3473b61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b38d4f-1282-4b64-83c1-7f97dbe35eb6",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf2411d-17b3-4025-b881-ea514d31b205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fd9c8f7-b201-44d1-8349-15e1b2dcd2c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb072409-494b-4328-a579-b56b2bbd52c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a46d3ae1-b52c-4c29-b840-9baed2697732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d633d0-919c-4e24-88d5-286fc17e9934",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "458f23cf-87d9-411d-bd5b-52ffe9bfc09b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bd56e17-96e6-4b85-904f-89b582e91fd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed349081-5802-4001-97e8-54215f09378b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8918e4ab-ed93-43b0-82b8-18f1ca95519e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f02f6c3-32df-4c9e-a97b-87c6a47d7d9d",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c403447-5d02-4ebc-bab9-6bef770f1928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2797de0-b572-463b-a47b-10142fc58024"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb659d2e-b8bc-4173-b544-393dc21430b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cb0f8da1-461b-4d74-a6aa-c3d12f5421a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e17e883-0726-4b7d-914a-1ac1ba2aa014",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ced13e-514d-42e2-a1a0-abf102851b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ed01d6d-9a98-4dfe-9c4b-2f681ab4d9f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18404830-a892-4bbd-a190-409f8333cb0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bcd0b3a-7d4b-4d52-896d-dcfd3bf38058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc82bd26-90f6-4414-88a3-a427a41f5fe0",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d8f7614-a2fd-45fe-b07c-b4b49b6ca531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feb5c9ef-93c6-433e-a86a-4a9436b2b534"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c4521e1-66d3-41ef-9d9a-6926d9eb8c62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d35f266-1e8b-421e-9b6e-598ff6ca2cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c619ed0-5dc5-43f8-9f5c-02d8aadcde3f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0045c8ed-9285-41fe-9c14-2f0ab4590f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c321169-c966-418f-b129-45299afe0cdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e9150f4-bd50-4004-a7b9-13edbc72fc4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cee01aff-d8bc-4cb5-8500-8be88cab58d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a2212a5-ab61-4d4c-982c-5c46e8b7f034",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccfd7f45-17d4-44b4-a107-fe3a129dbb12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57d47dc5-7c13-4284-a063-6905abeeec6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f0edcac-cfb3-4eba-b12b-eb7d64e284eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4393cfa7-5396-4c3f-95ca-3e3f243d071a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f7d14b-f3a1-4c9c-be34-09cdd4bf1be4",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4dccd78-a626-4055-bbcf-da7c06affbfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97140649-4ae3-4942-9064-c6fc99b98ded"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f700aa-03a7-4d8b-95f0-c13bd33f0023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aa78d7ad-1355-4ae2-9009-1e49497be81d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09d9412-4bdb-41d7-b2ac-2178c0af4c8b",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe58c06-aefa-4827-bc6b-79b0b094e653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7977729a-c6ee-4a63-bd3d-82150401735c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05dbb93f-af14-455e-b837-3b5cb7986ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f24ab456-a9d7-495a-b83a-5f56a33941c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc4dfb0-5b01-4600-ba54-ee4cfc1ed7eb",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3718ff09-4fba-4a4e-b720-c4b3f99e76fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46cd1bbe-d111-4af2-a04c-381435453acc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c407d294-7448-44d1-ac59-a541060d73ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "61f00e4b-3ad0-4965-ac99-64da623cc062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad3d8c79-4746-452b-ac83-d06d9856ddba",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a34732b6-eacf-439e-bdfd-b85d8e3020c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd7a209c-d09e-457d-a1ce-7e6d64c6d430"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f752e710-9406-4c37-a29c-28ddf51e60b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7fd7ef6-f8ce-4669-b0b5-55ebc4a29d61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa44eb3d-04d3-4fb1-848a-148d42d963e7",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d915b5f-1530-4103-ba49-854ccb9fcc5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "952e3232-47cd-40fb-bf62-51cea9a7ab66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5c6e0cd-d781-4255-9a24-5dfdb0566db9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "85212dfc-b3be-4a91-baed-09d5843ff921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a135043d-15f5-42c9-ad76-1b2aa44d8e15",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c47b89-22c7-4372-8410-ed41c4f8f440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac539365-457d-4924-b34c-771abd8a861a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "346bc770-9ff3-4dc8-bbfd-7830d31be8aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "65ed5c62-23d1-4b3b-b968-4e47f8326a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49602db9-b84b-4fb9-96df-0b4ba354f91e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b615cf4f-1431-422d-9c8a-bed14b96138b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "128fad39-f16d-4d9b-9817-5ab21c73b158"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48a9410-4bf1-4d15-85c5-e4a2dea21722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d45dc938-20c4-46a5-b202-7df8972da77a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a99bf1-7e0c-44d5-9110-d297e3d76c46",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46d19d0-5b24-4010-a018-389322e08772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "361edd25-74fb-4891-a9d1-027b773d946a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5571b47-84ab-40fe-9497-eaf5d70a474c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d9a7be9-b0b3-427e-bc97-dc820869e799"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4e1bd73d-ec06-4562-a9a3-300c1bc7d359",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8c3535c4-ada8-441d-9c5b-2b69dad7f38f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c04c72b8-5784-49aa-b07a-620886da8d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1dfadbb7-6552-400e-b6ef-24fa0fbde10b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66df4f63-b521-4353-b34a-d8b29ee801dc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cffded5b-06e4-4dd2-9cde-9253bd6ce684"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2331a1e3-264c-4284-b74b-eac1e35d1191",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "24836f3b-2f6f-4f3a-8ff6-9ccdf6f6cdf3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "22a8b8a2-2bd4-44ce-ae17-d9ed1d4dc732",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11ee6033-ebb3-4523-9f27-c8a558f2de2f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "be288a03-bc24-4d60-b848-53ae6a07e805",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0c16c363-763f-458d-97d1-f740693f4cfc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "81c5bfae-e36f-4079-890f-fcd3d48b4110",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bb322b01-661b-483c-92cf-296e79fe0d31"
                }
              }
            ]
          },
          {
            "id": "3b051a8a-d0b2-4513-aaa5-29e16eac8395",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c8058f60-5d84-4448-998c-ffff2c2684b7",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "8815efdb-afcf-42ce-ba36-6fce534ecf05",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a717f30-532f-4898-a378-855850face41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a51db8a1-7a9e-4c2e-bbd5-a2d96a7e082c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995db673-b66b-4b8c-9d49-f7e7ae85c81c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "216bd3bd-bc8c-4030-9a7e-78950cdbccd5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c5539a92-9d68-459a-9269-021e63b8d1aa",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "50e2ac1b-50dd-4529-9d21-b9bca8039735",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b6a19863-6841-40e0-a556-38f8907b815a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "634e704a-7b95-4552-a511-1fa4db35c023",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7f51affb-ef3f-4bed-adcd-a4e9a71697d8"
                    }
                  }
                ]
              },
              {
                "id": "36852369-9c14-44b8-93c5-d95f9e402d5e",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4c80934-6207-4851-b356-47b6d0775106",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6426b544-586c-43b7-b608-9559f293ca0a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "def4d949-37de-47c0-8deb-4fcc80b2ce4c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3b73eaaf-43f7-4de8-aabf-0420ce6dddfc"
                    }
                  }
                ]
              },
              {
                "id": "f6890aa5-9b9c-4c19-85ff-e9537869d09c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c68c4d1-640b-4ad9-80fa-c1030fdca7b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "56f0c4c8-5641-4e46-b32b-c018d22b8335"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6d71c101-3b19-43c6-9dc9-c9061e4bf890",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d9fbf62c-b0ae-4242-9269-58f79e83b125"
                    }
                  }
                ]
              },
              {
                "id": "2a68c723-3569-4919-8358-e2f919ac3893",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "de47eff9-5715-43c3-b46b-f3f6b290cf90",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d0d76ad2-cb91-4a49-94b4-a6349df82acd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b106bbf-0b78-4f4f-9634-301bc6d960ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "e1ac6e4a-4000-4e2e-a274-8766046f0de4"
                    }
                  }
                ]
              },
              {
                "id": "07d6f455-1c14-4590-9122-6bafa62e611c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "249b0c40-9bce-4b77-8e6f-986b7892a47d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dbd932b1-3739-4ca5-9b14-b0c2887fc0ee"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "49aacc0a-53e8-40b6-9193-455a79c2c075",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2cce2a32-78ee-4340-97dd-79fba73c8906"
                    }
                  }
                ]
              },
              {
                "id": "c6853a77-d9c5-4c92-9d6a-a1a91edb929e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4da56060-45ea-4411-a1f7-024a16a2bd51",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "12046dff-bbd7-46da-adef-52fc274435b8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ee7bc38-1a6b-490c-abb6-f08ca4cb17cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9ff2bd50-db83-4781-9bff-8342d9abbb3a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a18424b4-ddb0-4e84-82f1-e52f510faa68",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "97872334-b98c-4ab8-98d7-6a8215bf4646"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e2f45ff9-4b5b-4163-aee2-60ed948c84f0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "50c80e19-94c6-456c-a99d-a39234f8ce18"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c80a56a1-3da1-4379-a3be-564c682b4e39",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "68fa45a1-4e70-497d-8bc8-a1aebdabc091"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "650b32e1-2f87-453d-9ee5-545becd6075e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4253ded8-46cc-4c35-9a35-9fb0bb8bb46a"
            }
          }
        ]
      },
      {
        "id": "e76af00a-bd0f-41b3-884a-ee6890c61ca2",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "b1c536a8-dd51-4e6a-a3c1-63f4f2b3d543",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1e50916f-d0c7-472a-8b2c-03a17962e1be",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "30609f7c-cb5f-4877-b21e-26b3d2959dca",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b3a4dd-c0a9-485c-bd73-03c0985e4bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80fc2fca-5959-4ae2-959b-4ab5d738898b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ea84055-7094-4e8b-8917-4668e3d20f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "62301d0a-80e1-4922-83cc-77eb5d9d3dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc2917c5-4e2f-414d-a95d-014a2391e54a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f55a8709-e420-487a-9047-2a0e2cf1169c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db408d86-6b24-441a-bb54-94926f8f1c52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8edfdd35-9ff2-4bb1-b8e7-fc40771ddddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1f6dae4-e045-46bd-9b38-73819dd79f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7220f9b9-c335-45b0-8c2d-07036c5431b7",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "317773c8-ec4f-40d0-849f-91dba515f36c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d80e192c-ea23-4fdb-a07c-75670d8b5ef7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22536c28-a57b-4e7e-a2d9-8bd400723e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e464b99-2e25-4d33-bef0-12b8e0bc7349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d94cd75-1ead-4b79-ac53-92f828454e9a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b377737-bcc3-4d80-8be8-c155bcee4b69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1224416-0659-4544-b97a-de38fc464710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efa436fc-e631-4239-a578-7fcf570dd5be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "af385d16-00c3-4635-8dd5-a6b1985cf211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e6e2a5-3546-4559-9c6c-bdba4dc93244",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "044381de-3fcc-4022-9053-0e5fe7157479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d10b065d-d20c-4dc9-a2d2-cf1d460f232a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1887ec65-1475-4cd2-a87b-35189b155aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b591b65b-0d03-43d1-8b1f-137c2fbf24c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2986f9bd-59d1-41c4-9b0e-92a09cee1ef8",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3d77c9e-d5c0-46e1-82ba-2f5d7606a863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d02418e9-1b63-405a-a3d7-164f618bf0b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2729cd9a-2195-4d47-ab50-89f145977ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0fc972d-834a-41f0-87f4-1fb54b7e40df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e6936c6-60fb-4c2f-b782-d164aaeff93b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f250d5b9-ba98-470d-a0ca-d2e1337c564a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88629568-72b8-4df3-b931-c36271e2f4a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "820a7871-55bf-4fd2-8749-746db433de2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8465a6e3-7aee-4bed-ae6d-dde1f8ada256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "528747e1-7114-4296-8505-240f9780312c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "011609d4-8cb7-45d0-8d48-ad5c574d42ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7988d857-c84f-45b2-99b3-ac25a31866af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4e8103a-7429-4303-ae81-ba5ef9bb091a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2443a5d1-8612-4d38-a36a-1398cae91fde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d46e366d-64a3-4da4-8234-44b007a2318e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6084e0a2-e800-485b-b57b-ff130e683c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc0d9f1f-7bcb-4d7a-90dc-de62270ab041"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5136ba4-507d-416d-9b2c-a8b4ea169999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "32124a48-1872-4ccc-a063-7f11eeade56b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb21f32c-309d-4c05-8c0e-4ab144d843e6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c209481-d5c4-4e09-a919-a92c03c231aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "844c2848-6b60-4f54-8ad8-b0b101262a8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d84524d0-c8d6-4b31-865f-0816e912aa60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6859d61-1f55-4ddd-ba30-b48185c1bf5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "475b7fe1-88de-44a8-ab82-465ee562c573",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce0322e-c386-48d2-8c72-49eb3e2c1edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3d91edd-0fe5-4e24-b959-28832280c262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eedfd758-fc08-46a8-950c-242480d35a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "fdd59d1f-715e-490a-bcbf-4e2fcf0a3bcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b2264bf-8f83-4bfa-8f71-0e416db024cc",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca0e700c-143e-4a0c-a07c-755faffe1e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e6d7e6e-f87e-4799-9b53-a087b602093c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce94719-301a-4fb2-a2eb-2a20adeb22a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "82907275-9160-4a71-8894-84fe760fc095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c709c71-b0ad-41f6-be7a-a9de87b4f14c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1187f610-da0c-4e98-b8a7-c4977373d31b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acafa3aa-0802-4a09-b3b9-7e2296c7014b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3709fab8-c490-4e23-9717-e91f85ec404a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e81f5d1a-cf73-4ef0-9afa-49aa92f8436d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47809bc5-7a33-4d8b-bee2-8c216b4342ac",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15d7df9-b159-4886-a1cf-7363e9043966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5af72726-7124-494e-b5ec-33afbae62954"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4317bbd3-95a4-4a6f-a11d-f52a1048253c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "635cdd41-8785-47a1-9e67-33461408fcf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398154de-ffe6-4897-b15b-7819df30a954",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a8a1d8-fb29-4389-9ce6-7d21b9780e74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d766c80e-47c5-4f88-b895-f5e8b751354d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f7b832e-0849-4112-ba29-712d40eafa2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "09db121e-ea66-4bfb-b2b4-a0bf69d7b0c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34c1d6a8-d57a-4caa-9299-1495192e6d05",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6cfdbf8-cd14-412f-9fe0-dec2b782209a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ee19d5f-0445-425c-a63d-2be6887a1826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5108d7a6-920f-4f76-9889-baa53faa5e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b8b6fad-8c9c-43b1-a476-cefc1e867c6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac364e5-a5e3-43e4-b5fe-59a6c61a96de",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfdbd5e9-6141-4d44-b116-5917d31c3a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e4a038f-d472-4c27-8a68-e41d5d66aa33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68d7a4c-1d50-43cc-b1e5-28545e78b4f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "376799c1-fca5-4e00-889b-6c2f1bf255fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e227c8c-8746-46ef-a3b8-687783c1d006",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "802ecd3e-fcb8-455d-8951-df35a38bebc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ad86287-74f4-48da-a163-9b544558d1a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fed27ba-dcb8-4814-8275-677e12aeb302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0b17350-b670-4ed0-8dd3-39fb73495c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1caf36ad-22f1-452f-946d-7adc8f5417b9",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b2c370a-16b1-47a4-ae66-b138cc60918d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb9cdcc6-2789-44d0-9030-74d3ac92634e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed220507-1ec8-4af0-a11e-5cc8a712b528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fabb343b-ee97-43c6-aea8-99fbb70a5d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc2636d9-f5d6-44cb-bf18-a7edfc010630",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bc4961b-0a1b-4bbc-9476-cec3c77dc295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b7446da-3753-4885-a1c9-d0187d3c5a5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82708630-da3c-4c92-8731-902130659120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9209eabf-29e4-4832-99c2-5bb26ef3a86e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e80aea03-1aa7-4728-8822-4dea0475aad3",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63bd8c2f-a48f-4ee0-a27a-731526349925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "337d6d2b-a037-4175-89ba-27996df0a211"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b208978d-8fb2-4adf-bef6-eefec742911b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b7e3078-1466-4ca6-aea9-e8bf3e1a56c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd463b21-0834-401f-8cda-e998a79189d7",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d88b1e0-9988-45b0-9511-6a4e6645cd6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7e60899-4a35-4329-b7b6-01c861611ff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c25181-6411-4da9-8921-ec0b463239f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ba28ac1-d4e2-4033-99c8-95382420362d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d0b9e30-0501-4a4f-a967-64fcc49c0bc7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e60e28a6-dde9-49f4-888e-c81710fa9694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91c9a91b-e382-4945-9712-473249bd7c02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e046ab74-a958-4537-9709-14dcc33383dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db81dce3-be70-495b-8fbd-675fd74b5b6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b122d2c9-f1b3-4022-b789-cd2d731efd5e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd6ac84f-4b99-4de2-af65-85e7177bcc13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85ae4484-315b-4888-ba1b-96902349ff95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9bd2adc-2d5b-4959-96c1-cff746d04e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c9e9b9d-65bd-47b3-ae58-006ce5c74927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c320b4-20a1-44eb-ab19-85fd4e59a7ba",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d0a548-7a53-4f2c-a8f3-607065a97b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07de756a-c082-40f8-be72-d85efa39307d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "947361ae-972f-4768-8b59-7338cb3559a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a325321-0bb8-4598-8f93-7993b15b89a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0274f2d-d92f-4d82-a0ca-1dcd774d8577",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45986f13-d8b7-40e4-bc05-0068719e248f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f6cf520-69d8-489e-aba4-0dc6b070ddf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c3c6f1-0252-4d43-9b1a-20b4a0913c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c70ff3f4-6c60-41db-aeb2-8b356f1d4084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b01c6e13-5ae1-4642-bd05-5382057ad494",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bed5383-2257-4f99-b1f1-7a760b9b4f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f44ccd6e-87f7-412d-bfa0-09f7976f7c9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc05616-5c4a-4311-a683-8c81d479d9fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "359da582-ffcc-4c8c-90e1-f895ab093130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c02aafdf-7bec-4687-ab46-878cc600a9cc",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c1d3ac1-d49f-4a01-90f7-c9566da205da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df59b58e-acd9-4d1a-b10c-c96638496651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8578cdc-287a-411b-8158-b74818c4ebf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86dffb5b-abcf-4ba8-823a-80b4b38b7eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "319395a4-afaa-4fe2-b57a-94542a1161d3",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a9331b-6f24-471f-8eb3-ea3519607ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed62e4f9-9878-4827-9eae-a61719ac94d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b34773-8555-4b2d-b46d-aa6e7d22af0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe9961a1-883b-4a06-ba26-bfc790d7e7c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0741ec39-7b67-478f-aaec-84a1e7185923",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c47b99-e28e-4dbe-a855-6a85cc711d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "776b659c-2b27-4dd1-9d1f-7efea1a0641a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ab8649-05d0-408b-88f6-84024dca2e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8a98c1d-93a0-49b3-97a8-8b91b2aab298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74d81deb-b1ba-4f85-992c-75ca17d64c24",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1832aa5-845c-4a06-87b2-204329a6e258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe71623e-875f-43bb-ad93-7e072f8ebdb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e4bcba2-20f5-4e64-ae85-4a6e6211203b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "59e83989-346e-4769-91e8-3b4c638b4203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb2bb581-4502-47ae-97b1-9f4e50139d68",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "258c5853-3c9a-4b6c-823e-3949e08de6c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faef541f-253e-414d-b86f-c5159d6fe1cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf69e76-d3db-41c9-adc9-12e174ff1d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7dbf6e2-e09c-4289-8d94-fd0cf365c5d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd4da499-1803-4fdb-b065-4cb01af9c814",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49f593d5-8269-42d7-accb-ebdd5ef0be50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f62ddc4-4461-4a8e-a4fc-4d9e8a914499"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6abe59f6-5cc9-4ee5-ba67-03c16273d976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ec9428a-780f-4b6c-9fdc-5868797f1dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eccb96eb-0dbf-43c0-96d9-45a0bfc2ea15",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b2b426-e6f6-446d-ba94-9203d99fbc1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75827d87-85e8-416d-ad23-dc90056a0175"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56dd0116-84f3-4b67-a90f-46d47badb6f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3241cfaa-88fc-4589-a3e5-c8cea616e8d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0c492cc-410a-430e-b906-5fb61ed78435",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a39bc09-ca42-4d74-a0a4-28a49b37ea8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a146a832-1a85-4a89-8b45-d9f1862c5946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "038f57bf-623f-48b4-bc4d-dfc05cba2c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "283712b9-d699-4e97-8897-444ebb1acaa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae27f70f-d363-48d5-b825-fe857d0264f3",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d443468-78b6-4447-815e-13ead5bb64ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1ee1fd5-ed12-4c6d-899e-c5e0b85c2f92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e65e0052-0f2e-43dd-81fc-3ad2f2186142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53cdb073-2f74-4139-950c-2066b3901354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22608a41-1140-4382-9587-a2fda4713131",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffd7365c-48ce-47c8-8a46-d2a4c5e169a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90325f6d-0ba6-4adb-9024-042bd7666787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33316439-2087-4ea5-bc46-3ff53be4595f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ea3981f-dda6-4505-9d2c-661c8117817b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b450427c-df8a-4ddc-8baa-fbeb34884bbb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ae3f92ff-dd67-4a4d-895c-c0a2d1c50a62",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5ba6858-87e9-466c-b1ae-ceeedb1cac69",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a778632e-2ad9-4169-adb1-80cb9b0fb982"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef70957c-03ac-4945-bcf0-644b9bbeb088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4bfeec70-d41b-48f0-aee0-91c591b245d6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ff8d2c4-2af9-4bbd-a538-5eb31b47adf2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "38911705-2145-41fc-99ed-7b352cb60b98"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d2f1081-33a9-4ea4-84d5-66b98ee29dc1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c5e2409-00f1-4f8e-8928-d9407d07a567"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "63c9f376-e43d-401a-a5d1-e0ac91ec518d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c29e0995-856a-4ed9-b5ed-9174212a2f10"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "860017a9-d54e-4531-ad7a-faf7b68e865e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aed993b3-2579-476e-b4ce-aba2c4c166a7"
            }
          }
        ]
      },
      {
        "id": "c433fb0e-2a83-486b-ad02-fd99c7043c69",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "eb8a1807-0a2e-4b51-8b52-529d16edd8c7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a57a8122-6ee6-4ba7-82e9-c489c7f86769",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "61c4935b-b04e-412e-a58c-4e725cbdb3e8",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "809d7d5a-7991-4485-9e47-ce62ac9d4129",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c259266-e7d1-43b0-86ed-64e1f1dccf77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd24a14e-7e85-4481-94b3-839691e0905c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f10cd9de-344f-4817-85e1-975123ce802b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "271ab20f-bc39-41a5-948a-1d6ef931bbb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1646b6e-3499-48c5-a440-d92107126cd7",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1b0ef0-4f49-4828-a469-ef9783fe8579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29ffd5ec-585d-4867-9ad8-fc79c8fb31a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95730e5a-c1ba-46df-9424-ff8336ffbf71",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a39c4e-9822-40e7-a5ac-7bdc175a841a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e0131bd-27b1-4a09-9c6a-2f760e5c83e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b60676a-0bbf-465b-8a56-9b399be692c8",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bd688a4-3527-40fb-9851-6a9b6d4ea9a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c47ab958-fd3a-4385-9f65-88c3527128e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b77792d-ac6a-4a11-b963-8095a098f81e",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4739dee2-35ce-4d76-a98a-66bdcf36bac2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8097f927-47f6-4236-91c4-bc94ebcfcdfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eae1b3f3-fabe-4aaf-83a5-a2695240f56f",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38e62d93-cec6-4ea8-afc7-10245de7edeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48f2d3b6-a13b-43b2-ad01-b602fdce67ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b930b670-88b5-4c7f-9503-a2cace317611",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4535ef4-11dc-4576-8e48-c61fea61c647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32f28dd0-eead-4f81-a757-41c3b0be5d5a",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5561d5b0-cdc6-4be2-befb-31e88bccdac0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3726ca5d-168d-4f41-b1c9-5e101d1afd82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b57e8a69-3b62-4a66-a333-449702bb8aca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f434163-78f4-4b4f-a6ff-4acd96df6f94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f73d64-79ce-4618-a80d-5edaf44d6e8f",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f5f04f-12c3-468b-93ba-f20cacc02bf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77f50241-a5e9-4772-99e6-9849f2b5f5bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c81302a-3bbf-4750-b49d-d4607141c6a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1daf3100-efab-484c-9b43-67e9741996fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3641760b-21e4-42fb-9551-226d9594f780",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29265b46-95d0-47f9-96e3-0f7d6cc99f0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e76932fb-3ec0-41de-b0e6-6b2c72e30324"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ed276d-9f4d-466c-9460-38ab2484dbf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "111cb82e-f296-496d-8b51-2dbb9d66ccb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14064baf-fb3e-4de8-ac84-a29964df282d",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a613f144-bc7e-4e22-b3a0-44e2dbf98e8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb316896-aab6-4e9b-adac-7b6a4a614ca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fea675e-90b4-4d4e-a676-d43aa179dabb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "361c102e-cd02-4086-a1d3-81d564d20062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "523b5cbd-81b0-42bd-9857-145d1477bd74",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aa42a6a-070c-4742-8b61-823d49e14d5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a88851b-45c1-4110-ad8a-e07b16b06fbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84b4a533-7096-464e-a0b7-80eb5c4a044f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce67edce-07ac-4cd6-8fae-f3f98015d6b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0c7697-0e90-4ec0-819d-2eb322b392e2",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b9d5d08-f13e-477b-941e-9362adc827fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c027c1b1-44bd-4367-84d9-3efce3d285cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd98f82-68b6-4944-8d36-cb69663a8b69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2031d53d-9eee-4901-8151-c42126b971a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "505bfa80-4ef3-4553-b507-b931e6f26d10",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e19bb9e-3811-4c39-a153-6576e1a6f355",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06935418-20fa-44ac-a04c-2f9f7ef88833"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a38a800-031b-4735-96f7-7e9096567b8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cb4fc5b-a199-41df-9c18-7ffffd44b276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "407bb03e-af26-4165-ad3d-b1563abfb067",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eaf6455-aeb9-47a6-9942-e77b6534aec1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4491d937-6a37-403f-975c-33ad88d4ae8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5a90dfe-86bb-493a-ae77-99fca2f494fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "733fd1d3-bd16-4ec5-9f7e-d806dd9ed108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a6229fd-aefb-4395-a5ca-050ff918e0f7",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa063fc-edd6-40ad-a828-bfad4c7d8fc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "348c25ab-e02b-4ba8-8410-56ae73d7b175"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec52e96-2cdb-4b33-b94f-b687916893b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56eed465-a917-42d8-a3ef-5979fa86103d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d61a50a-c91f-4d88-9cb7-e53fedb4236b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef37b3bb-7547-4cd3-aad2-a4e5fb14b0e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04ec1ab8-2ea8-42bf-a157-a2e983148679"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f52cb86-4b26-43b2-8748-8d0aef2bb96f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffd96507-f559-4440-b832-39a523e64680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad071d7-e620-4483-8bc0-7f3ed5e0f365",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96ba6358-f28a-4959-81ec-9d6f6f4fd5f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f09b0eb-9405-48e2-ab97-40be09f1af2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d2810ff-c532-467b-a807-0e375257b8fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1498766d-a396-4c86-a3f6-45836ffe8890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1dcb604-6b0c-430c-98dd-2413541d65ad",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5524295-7738-4099-baf6-2716bada0db3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c72c2d87-86de-4a49-b869-9db455354313"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98042e74-69de-43bb-a876-a343aa19610a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0604c5ed-88fd-4453-b2b4-79a0e43318e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f4f7ffb-9926-4de3-9422-21c566664efe",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56393f3b-c4e4-4620-965e-6efe9b2111ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf6e17ad-4e6e-4cb7-ad67-bc8027b215db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e400e438-36ba-4b8c-86b7-b3cda79ff955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "801a2cb1-43a3-450f-976b-3167782d3ad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93674dea-9963-4440-be0c-89b64a2768aa",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "537ae439-2332-4380-bed0-4b1701f24bcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3da2b1b3-f71d-4943-a838-6e0619fe9696"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fed22ad-a2dc-4ae3-beca-59519b79f0d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97e5343a-7847-4e78-b5e2-3d43dfd5f8a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd27ed0-3deb-4a1d-8678-b292ecbb5139",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98493f88-8bf7-4579-894c-e23621bbf655",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c53b501-8d1c-447d-a8be-36e5c4e9186f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b9940a5-826b-494e-a054-1b78b6869d9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d658dd33-14ba-4003-ba47-3ee426b1e0d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "511c22e0-19a1-4928-9fac-d8b64c03654f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb634bb8-83af-43ee-a3e2-c21945bc6813",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d23041d-01d6-4c60-9692-dd00296baa66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea54f4f3-6242-466e-925b-7a5513250678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e39975a9-0c86-43dc-9ab3-21e77d8b46b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fae18080-26f1-4b38-9546-1f3eb8b55e50",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e211b6e-c073-4f51-a558-77b08b8fd9fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d43724e0-a26f-4c43-a301-779e1217a00e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6939704c-a130-4adf-969a-9a84b0aa0cfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "071f130f-0922-4667-9b85-347c74641391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aca46c6-2843-44f6-9829-08893785c2c7",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da3ae6cf-1c66-4fc6-b7e6-57725267f952",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "859c0ba4-b467-480d-975b-db5011990555"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "480bbfc4-daab-4783-9b23-c6107467ac1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be672817-0eb3-460d-ae1a-c3d2a3039c69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c42f79b-7573-4544-ba37-f3d140158790",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87412d0a-810e-41ef-9fb3-648d1a76e8e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8520480e-b458-42b3-bfec-c5c1d59440fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6500266d-c3cc-4b85-8468-90d6e556fe6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e240af94-5d16-45bc-94a1-1942e5419e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae597a8-eda4-4d3e-a750-5f84042e67ef",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "102d1135-965a-4a58-bc1f-92e96a127100",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7fb3953-bad6-4e69-89b1-3b11a3ae2ca0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64359451-b14d-459f-adc2-e404930b9639",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9feada1-e622-4e30-9570-3cb9f5577f3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a96332a-fd95-4631-a6bc-22c3a118f958",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e46edce4-717e-4957-bce5-8c0051370598",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "966c12cf-8010-412f-94f3-025bc13d3eff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "befc6e0a-2365-4bc1-b5ac-7ee289039eda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97e89044-8094-441f-8a07-300ed3147764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1594029b-878a-48ff-b06a-1ecd8887b7df",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "820721e6-691f-4fe2-a28d-117a9ea8aa8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1508f37-3052-4712-bc16-10ac4418ca6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a05570d-372a-470d-805a-069ccf5ea4a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1630b1e9-2bea-4df4-86c9-3c0e57cf4f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef47e063-93ed-4edc-b4d3-b0bb26a17451",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d19176-7983-4629-8a49-8d6c3c8bf91a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf1e5656-8108-4459-bbf6-f6ae372659d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53c7375e-4a09-43af-82e3-be9c3b9d88f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57af6856-01f2-42be-96f4-8a531c40ab91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed6ebd61-256e-4f53-87ab-524436143834",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc743ac-0550-46c4-bcaa-7cdf561f2fb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1816443-6a9b-4c23-bf40-617a7a8662c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c0a80f2-1060-448d-8d6c-db4837c475d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a791ed92-21ee-4974-9dcb-02f190ceaca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14df3859-c692-45ea-98fc-807c9f6796bd",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac791f52-4c92-4347-82c8-648c5261961d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cf0a8a3-ed2a-4bfa-b840-d86d29b95889"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95102559-9581-4b2f-a154-5ae740ea1b27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd88193d-a2cb-4c9b-a069-d268d15251d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "722f0a46-dfd2-4032-a484-3a8d5c55d59c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb0c4f3-8cec-4847-bb8a-a1230837db64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12cb6510-ed97-49f8-bc1c-2a1851a8259d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "653d4a46-fa2c-49fd-a3f2-06081fba33b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5597c7c7-b526-4100-a1eb-9f5561d175f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2336c88-81b6-4719-ae65-03ac9f1f2e63",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a518d8-1d64-4b85-80b7-37a2706fc23d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa96aa3c-0b0c-4b18-945f-2fbf343bc96b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f9747f5-0527-4801-8ada-276ac72af153",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33accef6-a5b6-4c55-8a30-38001ed3decc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89b5b445-112b-4c25-a342-2d395a41f74a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "decab102-5fc0-494d-842a-fc104975e265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63957520-997e-4275-a6f4-3f98200b6325"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d63352f-94f7-4c44-8a00-06b4c590dcfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "611b4311-3886-49d4-beb2-d987bb021952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4414d476-a00c-406f-b058-bfec06a6b413",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0022889-1f5b-4c2e-950a-1a68edf3ab6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a964499-37fd-4284-a9b4-8292eeca3d0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02da5b77-fa15-486f-93f7-cc0ace2c50e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0b69c30-eac9-45b3-8679-0d1977b56104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca068378-2a70-423a-9d0c-ac9d64f4a4cb",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e06636-4165-4fdc-9a7b-88c6e5229c09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1fcedfd-9ec1-4bec-8032-dbaf3d8fb980"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35af0da4-92b2-4e72-9e48-fd8ceaae3331",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85229d64-a395-4c3a-b061-29aafb7f08b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13d1e626-7ecb-42e4-b298-7b0dda31dbd7",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d6750c1-2994-4b47-a233-04af850a54ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cac99d7e-ff3e-44b3-a4b2-8d218bc285f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0891a07d-d581-413a-bd41-bb4af245ad1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31c662c5-c49c-4a13-9375-d79455610e3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f93c6b0f-ba41-449c-b218-e0337ba0a2e0",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a36a45-2360-44df-81ec-de876d451c86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfae300f-a9d2-4789-98a0-98e01b2a2d3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db997e07-69da-48fc-9e9f-f5090bf83116",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "156eafab-591a-42be-b591-2af7d2513d91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f3064d5-63cf-4a48-b776-655973598cee",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4117f06c-729d-4fbf-bcc7-ffede2af0345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "458eb878-a347-4a60-b5d7-56b99791246d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b6f9c4e-6126-493f-8fcc-102d0f510e96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b8dbc85-b43e-4517-ae3c-72230b830a9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28bc19ae-f4fd-4fd9-aa22-8da8b2ccb6e7",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11808b17-6f9b-4fa8-8b08-bb7dd77d8b89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00a9d168-0f62-4ea2-aa1a-412fc1a17a41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9480dd73-25e9-4496-869b-b34acb6d0710",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d24e0b24-c32e-400f-abb8-0ebe65dc4c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03dd2acd-e1f9-43a8-83fe-5e73091ec457",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbe068ee-43e0-4a07-b7ab-42a9dbad1fc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9ad3e10-e930-4a3b-9ba3-17c23249c97a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3489588c-eec9-46f6-a4c2-208bbefd874a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f3f1da5-c694-4468-b9ba-3101614b15df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5aa924f-7f58-414d-907d-50f864069987",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0417c5-abb1-4e37-8aa1-0a1afca37d90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6d319f6-1d93-4046-98f8-9e602678820f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e02712-c8d8-4679-9116-16e6c96f9345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2475074-7a52-4ef7-b732-482e977edd42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e59f9fa-08a1-42e2-8fe1-82eae9b2a1a5",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae4cef82-3b52-4036-a55d-843359abd12c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c6b7533-261b-4dd4-a2a2-178c9d0d3cb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6f3b05-e35a-4aa0-8d57-3a126979d46e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "371d8829-3d43-4481-b94d-f2098ef90b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcddd474-fcca-4725-986e-a7ed73b621ea",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9541ea5e-6842-42bf-aa54-c5bc93972aa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36f7e704-7d6f-4984-9f5d-022c0e628fbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "177121aa-0358-4a4f-b0cf-584a64510461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83385b32-48fc-4722-9d79-3458ff7ec2ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde55531-0729-4142-bbd6-6a96c8761ad2",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b3c7b3e-117d-42cc-8654-31a96fd4dc02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfa92eeb-3efb-4e8d-bb20-68d9694866c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33c7ffb7-f8ed-4c88-8de1-a53e839119fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17f6cb57-51a8-4984-8a61-629556bd1b42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a0356f4-59d5-44e0-ba41-c87d6aa6c7b6",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b0cb2b7-a88f-47fb-8086-cc26d7f2a604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80f051c1-b587-4a8c-9688-4d008a982ae0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee271504-60f2-4721-a233-6f414aee2f64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69f5e4d9-5661-4da9-a0c9-795a1cfdd55e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "854efaa7-3451-40a3-a3ca-768eeb81261e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f795033-fe77-4a47-a47f-d1d305d8f604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c31f4a18-80d4-4990-ab13-adb8d0a0323e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcb0ce86-ae18-476f-8f76-32fac8aa2e91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bdc4dc5-b60c-45ff-ae15-ac63657c5cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "061a5871-fe1e-4d6a-963a-7d36a742e8ad",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "914711d1-b56a-40f7-af77-fee28dea843b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26926a36-17f5-4dab-a86f-d64394facdf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c01d11af-1488-4b01-806a-178c2ba30590",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a4e7901-47f1-4d6e-a96a-e8566ae99cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc97d0c-e141-43be-98e2-ee50d8727881",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7527c93d-e448-4cb8-bd7f-43922dc3b9b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ac903af-1635-4eca-b1f0-4ff1844a0fbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9de4af5-8695-4492-9534-24c6a41a3531",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d9fe300-60d2-41bf-bd8b-a77d4eaa430d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e389e69-e88a-499d-b35f-a721a6783a85",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2bfec13-7342-4a7f-adaf-c9621be95021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66a187c1-c84e-4684-ba3e-a9535ee74319"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a35834e5-b94a-4270-80ce-03045bc6d615",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9c65caf-95da-4143-abd7-0c01a52301be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d8d29e4-2925-47e0-bb4c-1c4b1f16d28e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f05a097-673b-4bcd-8dc3-41af98101493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9b492c5-298c-4794-bae2-40fcea03fea3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cb4d886-df45-4708-a8a2-26cb22cc74e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "034a399f-778f-4bb6-947a-3567e5a2cfa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71c22650-0203-41a6-a90c-06a6730fc717",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c135e48a-68d1-41ac-a409-aca6cd700de2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7daefbd-5b56-44e3-997d-c2e3c1a6b2ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82a85881-6861-4ebb-b761-cf0016bc58e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c2bb54c-5b95-46a7-843a-72aee179f448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef86132-cf71-477b-b9f3-02ef59ec5a02",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24a5a95b-03f0-4a72-ba82-9c357edabfa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4cee6cd-925f-4266-b428-12936bc185d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8067597b-42fd-4f39-bf3b-42a467340024",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41ee4f58-c6ca-4b55-974e-aed0046c2f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a6660e-7eca-430c-88b6-25434292483e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7abcf56e-4c33-4d52-bc0e-67daa04a08b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3115e9e8-8a21-4455-b406-bf72f48dcb08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bfe9eed-dd7a-4e78-8fc3-9be610f0270c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45c4a454-198f-421a-ab3a-0e1f766dd3c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9def83c-159b-449e-9622-2f72c0ba6816",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10e6f2d7-c8c2-4fde-b63b-cb329fd52d23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4045ad41-e935-4136-9847-7d46abf7c2aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28e8625-96fa-4542-bf88-be3bc08a3179",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5fe24b2-b9a1-4a42-ada6-689f1958b146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a6decf-5193-4bd6-a690-3cbdcccac1cc",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b27ec2d-bcbf-4c3f-843e-f98fc76eb800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1984cdc7-bff3-4e75-9cd4-f06ab7caa017"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c6e5fa-700a-42ef-b887-b702ddb5b9cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70980750-1c42-4fa7-9720-da1589379663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14e7ddb1-a32c-413f-a187-289539556dd4",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c09655b6-e310-4387-8546-01098c329dbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8db8cff6-ddab-4b93-bcdf-254ad2fb30ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55fd3582-6212-4f9c-8748-287e0404d945",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "291328fd-233f-4f43-9fde-449bf8c6cc8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d55caf95-148d-4bb4-801b-3fd0989a8771",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdb0b08e-e4f7-45b5-8ee3-93afa040b724",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dda7091e-3036-4b9a-a14c-9bef241bcd38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db230044-4227-48d6-a1fe-a968540d52ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b830cb40-ef4c-4441-89bc-1fdb24d04f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f01928-8574-4751-b98d-75c73577d151",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1076d613-f12d-4d51-afb4-e76c5a53bca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64182b04-4187-4b64-bbce-c27e40b985c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2e0e08d-30b2-421c-ae13-9c8bd2e3b682",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c3303d9-36bb-4e63-a24a-e3c77b658c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28e6a58-e310-42d3-8162-eb6e20342b73",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "695ce944-deeb-4d5d-880c-9fee2a131bd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47673ecb-3d7a-49da-876d-00b73bf419f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a20af8-603f-4bc7-b1b6-72efac153c36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "826d1056-1d9d-4c49-a32a-17988d865a69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82327695-d77f-46c0-9de2-303d79e64ecf",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ab0ddd-0df6-4ca9-b9eb-215b08e9dbfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5964ee2-5991-4ede-8d8b-20788591863f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bae4b19-4b84-49bc-a461-62351caee7ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5a920b7-da68-4adc-8d14-74e1dc6803b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bd3c03f-8117-4c4c-a8e8-124e4640f299",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4c72709-6b3b-47ab-a3c6-fcbbce74fb64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "183cfaa2-e22b-4716-a305-a0dd351f0428"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3826a359-99f6-4218-9c33-c3d9b2328cb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "078e6001-e9d0-4d0d-ae41-0cce89879983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad1fb026-135b-4d22-9189-166bae7add6c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57ba6f37-060e-4398-9c53-a7d197f02324",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34ccc710-fbba-43fa-8ece-c7d44ec65f76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2727ab0-2a13-48d8-890d-938c9075b055",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9e8f489-a57b-4895-8c1b-482b5706be06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5533fde4-4e3a-457b-81ef-ca92d332a672",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03752b71-2c2f-4a8d-9966-0c15f9b19880",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "772048c0-ff20-4386-8f34-ae77149ab54d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbad752d-e46b-4017-a615-803ae48e2f0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "252cfd7a-b0b3-4327-8a05-eebdf3c593f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7662d19e-8d01-4fc0-a672-b537b1f6c934",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa1a5cf-b3ba-4ce9-8ab8-115dae0027c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c3a7ac1-8627-4679-bab2-c9d6bae826df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ebc27e-7258-432a-a9ef-c06390dcbd33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec045a20-9770-428b-9f0a-f4b9bf1972ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f896043-a351-460a-9e52-fa32b7c88a7e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77246be5-47d2-43dc-bb60-ddda23694179",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d009421-f007-4dfc-b2c8-7e409693cb3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0978849-82e9-425b-a2c9-2066a52479b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fe9010b-969a-49fc-bf43-10a684809217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fbcf7b9-8063-4abc-93be-78d53a5a5258",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb162dd-e276-4172-9b5f-b11b00b06ee7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa5131e6-acf0-4cbe-aabd-33fb12044cd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af7d29a1-b7e7-45d8-a9f6-720026d75094",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "216efbb9-fc46-476b-b6cb-6419ee3bf658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baf99342-5638-42b3-8aad-de1615351b80",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "585a73f8-3d8e-4388-8912-1de6267ac63b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a612bb55-8f20-474d-b525-274070417213"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c6644f-3aec-4231-be5d-358b20d8e6df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "628ab67a-ca5c-4963-b2fa-00aece87c83e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "252be24f-19a7-4826-b8a3-a6eec0602988",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be6498f8-24e8-4b02-b3ac-9ccb2540f0d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1344e2de-91bd-4d2d-accb-082e2393ceb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1933081-cf0c-4e58-88fe-1a5cf53c7ff1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21f2d793-819b-4c16-9116-d50a017332a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb488ff9-bb2a-425d-9f27-663ad426c006",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea9824d-a9db-4f9f-879f-8891ff61b04a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21543577-c8ea-434d-b9de-c38988b583de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89bfdcf9-d220-4ae6-8a04-9a51726ecef3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ca5d3bf-5b45-4b74-981d-4884a5f9553e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4942a3f-fe61-4b83-b2ad-ef2adf6227d6",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a3b77c1-801e-4526-905d-c58a3797274b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcc7a04b-35b3-46c1-91e2-5395b6f96dab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a126341-160f-4970-a2f3-14899133ab33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dc2d1a2-19f2-414f-b2a0-64c1cdb6bf30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef71f55-7490-4c12-be83-5f83cad542b4",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e6069db-934a-4c6d-8f7c-121b16843724",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f695fccf-d45a-4565-914e-a688efd91c79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3f6e2e8-4d5a-42b1-9d23-5b4a77c27f5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bbe1ce2-6142-4e15-be42-143a4bccc87e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc5d1fac-c341-464d-afb5-c49864b6788c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90d2b1c9-60cf-4b23-87cb-740990e7605d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e34bb3d1-3611-4697-b269-e2bc7fdac3f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5303835-e046-4c2e-aaad-7b8d228f7b21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d24273ab-f17b-4ea5-b288-d0d41444cdeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5665aebe-6d2b-40d8-bd8e-6255c25e5025",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1875c8ff-f54e-4b6e-9f9a-7728ede8ceab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fdd0ee0-9a78-497a-ac3a-641ab390c780"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26bd026d-7f51-4591-b31d-ebf467f90223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf22f569-0f3e-481b-8e41-4acceca13e41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cfa7441-7dbe-44ac-8966-02e6669add8d",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6755b71b-d052-4906-b4c0-f9186e9bfee5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f864d9d-a0a4-466b-a2c6-a5cd90197ccf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a51ee8eb-596e-4f86-98ac-64f0b59018e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93f56cbe-38c9-428c-9372-dc80b5b23c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3018eb0a-2573-440e-9ec5-0d18d00805d2",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "652d0698-8f06-46c3-a9a5-7a076e53e4be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fb1ce3e-fa2b-42fa-850b-072f4ec15736"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da1bd48-b8cd-4938-977a-fb99e79d0cf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37132512-905f-4fdb-9fe4-43767f0d2964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f1be864-cc8a-4345-ad35-d1179f9d199c",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "972fe98e-fe52-451c-8d86-bf1f7ebd5c5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4cd5fe6-edec-431c-9fb6-2a515a92a224"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "954a0570-8df5-40b3-b1ba-94d4142b43e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e74e4846-bff9-457a-9faa-a9a4766ab409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adf966af-cb10-4308-a8a1-58232bb22fea",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2fce942-432e-411f-a62e-441ecc338ca3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "080f7074-5a0a-4fcd-825a-cc4337c79343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "851db984-2484-411e-9096-5af221461e04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dcecf49-dc52-47e0-84c8-07b677397be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ecf982-1415-4387-a417-8b92e7361345",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b8b287e-b6bf-4b3e-b405-f0bb6ff6cc74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dad07e8c-b185-44b5-8cef-0868e5eaa039"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72977981-0d30-4425-903a-e92c6951cf89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f5533f0-ccae-4931-b275-e2e826f831b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57605d7f-df70-435a-8cc6-819b43735b4f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f8f809a-f569-4ebf-bb79-4fa9ecae7765",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de0b0b65-6860-4332-9c30-eac51da832c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d64d8573-c1ab-4bc1-a55a-c2a57a5b5d87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6def3b66-9cb7-49ed-b092-73bc20c9fa54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b962a77-c62d-48e0-9f81-4ce07b69a8ce",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5f2ad98-f56b-4f0e-b296-3b4a026c9b13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe1c1c4b-fcf5-46ac-96c4-c1d7096464d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "139b2182-2124-4eb9-8f9c-d0ff6d14a62e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72fddc10-80ca-40d7-99ba-c0f97bef763d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b44155-a41f-4a31-954d-bbd74678c717",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fec66ed-588a-4525-8542-4e2d006cc569",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f5fe6a1-0001-48d3-8870-313537665519"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87602e5b-4540-4f9c-9d33-21e221eff9ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "430d113c-0398-4782-b7ee-76b4b38104f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d8468d-06c4-4811-a290-60ebe1b012d6",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e950600-c151-41f4-8ba1-41d750e37b96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4c61d95-ca9e-4a4f-8f90-84cb473c5602"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "765b9a29-f89b-4203-890d-527b5b2413f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "837e057c-96f3-4abe-8fad-f03bd114d996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29469a57-ebc8-45df-bb62-90664f9b6d97",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda79cb5-a6f1-4c57-8144-44fe9cea958f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bced8da-21d4-4541-b5c0-fbf83716e722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ea8d5b0-38ac-40c0-8213-fbebc5cc2092",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de81f148-3d7b-41a5-9c5e-3f09e56653e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81979aae-950b-4dcf-b2cf-db324607da1c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f238f7e-433e-4cf3-acc3-4b789ee29d5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3adc4de6-b9e0-4011-81f4-c719591df198"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "332ebb61-0ef8-45ce-ac80-cafb2b0d09b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bca455d9-19c2-4374-9ca4-4cb1d7a108db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e2a9e5-e3c1-4dce-a855-e92314c356b2",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c8b14d3-ac56-4fde-8a1c-5cf917d85d92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c99d1125-14fe-4e95-aeae-e214bf03aedc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b364fdc3-959a-47c2-a466-c05f29ddec6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cb51cea-8b3e-4faa-bb52-bd6cdd83191f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0bf231a-2917-482f-b0b4-cc8b0f1cbea8",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f173e6-c359-4517-b7ff-71ead7e2f7bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfdceea5-769c-4936-94bb-87116e170de5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca812b92-b520-49ca-9f33-9836606ebd5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96bbd60f-efa9-4508-a34d-2e6c47317a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c139676e-de10-4d81-bf1d-2eb4e95ab8d3",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5418ee21-c138-42b2-82c5-92684ea98b73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a58b456-57c3-40ef-a61a-c5a694f14c59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d0a77a2-ce14-4236-a705-361d2da0dc3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "032819e5-fd91-451a-8bd8-d783e1a8413b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ae9e3ca-818c-4f49-94fa-d0b31d9ae6d8",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4088a9ec-6426-4294-8996-9d8103ac72b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f4097ad-003a-4327-8f45-46e36665acb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7b41caa-5cd9-40c6-8bf7-a50c86e9f545",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1e006f9-ccf9-4e21-8679-b408feb15cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "527be884-3e3c-4193-b6c6-a70a5ec0aa8b",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0208e94a-35fd-4e6f-a62a-ed8bb5a22931",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0014fc2b-34a1-46db-afcd-dc3e0e2b8432"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c939598-d334-49d5-b394-fb3f062312ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fef6b28d-eb8f-4a5e-a911-376a7968bec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2294a79-f7c0-4383-84bd-a9931e465c4e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ae0b438-8040-4186-ab89-4b8fe3ccbd23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "548de1b6-b86f-4b60-955f-4c454e352912"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d793af39-7c5d-4b47-b0b4-18a983e8442c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8abf4069-8188-43c4-84a9-4b6ccbf80199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a318bd0f-feb0-4088-a38d-a27b01ee57a1",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2a5a967-5193-45c2-857e-5c50ffa2bb32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2685a16-5b64-460f-a3eb-efb22721ace7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df865bbe-9940-4535-9cb5-8f9ba6980a42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b833a12f-49b5-49c9-a265-2249071b807d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58a9e5fd-6865-4d22-957e-fb0d864c0f19",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2504866-cd23-4b03-aa6b-44378856d7b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c4f47a0-a8e6-4659-8d46-4ea49ca107b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd54e5bd-e82c-4864-b707-be300247fd34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfcd418b-6558-45f4-bc78-a2ed2412b3c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a725888-d21e-4ab4-b21e-6ae1da448569",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee0d69be-ae94-4e7e-9ed3-c0047bd955b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e091270b-fabc-4a0a-8054-b3ed8288e629"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dac5e47e-31a7-4446-b11a-d7c5fdf1e335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a6a86bb-c312-4275-9e3d-ea8b8e253a42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef88748c-aba1-4cb4-9103-5fe028100d47",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98385084-e96c-4bb4-88cf-f6905284a9ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e91bcab1-d01d-4d8c-a145-42f5c8ee796c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd1e750-9dcc-48eb-9c6a-fe0e6d5c16e9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0ab5f27-ba5a-4f3b-8b1a-90469ccceec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b74cc5d-1d9a-48bd-b222-833bc4426c2f",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3057f824-0d20-4dea-bf23-0e523e3b541a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d39f537b-5614-4235-ba02-cd4c594af2e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "763a62c0-ebf0-4acb-b065-03b83d6fd61e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfab5ae9-b597-4aff-a473-829c12cfa37c"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2512a06b-1f5e-440d-af26-8863dabd047e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe0f9fff-ba19-443e-ad15-a888f4bff8ba"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5419f56d-497d-4e65-b8ab-6a93f225e3b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a38d25ec-6710-4d37-9eec-5a2433cf5640"
                    }
                  }
                ]
              },
              {
                "id": "91a45eff-8c7a-4eb7-bdf2-2a1f94082a04",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "90dfb9e5-9364-4771-b82b-50a286a20488",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1382a2-9227-466c-abbd-67c87b494326",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d2aeda5e-2019-4f82-a04e-2f053e980db7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9cf5482-19c6-47a4-b9c9-d83b9547d19d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3b0c71a-b7c3-4646-9cd1-0c12771648a9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f07060f5-2e7b-4b33-a634-c227d4eaa747",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31e16685-d798-4740-9640-488412f25b98"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5c0a178-ef54-4dfd-8fda-017838aa7382",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8217fe5d-3338-4d38-8f7d-723c7e621c02"
                    }
                  }
                ]
              },
              {
                "id": "f571c852-12b8-4285-a97c-1d237e03adab",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "44cecec4-a1cc-43c5-8491-7fe438c38d95",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c8be8d-ca4d-457c-b851-743a1737bd33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "f60b1538-3c98-4c47-91f5-5c64a8d87c02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f3f160b-4dc6-4a4b-ad6c-b627bd3c1249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcb16497-d39c-4baf-8c4a-7ad704d5735c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "655bf0b6-4c42-4906-83b2-dfd3e7eac7f9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b7f55808-9068-426f-90a7-09066ca83928",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1bab47a8-e619-44cd-bd1c-a0989bb777d0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f8be15ae-f0bd-4c6e-88a3-47573d650c10"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e8781b9-c14c-4e00-93af-20062309d254",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c50fd069-bd37-4cc2-91fa-208765ad7e61"
                    }
                  }
                ]
              },
              {
                "id": "a753b673-83a2-44f9-8c49-bb8a5f174772",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "34d1ddf3-b93b-4e01-aa9c-be3d1998ad00",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5e66e67e-b1ca-433a-b9a9-571234342a93"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b7c9b37-0204-4a7d-bfd8-9918e5606dd9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a94dc6f9-9ec5-4a43-b08e-6a46e22ae496"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "22199917-e1f2-46b8-beb1-6cad392ea29f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "271da3fc-c67a-4c14-8c47-d569b8ce13f4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0a3caf66-5767-4c49-9882-122a2f0ad232",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3b8f3493-b133-4175-b9b5-896b8288b5d5"
            }
          }
        ]
      },
      {
        "id": "2a0da20c-0824-44aa-b888-e9ef623d8ac2",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "5553eeba-fc83-4462-833d-46ee80b6a963",
            "name": "Negative Testing",
            "item": [
              {
                "id": "04302a64-a366-44d6-8942-a303fb3f1f81",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4ee68383-6863-499a-8a1f-80ee8ff284b9",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "899276fb-3bc1-498a-8a85-e9718f70b17e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7dfb18b3-3082-40cc-b204-36595ad198bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10a68201-9ee6-44b6-bc42-05382e62d1e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b4c87080-3b0d-4f99-a443-396c2a9f0a2a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a596787-269d-4dca-81b0-9ddcda4071cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b7f5ad63-6f5e-451d-b7d0-f4a5c42d0e54"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e394b1c6-79df-4269-a53f-38c8741a48e6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d4a71f2-7204-4065-bef2-e080a4fcb554"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "90a9029a-e90d-4ae6-b78a-c95c233d31ce",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5006d794-dca8-49fc-a73e-cf2df9f54cb2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "75ff85e4-cd59-40b0-a3a8-9a4f26d72873",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "61749f3d-c9c7-4d03-bb55-515de68a692d"
            }
          }
        ]
      },
      {
        "id": "0013a434-7733-414d-abc9-9af7166727ed",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "70884c33-f603-49d3-96ea-c22bfb20c8cb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7466b080-cf0b-46e4-8df4-c6e7051ab481",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "87dd2baf-2c52-4889-8c35-be1f3e88e4cf",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4935c697-8ab8-4c7d-970e-82c9661e0145",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42b86e34-10a7-498a-bd1f-4df038701da2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee5b987-6593-4977-b1bf-992c76bd6461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "68a7753a-83e1-4171-893d-038b91cb8bb9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b717e56-0ba9-457d-8b43-6c399b79231f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "015e717e-d84a-439f-b8f6-2049480a8913"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "061b4a2f-e2f9-4114-b70d-3b89e8dba54c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ce00c54-bbda-426a-a92f-8625728b18da"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "93e34d0d-3ecc-4809-b805-dd5d38b9228f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8c05840b-e02a-474e-b1b4-b0e1777a2feb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a2e0c122-0e22-406c-827d-a30c472fc692",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "db60f2d9-ebb9-4530-ae02-f27a85724a92"
            }
          }
        ]
      },
      {
        "id": "d1c72aba-ab18-445c-aabf-3d74cac318cb",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "91fc1846-3e16-4667-bed4-a1ff414df6eb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1fc0a77b-2f87-46eb-893a-1667ed28afd0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cc7cb114-9e0c-4a36-b5b9-c7011e12b047",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d2a627e-d7f8-4e13-b62b-a6040799724a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a62ab4fc-9b1a-4565-85e1-e0c3282255cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f64d2335-0345-4162-b547-517e3d180fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad42d12c-a5db-4532-ac09-5c92b05735d7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "55fdb4d0-61bf-47cc-885c-8eb0620a8e97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb5f8d58-755c-4ec9-b20e-f364171ae19f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b9ee376-cf41-4a93-b91c-2aca56ba9fe1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bcff0d63-10d3-4824-920b-84576024ffce"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "750f7134-2383-4606-a27c-5dd1dfd4075a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bb97eed3-ca8e-45fb-b72a-7fbc9c898343"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2405ac97-2d13-410f-94f1-fa07e3f505ba",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "58a3856f-6828-4447-be54-7a55c5dad8d7"
            }
          }
        ]
      },
      {
        "id": "f4ef0e8e-b9e8-4e03-a5ee-dbc7a33b0612",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "211797c1-021b-4a63-a28a-911ddf16849b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "65afdd60-1b6e-4b3c-b25d-0b6a10d92f64",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b1a688fe-ff4c-4bb8-8062-9f39f14b448d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c46800bd-28c0-491c-af78-5d5d6d082a17",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e3d3aebe-1cb0-49fd-9d2f-551385bcc62a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 263
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 5.900793650793652,
      "responseMin": 2,
      "responseMax": 270,
      "responseSd": 21.566482651867307,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1714955803280,
      "completed": 1714955812858
    },
    "executions": [
      {
        "id": "4a8eeb21-4090-419c-8564-13bbd0430e5f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "333d661b-4c5e-4897-9222-bfb8c61dfdf6",
          "httpRequestId": "c1d311f5-45cb-4cf1-a676-cc3834e94702"
        },
        "item": {
          "id": "4a8eeb21-4090-419c-8564-13bbd0430e5f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "dca6f501-f07d-4df2-94b8-745879639b2e",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 0
        }
      },
      {
        "id": "cfbccee7-ff4d-4540-93f8-f065b5329641",
        "cursor": {
          "ref": "3ace3377-7e78-479e-a388-f55df19e5cbc",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8b04d800-3ec8-4686-826e-ae253c7da0aa"
        },
        "item": {
          "id": "cfbccee7-ff4d-4540-93f8-f065b5329641",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "aaf297c7-d24d-4b16-af1b-1c94a85ef87c",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "d75c2007-1437-4a78-9cf0-ece67a3ce903",
        "cursor": {
          "ref": "fc4313bb-70eb-4ef2-a963-93aba52cd030",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "dd0d7d8e-c350-4771-81e0-60c09a3f4b58"
        },
        "item": {
          "id": "d75c2007-1437-4a78-9cf0-ece67a3ce903",
          "name": "did_json"
        },
        "response": {
          "id": "9255f05a-0f97-4cc5-914d-86f66a0a6355",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7249e829-7ef5-40dd-8da9-baddf9205ea4",
        "cursor": {
          "ref": "bcc55f2b-9856-4a2a-b1db-8d66abaa3537",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ad2d1bd0-c929-4850-8f8c-0bf13e5bdccc"
        },
        "item": {
          "id": "7249e829-7ef5-40dd-8da9-baddf9205ea4",
          "name": "did:invalid"
        },
        "response": {
          "id": "0a64e9b1-ef1f-45ad-b1a1-9b68cf4099cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7249e829-7ef5-40dd-8da9-baddf9205ea4",
        "cursor": {
          "ref": "bcc55f2b-9856-4a2a-b1db-8d66abaa3537",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ad2d1bd0-c929-4850-8f8c-0bf13e5bdccc"
        },
        "item": {
          "id": "7249e829-7ef5-40dd-8da9-baddf9205ea4",
          "name": "did:invalid"
        },
        "response": {
          "id": "0a64e9b1-ef1f-45ad-b1a1-9b68cf4099cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c18967e0-b77b-4623-ac76-fdc8407713a0",
        "cursor": {
          "ref": "23d4992c-31b7-4c80-bf83-2b97e60860c3",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8f1eb9d9-94e4-48c5-b539-25db97c395d7"
        },
        "item": {
          "id": "c18967e0-b77b-4623-ac76-fdc8407713a0",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "30a27d64-4a17-4ae1-9c17-27b129618084",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 138,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb3ae603-c66f-4ac1-aea4-c35b13ec965c",
        "cursor": {
          "ref": "e7e736af-8fd6-4d8a-b586-64077514bb3a",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9d5b45bf-f0c1-4a4d-9cf9-88cff4ba1243"
        },
        "item": {
          "id": "fb3ae603-c66f-4ac1-aea4-c35b13ec965c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "5dc57033-6a1b-42e6-ae04-60d414c30994",
          "status": "Not Found",
          "code": 404,
          "responseTime": 4,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f025166c-a3e3-47d0-b81a-45ed9177b90c",
        "cursor": {
          "ref": "f16feffa-5376-436a-a39d-a29e1f4516a7",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8f135739-31ec-4da9-8630-df72e1ca19c4"
        },
        "item": {
          "id": "f025166c-a3e3-47d0-b81a-45ed9177b90c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "171e5177-593d-416f-974f-dca9fdca3228",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 3,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ad29d9f-b903-431c-aaa9-51ec12d484cb",
        "cursor": {
          "ref": "fec91e9f-f404-4533-8714-6e063962f6a7",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3a708e0e-e756-4a54-afb4-92b42a8407ec"
        },
        "item": {
          "id": "7ad29d9f-b903-431c-aaa9-51ec12d484cb",
          "name": "identifiers"
        },
        "response": {
          "id": "0c051065-2ec3-446a-80c6-1252afb39f0a",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22d91883-9438-464f-b99b-6b66d6039f02",
        "cursor": {
          "ref": "0db136af-42e0-4b7c-a839-b42efa5ac0f9",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c455461c-e35e-41cd-a3de-7d4104580288"
        },
        "item": {
          "id": "22d91883-9438-464f-b99b-6b66d6039f02",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "381f16d4-b473-4233-87e6-710419ba7f6a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aca4fad-4cb0-40ad-b648-842d1ac8f379",
        "cursor": {
          "ref": "2f990d2d-cb53-4923-8cd1-9dd4890c5d4d",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f688cb01-41e2-413e-a753-c9c5c452550c"
        },
        "item": {
          "id": "2aca4fad-4cb0-40ad-b648-842d1ac8f379",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9887f990-98be-4e15-8f1b-2af2c180a1c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e68657-7fae-4958-92f4-9adc4b370b23",
        "cursor": {
          "ref": "79d64a6e-998f-41aa-a0af-b2dc9ce90bde",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "375c0c32-9c8f-4030-88ba-479f91d9b55d"
        },
        "item": {
          "id": "27e68657-7fae-4958-92f4-9adc4b370b23",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "a06a672c-c5cd-4e7d-b5f6-8f1d19887606",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac3532e1-5feb-4a68-8267-ac1e7ddc049c",
        "cursor": {
          "ref": "a6560ac2-a407-44b4-8cc8-c4d249f2f7d5",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "90c9dfa4-e787-44ee-9125-7cdbcd5782d9"
        },
        "item": {
          "id": "ac3532e1-5feb-4a68-8267-ac1e7ddc049c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "76376032-dde2-423f-84a7-d896754cd146",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2caa922-fb1e-409b-bf75-004323490a50",
        "cursor": {
          "ref": "cc76a3cf-b263-40cc-9fdd-858137e130cd",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "49a54820-faf4-45f4-be5e-d1eae3a33e80"
        },
        "item": {
          "id": "e2caa922-fb1e-409b-bf75-004323490a50",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "e489f102-3f8a-4010-86c3-cdf394ec5189",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b0fa226-27f0-49d0-a8fb-e53f8997c080",
        "cursor": {
          "ref": "cc58f71c-97f2-4ce0-82bb-69e7bc6766ab",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4a5bf857-29af-4265-ac95-3d1ff50b9cff"
        },
        "item": {
          "id": "0b0fa226-27f0-49d0-a8fb-e53f8997c080",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "bc3da159-2be7-4eb9-afdb-0eb538f53126",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bad776f-541c-4d1a-a6f6-65f567501919",
        "cursor": {
          "ref": "462c5b80-05e2-4a39-a074-b45c4a4ebd86",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8c4f84ad-52d4-42d5-970e-97c555e89ce2"
        },
        "item": {
          "id": "6bad776f-541c-4d1a-a6f6-65f567501919",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "6e14e844-44d2-4961-882c-dcbb434ba768",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a917e9db-b51b-400b-aeb3-4d01918905e0",
        "cursor": {
          "ref": "0a674b36-df5f-45d9-a3b0-e5c1c1a1146e",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ff14aa64-d8d4-4b19-b835-766a23a16056"
        },
        "item": {
          "id": "a917e9db-b51b-400b-aeb3-4d01918905e0",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "a2d2c4b6-22ce-4125-9cd7-42dc0e5e9f71",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72117e99-9186-45a7-83c9-a42e856430d9",
        "cursor": {
          "ref": "7ae6b5a9-092c-44ef-99da-75214624704d",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "405f255b-8353-4360-8d2e-60de89f8eca6"
        },
        "item": {
          "id": "72117e99-9186-45a7-83c9-a42e856430d9",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "70bf83f2-0b68-4896-890f-d6bd818d9992",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "772852fd-fa03-4c8f-af67-49fb376f12ae",
        "cursor": {
          "ref": "cb2b71a2-4b5b-4cf2-9a24-6daf9afd028b",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e87211c2-42fb-44ff-8653-0aa664ecded1"
        },
        "item": {
          "id": "772852fd-fa03-4c8f-af67-49fb376f12ae",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2fc9280c-09d0-4024-b6bc-37b7be2797e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "313022e2-a276-453f-9dea-370166579a47",
        "cursor": {
          "ref": "f5870126-4c54-431c-ab2f-ba5084450b07",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e43112f6-377e-4d93-81c2-630646a89c79"
        },
        "item": {
          "id": "313022e2-a276-453f-9dea-370166579a47",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "1a63895a-73ed-4818-9e2c-ea0d107a9701",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd0dc9ef-aebe-44d7-a958-0065ad1b61c3",
        "cursor": {
          "ref": "93f41f60-048f-428b-b5c2-6888adecab5d",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "43fb8d59-8ce6-48e7-b44b-361f2b27f3ad"
        },
        "item": {
          "id": "fd0dc9ef-aebe-44d7-a958-0065ad1b61c3",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f0595c5d-f71c-46b8-9323-59900d220eda",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22d484b4-fc12-4ff0-b486-365b2b99ee47",
        "cursor": {
          "ref": "6474bc0e-c35f-4ab7-9f00-a7a5d555a2d8",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "0921e1d7-d16c-4c2b-bce0-65ddecb4b783"
        },
        "item": {
          "id": "22d484b4-fc12-4ff0-b486-365b2b99ee47",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "9cd72574-ab48-4207-b31a-73a0e7c1d052",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28dc1d7d-8af4-416c-bfe2-305bc63c9b50",
        "cursor": {
          "ref": "905a24e5-b2b8-45ed-87e0-41c25df7dbeb",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "04f91eb6-82dd-4a81-bbbf-5be43714eb43"
        },
        "item": {
          "id": "28dc1d7d-8af4-416c-bfe2-305bc63c9b50",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "93acb5e3-e78e-4ef9-bb9c-7121b471fe99",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "099c0f49-b3ff-4b24-8d3a-630764c930f4",
        "cursor": {
          "ref": "d8430979-daf1-4032-9bb0-3c5673c5f72c",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7c0815ae-cf5c-47dd-9ff2-76bd61978e7d"
        },
        "item": {
          "id": "099c0f49-b3ff-4b24-8d3a-630764c930f4",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "33573354-42c4-41fd-bd58-67a4955c3fc4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96367a95-5a5b-4c6d-8b68-4e9969e9f2f1",
        "cursor": {
          "ref": "813ddff0-72f9-4dc8-abd3-c227bd48d03c",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a1a9a798-847e-4408-94fa-ca5e64b0baba"
        },
        "item": {
          "id": "96367a95-5a5b-4c6d-8b68-4e9969e9f2f1",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "4a447dca-fc97-4a60-88e9-5335dfcb27c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f57aecf-25d3-4ceb-b6ee-5a7d37d4cc4f",
        "cursor": {
          "ref": "23009374-8fcd-4348-a23f-271141f83df0",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "cf4ceaa6-0168-40e9-8ac3-12c961958b8e"
        },
        "item": {
          "id": "2f57aecf-25d3-4ceb-b6ee-5a7d37d4cc4f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e34cf146-01a0-47f4-a72d-06270250c15a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6a2705c-ec1d-4254-bf86-05c1268c6c3a",
        "cursor": {
          "ref": "4a7e5893-aa07-4c09-b21d-3e7abda7765c",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b429d591-4f73-4cbd-be57-db798d524be9"
        },
        "item": {
          "id": "a6a2705c-ec1d-4254-bf86-05c1268c6c3a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "64442441-a154-4fba-8f99-f9343a670cb2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ac469c-66a6-41f1-a9c3-213baefed08d",
        "cursor": {
          "ref": "f40fbef1-e241-45b6-b151-e4ca153cec35",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9e5f5839-d091-4320-9be7-3ac8b72f6e8f"
        },
        "item": {
          "id": "d1ac469c-66a6-41f1-a9c3-213baefed08d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "662fd193-c8b8-442f-8869-0fcbdce836d5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da27d1e7-0da6-4a6f-9c4f-025f922261be",
        "cursor": {
          "ref": "8c099178-f2ba-4539-a827-b5e5527ab1ea",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ff109576-c124-4e6d-9618-4711b8a43730"
        },
        "item": {
          "id": "da27d1e7-0da6-4a6f-9c4f-025f922261be",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "48de95f9-abb5-4914-a9b6-a1b6d55a755c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78a1a48c-c974-4efd-9032-3e1ccf80e9ce",
        "cursor": {
          "ref": "84bf9a9e-9e77-4e04-bc72-0e1c11c06184",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "b35d7186-820e-4a86-b409-064a86651e87"
        },
        "item": {
          "id": "78a1a48c-c974-4efd-9032-3e1ccf80e9ce",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "b03ab86b-687f-4bfa-9916-c5da37a05eeb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6966f6b-c4a2-4cd5-83b7-0c73fa529667",
        "cursor": {
          "ref": "46c59a45-1b5e-4c91-afa3-1f2e734bc604",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c1283d93-2db5-41c0-83da-8611ac9433a6"
        },
        "item": {
          "id": "a6966f6b-c4a2-4cd5-83b7-0c73fa529667",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "24d7d7a7-b36d-4041-9094-28c7b67256bb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c756a5ba-e45b-41a9-b161-45c9e829fa7a",
        "cursor": {
          "ref": "9d08c4f0-8e34-4f52-9655-e8b7d8a2efbd",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c78abca6-9f46-4ddb-bdce-bb46f9b4eb60"
        },
        "item": {
          "id": "c756a5ba-e45b-41a9-b161-45c9e829fa7a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "034d052f-c1ba-4d19-9009-dae171f2a77b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "178f6040-9a25-4eed-a36b-c9b0455d15df",
        "cursor": {
          "ref": "1e9965c7-6fc6-423d-882c-6d31e7923802",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "2b591580-d1e4-48ca-a75f-4f19e8a3c61a"
        },
        "item": {
          "id": "178f6040-9a25-4eed-a36b-c9b0455d15df",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "d41e2224-a35d-4c47-b00e-6e1a435cf274",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a3b7f25-0034-4afb-8ef3-a91366e829d9",
        "cursor": {
          "ref": "82e55967-71e1-45cf-9817-bb1a531fea61",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "63f0a6f2-ecc9-4197-a7c8-0197b13b08ea"
        },
        "item": {
          "id": "7a3b7f25-0034-4afb-8ef3-a91366e829d9",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1d6e6a86-46f9-4a0a-9257-9120adc2ca27",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad2eb1e-6da2-41ba-acbb-12e3c95793cc",
        "cursor": {
          "ref": "c5c9d27e-40bb-4b9c-9915-533379ac2d54",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "68ff4f04-6900-4fde-ab01-6c84a9473b47"
        },
        "item": {
          "id": "bad2eb1e-6da2-41ba-acbb-12e3c95793cc",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b56f46f7-1bfa-4991-a745-355c0fe01cf4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6a85e79-0191-4478-94b0-b5ba419667d8",
        "cursor": {
          "ref": "584e66fa-bb8b-4ae3-ae3d-6c615818aa79",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "30ea4e65-82dc-4105-aa29-a43d0e85c8cb"
        },
        "item": {
          "id": "a6a85e79-0191-4478-94b0-b5ba419667d8",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "979e3b7e-3712-42ba-b204-4bab7be1f9d1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5df510ee-b6e5-4a29-88ca-bd13f3b9da2f",
        "cursor": {
          "ref": "1aa1be5f-658e-42a0-aecf-2e9398d09e62",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2a465e35-2681-43a1-af77-2b566f549210"
        },
        "item": {
          "id": "5df510ee-b6e5-4a29-88ca-bd13f3b9da2f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "527225ce-ad55-46a7-a3d4-f8d6a21c4423",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b11aa7a-828e-4dc7-8220-12f8033a9b07",
        "cursor": {
          "ref": "ab51edc6-10ce-4947-bb34-8afddbf4a47b",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "797afad0-bbc7-4fc1-9193-88f1b69b3669"
        },
        "item": {
          "id": "5b11aa7a-828e-4dc7-8220-12f8033a9b07",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "d6690c1e-8af0-4f47-9d09-b3f4d87fb613",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ed87f63-0e79-4a43-9edd-32cb636e7582",
        "cursor": {
          "ref": "6852cba7-7c9c-4e12-9b99-97c01ebfda67",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a369cde9-662a-4c29-9f6d-92e00c86628d"
        },
        "item": {
          "id": "7ed87f63-0e79-4a43-9edd-32cb636e7582",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "bd34ffd8-b78e-47e1-8703-8867e27f4b29",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eea89338-a04b-4aad-9713-01e9e0128904",
        "cursor": {
          "ref": "7aa5cba1-8ad1-46dc-97d8-48c201070047",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b6c5662e-ea86-4fe1-9315-36ccfcbf6ed2"
        },
        "item": {
          "id": "eea89338-a04b-4aad-9713-01e9e0128904",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "29a0631a-99a3-4c06-8346-6966c296dbff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "010673de-2589-4a51-a29a-a4e7b5e7c39f",
        "cursor": {
          "ref": "24bfae2b-3b3c-4bd8-8f50-47a0ac9339d0",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "1522a837-99e7-4d4f-a5b3-d5b9605cba48"
        },
        "item": {
          "id": "010673de-2589-4a51-a29a-a4e7b5e7c39f",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d17cbd25-ecef-44e7-b8e7-0aeff60ac2ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66325038-b5f1-4857-8a05-74e373b81957",
        "cursor": {
          "ref": "fcbef7f0-7428-4cb5-a228-5a18be4c2d1b",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "4bb6b42d-8d5f-486e-b042-f222316892e0"
        },
        "item": {
          "id": "66325038-b5f1-4857-8a05-74e373b81957",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "0ad76322-0476-4058-a029-f35523e74511",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "685afd9c-27f8-4655-bb77-3165e055a59c",
        "cursor": {
          "ref": "23565856-ed45-4fe9-83c0-5f828b2e1217",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "06825efe-0737-4b83-aa00-e66e2b8d2498"
        },
        "item": {
          "id": "685afd9c-27f8-4655-bb77-3165e055a59c",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f12aa195-6763-41b9-b757-cea00cda7680",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e2ffa59-cfdc-46ce-9e6e-9517adeb25dc",
        "cursor": {
          "ref": "7e32e332-cabe-45fc-9c41-3d2ea9a6bdd7",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "1ded8275-6d80-4134-b39b-c77a5f34831c"
        },
        "item": {
          "id": "4e2ffa59-cfdc-46ce-9e6e-9517adeb25dc",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1ece1641-dc6b-48fe-af98-48b5d4c922e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "728855a8-92a5-4bef-b3d1-ebe509829715",
        "cursor": {
          "ref": "a8ae7283-07d3-4709-aa3e-fac2460cf903",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "85cc974b-5941-4d80-9eb1-c10a44c7fa2c"
        },
        "item": {
          "id": "728855a8-92a5-4bef-b3d1-ebe509829715",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "1874106f-a6bb-486d-9b6a-0eab9000b5f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9824e59a-f224-43e9-bdac-0c749751a58e",
        "cursor": {
          "ref": "df6577d8-3ccd-4756-9b6f-3a9fa1c2f429",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2f6ed8fd-c8c0-4689-8098-43356900863c"
        },
        "item": {
          "id": "9824e59a-f224-43e9-bdac-0c749751a58e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "5043f8ad-7b84-4fda-83b9-97d8265027c0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcdea2bc-dbf1-4d02-822a-544d5e45fa71",
        "cursor": {
          "ref": "dd790bd1-aa4a-449e-b096-30d90d8d37dc",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "661e1ae2-356a-473e-af09-410bb7b211ba"
        },
        "item": {
          "id": "fcdea2bc-dbf1-4d02-822a-544d5e45fa71",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "92a23bcb-4062-4ef1-a79c-d3192007125d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0964a9c9-c4fb-4439-b533-01b4c3a92359",
        "cursor": {
          "ref": "14fea934-0c29-4f73-ae7a-dff4d0a3c868",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a834176c-9123-4c44-9ea2-b8c0935d0512"
        },
        "item": {
          "id": "0964a9c9-c4fb-4439-b533-01b4c3a92359",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "6b19be3f-90f3-45bf-8657-9d675f002d41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30b46932-7db0-4001-833a-9aba1af97f79",
        "cursor": {
          "ref": "c4dcace7-ae24-412d-93f6-c4eb7c1393bb",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5a2ad9f7-2722-4bd3-9d7e-da318db14890"
        },
        "item": {
          "id": "30b46932-7db0-4001-833a-9aba1af97f79",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "3becfb90-e093-4b14-9cfc-7f22ae633a94",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9aa01ac-f2d3-4a28-9dbd-4eb7e352b717",
        "cursor": {
          "ref": "a7ee1036-2323-46d2-844b-49d92d113f06",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ceb3d6fc-e1c8-4908-88d9-8eb4fe6ec055"
        },
        "item": {
          "id": "c9aa01ac-f2d3-4a28-9dbd-4eb7e352b717",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "baae48e8-4e94-48e2-b50b-de4d70bc8f16",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87988c83-fb1c-49ef-b02b-a0e71245f377",
        "cursor": {
          "ref": "70d2ec49-ac6f-4781-b33c-90896743fb3b",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "31748802-40bc-4eed-95b2-86b788e89a9c"
        },
        "item": {
          "id": "87988c83-fb1c-49ef-b02b-a0e71245f377",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "0de3000e-c463-493a-a9dc-a598f5b7508c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "147484d4-1fdc-4585-8b1b-35943e522203",
        "cursor": {
          "ref": "f730e2db-6602-44a5-9f8c-4e77bd8688e5",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5b5da2de-4c14-40e1-abcc-487a07099dd0"
        },
        "item": {
          "id": "147484d4-1fdc-4585-8b1b-35943e522203",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a89d6a75-12e1-4e0e-8f5b-51a519aa01f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71181345-eec1-4429-99e2-e0a326f6622b",
        "cursor": {
          "ref": "6ebe1a85-67c1-4f1d-b750-4794ce532981",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "39809d35-76da-4ff9-9647-e89d5e11e0ab"
        },
        "item": {
          "id": "71181345-eec1-4429-99e2-e0a326f6622b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "56493df5-d07d-44d8-bae9-e237eb94dc8c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4d88bb7-1712-4a2e-96a7-4579dec12214",
        "cursor": {
          "ref": "46829e3b-7f11-481c-92b7-de1dfdeef00e",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5c6a857d-5778-47dd-8c2d-c620a96c4364"
        },
        "item": {
          "id": "e4d88bb7-1712-4a2e-96a7-4579dec12214",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b89df937-7b2f-4bd8-b5d4-2e59edf093e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c5b2480-2845-4291-94a7-5bc07081f947",
        "cursor": {
          "ref": "26945e26-6da6-4d50-ae60-04b8882aefdb",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c09b7f47-c32b-47c8-aa52-0147e526d050"
        },
        "item": {
          "id": "3c5b2480-2845-4291-94a7-5bc07081f947",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "cee32fdf-5ee9-49eb-be68-1b2b5a3b4d61",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d999297-92f8-4fa2-82f2-c0a851c90fa8",
        "cursor": {
          "ref": "0c628903-5726-4cb0-86ee-ecaac1742a9f",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "5387703f-418b-4d1f-aa1b-aad19dead291"
        },
        "item": {
          "id": "8d999297-92f8-4fa2-82f2-c0a851c90fa8",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "57d961b9-3f9d-431f-8b56-ff29263d01cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03b43c4e-de76-449a-a38e-b12dfe05eee1",
        "cursor": {
          "ref": "9f30d13f-e5dd-4059-af43-ac0cac0c58a7",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a06ee587-642d-4382-ba1a-ccebb9a5d265"
        },
        "item": {
          "id": "03b43c4e-de76-449a-a38e-b12dfe05eee1",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "323a06d8-fb63-4a9b-ae96-32531b539bcf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5688644-66ab-44d3-a8e8-81afd0257397",
        "cursor": {
          "ref": "78cf02c4-c20a-4da6-bf64-1fd3da638322",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "75c75412-6dbb-415b-954a-bd3a217defbb"
        },
        "item": {
          "id": "b5688644-66ab-44d3-a8e8-81afd0257397",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "ff1bfe5d-f1af-43d8-bb4a-b7709024e11c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3095f25-f49a-42b8-8ca1-c93324acc8d0",
        "cursor": {
          "ref": "586de8e9-b73e-4ddc-be9c-4926919ceb81",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ba6a9dc6-d4fe-49cf-8716-4dd1d35600e5"
        },
        "item": {
          "id": "c3095f25-f49a-42b8-8ca1-c93324acc8d0",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b2ff5ba0-b9fc-4476-bbc7-aa06f69dab83",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee6586f0-6b19-4bee-8fe3-420ce6d63eec",
        "cursor": {
          "ref": "1183e294-086e-4300-a8ad-1482db5ad3ef",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "bc7b97ad-0b56-4ebc-8c04-fec314966c6b"
        },
        "item": {
          "id": "ee6586f0-6b19-4bee-8fe3-420ce6d63eec",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c2d4466e-aacd-4b88-927f-d39321298b66",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2aaa8d1-3f25-44ef-9285-29eb9900eb26",
        "cursor": {
          "ref": "da83fc1b-f935-4ba6-baee-52c9af906c5c",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a8fafab1-1c68-4558-acbc-7f12e06759a2"
        },
        "item": {
          "id": "a2aaa8d1-3f25-44ef-9285-29eb9900eb26",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "b5d7742a-36f7-4407-88e3-42a52ac73963",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15404182-4504-4276-a461-a7db463da516",
        "cursor": {
          "ref": "67e7c9a8-341b-484e-9f36-1cc23f91b675",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "ab475512-136f-4ff9-b633-efb130838093"
        },
        "item": {
          "id": "15404182-4504-4276-a461-a7db463da516",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "3a6c8cb2-8b35-4d01-b195-7029c5570cf9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef70ac88-ba36-4695-b17d-b3ebe6dfd45d",
        "cursor": {
          "ref": "2ca6480b-4eac-46fd-b232-0e9aaa4c2ef9",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d6af08b2-f8d3-4b63-b0b4-6d856c8453db"
        },
        "item": {
          "id": "ef70ac88-ba36-4695-b17d-b3ebe6dfd45d",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "9fe57dba-ea4b-4136-8169-e24c2ab75754",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d6a7d7c-b824-4690-8a6d-20df70b4da2f",
        "cursor": {
          "ref": "6dbf4fec-7edf-4cab-8320-1d83c0213e61",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d466a375-b6bd-49b8-9830-74f980e79edb"
        },
        "item": {
          "id": "7d6a7d7c-b824-4690-8a6d-20df70b4da2f",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "0d5d9e98-efa1-4de7-b0b0-a60b212afb90",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9e6e964-c313-4566-9656-cbfc53f078ff",
        "cursor": {
          "ref": "ee57311a-0d23-43d2-8781-ec0aeb33642c",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "2c86b04b-e582-442a-9a89-604d1c99f781"
        },
        "item": {
          "id": "d9e6e964-c313-4566-9656-cbfc53f078ff",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "732b9c40-a82b-44df-8467-59ced4dd522f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c7d4ea8-6e8b-4915-bbb3-ad17902fa040",
        "cursor": {
          "ref": "62171a8b-093b-4f66-a11a-c0dd2ec92000",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d1b4f6fa-20df-4599-b3a4-2fedcf3bd08a"
        },
        "item": {
          "id": "9c7d4ea8-6e8b-4915-bbb3-ad17902fa040",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "fa4948ce-9d62-4a00-96bb-ed5ab8b5e275",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c95ddf71-54f3-4243-ac21-9151eafe3c44",
        "cursor": {
          "ref": "2db15fde-9ef9-4db3-979c-fe8e28cf6cad",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "98c5a72a-72e7-4f02-abe0-d34295c249d1"
        },
        "item": {
          "id": "c95ddf71-54f3-4243-ac21-9151eafe3c44",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "7228b89f-b79a-40f9-93ea-f85aef2fcf41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e1bf7c6-f24a-4def-85ad-8cd59edb37a5",
        "cursor": {
          "ref": "ecbd5985-f5ae-4ba8-8f64-8e6629da218e",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "74fd150f-b0e6-4739-b3f1-c297bf9e7790"
        },
        "item": {
          "id": "3e1bf7c6-f24a-4def-85ad-8cd59edb37a5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "664124db-cb05-44dc-bd21-8c3f4ffa7d01",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ac1362-692e-4518-8bd7-0a79c2fd67ab",
        "cursor": {
          "ref": "908be1a6-1ba8-4db2-a362-cee5420d8e6d",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f66b3654-b575-4008-a7fd-9ddb5b913b21"
        },
        "item": {
          "id": "07ac1362-692e-4518-8bd7-0a79c2fd67ab",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7524bd31-2871-45c0-8b66-008676e10657",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78fb189e-7e01-4865-9584-bf0985f4fa97",
        "cursor": {
          "ref": "abd36248-1333-4ddf-b599-fbf946fa113d",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d49578a9-32ba-40e6-9122-23573ec846e2"
        },
        "item": {
          "id": "78fb189e-7e01-4865-9584-bf0985f4fa97",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "3a35388b-d230-4b62-ad4a-4154b994b8ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad167029-4c22-4a57-b36d-e9386be79a34",
        "cursor": {
          "ref": "645d2f58-6b49-4a0d-bfef-b9d438dae11e",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "fb0be7e9-df15-4a7d-8dbb-988a03d84cb6"
        },
        "item": {
          "id": "ad167029-4c22-4a57-b36d-e9386be79a34",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "77966924-cd08-4962-8afb-e2f0f1785116",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec33da6c-30e9-4bfd-a34f-c6071a455a5e",
        "cursor": {
          "ref": "c4326ccc-3fdb-4fae-8e15-5e0c989c9427",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "bc7266c5-8a30-4783-9435-f315da4949de"
        },
        "item": {
          "id": "ec33da6c-30e9-4bfd-a34f-c6071a455a5e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "4985bc90-0c4a-4b53-9cc2-99fbfad19fdb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d974aa2-6dd8-4a1f-a347-f9dd291c64dd",
        "cursor": {
          "ref": "f9cc4d60-b9b3-4158-b166-dfa59bb3f229",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "ad93b49a-9a57-4e58-8d04-4f2c6e87be2a"
        },
        "item": {
          "id": "3d974aa2-6dd8-4a1f-a347-f9dd291c64dd",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "02ba6ca1-e545-4d85-9900-e740957ac2a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46880f3b-e727-4c07-9ecd-c1cdb10a795c",
        "cursor": {
          "ref": "3e7ade41-df77-4cd6-a0e5-392a258b008b",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "3fa285ba-ef67-4035-a3c6-5b0e05ba58e8"
        },
        "item": {
          "id": "46880f3b-e727-4c07-9ecd-c1cdb10a795c",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "bf5c1885-d74a-47c4-9743-cd931a9b1721",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9422522-9ee8-4d5e-86e9-5bfa59a1a70f",
        "cursor": {
          "ref": "775a4ac4-3957-45d3-8b0e-faf7f42cb8dc",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e736439b-b41d-4ab2-9e35-75b8cb84c843"
        },
        "item": {
          "id": "b9422522-9ee8-4d5e-86e9-5bfa59a1a70f",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4ba95121-c81a-408f-8486-aead0391b5d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9660e1b1-ae20-49dd-85e7-fe4264eb0f5b",
        "cursor": {
          "ref": "5c3e6401-cbcf-418a-b5b7-7406f8aa9ed8",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "fd183a85-7107-4678-83dd-c17a6ba7d3ee"
        },
        "item": {
          "id": "9660e1b1-ae20-49dd-85e7-fe4264eb0f5b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d2b9f7a0-abc9-4d18-ae82-08fb6e7b2776",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92023358-e2be-41ba-9c3f-946c21e4bac3",
        "cursor": {
          "ref": "785bd1d4-3438-4c51-a0ba-82a2adb85973",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "37a41e06-280a-4ccf-9fbf-6c192bb294c5"
        },
        "item": {
          "id": "92023358-e2be-41ba-9c3f-946c21e4bac3",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "3ffeb220-e363-45c0-bf4b-cba7e7ffacf0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b38baff-005e-4a85-b2f4-f3ff80d6d013",
        "cursor": {
          "ref": "947ac8d7-a23b-4249-8f18-e3fe731599fa",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "adcc58de-90a1-4da3-8978-0706b7511885"
        },
        "item": {
          "id": "1b38baff-005e-4a85-b2f4-f3ff80d6d013",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e2a260d0-32fa-44e9-aae7-90813838a65a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b86a259b-806f-436f-9cbe-8fa09327273f",
        "cursor": {
          "ref": "9ac2dc60-57f2-4db7-ae0c-1a7114ad84b1",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "8b1476cc-5086-470a-b3bd-a7e14de99c41"
        },
        "item": {
          "id": "b86a259b-806f-436f-9cbe-8fa09327273f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "58ab7db9-d595-4052-a50e-11473c1fcf17",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73cf7ca2-3341-4867-9deb-0e18965af10b",
        "cursor": {
          "ref": "f613fd92-f49f-4d20-85d0-df958d956ec5",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c0af49bd-64a6-4a57-8800-6cce66ee9aff"
        },
        "item": {
          "id": "73cf7ca2-3341-4867-9deb-0e18965af10b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "15ce9159-433f-4107-aedc-cd7d70e08c78",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4724eee4-98b0-466f-8116-b39f4b60e37c",
        "cursor": {
          "ref": "a5356d91-27ba-4213-8968-4e81dd59aa2b",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "88a42b88-9305-4cfb-9d0c-d942329dff52"
        },
        "item": {
          "id": "4724eee4-98b0-466f-8116-b39f4b60e37c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "60130c35-41ab-484b-a36b-29d0d786e8de",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0062abe-2fc4-4036-8156-377d61bac9e4",
        "cursor": {
          "ref": "6913042f-8b52-4f8a-8294-53ed50026f38",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "e2a896bf-7498-4afd-8447-1e00e3c49dd8"
        },
        "item": {
          "id": "e0062abe-2fc4-4036-8156-377d61bac9e4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "819529c3-e35a-47af-963b-d285793ae8bb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a573432-35c7-46e3-9778-ab92d8643d54",
        "cursor": {
          "ref": "81106433-1508-4fc0-99fe-148397b4af3c",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "09393692-c660-43a1-8f68-f6454ea2a94b"
        },
        "item": {
          "id": "2a573432-35c7-46e3-9778-ab92d8643d54",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "50ea4212-b612-48ab-8df1-6a31ab9aaafd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a44c1c50-f828-445d-993f-0a6f6ecffb6c",
        "cursor": {
          "ref": "f5799777-93f7-4552-9ec2-1252f78e75e3",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "beb2dde5-b467-4a9a-9c08-5c5d306cbc43"
        },
        "item": {
          "id": "a44c1c50-f828-445d-993f-0a6f6ecffb6c",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "4b92a507-bbf9-4aeb-9ec0-6c3c2d9d665d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1089f17-c129-40dc-8a9e-1f130bcab0ff",
        "cursor": {
          "ref": "315b0a60-212e-4abd-be1b-3821cd4a5485",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9637aa16-dd39-445c-9ecb-5c2bf89af492"
        },
        "item": {
          "id": "f1089f17-c129-40dc-8a9e-1f130bcab0ff",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a84b176e-d494-4d20-b550-bff967b557d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f9376e-7303-4ac9-a81c-afb47ea95c77",
        "cursor": {
          "ref": "4b3c649f-e3cc-4320-a5ed-1f39457b66e4",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "33db35c9-23cc-4cb7-bbb5-9db9c6bd0081"
        },
        "item": {
          "id": "01f9376e-7303-4ac9-a81c-afb47ea95c77",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "d851efe2-8ac8-4d8f-8640-5d0504fb2e32",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b38d4f-1282-4b64-83c1-7f97dbe35eb6",
        "cursor": {
          "ref": "56746692-1140-422a-82ec-4cab714c1efa",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "30438606-0fa4-43dc-bc31-6e49249bcc3b"
        },
        "item": {
          "id": "a6b38d4f-1282-4b64-83c1-7f97dbe35eb6",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "68ccd34a-9185-40ca-a181-ea0d1e6f149b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60d633d0-919c-4e24-88d5-286fc17e9934",
        "cursor": {
          "ref": "69c9692c-e403-4602-947e-d9a5eac391e4",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "021c3c1b-2935-4e76-8e24-c96cd9fa402c"
        },
        "item": {
          "id": "60d633d0-919c-4e24-88d5-286fc17e9934",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "016c7d24-87a3-4ad3-ad67-d89dccc6c412",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f02f6c3-32df-4c9e-a97b-87c6a47d7d9d",
        "cursor": {
          "ref": "cfe5a33f-2bfb-4a71-ab28-37c0d68f8525",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "4c08bb75-e878-49ba-a8c2-d246d30df56a"
        },
        "item": {
          "id": "9f02f6c3-32df-4c9e-a97b-87c6a47d7d9d",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "26059df5-f0eb-4cd4-ae06-9da60f0173c0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e17e883-0726-4b7d-914a-1ac1ba2aa014",
        "cursor": {
          "ref": "4fcf4e5f-e2fc-456f-9b18-62ae36390f23",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "6af2d86e-4880-4c93-86cb-32144d5e1aea"
        },
        "item": {
          "id": "2e17e883-0726-4b7d-914a-1ac1ba2aa014",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "9ced73de-ff44-4889-81fa-c4744aa5401b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc82bd26-90f6-4414-88a3-a427a41f5fe0",
        "cursor": {
          "ref": "0e8315f9-fee4-404e-aacf-0fb948f14d9f",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "62ea128e-73c9-4c48-bc8c-1282a00fb23b"
        },
        "item": {
          "id": "dc82bd26-90f6-4414-88a3-a427a41f5fe0",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "58868df2-f9e9-4689-afcc-0fc52c53814b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c619ed0-5dc5-43f8-9f5c-02d8aadcde3f",
        "cursor": {
          "ref": "947c77c5-6e97-41cd-8e4d-c2b145daa490",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "58104dbe-b16c-45a7-b053-bf518dae0ed8"
        },
        "item": {
          "id": "7c619ed0-5dc5-43f8-9f5c-02d8aadcde3f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "bc137f2a-6494-4b31-9463-c5cf04ca6e74",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a2212a5-ab61-4d4c-982c-5c46e8b7f034",
        "cursor": {
          "ref": "f7d7925a-19c2-4811-adac-23a1932e3427",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "fb2bfdda-eba9-4a29-b879-a6b950b88d52"
        },
        "item": {
          "id": "0a2212a5-ab61-4d4c-982c-5c46e8b7f034",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "4929e305-df8e-4e3f-bf4e-1741e3c319d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f7d14b-f3a1-4c9c-be34-09cdd4bf1be4",
        "cursor": {
          "ref": "e7af1541-be0c-41be-9f7a-aa072a81a2b0",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "cc931cd6-2344-43ff-a0f9-ecdc4780743f"
        },
        "item": {
          "id": "01f7d14b-f3a1-4c9c-be34-09cdd4bf1be4",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a312ab03-9243-4af9-83db-d8d55f79f95f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a09d9412-4bdb-41d7-b2ac-2178c0af4c8b",
        "cursor": {
          "ref": "2ed59a2a-55bb-43bd-8d06-e633f1114c69",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "17f7fe08-1c5d-44b2-8cb5-e95e45b83a2c"
        },
        "item": {
          "id": "a09d9412-4bdb-41d7-b2ac-2178c0af4c8b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ec403265-4cdd-45e3-b32a-9065ae3d8e2b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc4dfb0-5b01-4600-ba54-ee4cfc1ed7eb",
        "cursor": {
          "ref": "9755cd92-cef5-40f0-b72f-ba12f633c586",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "ca8dfe32-7d4b-45be-824a-a41ff44ba529"
        },
        "item": {
          "id": "8fc4dfb0-5b01-4600-ba54-ee4cfc1ed7eb",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "a108fd14-77b6-4828-b659-8fca56ea6a8c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad3d8c79-4746-452b-ac83-d06d9856ddba",
        "cursor": {
          "ref": "7f1d5201-06a8-41fd-bd43-f6354ce16e4a",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "d55a85d0-7874-4ba3-b37c-1c438b1fe8ad"
        },
        "item": {
          "id": "ad3d8c79-4746-452b-ac83-d06d9856ddba",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "d205e955-7951-4246-8f62-30c8f67e094f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa44eb3d-04d3-4fb1-848a-148d42d963e7",
        "cursor": {
          "ref": "31d93227-2ff7-49fa-9417-3f1bfe64dd7e",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "6aa1df4d-69ba-4043-8543-2e7dfec934b0"
        },
        "item": {
          "id": "fa44eb3d-04d3-4fb1-848a-148d42d963e7",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "61bcc8b7-4df1-497c-8635-2256b6296c96",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a135043d-15f5-42c9-ad76-1b2aa44d8e15",
        "cursor": {
          "ref": "02c4b4e4-dc9f-4588-9929-cc92d256aad8",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "743b2c92-14c3-4974-9f23-75aa22f0ae3f"
        },
        "item": {
          "id": "a135043d-15f5-42c9-ad76-1b2aa44d8e15",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "669029bd-6cc1-4e31-99cb-d6cb6c7b46bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49602db9-b84b-4fb9-96df-0b4ba354f91e",
        "cursor": {
          "ref": "adacffc0-b385-4831-8225-ee9c20a05002",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "bd307b45-3742-4b66-a91e-e98f0fd81167"
        },
        "item": {
          "id": "49602db9-b84b-4fb9-96df-0b4ba354f91e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "9fdbdeac-c67c-43ca-9886-573562c7ca92",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a99bf1-7e0c-44d5-9110-d297e3d76c46",
        "cursor": {
          "ref": "7c3ac977-a86e-477d-9ad6-7cbe063f617a",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "346358c3-b625-41e6-a480-c0d4f8d8bad4"
        },
        "item": {
          "id": "b2a99bf1-7e0c-44d5-9110-d297e3d76c46",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "36a18d19-e3db-4444-8ac7-563fefdceeaa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c3535c4-ada8-441d-9c5b-2b69dad7f38f",
        "cursor": {
          "ref": "8d820524-e44d-4912-a7f2-3ccf9bbd3206",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "13168c42-61fe-442e-9cd6-6bd5e474b3c8"
        },
        "item": {
          "id": "8c3535c4-ada8-441d-9c5b-2b69dad7f38f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "46bfaf40-e23f-4015-8f3d-b6e92c3fea72",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8815efdb-afcf-42ce-ba36-6fce534ecf05",
        "cursor": {
          "ref": "743956e1-4590-4072-b165-e9e0b93feced",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "714fb9d4-e166-44a7-acda-14ed3e556d6d"
        },
        "item": {
          "id": "8815efdb-afcf-42ce-ba36-6fce534ecf05",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "8b33a159-9fd0-4e88-90bc-f7b663bc484f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "c5539a92-9d68-459a-9269-021e63b8d1aa",
        "cursor": {
          "ref": "a5b38536-76fc-492c-b56e-dd7e2ad660f3",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d8c2b502-08e5-4e0a-8a58-30e6cab690a6"
        },
        "item": {
          "id": "c5539a92-9d68-459a-9269-021e63b8d1aa",
          "name": "credentials_issue"
        },
        "response": {
          "id": "98fa7f09-6ad6-4e61-9e80-b3b2e74f284b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "36852369-9c14-44b8-93c5-d95f9e402d5e",
        "cursor": {
          "ref": "d1306b66-d571-4e8f-a41c-68d7b8bdb184",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "3f6f1cb9-b118-43ea-8ac1-7a62db718a99"
        },
        "item": {
          "id": "36852369-9c14-44b8-93c5-d95f9e402d5e",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "6169123a-4aaa-47dc-bebc-193cf5905091",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 14,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "f6890aa5-9b9c-4c19-85ff-e9537869d09c",
        "cursor": {
          "ref": "b8c78009-ad17-4f5f-b35f-4c762584e484",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "9d4b615c-6c64-402d-9879-23509d673f44"
        },
        "item": {
          "id": "f6890aa5-9b9c-4c19-85ff-e9537869d09c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "7e15747c-037d-4431-8502-418b1f8d4cd2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "2a68c723-3569-4919-8358-e2f919ac3893",
        "cursor": {
          "ref": "4408620d-e497-48b3-8218-617718f2c900",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "46bc6cc2-ebac-4fd6-bcee-5301b9f52991"
        },
        "item": {
          "id": "2a68c723-3569-4919-8358-e2f919ac3893",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "8eaa682d-e1d3-47dd-963b-2e540c2bfdc0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "07d6f455-1c14-4590-9122-6bafa62e611c",
        "cursor": {
          "ref": "a09fc332-c73f-439f-8a45-6a8923cbd74b",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "cfa17d6e-fb3a-433b-93ae-e155f6f2327a"
        },
        "item": {
          "id": "07d6f455-1c14-4590-9122-6bafa62e611c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "e0c341c6-4dfe-478d-ae5c-8331e61b72ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "c6853a77-d9c5-4c92-9d6a-a1a91edb929e",
        "cursor": {
          "ref": "e018feae-7a35-4183-9d65-76e88bac87c9",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "de1e3ded-d464-4057-8500-606499da8b99"
        },
        "item": {
          "id": "c6853a77-d9c5-4c92-9d6a-a1a91edb929e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a245fc6a-cc91-4093-8b81-e274fcc91ed6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "30609f7c-cb5f-4877-b21e-26b3d2959dca",
        "cursor": {
          "ref": "2ec87b4f-c310-47d9-8c82-d4c9321c3cc8",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e7ef19c9-6add-4cde-a305-10a8368512c5"
        },
        "item": {
          "id": "30609f7c-cb5f-4877-b21e-26b3d2959dca",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "dd9bbb6b-99d9-4164-80da-0c11e6f0f254",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc2917c5-4e2f-414d-a95d-014a2391e54a",
        "cursor": {
          "ref": "a314a9b5-a036-40aa-a558-98a1786964c3",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "446d419b-0917-4675-a491-161370a589d5"
        },
        "item": {
          "id": "dc2917c5-4e2f-414d-a95d-014a2391e54a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a7b53810-2f4f-4169-b707-99c0e88db8ba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7220f9b9-c335-45b0-8c2d-07036c5431b7",
        "cursor": {
          "ref": "fd26a5eb-d279-4fcf-bb7f-7e7b8b3df160",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "8b5f4739-b830-47d2-963f-ffb3b9e4eb25"
        },
        "item": {
          "id": "7220f9b9-c335-45b0-8c2d-07036c5431b7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9689a23a-4a08-471d-a46a-1875361322d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d94cd75-1ead-4b79-ac53-92f828454e9a",
        "cursor": {
          "ref": "cbd5ddab-a667-4ee1-a1d8-1cea71fa179a",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "787b299e-eb32-4355-9de9-537861240a03"
        },
        "item": {
          "id": "7d94cd75-1ead-4b79-ac53-92f828454e9a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "845d7cdd-600a-406e-8a9b-d04ebbbad2a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22e6e2a5-3546-4559-9c6c-bdba4dc93244",
        "cursor": {
          "ref": "03d8bb8a-17cc-4fa6-acc1-d18888fe5130",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "3b75cc8c-e46e-4981-b75f-885bad77e39b"
        },
        "item": {
          "id": "22e6e2a5-3546-4559-9c6c-bdba4dc93244",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "488cc00f-e167-481d-9187-26e3d4af93ba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2986f9bd-59d1-41c4-9b0e-92a09cee1ef8",
        "cursor": {
          "ref": "badc501f-bb0b-46c0-a0df-8f1d5f4a18cd",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "99e18163-f034-4b7e-88f0-a6a7d27e4718"
        },
        "item": {
          "id": "2986f9bd-59d1-41c4-9b0e-92a09cee1ef8",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5d5049aa-c48e-4589-98aa-111d2dd7953e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e6936c6-60fb-4c2f-b782-d164aaeff93b",
        "cursor": {
          "ref": "a993c96f-b9a6-4ac4-b305-4de5d12ec304",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ad233233-0659-4e20-9959-3c6ba9d02110"
        },
        "item": {
          "id": "0e6936c6-60fb-4c2f-b782-d164aaeff93b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "dc774890-9192-4bf5-a888-86b2aca5df1c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "528747e1-7114-4296-8505-240f9780312c",
        "cursor": {
          "ref": "fdc648d3-6e8b-4cb2-b5e4-e9f33b0cd2bc",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "a88392d0-da54-4c8d-bda5-5dda24d439bb"
        },
        "item": {
          "id": "528747e1-7114-4296-8505-240f9780312c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e122ac7b-0f4c-49b9-84c0-a8eff72880ba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d46e366d-64a3-4da4-8234-44b007a2318e",
        "cursor": {
          "ref": "569d839d-ce89-4653-b5f7-d73f394262d8",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7b53a5da-71cc-4de8-b457-1ce355a960d3"
        },
        "item": {
          "id": "d46e366d-64a3-4da4-8234-44b007a2318e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "1ea39836-e57b-4010-ad23-7140e6bc4639",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb21f32c-309d-4c05-8c0e-4ab144d843e6",
        "cursor": {
          "ref": "1ec6ba29-ec3b-47ec-90ce-01951aa381da",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "869457a6-06e2-4fe6-83c6-9f19430d829b"
        },
        "item": {
          "id": "cb21f32c-309d-4c05-8c0e-4ab144d843e6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "eacc0a5c-d9c8-411a-9d4e-a2fe1eb3da50",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "475b7fe1-88de-44a8-ab82-465ee562c573",
        "cursor": {
          "ref": "0ef2266a-d43a-4153-8572-08ee0fac11bd",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "e02780bb-dda8-4057-bae8-64196b97f332"
        },
        "item": {
          "id": "475b7fe1-88de-44a8-ab82-465ee562c573",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "05132418-fc38-454a-9e28-b072547e33ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b2264bf-8f83-4bfa-8f71-0e416db024cc",
        "cursor": {
          "ref": "497a85ed-e938-4d11-9b14-36d876d56dba",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "4da5b706-479d-4c7b-985d-227ab36b7514"
        },
        "item": {
          "id": "6b2264bf-8f83-4bfa-8f71-0e416db024cc",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "9e16dd69-a700-4b4f-842e-9a8c5ec6ba02",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c709c71-b0ad-41f6-be7a-a9de87b4f14c",
        "cursor": {
          "ref": "82b112e3-b2b5-4a38-9f28-9feef76bcbad",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "85eeb159-57da-4bb2-a56f-f063538aeba8"
        },
        "item": {
          "id": "1c709c71-b0ad-41f6-be7a-a9de87b4f14c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f328238d-e2f5-4d48-abad-0589a7a6cc0e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47809bc5-7a33-4d8b-bee2-8c216b4342ac",
        "cursor": {
          "ref": "b4e910a2-1b49-4fb4-9681-61e7860cd05c",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "71537933-7cdc-4374-9c2d-14571ee70ce3"
        },
        "item": {
          "id": "47809bc5-7a33-4d8b-bee2-8c216b4342ac",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0439e186-c31b-4258-8b96-8819111ecfbe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "398154de-ffe6-4897-b15b-7819df30a954",
        "cursor": {
          "ref": "e648361c-bb49-4584-847a-1ec246aad04b",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "4962d2f4-7baf-44d5-8531-f81e09af384c"
        },
        "item": {
          "id": "398154de-ffe6-4897-b15b-7819df30a954",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a7359f04-d16f-4fdd-bdad-a5e928ebdf4d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34c1d6a8-d57a-4caa-9299-1495192e6d05",
        "cursor": {
          "ref": "df8b785e-b65c-4dd0-9b9f-e000587faf89",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e042eb99-b9a2-475b-ae7e-e48574a95938"
        },
        "item": {
          "id": "34c1d6a8-d57a-4caa-9299-1495192e6d05",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3eefd479-e867-4958-b28e-9844731b1169",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac364e5-a5e3-43e4-b5fe-59a6c61a96de",
        "cursor": {
          "ref": "74bbb665-4a66-41e9-bbba-76c9f11b8628",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "46395254-1d40-49f8-93bc-8255dadd8ab7"
        },
        "item": {
          "id": "0ac364e5-a5e3-43e4-b5fe-59a6c61a96de",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0e652c13-8d80-44f0-9bd5-8423b911a32f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e227c8c-8746-46ef-a3b8-687783c1d006",
        "cursor": {
          "ref": "c293af8e-ebf4-4787-b6ce-8a6fdb329f4a",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "7c048adf-e755-4228-9bfe-35849c991db1"
        },
        "item": {
          "id": "9e227c8c-8746-46ef-a3b8-687783c1d006",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "60267399-d19e-4f11-8f22-6290cb30873e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1caf36ad-22f1-452f-946d-7adc8f5417b9",
        "cursor": {
          "ref": "72f5c138-b755-4ebb-9cfe-c1d706a42ca4",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "09768795-6ac8-4e0f-bb9d-4dc20d8e4538"
        },
        "item": {
          "id": "1caf36ad-22f1-452f-946d-7adc8f5417b9",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3a1a17cd-4dda-4636-825b-267f7a271921",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc2636d9-f5d6-44cb-bf18-a7edfc010630",
        "cursor": {
          "ref": "010c95d4-73e6-40dd-829f-645f8a97fe79",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ea645ff8-1f58-4be4-bda6-66166628c714"
        },
        "item": {
          "id": "bc2636d9-f5d6-44cb-bf18-a7edfc010630",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0284d7d9-5d1e-4501-9933-f4c177cae0dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e80aea03-1aa7-4728-8822-4dea0475aad3",
        "cursor": {
          "ref": "6f8b1b44-106a-455d-b893-85879bb4b210",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "780847e0-062d-461e-a797-4b652e66ce7a"
        },
        "item": {
          "id": "e80aea03-1aa7-4728-8822-4dea0475aad3",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f429121c-0bc5-45cf-9943-9fb923239e5e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd463b21-0834-401f-8cda-e998a79189d7",
        "cursor": {
          "ref": "4b8ea236-50f2-44ef-b80c-cf054525ae4b",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "32a1dc0c-2205-445f-81c3-7b384c92d3e7"
        },
        "item": {
          "id": "cd463b21-0834-401f-8cda-e998a79189d7",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6f31aa93-7211-414b-a44b-7f2fe43bb31f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d0b9e30-0501-4a4f-a967-64fcc49c0bc7",
        "cursor": {
          "ref": "f6f0d16e-825a-4dd4-b5cc-de10fafe46e4",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "76714c7f-6bce-4fca-b18b-e8d19c799479"
        },
        "item": {
          "id": "9d0b9e30-0501-4a4f-a967-64fcc49c0bc7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c12dc269-4aee-4de6-b6d6-b711d3b42ab7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b122d2c9-f1b3-4022-b789-cd2d731efd5e",
        "cursor": {
          "ref": "d13b7635-46c0-4501-af4d-0b1ec064415e",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "5e4c2f48-83af-47d7-b5e5-7f25260b6fff"
        },
        "item": {
          "id": "b122d2c9-f1b3-4022-b789-cd2d731efd5e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a49a1c67-fcd8-4c56-a3d2-9e02020ba0a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24c320b4-20a1-44eb-ab19-85fd4e59a7ba",
        "cursor": {
          "ref": "e5389d60-5087-4344-9cdb-a78c2325d68c",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "90dcf926-188d-442f-adb5-4d815875f0d4"
        },
        "item": {
          "id": "24c320b4-20a1-44eb-ab19-85fd4e59a7ba",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "557bfeef-af12-4626-a1ee-004b4af7929d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0274f2d-d92f-4d82-a0ca-1dcd774d8577",
        "cursor": {
          "ref": "35956d97-eefc-460f-8eb8-7936961a6842",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "ef423bf8-1c8d-403c-89c3-6d86d68de3bc"
        },
        "item": {
          "id": "d0274f2d-d92f-4d82-a0ca-1dcd774d8577",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e4bbbfbf-ff29-4a0c-b495-70420e6d8a3d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b01c6e13-5ae1-4642-bd05-5382057ad494",
        "cursor": {
          "ref": "b32af2c5-9cb9-49c3-91da-4d87e6e0ac51",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4cd1b691-e599-481f-8876-21e940b9fd76"
        },
        "item": {
          "id": "b01c6e13-5ae1-4642-bd05-5382057ad494",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9de642b0-7d27-4287-995b-669191196df0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c02aafdf-7bec-4687-ab46-878cc600a9cc",
        "cursor": {
          "ref": "c2188eea-2ac6-4bd5-b07e-ca3e2c3d2aa1",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "0c4c24dd-093d-4f2f-9a71-bea997ef0f49"
        },
        "item": {
          "id": "c02aafdf-7bec-4687-ab46-878cc600a9cc",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "47feb1ca-cfd7-4a37-8257-01de7e76bcf4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "319395a4-afaa-4fe2-b57a-94542a1161d3",
        "cursor": {
          "ref": "1cf7cd38-fabc-4536-be84-4cf7f27669cd",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "261af2a0-7e07-4a53-b28c-8ac0fc59ce44"
        },
        "item": {
          "id": "319395a4-afaa-4fe2-b57a-94542a1161d3",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "faa5d993-d92d-40f7-9c9c-8e432f620c13",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0741ec39-7b67-478f-aaec-84a1e7185923",
        "cursor": {
          "ref": "9b4e62c5-41df-4da5-830b-112a9841ab10",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "0673b0b8-796b-4898-8a24-bcfaea9ef9e2"
        },
        "item": {
          "id": "0741ec39-7b67-478f-aaec-84a1e7185923",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "db8820ea-cbb6-4daa-b2da-9b411a08ebb8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74d81deb-b1ba-4f85-992c-75ca17d64c24",
        "cursor": {
          "ref": "6acba6ba-d2a8-4c6e-9a46-d9ae7f8aa9eb",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "f8a01d0b-6603-49ad-8cf9-5de6e24ddcd2"
        },
        "item": {
          "id": "74d81deb-b1ba-4f85-992c-75ca17d64c24",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "88395013-0fe8-46d8-b539-bddbc40e0bd7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb2bb581-4502-47ae-97b1-9f4e50139d68",
        "cursor": {
          "ref": "20c525b9-b918-4293-8165-968b60edac4a",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "73bb4eb1-336a-45db-9bdc-1f24f49bac18"
        },
        "item": {
          "id": "cb2bb581-4502-47ae-97b1-9f4e50139d68",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "d68bd509-b75e-41b7-ba08-c78f9814c9ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd4da499-1803-4fdb-b065-4cb01af9c814",
        "cursor": {
          "ref": "edf92ed1-84c7-4879-830b-600873a6fa21",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ecc5fc68-95cc-477a-9c53-a5f11c044382"
        },
        "item": {
          "id": "dd4da499-1803-4fdb-b065-4cb01af9c814",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "b233f677-7e6c-4ca8-86f0-24599bb02c20",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eccb96eb-0dbf-43c0-96d9-45a0bfc2ea15",
        "cursor": {
          "ref": "bb7c464e-b390-4bc5-908b-086a4e127e74",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8d375aa5-2140-4d98-93b4-6d87f8badc19"
        },
        "item": {
          "id": "eccb96eb-0dbf-43c0-96d9-45a0bfc2ea15",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "fd5983fc-4620-4b80-8508-d9db2d364699",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0c492cc-410a-430e-b906-5fb61ed78435",
        "cursor": {
          "ref": "5f340184-26b6-4779-aa36-2508173efacf",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7d035372-c4c8-4ebb-b229-f0fa2c9a54b1"
        },
        "item": {
          "id": "b0c492cc-410a-430e-b906-5fb61ed78435",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "aa363444-93c7-4aa3-b08f-f923af0d539d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae27f70f-d363-48d5-b825-fe857d0264f3",
        "cursor": {
          "ref": "99d1dbca-1eeb-4d5e-a843-72163e45b35e",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5dd05af9-7b6c-489a-a097-d94cd7d7670e"
        },
        "item": {
          "id": "ae27f70f-d363-48d5-b825-fe857d0264f3",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "83998383-a285-4076-934a-b689ea66994f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22608a41-1140-4382-9587-a2fda4713131",
        "cursor": {
          "ref": "bcee0a4a-9349-429a-a01d-043ea4083676",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "451aca59-5b73-4a85-8e1c-7f6627d5d4cb"
        },
        "item": {
          "id": "22608a41-1140-4382-9587-a2fda4713131",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "2b3f7870-5865-4eed-b129-62dd58852bd1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae3f92ff-dd67-4a4d-895c-c0a2d1c50a62",
        "cursor": {
          "ref": "20407add-caa9-4c8d-bfae-113e44bcd9b4",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "a8d834a5-5505-4993-a125-5cff645edd3f"
        },
        "item": {
          "id": "ae3f92ff-dd67-4a4d-895c-c0a2d1c50a62",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e980db02-9fbe-4693-8a5f-1272a6281add",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61c4935b-b04e-412e-a58c-4e725cbdb3e8",
        "cursor": {
          "ref": "3d671ddb-d331-4d49-b784-bc855b1bb7bb",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "399c4e07-477d-4653-89dd-c04af415b2c0"
        },
        "item": {
          "id": "61c4935b-b04e-412e-a58c-4e725cbdb3e8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8a7210b0-2a06-4742-b226-dcc47a1f113d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd24a14e-7e85-4481-94b3-839691e0905c",
        "cursor": {
          "ref": "1acd13bc-6188-4e08-894c-c4a15e2452eb",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "5fd1eaca-cd4b-4a4b-b4bc-f15facc6db67"
        },
        "item": {
          "id": "cd24a14e-7e85-4481-94b3-839691e0905c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4f43a77d-6c33-42b9-9231-2bed02cdc507",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1646b6e-3499-48c5-a440-d92107126cd7",
        "cursor": {
          "ref": "7972a59d-4f33-4899-934c-c0ac639d97af",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "7268cdc9-b4d9-482d-9448-c59a6c8442a6"
        },
        "item": {
          "id": "c1646b6e-3499-48c5-a440-d92107126cd7",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "40ae6c94-2d2f-4c5b-832c-ac2a9e911375",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95730e5a-c1ba-46df-9424-ff8336ffbf71",
        "cursor": {
          "ref": "f5582ef6-f548-47ad-b9e3-9a940c43b9cd",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "0debab3e-f835-426d-8636-a1fe7aadd208"
        },
        "item": {
          "id": "95730e5a-c1ba-46df-9424-ff8336ffbf71",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "362fc0f3-77d2-477b-b562-7619a56d3b42",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b60676a-0bbf-465b-8a56-9b399be692c8",
        "cursor": {
          "ref": "3cd49990-a5bc-4032-aec1-9db7466fedbd",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d49c5e20-e048-49f6-944e-2c97d4a008a2"
        },
        "item": {
          "id": "0b60676a-0bbf-465b-8a56-9b399be692c8",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "15b81817-262b-4e83-a28f-94b7baf979d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b77792d-ac6a-4a11-b963-8095a098f81e",
        "cursor": {
          "ref": "c412a8d6-801c-4010-9250-6f0295a07932",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "469ccc40-90e4-426e-ae30-ef0fed05f208"
        },
        "item": {
          "id": "1b77792d-ac6a-4a11-b963-8095a098f81e",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4398d76c-ed26-463f-9205-5677327d0d28",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eae1b3f3-fabe-4aaf-83a5-a2695240f56f",
        "cursor": {
          "ref": "af50caf7-9ebe-45cd-8a45-457239a98b8c",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "f85cbbee-5e3b-4956-aeef-03cefbe49bbe"
        },
        "item": {
          "id": "eae1b3f3-fabe-4aaf-83a5-a2695240f56f",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ecb30694-0753-4bb9-91bc-ac63be3d0d7f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32f28dd0-eead-4f81-a757-41c3b0be5d5a",
        "cursor": {
          "ref": "f4cceb0a-103a-466b-9700-41699cf92a86",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ae279da1-44cc-4255-9605-6a943ec4f23f"
        },
        "item": {
          "id": "32f28dd0-eead-4f81-a757-41c3b0be5d5a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "9e6526a7-bae4-4d69-9799-10282e1b54fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f73d64-79ce-4618-a80d-5edaf44d6e8f",
        "cursor": {
          "ref": "fd29f070-ca3f-4565-b35f-08910d94072d",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "323e897c-4a14-4517-b0c0-719740cbd819"
        },
        "item": {
          "id": "f8f73d64-79ce-4618-a80d-5edaf44d6e8f",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b554b4f5-ae9b-4eef-9ed4-ea9ea901efba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3641760b-21e4-42fb-9551-226d9594f780",
        "cursor": {
          "ref": "5f3be9ad-96ed-4800-8dc0-1be69a7ca69c",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "6d37f2b3-b299-48a5-bca5-7a13aa35e7fb"
        },
        "item": {
          "id": "3641760b-21e4-42fb-9551-226d9594f780",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0eadd901-3eee-4839-a804-bb1e94663822",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14064baf-fb3e-4de8-ac84-a29964df282d",
        "cursor": {
          "ref": "36b73629-10be-4139-8476-244adebbe084",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e20e6b12-2f98-43f6-9caa-3d1d3e9a0dec"
        },
        "item": {
          "id": "14064baf-fb3e-4de8-ac84-a29964df282d",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a321ff7e-4c7b-494f-9b25-2e621a693e9e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "523b5cbd-81b0-42bd-9857-145d1477bd74",
        "cursor": {
          "ref": "4c104521-75c5-4e31-916f-1c117a342c22",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "59b963bb-859f-4d72-bc99-9252817739ed"
        },
        "item": {
          "id": "523b5cbd-81b0-42bd-9857-145d1477bd74",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "acfd7ad8-1b71-48db-b207-6c7b9e1263d8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0c7697-0e90-4ec0-819d-2eb322b392e2",
        "cursor": {
          "ref": "866f5582-b5f4-41ec-915b-5846ccf1bf98",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "567a6a6f-da91-41c0-8fdc-55d17f5275e6"
        },
        "item": {
          "id": "3d0c7697-0e90-4ec0-819d-2eb322b392e2",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "aedd5055-a024-4ef6-ace6-097f27ca1db8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "505bfa80-4ef3-4553-b507-b931e6f26d10",
        "cursor": {
          "ref": "f05506bf-64ec-4749-bcd3-3e92a932bfcd",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "60133110-867e-408b-97aa-d0a3a85619f6"
        },
        "item": {
          "id": "505bfa80-4ef3-4553-b507-b931e6f26d10",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "c97fc8c8-4710-4239-b8cd-87247a773532",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "407bb03e-af26-4165-ad3d-b1563abfb067",
        "cursor": {
          "ref": "ebdd61c3-f4df-4108-b7ff-51c36a63e167",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "14529306-085e-4602-a442-cedcff9c1830"
        },
        "item": {
          "id": "407bb03e-af26-4165-ad3d-b1563abfb067",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9cfe9f8c-be4c-44f3-9b7c-039a998bb67f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a6229fd-aefb-4395-a5ca-050ff918e0f7",
        "cursor": {
          "ref": "9a119e73-decd-4165-94c8-00a6d72115ec",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "1ec2f8f7-668e-4c4b-bc98-a0733e00c8fd"
        },
        "item": {
          "id": "3a6229fd-aefb-4395-a5ca-050ff918e0f7",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2296998e-f2c6-446b-aca9-1d4f44df5981",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d61a50a-c91f-4d88-9cb7-e53fedb4236b",
        "cursor": {
          "ref": "3d9916ac-ba5e-4e90-b451-d6dfa012ddda",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "1bc272d8-1de8-4015-91c9-6f43523e17b7"
        },
        "item": {
          "id": "3d61a50a-c91f-4d88-9cb7-e53fedb4236b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "734e3ee9-9a37-4f9f-9518-b0388dfadd6c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ad071d7-e620-4483-8bc0-7f3ed5e0f365",
        "cursor": {
          "ref": "63b119f1-8370-4a95-95b0-7026fffc322d",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "24d1ffb4-4ce4-447a-9b7f-ada19711b6a8"
        },
        "item": {
          "id": "6ad071d7-e620-4483-8bc0-7f3ed5e0f365",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "9e82b1fb-627b-470e-9a84-dd431e3576c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1dcb604-6b0c-430c-98dd-2413541d65ad",
        "cursor": {
          "ref": "584e6427-4d22-4766-b5b8-08f7a5e97622",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0682919e-bbab-40e4-ac39-fae9db6987d3"
        },
        "item": {
          "id": "a1dcb604-6b0c-430c-98dd-2413541d65ad",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2e43379e-f715-42d8-8801-68fa6bf71caf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f4f7ffb-9926-4de3-9422-21c566664efe",
        "cursor": {
          "ref": "08525d12-2124-4c2d-b366-9d4d67b52e8b",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "926c72ae-73b1-4851-a3a2-2f5a86b85a49"
        },
        "item": {
          "id": "4f4f7ffb-9926-4de3-9422-21c566664efe",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "76df4aa6-4f01-4821-90a8-088e7319e587",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93674dea-9963-4440-be0c-89b64a2768aa",
        "cursor": {
          "ref": "36b3bde5-0e55-4b07-921e-e9108f554875",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7bf8642b-cc1b-452d-9ab7-dd036dfb2dfa"
        },
        "item": {
          "id": "93674dea-9963-4440-be0c-89b64a2768aa",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "190914d3-ae77-41b8-a6a4-99de6dd428fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd27ed0-3deb-4a1d-8678-b292ecbb5139",
        "cursor": {
          "ref": "403e3e3f-7a58-47bc-bf17-fd6eb137b17b",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "50644fb2-ac31-4c87-9589-10d768e95471"
        },
        "item": {
          "id": "efd27ed0-3deb-4a1d-8678-b292ecbb5139",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "61fd450f-c746-44df-9795-a2adbe356166",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "511c22e0-19a1-4928-9fac-d8b64c03654f",
        "cursor": {
          "ref": "02e507af-f77b-4fe6-9526-a87009f0e563",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "9c1861d7-f374-48cd-b6a0-73ed5b1c0c19"
        },
        "item": {
          "id": "511c22e0-19a1-4928-9fac-d8b64c03654f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "52c91018-aff7-4234-b2e2-0446b570e530",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fae18080-26f1-4b38-9546-1f3eb8b55e50",
        "cursor": {
          "ref": "666f747f-eb39-43d4-8024-e1426047d3ee",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "77a2da84-92bc-4a3b-bd67-d1cc92e86f87"
        },
        "item": {
          "id": "fae18080-26f1-4b38-9546-1f3eb8b55e50",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "89c078af-9cf0-42d2-827a-4cee28a855cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aca46c6-2843-44f6-9829-08893785c2c7",
        "cursor": {
          "ref": "65054d9f-1df4-46dc-8416-36351b36a7d5",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "955ec1b4-20e3-4316-a534-1bbd3f272c3c"
        },
        "item": {
          "id": "6aca46c6-2843-44f6-9829-08893785c2c7",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "18389210-756d-4ec1-838e-60a29ba65702",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c42f79b-7573-4544-ba37-f3d140158790",
        "cursor": {
          "ref": "593c0810-cf21-418b-b275-e328eabda9d6",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a84d8c6b-face-48de-af1a-7cf832399832"
        },
        "item": {
          "id": "5c42f79b-7573-4544-ba37-f3d140158790",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "82260361-d062-40eb-81f9-bf7318462365",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae597a8-eda4-4d3e-a750-5f84042e67ef",
        "cursor": {
          "ref": "5d7e0468-5cad-4839-824b-838cf1523c98",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8d86a26c-b667-4b44-ae7c-ac938f3e1c51"
        },
        "item": {
          "id": "dae597a8-eda4-4d3e-a750-5f84042e67ef",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "87533fdc-2818-45ea-aadc-92ffb0236437",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a96332a-fd95-4631-a6bc-22c3a118f958",
        "cursor": {
          "ref": "e807902a-eea6-4068-8c01-6e258aa2dca7",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "5b84191c-82d5-4130-b5de-7cbd96390dc9"
        },
        "item": {
          "id": "5a96332a-fd95-4631-a6bc-22c3a118f958",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "251b60e7-bc85-4a13-9fa6-48f71f5c4e33",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1594029b-878a-48ff-b06a-1ecd8887b7df",
        "cursor": {
          "ref": "7a19c48d-af25-42cc-9a14-372fc96621e4",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d893b2c2-da22-4605-95b8-91dbb54f5eb1"
        },
        "item": {
          "id": "1594029b-878a-48ff-b06a-1ecd8887b7df",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "06d23f58-3e43-43a7-a23f-652934f9b33f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef47e063-93ed-4edc-b4d3-b0bb26a17451",
        "cursor": {
          "ref": "5bfdfe22-77bf-47a2-ac1a-ebd25769f52a",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e8fcd974-96a0-48aa-9a83-ecab7ffb5c27"
        },
        "item": {
          "id": "ef47e063-93ed-4edc-b4d3-b0bb26a17451",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "fe3cd6d4-1f05-4432-8468-6487618c6f39",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed6ebd61-256e-4f53-87ab-524436143834",
        "cursor": {
          "ref": "0c1001b1-7e2d-4aa7-b553-2853e7c51a0c",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e216d53d-6120-4ecf-9344-89ebde2a6d47"
        },
        "item": {
          "id": "ed6ebd61-256e-4f53-87ab-524436143834",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "370edab6-81d0-4569-bac9-46e43761eff5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14df3859-c692-45ea-98fc-807c9f6796bd",
        "cursor": {
          "ref": "1ed6e922-8c57-432a-a083-213259cc662a",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b10a5ca3-d58b-4734-9165-2ae7c29cf9a2"
        },
        "item": {
          "id": "14df3859-c692-45ea-98fc-807c9f6796bd",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "cda27dc9-ed56-4cbb-a45c-0ab79d080011",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "722f0a46-dfd2-4032-a484-3a8d5c55d59c",
        "cursor": {
          "ref": "ba7d37cc-45a9-4273-ac4b-5583a7a011b8",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3eac2dc7-8ae1-49b5-b149-8b79882dacd9"
        },
        "item": {
          "id": "722f0a46-dfd2-4032-a484-3a8d5c55d59c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "64c64433-2002-420a-9b69-9a1f698147a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2336c88-81b6-4719-ae65-03ac9f1f2e63",
        "cursor": {
          "ref": "f72f3ea1-63f1-40ed-ac61-ab2b6626baea",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "e2ca5e84-7e6b-44bb-995d-568975fbe056"
        },
        "item": {
          "id": "f2336c88-81b6-4719-ae65-03ac9f1f2e63",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d5f5fd26-514f-4fbd-a9a4-3d1bcb635eee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89b5b445-112b-4c25-a342-2d395a41f74a",
        "cursor": {
          "ref": "873adef3-5fb1-42d4-bdc5-d440dfb6f8bf",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "16a2a7ec-e2df-4e3c-a58a-a01a26141e3f"
        },
        "item": {
          "id": "89b5b445-112b-4c25-a342-2d395a41f74a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "fb0077c2-76c6-4ada-bc93-3eed60b0ae15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4414d476-a00c-406f-b058-bfec06a6b413",
        "cursor": {
          "ref": "64380942-7619-4624-b791-9f8f1b205427",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2245a9fc-fa28-4103-a9ea-d22db6e6c927"
        },
        "item": {
          "id": "4414d476-a00c-406f-b058-bfec06a6b413",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "04279f17-66e7-4397-9654-51f9a4652f2d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca068378-2a70-423a-9d0c-ac9d64f4a4cb",
        "cursor": {
          "ref": "934f1b6a-a239-4a85-b223-f5ca3a3b698f",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "3daf5ed8-4ef1-4a88-940e-5835b37f6e12"
        },
        "item": {
          "id": "ca068378-2a70-423a-9d0c-ac9d64f4a4cb",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "b9fa4b78-3bb1-4120-a98a-5658f10e3ac6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13d1e626-7ecb-42e4-b298-7b0dda31dbd7",
        "cursor": {
          "ref": "5ff78a79-28ce-4ad2-999f-bd2ac871ced2",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b7310582-eaa8-48b3-b64c-e7b4fe157fd2"
        },
        "item": {
          "id": "13d1e626-7ecb-42e4-b298-7b0dda31dbd7",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "6128c168-ea19-4a57-b1e1-77197786c05b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f93c6b0f-ba41-449c-b218-e0337ba0a2e0",
        "cursor": {
          "ref": "48547ed2-3922-4ab9-9452-39edc6db4cc1",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "9c961ec7-c3bb-4b93-b8cd-12060c411a2d"
        },
        "item": {
          "id": "f93c6b0f-ba41-449c-b218-e0337ba0a2e0",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "bf3f5565-e5aa-4f7d-8202-7fe37c5bd90c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f3064d5-63cf-4a48-b776-655973598cee",
        "cursor": {
          "ref": "7c5f4c46-e08c-4791-ad81-0465c32f6767",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "5acbea33-9629-429e-89f2-3c5a5e789d19"
        },
        "item": {
          "id": "9f3064d5-63cf-4a48-b776-655973598cee",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "79a54394-3e59-4d59-abfd-688e88ce0ae9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28bc19ae-f4fd-4fd9-aa22-8da8b2ccb6e7",
        "cursor": {
          "ref": "34aeccef-b6a2-4530-a17f-bfbb14dcc34f",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "0165eed0-f610-4e43-8183-94b5c997a74e"
        },
        "item": {
          "id": "28bc19ae-f4fd-4fd9-aa22-8da8b2ccb6e7",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "6cdd8187-651c-4003-b1b5-000f61eb2e74",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03dd2acd-e1f9-43a8-83fe-5e73091ec457",
        "cursor": {
          "ref": "e2e6fb4f-8aeb-404b-83a4-dd59a06171a1",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "16dcbb81-e68f-4a61-a4a0-5fb748ea3607"
        },
        "item": {
          "id": "03dd2acd-e1f9-43a8-83fe-5e73091ec457",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "5c00777d-f583-4b53-9b27-ab7f7446f892",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5aa924f-7f58-414d-907d-50f864069987",
        "cursor": {
          "ref": "9bbd0f08-aa06-410f-ba78-0c2fbc4fbc00",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "d822ad05-3b07-4f42-b837-36be1adae2f1"
        },
        "item": {
          "id": "a5aa924f-7f58-414d-907d-50f864069987",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "eea8dc71-dee8-4af5-b0b0-1130c35fb54c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e59f9fa-08a1-42e2-8fe1-82eae9b2a1a5",
        "cursor": {
          "ref": "10be3009-0113-41cc-b420-4ff5c3ebc442",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "5ef608b8-1e4b-4805-ba03-d24a6d18f4b4"
        },
        "item": {
          "id": "1e59f9fa-08a1-42e2-8fe1-82eae9b2a1a5",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "f6675f60-cd81-46a2-bae9-405ceb6b9e02",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcddd474-fcca-4725-986e-a7ed73b621ea",
        "cursor": {
          "ref": "76323d1e-e658-466b-b09e-c378efe29ca1",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "74f132c1-bb0c-4f0d-a979-fed883453b61"
        },
        "item": {
          "id": "fcddd474-fcca-4725-986e-a7ed73b621ea",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "111dbf6b-f428-45bf-907c-cfcb6b87064b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde55531-0729-4142-bbd6-6a96c8761ad2",
        "cursor": {
          "ref": "1ae99900-7bc6-4e9d-a50f-765166059290",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "2b8ef1b5-4823-4d27-bb40-e23548ad7875"
        },
        "item": {
          "id": "dde55531-0729-4142-bbd6-6a96c8761ad2",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "79f0b6d9-4c33-4113-8d3f-1eb227111278",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a0356f4-59d5-44e0-ba41-c87d6aa6c7b6",
        "cursor": {
          "ref": "dfc8c81f-8552-4a74-9e75-b20e74962708",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "82444ac1-c9bc-4eea-8256-24b410d2d20f"
        },
        "item": {
          "id": "6a0356f4-59d5-44e0-ba41-c87d6aa6c7b6",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f02cc616-1f19-4604-aa05-a83025c98b34",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "854efaa7-3451-40a3-a3ca-768eeb81261e",
        "cursor": {
          "ref": "95880da6-b6e6-4476-a271-b8c7fd35656b",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "0141c873-c753-451e-bb10-68bd4c8d2acb"
        },
        "item": {
          "id": "854efaa7-3451-40a3-a3ca-768eeb81261e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "7aa099f1-3744-4de9-84c9-ae57153348dd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "061a5871-fe1e-4d6a-963a-7d36a742e8ad",
        "cursor": {
          "ref": "e7867592-bec2-48be-b43e-2e865717073a",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "5e8c9219-ffd3-46b6-a81a-f698a7a92107"
        },
        "item": {
          "id": "061a5871-fe1e-4d6a-963a-7d36a742e8ad",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "9cd377d0-f2d4-43a9-b3e6-b342f29320e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc97d0c-e141-43be-98e2-ee50d8727881",
        "cursor": {
          "ref": "b06d46fe-f84d-4ccb-a8cb-1ef53e824737",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "466c7336-937d-4d96-adba-8c36f57b350a"
        },
        "item": {
          "id": "4fc97d0c-e141-43be-98e2-ee50d8727881",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "94fe0fcb-254f-4ccf-99de-60faa8984446",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e389e69-e88a-499d-b35f-a721a6783a85",
        "cursor": {
          "ref": "11799c96-f3f5-4e85-81f3-0aec9114efc5",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "dbed24a4-022d-4a06-8b14-d3e525d3c6ef"
        },
        "item": {
          "id": "3e389e69-e88a-499d-b35f-a721a6783a85",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f6c50fbe-7ed3-4211-9b17-f8a2c8bb177e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d8d29e4-2925-47e0-bb4c-1c4b1f16d28e",
        "cursor": {
          "ref": "bf27789b-4182-4f33-8eaa-e1468ef97a27",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c422c944-b10e-47bc-8c77-45b0290e651e"
        },
        "item": {
          "id": "8d8d29e4-2925-47e0-bb4c-1c4b1f16d28e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "75a810f2-0095-4366-a5a5-b2ab1670e0b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71c22650-0203-41a6-a90c-06a6730fc717",
        "cursor": {
          "ref": "848ebdcf-403b-4f1b-9e91-c56d5ca63efc",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "e4c45dda-e2ae-45d5-a1ad-1caff221b862"
        },
        "item": {
          "id": "71c22650-0203-41a6-a90c-06a6730fc717",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "943c63f6-3ae9-42b4-99ef-d25ad794cabe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef86132-cf71-477b-b9f3-02ef59ec5a02",
        "cursor": {
          "ref": "d1ebbbf5-6e58-4afd-9f3e-27939ddb309d",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "fa91f6d2-b5d6-4281-98dc-e2c44fb06f28"
        },
        "item": {
          "id": "9ef86132-cf71-477b-b9f3-02ef59ec5a02",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "0a85dfdc-2028-4915-855c-a0a812e01814",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a6660e-7eca-430c-88b6-25434292483e",
        "cursor": {
          "ref": "fe7bba18-ae88-4581-b7a1-01b036668ef6",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "685fd70e-c116-4a94-8794-b6788e2d0966"
        },
        "item": {
          "id": "15a6660e-7eca-430c-88b6-25434292483e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "27650011-f224-4355-83b4-1ab8eea6dbfa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9def83c-159b-449e-9622-2f72c0ba6816",
        "cursor": {
          "ref": "9b5e9bb1-842a-4137-951f-ea0cc1f78021",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "13e1c9a1-8916-48cc-8467-07aa1494f081"
        },
        "item": {
          "id": "f9def83c-159b-449e-9622-2f72c0ba6816",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "3704e8a6-240a-46fd-a90c-5b03f90ca666",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81a6decf-5193-4bd6-a690-3cbdcccac1cc",
        "cursor": {
          "ref": "7a454077-801a-4169-8f53-aad6334a91f4",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c5d1578b-cc0d-4236-b388-aee86c108017"
        },
        "item": {
          "id": "81a6decf-5193-4bd6-a690-3cbdcccac1cc",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "e650e70b-1adf-4fb1-a2c5-df988d89533a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14e7ddb1-a32c-413f-a187-289539556dd4",
        "cursor": {
          "ref": "5f3b55b1-62ee-4a84-a9d5-1a88f2667141",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "3534c96d-6cdc-41ed-b3fd-612c03f341fa"
        },
        "item": {
          "id": "14e7ddb1-a32c-413f-a187-289539556dd4",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "c2749a47-096d-4112-b8cb-5c46e4681719",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 6,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d55caf95-148d-4bb4-801b-3fd0989a8771",
        "cursor": {
          "ref": "efbe3cde-a60e-449d-bcaa-a69c5ed9d954",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "dbbbdc50-e999-4d9e-a16a-c794f1560c9f"
        },
        "item": {
          "id": "d55caf95-148d-4bb4-801b-3fd0989a8771",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "33468b3e-4e6e-4209-bfd0-3816d3203e31",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7f01928-8574-4751-b98d-75c73577d151",
        "cursor": {
          "ref": "fcae554d-53d0-45c4-84bb-b657066373e4",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "4cccdff1-7da5-453f-9ae2-74100ec77719"
        },
        "item": {
          "id": "c7f01928-8574-4751-b98d-75c73577d151",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e364bf0a-1591-43a1-8b84-8e2a0ef66be8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e28e6a58-e310-42d3-8162-eb6e20342b73",
        "cursor": {
          "ref": "eb23af4f-df82-4c05-8100-337b86c3b1e7",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "c4bc42ea-c5db-4002-93e6-d11ba7a7fbb5"
        },
        "item": {
          "id": "e28e6a58-e310-42d3-8162-eb6e20342b73",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "72c61fbe-8276-402d-b4a6-4723b8a1506a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82327695-d77f-46c0-9de2-303d79e64ecf",
        "cursor": {
          "ref": "b4c24c98-84d6-446f-b685-131aba56ac5f",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "372390e2-fe9e-44b1-820c-38354cc53e8a"
        },
        "item": {
          "id": "82327695-d77f-46c0-9de2-303d79e64ecf",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f617977b-38fa-4e95-a443-8ead1284948b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd3c03f-8117-4c4c-a8e8-124e4640f299",
        "cursor": {
          "ref": "f728b1fd-fae2-4208-89a2-3bb7d12a100e",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0d661042-21a8-4529-9692-224ec2cc3e0c"
        },
        "item": {
          "id": "4bd3c03f-8117-4c4c-a8e8-124e4640f299",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6f1e4653-a7e7-4566-84a0-21fe9c328d80",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad1fb026-135b-4d22-9189-166bae7add6c",
        "cursor": {
          "ref": "135165b2-6323-401d-8191-a4dda355265d",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "46ab9d8a-6357-4ae4-bc51-be2da25c0170"
        },
        "item": {
          "id": "ad1fb026-135b-4d22-9189-166bae7add6c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "0a564a61-e7f1-483a-b16b-e63d80406790",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5533fde4-4e3a-457b-81ef-ca92d332a672",
        "cursor": {
          "ref": "d0bd9a60-6c89-420b-8ca6-e4a99ec66ce4",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "9d43c42a-2bfc-4396-b83d-36219bc2d681"
        },
        "item": {
          "id": "5533fde4-4e3a-457b-81ef-ca92d332a672",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "81119f8f-6ad4-4920-9379-101efff62c63",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7662d19e-8d01-4fc0-a672-b537b1f6c934",
        "cursor": {
          "ref": "a4ff8096-b70e-4afd-9bce-5e87bb4abd63",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b70f0a70-5112-4875-a72e-0c810badff6b"
        },
        "item": {
          "id": "7662d19e-8d01-4fc0-a672-b537b1f6c934",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9ac32ab4-fc92-423b-acc2-931f5cdc86fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f896043-a351-460a-9e52-fa32b7c88a7e",
        "cursor": {
          "ref": "fc7d35ee-28bd-4f04-876d-636b9e7b020e",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "9cb4c745-8d64-4068-933d-7f0434bba913"
        },
        "item": {
          "id": "3f896043-a351-460a-9e52-fa32b7c88a7e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "58d8475f-77ed-4f08-8172-5d4ca7cf52cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fbcf7b9-8063-4abc-93be-78d53a5a5258",
        "cursor": {
          "ref": "0f9f4773-79b4-4cb0-b11f-2de7c130804e",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "65d685df-fbd2-476f-aedd-02f0e1d38083"
        },
        "item": {
          "id": "5fbcf7b9-8063-4abc-93be-78d53a5a5258",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ddaaf1ac-cdee-4242-8b84-6dc976ec32b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baf99342-5638-42b3-8aad-de1615351b80",
        "cursor": {
          "ref": "39322483-8a7b-4e00-940a-c3c9662c769d",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e9c10330-079d-4522-9b15-d3287709e697"
        },
        "item": {
          "id": "baf99342-5638-42b3-8aad-de1615351b80",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a73dd901-7725-4f54-bd50-5c706c23af84",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252be24f-19a7-4826-b8a3-a6eec0602988",
        "cursor": {
          "ref": "4156e984-3d69-4c9a-895a-f1dce145ce0d",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d5d808e6-86e2-43b2-b51d-9e9ad711445d"
        },
        "item": {
          "id": "252be24f-19a7-4826-b8a3-a6eec0602988",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9b219d31-f27d-4be2-8f86-df36ae29d22f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb488ff9-bb2a-425d-9f27-663ad426c006",
        "cursor": {
          "ref": "24b81970-8939-4a09-bc94-81dc1797967f",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "da6e4f12-76ac-47d7-878b-1a66cec75703"
        },
        "item": {
          "id": "bb488ff9-bb2a-425d-9f27-663ad426c006",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "076017f9-447b-4da4-bb33-890c10ca0921",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4942a3f-fe61-4b83-b2ad-ef2adf6227d6",
        "cursor": {
          "ref": "596cbefd-7945-4bba-93fb-7b2f18e91af3",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "7b966498-340a-464c-ba11-329e01c8b661"
        },
        "item": {
          "id": "d4942a3f-fe61-4b83-b2ad-ef2adf6227d6",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "af16107b-6927-4bad-ba2b-ce02e6a532e3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef71f55-7490-4c12-be83-5f83cad542b4",
        "cursor": {
          "ref": "16627397-f408-42f1-98c2-93591a9a603a",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "4a7a02de-6a9b-489f-918d-df20539f6346"
        },
        "item": {
          "id": "4ef71f55-7490-4c12-be83-5f83cad542b4",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "12ad2dcd-cf10-4164-adb2-31984ec0d531",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc5d1fac-c341-464d-afb5-c49864b6788c",
        "cursor": {
          "ref": "4247c9cb-30de-4a45-99f4-b83ede3c5f0a",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e6a3d155-3527-4f2b-a30a-7272a1714cd3"
        },
        "item": {
          "id": "cc5d1fac-c341-464d-afb5-c49864b6788c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7f8a6444-ce34-4d3e-9892-b55eb148b01d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5665aebe-6d2b-40d8-bd8e-6255c25e5025",
        "cursor": {
          "ref": "7a3a6a43-efb4-4378-a168-0153eb828262",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a2939609-e776-473a-ad94-3cf891ec184f"
        },
        "item": {
          "id": "5665aebe-6d2b-40d8-bd8e-6255c25e5025",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "37a13ec9-e196-4674-8994-91c812257dd2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cfa7441-7dbe-44ac-8966-02e6669add8d",
        "cursor": {
          "ref": "d6472e9a-5085-4ed7-81f7-ecaf17537d36",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "5c5abeac-92a5-49be-8eed-b9d0308f3a4f"
        },
        "item": {
          "id": "9cfa7441-7dbe-44ac-8966-02e6669add8d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "2e2a6520-f18f-4a3a-9a98-e1a5b508f53e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3018eb0a-2573-440e-9ec5-0d18d00805d2",
        "cursor": {
          "ref": "ed210d73-217a-43ba-b140-74b064850319",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "3cafeeb8-0bc5-4bc2-bf96-0eacfadef3c0"
        },
        "item": {
          "id": "3018eb0a-2573-440e-9ec5-0d18d00805d2",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "1f725f77-29d4-482c-bdc6-544bfdeca7ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f1be864-cc8a-4345-ad35-d1179f9d199c",
        "cursor": {
          "ref": "29486c95-f924-49ca-981b-cf71897fa7a0",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "bc8666b3-f03e-4c98-9962-775b06e7396a"
        },
        "item": {
          "id": "9f1be864-cc8a-4345-ad35-d1179f9d199c",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c896f9d2-d5f3-4332-9107-6e6a193b540c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adf966af-cb10-4308-a8a1-58232bb22fea",
        "cursor": {
          "ref": "151fb04e-7d4c-4cae-b8d7-a5709ae3dca0",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "185c26bf-9852-4805-a7f9-c60be557f652"
        },
        "item": {
          "id": "adf966af-cb10-4308-a8a1-58232bb22fea",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "01485cf4-18b1-4d82-976e-6002fab7f088",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61ecf982-1415-4387-a417-8b92e7361345",
        "cursor": {
          "ref": "18ab2594-2fca-4f2e-bd1a-f75ae48360a1",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "2cfc4b4c-e9d8-47b1-b7e7-45415437c75f"
        },
        "item": {
          "id": "61ecf982-1415-4387-a417-8b92e7361345",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3dedd1f3-2fa4-4650-9874-048d2d7ed8b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57605d7f-df70-435a-8cc6-819b43735b4f",
        "cursor": {
          "ref": "0d618780-961c-437c-b631-602833fa7b8b",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "1ea1bfd2-916e-49b2-9595-7aa65a76f9b9"
        },
        "item": {
          "id": "57605d7f-df70-435a-8cc6-819b43735b4f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "fc053d3c-02de-473f-9526-8b2b5996d361",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b962a77-c62d-48e0-9f81-4ce07b69a8ce",
        "cursor": {
          "ref": "a94205ce-23b5-4be0-b9a7-908e77781b05",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "a860c7fa-8a7c-4bcf-b176-4a10f5649b70"
        },
        "item": {
          "id": "7b962a77-c62d-48e0-9f81-4ce07b69a8ce",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "422af99c-28be-4e6b-bdfa-709902ab7ba8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b44155-a41f-4a31-954d-bbd74678c717",
        "cursor": {
          "ref": "89c92eb3-8891-4d51-83bc-84f3a2452a15",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "fa2f6deb-f3b1-4869-912d-742171340092"
        },
        "item": {
          "id": "f9b44155-a41f-4a31-954d-bbd74678c717",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "8537b1ae-7522-4265-b742-9ec4b0bdef5c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4d8468d-06c4-4811-a290-60ebe1b012d6",
        "cursor": {
          "ref": "9e7d8a6d-90c4-458a-a900-3a5fd5991422",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6461ac85-01f2-4e06-8487-a847bea2d8e5"
        },
        "item": {
          "id": "c4d8468d-06c4-4811-a290-60ebe1b012d6",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "d846b98a-d269-455c-9676-5d3b8dbefa04",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29469a57-ebc8-45df-bb62-90664f9b6d97",
        "cursor": {
          "ref": "740939b7-ae21-45df-a693-027ad0744abd",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "05c39e58-b70a-4fff-a0f7-f8f9dc0b513a"
        },
        "item": {
          "id": "29469a57-ebc8-45df-bb62-90664f9b6d97",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "6e4b5d94-021e-4a87-b46f-6263d543da2c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81979aae-950b-4dcf-b2cf-db324607da1c",
        "cursor": {
          "ref": "765e4402-882e-46cd-9e42-7dd19fe0128a",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "bd913315-dc65-40b8-a2af-6c29d2b0c934"
        },
        "item": {
          "id": "81979aae-950b-4dcf-b2cf-db324607da1c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "124d5abf-79c8-4ec9-b780-092c0f969a9f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e2a9e5-e3c1-4dce-a855-e92314c356b2",
        "cursor": {
          "ref": "9bdd4039-c6cf-4816-8a8b-3126aad00a25",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "42ba3a58-464c-4acc-9b54-2e5d6c8ccaf0"
        },
        "item": {
          "id": "74e2a9e5-e3c1-4dce-a855-e92314c356b2",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "21e4229c-6b3b-44a4-8948-5c327f21e2c1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0bf231a-2917-482f-b0b4-cc8b0f1cbea8",
        "cursor": {
          "ref": "1be78be2-e5c4-47db-a99f-892f27ae2d60",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1b6e730e-874a-47cc-9a5a-a1efc0bfea94"
        },
        "item": {
          "id": "d0bf231a-2917-482f-b0b4-cc8b0f1cbea8",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "280e1359-982c-415e-ae09-cfbf44518eda",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c139676e-de10-4d81-bf1d-2eb4e95ab8d3",
        "cursor": {
          "ref": "6050206b-0545-492e-9299-2686bd2793d6",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "8fb068bc-7737-4fbb-9190-283c614a7f8c"
        },
        "item": {
          "id": "c139676e-de10-4d81-bf1d-2eb4e95ab8d3",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "be32dbe1-017d-4261-985b-7f49eca0b9ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ae9e3ca-818c-4f49-94fa-d0b31d9ae6d8",
        "cursor": {
          "ref": "af2885be-c3f2-4b50-9539-c8cbd8cf25e4",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d512f49e-120a-4005-b2d6-2f2a309d7dcc"
        },
        "item": {
          "id": "8ae9e3ca-818c-4f49-94fa-d0b31d9ae6d8",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "24142ae2-4141-4457-b9e6-69ef1c32716b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "527be884-3e3c-4193-b6c6-a70a5ec0aa8b",
        "cursor": {
          "ref": "2c9d5844-3f7a-4508-9b65-98603e336a60",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "43929267-41b2-45ca-b1b6-bca4792377ec"
        },
        "item": {
          "id": "527be884-3e3c-4193-b6c6-a70a5ec0aa8b",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5156f3eb-6cf7-4797-bfd5-b6ce4fca2c98",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2294a79-f7c0-4383-84bd-a9931e465c4e",
        "cursor": {
          "ref": "5c794856-7f63-43b2-b695-6f20cd48789f",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "62cfc0de-81ed-4c03-9274-5257c660e554"
        },
        "item": {
          "id": "f2294a79-f7c0-4383-84bd-a9931e465c4e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "882fdf37-1d26-43ac-9626-833c3832b5b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a318bd0f-feb0-4088-a38d-a27b01ee57a1",
        "cursor": {
          "ref": "44732f7c-235e-4d42-9e66-f41b5eb2a87b",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d4a42673-f553-4435-a1ae-89c3e48ef741"
        },
        "item": {
          "id": "a318bd0f-feb0-4088-a38d-a27b01ee57a1",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "5fb7030b-b253-4ba6-87f7-45c88cf4a10d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58a9e5fd-6865-4d22-957e-fb0d864c0f19",
        "cursor": {
          "ref": "d2c7e087-0a40-4090-bd01-69c27c318883",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "040c11d0-017a-40c3-bd6c-c3bab1f42584"
        },
        "item": {
          "id": "58a9e5fd-6865-4d22-957e-fb0d864c0f19",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "231f9796-af81-4c20-a851-031c77e848f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a725888-d21e-4ab4-b21e-6ae1da448569",
        "cursor": {
          "ref": "4bf8ab41-16d7-41f3-9d98-061b6160698b",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "c437a376-8345-4f51-bd91-1c87cb1fba5b"
        },
        "item": {
          "id": "2a725888-d21e-4ab4-b21e-6ae1da448569",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "e468aace-6e56-4dd9-99b3-b55bcabbd933",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef88748c-aba1-4cb4-9103-5fe028100d47",
        "cursor": {
          "ref": "e9a60a21-225f-4b91-b2b1-717a15df2f29",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "57fb1ee9-22f8-410e-a717-fc46c6854db7"
        },
        "item": {
          "id": "ef88748c-aba1-4cb4-9103-5fe028100d47",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "d809f7cb-97b2-458c-9896-94105167f1bf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b74cc5d-1d9a-48bd-b222-833bc4426c2f",
        "cursor": {
          "ref": "704ee664-3806-4de7-bc77-4edf68bce065",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "34fba1b6-0b09-4e66-b457-19fe0df67171"
        },
        "item": {
          "id": "1b74cc5d-1d9a-48bd-b222-833bc4426c2f",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "2f8cf8e8-ea77-4c37-81f8-6f2f6532396f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90dfb9e5-9364-4771-b82b-50a286a20488",
        "cursor": {
          "ref": "f6c09d13-cd29-4ad7-a1e1-76c930d3be02",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e110f6b3-e8d5-4065-a54e-4eb417095c3c"
        },
        "item": {
          "id": "90dfb9e5-9364-4771-b82b-50a286a20488",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1d6616a0-4b28-4aaa-a030-460778f5127c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44cecec4-a1cc-43c5-8491-7fe438c38d95",
        "cursor": {
          "ref": "046c11c3-50ce-4f36-b45a-4b0e738c9aa0",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b4a20ca6-9db0-46cf-b64a-9b50b698cd61"
        },
        "item": {
          "id": "44cecec4-a1cc-43c5-8491-7fe438c38d95",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "397e3cd7-a2c7-4731-9aaa-437af1b308a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "b7f55808-9068-426f-90a7-09066ca83928",
        "cursor": {
          "ref": "7c154bc1-4a82-412c-a88c-709c72e59884",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ba6784f2-505f-4ce0-9b23-1deab69b51b9"
        },
        "item": {
          "id": "b7f55808-9068-426f-90a7-09066ca83928",
          "name": "credentials_verify"
        },
        "response": {
          "id": "216cbbb9-b398-4488-a972-a8338125e572",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "a753b673-83a2-44f9-8c49-bb8a5f174772",
        "cursor": {
          "ref": "1141730a-e37d-4dd3-9fae-446bb6de25da",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "5c89eca2-54d6-420b-abc3-e7efba0daf2d"
        },
        "item": {
          "id": "a753b673-83a2-44f9-8c49-bb8a5f174772",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "26b9e6ca-ccec-4673-986b-04ef4ca7c589",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "4ee68383-6863-499a-8a1f-80ee8ff284b9",
        "cursor": {
          "ref": "8eab8638-652c-45db-99bc-9a304167ec54",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c17c697f-c6c3-4865-90f6-ea1c9a04fb00"
        },
        "item": {
          "id": "4ee68383-6863-499a-8a1f-80ee8ff284b9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "12fc9f20-df70-46bb-a37d-b79b46346bad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 2,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ee68383-6863-499a-8a1f-80ee8ff284b9",
        "cursor": {
          "ref": "8eab8638-652c-45db-99bc-9a304167ec54",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c17c697f-c6c3-4865-90f6-ea1c9a04fb00"
        },
        "item": {
          "id": "4ee68383-6863-499a-8a1f-80ee8ff284b9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "12fc9f20-df70-46bb-a37d-b79b46346bad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 2,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87dd2baf-2c52-4889-8c35-be1f3e88e4cf",
        "cursor": {
          "ref": "030f8038-e79d-4797-8989-b627b6ba158d",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f8c22326-6174-4ea6-a8c3-842ada701771"
        },
        "item": {
          "id": "87dd2baf-2c52-4889-8c35-be1f3e88e4cf",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d59ed6c7-e6cf-403b-bbb1-6775334cf018",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc7cb114-9e0c-4a36-b5b9-c7011e12b047",
        "cursor": {
          "ref": "aef781fc-e1b5-4860-96c9-ca6eda513d43",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c5331dd4-24bd-4afb-b016-39690de721dc"
        },
        "item": {
          "id": "cc7cb114-9e0c-4a36-b5b9-c7011e12b047",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b40bfd75-0d8f-4307-8bb3-08f81c2f2103",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}