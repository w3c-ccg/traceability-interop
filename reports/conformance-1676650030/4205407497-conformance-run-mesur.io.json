{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9a237b50-28e2-4137-961f-6015995f997f",
        "name": "Clear Cache",
        "item": [
          {
            "id": "685a07f6-343e-4e28-ac51-18ec85cae517",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2c1ec459-d9b4-4013-8578-ee7e65b9df67",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "93fdd179-9da4-4a18-8ac9-69697ba4096e"
                }
              }
            ]
          },
          {
            "id": "e8297b2b-6854-4ab2-8a07-21f9f845d2a3",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d01d3ebc-8e80-4a1d-a212-1d764178f897",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a25b517f-d000-44a9-bf0b-cfa85d3b97a2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ab195c19-6fdd-42d5-a1cf-7361f6ba4ab0",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "3b8c8519-7c30-4cbc-a9e8-f60c5e8fc649",
            "name": "Positive Testing",
            "item": [
              {
                "id": "09184730-5244-4a8c-ba0c-cb79327cb0f5",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b9eddad-7052-497a-b4f8-191483d3cb36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "abe77da0-5a11-407d-b1ca-217b237e31f2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f14216c3-9146-4eca-8b57-fc9c76a92b3d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7b5e7566-e64b-42a7-9bf8-6a3b0986a4b7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a04fb4bc-af9c-4641-9c4d-c8e0fde3f642",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1e2cd069-29d8-4a88-a1ca-b661fed6e89d"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4f57c87e-ee9a-4e08-868e-95fc4c58bdd7",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "47e3fd82-eea3-447f-84b5-bf8b73ddc396"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3e2442f0-d457-4dc7-a710-339fabfac76a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b34d71fa-e06d-4a57-ab10-77814ca5f7e4"
            }
          }
        ]
      },
      {
        "id": "e7a30c1b-0c05-4ba8-96a5-62fc58245efb",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "93766c2f-0b28-4bdd-b5c6-885e61c7d1e4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4ffe1a4f-1738-4acc-b6da-96516689fc07",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "196aa5c1-9ba0-4b07-b774-c4a817658184",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03957626-cbfc-41b0-bf85-9e758e280e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e387a80b-ff1b-4844-b4b0-c4c2f88e03d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e70798-5ee3-4e54-81c0-84be0dec3fbd",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00dc8c44-ca16-4673-855f-14dbbd38c13d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bdb598c5-7586-44c3-94b8-504dad839bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b8cb41a-4f8e-414c-adaa-eb24956af38c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b6a25ef-0b5e-4875-9829-509de957d856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "adc21090-cf60-4cb4-931a-86c768fd073b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bae527cf-0c6c-49ff-b929-3dd97c8e1f4e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0c257ed7-ec70-4056-a31b-ba46860e7ec8",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a518f7c8-e29d-4674-8144-17ee5b8005fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4ddf549f-158b-42b4-9e57-8f9030a3491a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07449302-9a5b-4bff-b4fc-6213c3e354cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7ac430e-09af-43ee-9c8e-348b043928c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6fe5ad0-c254-49d7-bee7-a6c23ed81f05",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc26e476-7881-4809-a003-8df8f0070f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7dc9bd05-e8f2-4f12-a263-ffbed91fe953"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de32f379-8e78-4a5a-bd15-9ef7a36269b6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "7335e1ea-c801-49cb-ab2b-6e56831d54de"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8697f834-2e46-4146-90b4-1615ce0c6fc2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cccb4676-d16a-42cf-84ef-adb8567c8891",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "83d23c8b-8363-46c8-8aab-b90a5f001caa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b8a0cd88-6f0e-4abc-985d-42285137ab62"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4c568f10-32ac-41a5-b35f-43518862f3bc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "8b6cff36-1517-4490-aef0-9ab1754fb6cc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "313deca6-112f-43a9-b75e-bd6a9230bb67",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c5c98e02-a8bf-4350-bda1-98ec279bbc19"
            }
          }
        ]
      },
      {
        "id": "9d8cf648-0f05-4659-a997-6efc8bea5751",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "92941294-1ef2-43ee-bd21-770deaf39fd3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "00082474-962b-4059-a132-aede7e59bb11",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ecf12037-7f36-442c-b38a-2200cb75ca01",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "197a2020-5330-4e38-9212-ca6344856347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41c47989-2bee-49ed-978a-f0a2b660e1a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d305e32a-ba6f-4544-9e23-159bca8eae95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50730292-95da-4221-ba2d-04e9309d3a10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "014673ab-0c42-4387-b1d6-4ba227ffdae9",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb574fe3-2841-4405-826e-9aff3ba2810e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d163002-e76b-412c-994b-e9af62d92ec9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d533510f-e49f-4f8a-b406-141eda7dfa4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7551ae71-851d-4d84-ad47-c776e08fd043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "090c7592-7aa9-43dd-9291-cd6093b91fa9",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9168dbee-7a20-48f5-a72b-5371eb87922e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d55ccd1d-a3f3-4efd-9fcb-ff3bb1146ae3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05903100-8176-4a0c-b8c5-0be74fd85f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7cd6ebe-ac03-4d22-8b6b-8731e41495e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "569a36c9-e635-43cb-8ea6-667cabfad3ce",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "124d4348-6ba9-409a-9548-06a0d63d49d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eb8e2d7-7b7f-4d2b-8cb7-4f8ff64823ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f422bb9-1f89-48b9-855a-4c5c05bf1f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62a6e748-1a58-4308-9dcc-9c063e0fdc59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af537da-170b-4555-99f0-2da644f96b21",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37f82782-ca97-420d-b49a-92d40a8d34e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d241d32-60d5-40e9-95d7-ee4641803e96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63dfecb-8846-4d28-80dc-c16779352cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a29290d-9752-4e2b-8f28-4e59cb8fe1cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5742640f-7aaf-4233-87b7-0f915d878a09",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e896a6d-f2aa-4e48-aea0-82824d1b7171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d30adb45-1fe7-4145-b0e8-19de8eae76f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9872a9e-f354-44d3-b5eb-0e5fd6e46e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47a18e6b-e830-411e-bf8a-4129dec5d8a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "089640f8-7d3b-44c6-9e82-1ef3bf4c3a91",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "272b7a6e-c6ac-4892-b989-19862d168cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c04f9a3-5934-437d-8a21-3369647c3856"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69c2c2bd-9914-44a3-a73f-c181d6a7cff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d227a510-dfe6-4ff2-861c-16c8b2f520ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a2b7746-e39b-4de4-bb32-c58df489b0c3",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b469a3e9-7e0f-47f7-a95e-cc883a4d053f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e4b6483-e459-4d9c-8712-a752bc7cc896"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b3f7e72-d337-42ae-b2d8-db56d2999e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e102f77b-cbc1-4faa-9582-8edac02ff2d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "777ddf2b-9e2e-46d7-a2a1-6802aa1c074b",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33885411-e591-49b4-98e9-5463364865e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a846876b-084f-4c85-abf6-c32a99e90435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f016759-c984-426b-b531-527137727fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f05ccb87-cd37-4146-bda4-b09175f94a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f48b45-2e77-4ac9-93e4-aabd5b47380d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "232c8f07-f1ac-4b85-be0a-a1b726956192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97056054-8cc6-4109-9380-e9c2348da99b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7677bef-e1e9-4a94-8be1-4084d9624783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4866dbd1-6fb0-479a-bae6-52a8f885531e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a8fe01d-789c-4111-aa6f-d440def3c0aa",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df6b748-a76e-4f1a-adac-f324b654e40c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62dd71a9-b045-4e73-8831-d58bd29a0503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c0334d1-719b-40aa-aa49-407cdcac0de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92689f9f-750c-4c85-a12e-1bb066e339c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a91992c5-ad66-4d44-8742-ed351bc9f023",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9727f33a-afff-4ac4-a37b-3cf364af26ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d79b665-aa8b-4db6-aeab-54121ec7cbaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e250ebb6-2980-45fc-9d9f-54d4712e1e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2b1a45d3-9099-415a-9c9a-7231fb65c802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d938ab36-8bb6-4370-826b-533ba31f71b1",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00e29ce1-8f55-41fa-ae6f-2cdd9021a438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3b05d41-dc76-494a-aa29-c6a468a1b034"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad2297cf-63ff-451e-84be-5c2ec9c0d5e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "70db0d51-5b5f-4fc9-bedf-2692ab6b3620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54429b2a-38bd-4573-86a0-a96aa5e2d1c1",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62176a8b-64e0-4d5f-b84b-fc3805fc916e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd14999c-8e80-460e-a9b2-803adeb24b44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be9edf2e-ad1f-4987-8d20-ed29ea00e0a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5512630-82c0-4a35-b79f-ab78a0140b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3ebce0f-32d2-4b7e-87c4-7a26db4898d9",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a26db03e-4b8f-4ca5-9ed9-481c560dd3cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10a474e1-6b3b-4d89-90d1-f50935cd0127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4e95b8b-3b98-4f5e-8f23-d0b5f32056a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3da56954-d36b-49b7-b2a9-9239b73f1c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f8caf5-e221-43dc-b68c-702c76434a7c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c8ccfb9-e444-4268-af79-f4c14ab343cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f90739c-9d3e-44fd-a06a-76fa5210cccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8317bc73-ac07-49bb-a23b-1504dda1a3a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0811a807-ebec-410c-926f-1373268ccfb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec117f6b-3534-422e-885a-0ce83893c7f5",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "382ef5c2-0f0e-4966-a84e-7a7195beb836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18a9d674-55bc-445b-b25c-35d24ca230db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd95560-b81c-4738-808d-57257b600247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2fd00132-2f88-4945-af43-0e04fdfc8bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c78d7a11-ef20-4f4b-a0e4-2e344abcecfa",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af6e4469-3aaf-402e-887d-07c65f4c2439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db5b862d-57a5-4d10-abf5-01a25303a9d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc5a307-27d6-4ca3-a21e-d0471aa3b87b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd565024-46ea-40f1-8581-9e3832aa0102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b646adc7-46d9-4a36-ac52-2e1db6142a82",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c613c2fb-4d21-4b16-a581-116ab126d946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "225bb0b9-0ced-4461-a837-136bae06ed54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eac0e32a-abe4-4160-a4a9-e0fc47e3c7ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb5e687f-ef06-4c72-b904-9a5f0d52281a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "427a9772-237b-471b-a8ff-a2ef81a0c4c2",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4393bb9a-8f16-4d22-919e-5b86ddc854f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "682006e2-2505-4e9a-a042-10388273cd54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c98d0ca-367a-46ee-8ffc-b11b00110c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "07a68675-6d60-409a-b4ac-9a50b2bab127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b21b8673-a382-4803-a6b6-26f2d3c0906c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "876fabc8-97af-4694-9bfd-41dc56a7633b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5903281a-18ec-4d53-91b8-5ed011d3e45a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b7604b3-1148-488b-9f93-4ad3de5904fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "52bf742a-1342-485e-9637-a93482fefd5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "534b6f1a-7d40-4b2d-917f-79def634dff3",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "750ca8c5-461c-46bb-b16d-56e2bf354815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b840654-cbec-4035-b9d2-e5b16e335d80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb277737-5b12-4c1b-99c2-dc6f26b690c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "53d75ccf-9b2a-4694-b119-df9523c176f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040dac75-03ed-4bde-957f-fea7047edcd8",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cedec09-b580-4cfb-9b73-4f39078712b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cb5aae4-3878-4900-bb3f-bbd5ef430f8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dfec3b0-0a26-4577-9944-96edc3c8ae94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4719466b-6002-495c-8990-0df0efcce21a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb0517b9-a3ca-45dc-8bc6-85b47aed615e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35f53536-bec0-49ab-87b8-ec99310d6d5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a5ee049-68de-41a3-9b75-271b921db3eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "574b9809-5478-405b-9236-7e138453e3f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "393ba358-d44d-4a92-8f95-0588fdb6b7e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93253350-8094-4951-a355-14c14958c7df",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c033c6-6da3-4b46-a714-1d4e6006d400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc66ca56-6e26-4dfa-8b04-1dfb6b4ae426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcf7e95a-86c9-4666-8123-006884d7e0de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "286c5368-20c4-424e-a18b-d0a606d5c9a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d220ecdd-9f19-4283-8511-7c06f038f632",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13c92ec-7208-4199-9dd6-7fe0bfd4de5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87554c75-47da-449c-8701-679bbbfc5f96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b134fe0-84a3-4f7d-ae71-bc98a4202cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ee10a57-41a4-4457-aa3e-126d220085a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae346e1d-734e-4d66-aee6-0466115c23fd",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b8eef75-40c1-4d05-b022-ec1940eb74ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "457ceb7e-7eca-40d0-ba74-03d297770555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26cb535b-3aa2-4c3d-a3b5-0c9fbb61684a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "458000ec-82b9-48a8-a2c8-a9ebe6c3eda2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edeb91b9-e682-4360-9d12-d9fe1055aced",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32cacb1f-16c6-471a-8d5c-fe925a8a0681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a612f4e-7fe4-4c69-9ccf-d505391167a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e02973ba-60e9-491e-affd-eca0b499ea59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1269323-eaa3-4b3e-b82b-0315ea30b9f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e530f5-ceb1-4152-8397-7652cc1c5704",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9c51ce6-879f-4a1e-a5d7-a17897e5d870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f110ddc2-9ec7-4779-a716-c04a83c64252"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13c042f-7dd5-489a-b342-71acbea9150a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6dc5501c-f32c-44ea-9fe7-037d0acb3f30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e6b0f81-ded9-4b59-a1a5-411287ec6f0b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b975304a-3e3f-45a7-ba0a-fa8c274a3b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b175aac5-e67e-47a0-abbf-dc1cbd77a9da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8122600-dd84-4016-82da-3908efacb556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a4faf40-fe52-479b-bf21-7ef2b84900a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d28ca872-a380-423b-9182-7de2894f124b",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05679ab4-74a8-496c-8bb5-82983652d02c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4534a3c-ecf3-4142-b985-82d8a12bd210"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "568493be-5826-4e46-a78e-106a608b669f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8e33c84-40a0-4d5a-b6a6-6ec35319a95b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73241d03-337e-401e-909f-f1dec01223bd",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d03a6046-78ba-4552-9d7f-39c57a12fb94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdcedf9e-0111-4bbe-b85e-def155c51105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26096b7-c058-4d01-bb9c-356210b0f185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dff28ad2-9c14-47d6-9bae-9e04272a33ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da849b08-f647-434b-beb1-87f5d306d041",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "988734cb-eaff-41dd-9d1e-09e2d9f54e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "586de16c-564a-4118-9116-d8c47879f08f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d94611de-ec57-4903-b84c-00cf734fbb80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2adb1483-f677-485c-b937-53d60fce8907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12aa2ec3-2c81-432b-aa32-572e40a619d5",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a756606-5eff-4d2a-bb0c-3f135a23f821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c01d5fd-5901-464d-b29a-c5a300cab694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9377860-b684-4d52-bb23-b91628d6f3e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bcc6b77-61b0-4dc7-a81b-6e6b982350db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "015f8eec-3b78-451d-aa5b-da4e01d68fad",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d513e87-7cb5-442d-b3c7-e71171fbca36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "063ec2d6-42e5-4704-bc5f-49c51d22f991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9f4b676-3092-4d76-8daa-125f85a1df52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1637780-f0bf-4349-94c2-9123250343cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "136da76f-1f61-46ff-8921-4966c36ef6d4",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5426c703-a9f3-4fd6-b59f-157750d39d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c71c0782-6e3b-4cc3-be30-15c9220ea9e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce73f6fe-eb0e-4241-b6e1-7c5312f1d436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "d08f2262-1226-4164-9281-ac61fc8dd5c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be8a7487-68be-4678-b19c-5431ab84877f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e0d0a8f-b20d-4262-b940-ddf3013ed1e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a48c3c6-6ada-43bf-8d79-6c88fd9fbe64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7770685-399c-4e5a-9a2e-3e726bbe36ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "26f1d5a6-d57e-4bd2-a34d-50fa0313bf72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10f372e1-3e6f-4ef9-a0cb-137a266dc874",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27d61e04-0d72-4a1e-9fca-edcb424fc913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "110b46c8-8e53-46c4-9267-bd6ac8311ab9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f02895c-9849-40f4-9f47-e262c08cdb4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "446c7dee-c2ce-4216-8398-89046aa42bfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f79312a-c150-441e-ba51-42651812dada",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71dfd64b-c21f-4eed-91c4-d1943e7e6345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2ea9ba0-3651-45c5-93ea-7c7a196946d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86dc63c6-f03a-4cf1-9c36-279e645306be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "824058c0-f03e-4170-bf6a-b3830f877b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5fae470-382d-4bd0-b529-dd8b13885efe",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca9982c-7671-40fa-a086-d90207b70b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a72266c0-1163-4f28-bea9-8a3fd93620f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3530c3b6-8432-4923-9f04-2dcd22042534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "03a5e7d2-1265-4118-9f75-100fc6735fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f91347-1b25-4fed-bf72-266f6659feda",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7209278d-f6d1-4f58-947c-748d3b4f568b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "227ffb0b-14e8-417b-840c-43dd27f93ec4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "617a5fb3-ce84-44c5-9189-8eb4c0c7d8b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b5395138-b038-45e0-924f-7e5538aba9c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "669ba68f-e8da-42c0-8dac-cbf23e843cfa",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8faa2e3d-da9b-47f0-97b8-ed80e64c2094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df975b3d-d9f5-40ea-934d-f59cb1b6782a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ddcab8-8246-4e99-9d2e-dd9f9bdf000c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2480ff24-4093-4302-b5e3-c514e668aafc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7666ddc5-820a-4497-b268-8cca5b6df2e5",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef377d60-e962-40f7-af3b-bf3491afd57d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8bac885-6bb6-4174-8109-a3c5366b3e9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd5d6f0a-35e0-4cb5-b3e4-38140b43ded6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "e4fa2947-bf98-4629-babb-7986c2ece2b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f5f83d2-e567-4b83-9242-422afd603dc6",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eeff6bf-275d-4269-82b0-05a259905003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbfbe975-573f-48cc-aed7-c60067c207ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b1bb1d6-870c-4635-9813-3e3c0e54314f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce8afe35-e530-49bc-8568-f879a2a0aa72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44d55e4f-b038-4722-9d6a-df2141c9a0b3",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c108738c-0647-4a4d-a9c5-279f7f337615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44527773-b99c-4344-b5bd-13902c92e84f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "892a0ba8-72d8-4f96-8466-bd19da65bce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d5d19ad-fa45-47e9-adf7-22fc927d6ad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c358c7c-b5b7-4bd6-bda3-b25d046adabb",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c84a7c-86bf-4700-a695-c2671afe7e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "394d01ae-f201-45e6-ba5d-673236542348"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be48e7fc-92a8-407a-ac9f-20d460c6d936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8e55697-4586-4ecb-9310-480b7175b96e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8356bda9-f170-4e17-9b64-8a72496adeaf",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6fe2540-a6d9-4ea0-bd4e-7437367d13c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c285ed5-bda4-4393-bdec-3485616f17b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "066b33c5-779c-46f0-9af8-98355eadba3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9de99387-d1c9-4322-97ea-f3bf3ed54870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0e505b-def8-4996-aa54-74772bde1a98",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3207399e-c3ca-4b87-a979-c55ee3e991ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0e3405c-5d81-4144-9164-4a918dc4caf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2196381-63bb-485f-804d-622e78133060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "afae7a6a-f933-4e18-8a25-8a87758d7a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5cdc455-913a-4b16-8aae-f8596879d66d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a7e556b-81c4-4bb7-aafd-c5cf34cd3ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68b0e901-a35e-431c-9c1b-578d348d6c0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f776ee2-6ce3-4f8f-b1f5-6a9fbd4fe880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2827a48e-c4a9-42a4-868a-8cc4e64c723a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f23c4436-42f9-4def-adee-552276a03540",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84004c0f-bd05-4b8a-91f4-30d52927fe2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2afecd5a-65ae-481d-9f18-ba39637bc6d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c4ecf62-4d3a-4ecb-aea9-3cb15fd3cf2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2913e54-b254-4f4c-95b6-1e3628303801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c636d88f-f02e-43db-946e-d3dc52b64f65",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af18db2d-6399-49be-beaf-816ca537c254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e8d3666-ea22-4581-a615-cc4568df38cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d9214bf-b78c-4dcd-9cd0-58939f8788fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b2a8cc1e-e0e2-4b75-94df-a3d50455f3c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5385b737-4b14-49ae-af7c-c3e6da220f4b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ebb8f2b-3abe-41d5-9aa6-b67ec38f8ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "195a83c4-68e4-4b70-a564-da59c444c7dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff799c87-be63-4065-8ce8-f42d3140bd91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "e03d1f5d-218b-4862-9868-080dbc64920b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "484410ed-89bd-414b-83b7-761487c9c8dc",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d49bbb2d-ea4f-4ecf-a9de-39cf3a8f30c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0a48b64-5361-45dd-b99a-4157f449a9e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e650a30-2326-40ef-bcda-d84ac5cce051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f059017b-1cde-470e-baf1-41a9d3c2dc17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e8aa34-e381-473a-80ad-766361ed0078",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b96564c-ca6f-4b12-84d7-fd96f0e16226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dc5b92d-4cc8-484b-b669-8ba3642ab214"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be1c7175-2e1f-4bcc-b4cc-2a0430d77b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "683a5e4c-c38b-427b-8aeb-78f75d14249b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaad8270-0a25-479b-b2f7-dc4a4ac871a1",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e3db05a-6091-4d68-a6d7-5d7dea56b28c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55039bb9-ed2e-4ceb-bf99-49e49236c815"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7a77454-c5b2-4830-a09b-c2ef6c70a5d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3f45ebd-c292-4494-b870-3a53a8a60009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c73ab0ef-be6c-490e-b201-5a332ef935c5",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e322498-9cc7-4fa9-91d4-fa5a7477e839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6b1744a-9eed-4139-80e2-51d23222ae8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f6f4eb-d124-46b3-8a9b-5c0e28b65272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab87ded8-1850-4184-9bbd-bf4022cb6401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba0ad651-4875-47e6-885e-4748e065d1f6",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb13b064-0c6d-4293-9450-a37ff3f7bf66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9f9bd08-1cd8-41fb-b878-b8a3a4fe5c51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bbe8a62-f651-4a89-9f6d-e948331cd3a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5d9b8664-e4b2-4ea8-ac79-c8ec3fc775dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9810ddb1-0ab8-456d-9647-1548042aae97",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c024cbda-f9b4-44e1-83e3-c3b8cc341dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6be7581b-40e2-4ee9-9d74-9564d3ec46fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "589d35eb-df5a-4bbd-badc-aff452ab5d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "acbd0265-d336-4e17-8568-81174f873aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62dd62d3-b5b7-431f-830f-98c55e955269",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e30e19-b483-4f62-8ae6-de5f8508f1fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6ff7030-85a4-410e-9d67-23e82a166de0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4af9d567-bd87-45aa-97e1-0a12bca6f9c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "86ccb59d-5e68-4350-992d-eacfb80acdbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f27873eb-e979-40fc-868e-4309b9df6d44",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "045b1aa4-c34a-4bf9-a455-fbf3f85f81a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49257d81-5520-4e76-8217-10c4b0bd0001"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d262db-7ca8-485e-8c57-3d5be9941694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e1e73fa-b55a-4c62-bea2-5bf7d196d187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "670e128a-b5cb-414c-8a19-212f774ac17f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d51a77d-fc52-4ec8-8edf-911e97b7e760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c157444-a8e0-4b06-9671-8924a20d16f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d86f39f8-aa0a-4913-9281-5c6390d0f4ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "81803439-2c28-474d-88f8-e450fae5198d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d996e73-dfd8-4cb9-a072-7d5381d34473",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba63a351-6d17-44b1-9aac-ef86cd76b5c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9629677f-cb5b-441d-87cf-2f5838d492e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "977bfcb7-518b-49fe-bce9-eb4160bcd210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c7ea4dea-0803-4363-bcd1-036ad3534a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "462e4be4-c50e-4e61-9735-11ab8d38bc60",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c479026e-7447-4c2b-9c1f-adbc2c89d081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5abf2b03-f76d-49f1-b564-f9538f2987eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d9193b-60fb-4ce3-b2c4-d7fd35ffcc35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "11e80fcc-1ae4-43bc-9880-85bf61da5cd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d64303-1567-47fd-a2b8-d0ea24591e04",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de43d3b-2b9d-47b6-b118-5eb5df4fa327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "989ad25b-05a9-435a-89bd-6f00faa7de67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75346eb4-d688-40f8-bb46-b7f38ffe6d17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "92fcfd23-b1ae-4fd4-839a-abf8c920d302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0118adca-178c-4a11-a23f-02115def02e9",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c51e229e-d01a-4511-80e3-1af80efd1cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f6f318d-b0ab-480a-a746-78fa7f7cff12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86474cd5-50cb-42a4-ab4c-4ec50d50181c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "967c56dd-2d8f-4c81-bc5d-3f0c0ff01b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e381d68a-1ce9-4b19-9d2d-6a810b3c6bee",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc49149-7422-429f-807f-4f6870baf7a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "563e7a5a-b085-4a20-8a76-a1a4d651f205"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f28467de-964e-4aca-8c07-993cc41a1f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1e92659-83d7-4694-bb11-a18b70200b09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64c777d1-b0c4-4ee6-be56-3ac4c0814190",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4209514d-eb77-4ce8-9f36-a9af140181a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b3f0340-3695-4131-ba3b-ca299aaeed81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e84dddbc-8584-4aa5-a686-9df3701cd623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca665ef7-7962-43c7-94a8-c0faf319f513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf53fd1-7072-43a1-b561-891e09779261",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb663e02-71c4-4772-9cae-85d3d4582add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9f64993-31ee-441d-9bdd-0d234a7173ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "718fa5f9-262d-4ed1-bbb4-53cf5407a40e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ba4b3bd6-ec46-4f6b-ae76-f7c6168b8336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4553c50-693f-4aca-9b60-25ba867caca5",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d235267f-b1f6-4a5f-9232-6cb5454e04f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a046b5d-cc7e-4a9a-9b23-5458e9b207e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7533b393-aa43-441a-9e32-e9ae75b3da9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "588a5d03-a52e-4663-9956-fb9a67e74fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c5a5c60-5083-419a-a3e6-f5aece439ac6",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f233732e-5250-4497-8505-2bc1b46c0a93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "649cc685-1d0e-4a3b-b4c2-c9bf2a1460ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0567e6e-2f92-47fb-9ee8-a43f472598b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "90f609e6-c390-4490-8e22-7c7b6a313d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2190d51-cbe2-4355-a1f0-acb7266ce950",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd35b46-1929-4c4b-9491-b862a758e126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c366d779-68e9-4814-b5a9-b557aae24377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a89e4100-02f9-4e3a-af20-1b2e63c7172f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "81427362-9442-48aa-a1cc-3459001ec6ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b7ebc07-55f7-44a0-8367-1e1178def98e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70c9bbd-f167-4d03-85bb-14a94ae58feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6de6c3ac-6c66-4eb9-9fa6-a2ef9fb51eba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fcad980-6e1f-4895-9e1e-23fc3d607c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e612206-f487-4461-9730-a1e58643b015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c8d488d-a888-4dac-bbe9-2a583c6ab650",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d1ba47-65fe-47e0-836c-36b25a4a67f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dec8920-7ffd-4a74-aa3b-a8d798ec4974"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e6228fc-4e21-4251-a943-2239d1159d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d78a761-245a-49c1-acf7-ddd2f2613a42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc7fd72-b00c-4894-8872-3fc9cc1e83d4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d566d0b8-f02e-4ad1-8cb4-6f40329912fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "305be448-26cd-4786-ac30-4b55258d0eb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d40977f-7bc2-439a-a96e-e71575685af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "66a2e9c0-4367-4e13-b0d5-e0e5c5f3d039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835b7b55-66c7-4f75-82ce-6b729548e8d4",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b007a8d3-a7c8-4fe9-8297-682f868ec0e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f15d18a7-5b1a-43d2-b77a-51fc612725aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a9678c-0691-4b5a-92a3-9b31a17589c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ec71a128-fdc4-4789-b0c3-0343f54ce50d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcce739f-4bd8-4082-94f9-7982aff6e57b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdbf90d1-6d71-4704-8ebf-00729750b4cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e850f614-126e-442a-875c-e2cde8296154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eebd089d-8e94-40d7-a68a-daa9332addab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "22db211b-8338-456d-ad91-7240370bc20e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f5c34f-a112-4394-98cf-a4b124f01953",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df278239-a064-4077-a10d-83de37fbc658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a31311c-592c-40cb-9d21-2d427888b438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f5ea73-b7c8-499f-8b42-f347759b9bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "85f7e6c4-646e-4dbf-8cac-cfa18fddf0ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9665c8a-218f-49f2-902d-646ecd2585e2",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c4d77de-5074-4557-9fd7-b566788152d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adf8031a-e583-445c-bf34-f248d0d1d6be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd9cea60-2d91-4b80-a915-9fcb4411dc91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3e0689d-90aa-4e99-b7df-d98c458fd0e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db7a1f03-e052-4f78-acda-17aca1161d92",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce6c0a8-9a69-44cf-bfe4-de9e2e00071f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77e941ce-3597-43ad-a929-3022360a5e79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f51d243-067e-47f7-a14d-d2d597db03ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7db44cec-f666-4bbf-b45c-d9ede37819f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c798874-ea16-421b-af10-72b0363e8912",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b09ea5b-28d2-4651-8ecf-b076000b5f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afd0098e-8406-49e2-aa09-0f12d26f61e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "949359ee-a34a-4ba0-81ed-c32597b6fce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf8a458f-6771-4a6b-91d3-1459b0f3ee80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3717805-91a7-4b26-a405-6d1c47d27953",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c921f0-f844-4993-9f17-5be83dbbdab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efdf4d5e-7b49-4f60-9d53-651ca8257dc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf110ea-315b-4bbb-a55f-5964a1f50809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e6a6b9f4-6810-445f-b53b-5146f411d13e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37b8b096-2c6a-4ea7-ad7e-0aa608e7ed69",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44efef16-fed7-4aa1-a8a1-8a28c9d5841e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78736345-37aa-4deb-8a63-d99a2e6029e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c43ba2-4769-4a8a-83f4-48354a7ee1ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb810989-d3e0-464f-b48c-3fcef0ba7f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "002b9f49-cb31-4677-b422-82937a4d2837",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "effd7903-25c0-4ad2-b563-6cf342de9773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5659025f-ee41-442e-9bc2-88f1035efbb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a23e7071-af16-4a1e-8247-8507587075da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "814f636a-0a78-4b25-8886-5af7d071b042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14afcefc-1f4f-4c36-99ec-2e2a3186bb54",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b1acd27-dfb9-4111-991b-a92c9cb40255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8ab31f6-5c9e-406e-b8b6-731177346491"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eb70114-5fa9-42f7-b975-9872298fc852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "510e66e3-c32b-4d14-aa0e-4bc3dbe59910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f98eb43-7a23-45bf-8695-952fadfc2f60",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a12649f-77c0-43a2-b1a2-d1ca061e9c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a409c56-7523-461d-bc72-9ec45217d40e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ed9cc9-61c3-44c2-a0c3-c2dbe5524102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d95f4e8-7cdb-4c05-96e3-16bc615d2a8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a27d6074-5ab4-48d9-9343-7b0fb27e089d",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "939bbb7f-5af7-4a91-a67a-feab9c5b01db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8c26336-a602-4bc8-a5fe-36981df7bb45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7f81b3f-220e-423e-9654-c20259efd22c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "99320739-8696-46fb-8131-ae7d7f6478ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8fde26f-ff6d-4f87-a349-e6ebf9527493",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1cdd78d-5136-4d41-91af-a218e267c0b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00894f5a-a1cf-400a-9733-7a3b040f063e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24349021-0d63-40e0-8c53-8c1130cf1c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "067fe145-5af0-4cf6-8c20-410c8b58b28c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33970604-4685-48fd-a1d9-b385a37cb691",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf942b2-c8e3-46e3-afa5-b7e0d4646858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ca5f470-94f4-49b6-8702-70c48580ba76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c72f624d-ef35-49b6-ae1a-c7c44cf873f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "286c3352-2b20-41ae-971a-c84a991e75f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e276357c-d1ed-4693-83c2-013768fa0c93",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "278304ef-e309-48ad-a085-e8db13cbd932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cdebce9-e3b8-48f6-95f0-cb0bc7772241"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f76492b-1424-4c35-a088-e556828e3691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "045c2aab-328e-4012-a403-e53f5709b1e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7880740-5f33-45a6-9792-15378ab931e5",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dfa2ebc-d1ed-4ee0-8c74-81d8e162fa1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d8e1666-ff75-4bde-a6de-53bec6ae8457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dddd0028-c23a-4662-a290-b84dfae086a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5ebd423-4baf-466d-bcea-06ab7ee8c77b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca28d7b6-a455-415d-a546-d317c25d35ed",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f280eb3d-bd99-4b28-a77a-1b87f29e9104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f01db09e-d413-491e-91c4-5c427fe1901e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e078a9c7-8fed-4e39-af51-9413a90b074a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "77d5e76f-6a66-45bd-b37c-b842d85e83f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "663727a2-27c7-4425-a0a2-030c05aa602a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7e51622-00c3-4c79-8624-4bebdac749d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "036f408c-e1bd-4710-b0a6-9fd1b5bbb894"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5796d69-2fd2-4e83-b9e5-647302a09a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "727a8afe-74b2-481b-a057-884fa486cdff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c13bade2-27f4-4e06-92cb-30fad7b065f9",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc6f50d-42ef-4209-b4e5-d06edc62d776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "cededf82-b217-49da-b344-11643cf79164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14366289-01d0-4138-a225-f24d4772ac47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e15a0b77-b765-4754-82dc-65756055c3e9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "24b678fb-fba8-4d96-b32b-c0ac2a73062c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ae76cf78-951a-4b6d-9c21-c40c5713a374",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a872c91-3b87-4658-8188-f8fdff3c7806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1542753-421e-49bf-a8a4-2eec0cdc391c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edd4e658-2956-4961-9359-d5925fdf2682",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "ef590715-ce59-4eb1-831b-feefada3fbb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8310de10-9caa-4821-99db-66be2bc59716",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "723103fb-d600-4858-ae61-8a0dd8ae1263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88b454cd-252a-4752-bff3-44e8a6fcf6eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e80c09ec-10af-4481-8cb3-ae5ff91fd098",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "d7ae244f-82c4-4baf-a5af-6550bde0b7a5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa3bf4bc-c85e-4e0d-85ff-22869065b966",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d1d658a-d2e3-492e-a289-198fe3a728c6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8764b938-3103-446a-9909-3bf2a2e263cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b1437a78-6a9a-416d-bad4-5ef69fd41c8e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8834e350-22ea-4e32-b51c-a4191f8b52d0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3513cca5-3f8e-491f-b4a4-bda8fc88e2db"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "112f7e4e-2f73-44c1-aa43-823fa5e35255",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "01a952fd-231a-48bf-9d30-4dc1a84852d1"
                }
              }
            ]
          },
          {
            "id": "67626c5a-b64f-4e03-ae83-6d5a6d267c93",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3575843b-5acb-44c7-971b-a0c99d0373fa",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf0baac8-7e9c-49f8-a276-e5aa9d3c7c73",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cc0ba3e2-54f6-4443-8707-9a8e3dde848a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "18af553b-6a5c-4ce9-9427-7ac8a7496701",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "46562580-92a4-438e-a2ee-7bb493961a77"
                    }
                  }
                ]
              },
              {
                "id": "5bcb309a-2d7c-4c21-800d-139f6518302e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "50a10263-a3d2-4730-8235-a9c73877e2c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d93fdf84-f814-4232-af70-38a0fb8de84c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27ef7b9a-9a49-45f7-98b9-b6f57cc95bf0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5caab37f-e780-4ba6-a835-fa48512ca8af"
                    }
                  }
                ]
              },
              {
                "id": "2fca158b-ff44-4051-a1c6-f137abea0d4f",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f250fd0-6758-4bc1-936e-b652ce972105",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "348d14af-bd52-43a4-92db-6c976ee1acbb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e3d1b83-7ac6-4492-8041-17ce90e7f2e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "019c73c9-9899-4fba-b491-80a0d26bbd0e"
                    }
                  }
                ]
              },
              {
                "id": "bc07fc17-36fb-48c2-aaf9-a00b062fe8ab",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c11d9299-ad83-4dd3-bcc3-7ecdc9ccf134",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "694c7bc3-8cb8-4fe6-a587-79e208ad13f5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2bee474b-9ac6-4b51-a6a8-31e013aab74e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c97fa46b-d5b1-4d77-a912-6b36a70d6af2"
                    }
                  }
                ]
              },
              {
                "id": "e418a59e-a7ab-4927-93f7-de3e6d521b36",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "307aaaf1-167c-4e1d-8410-7989fb6bde24",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2b3cc67f-7443-4721-9f2b-1aba298426bb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d66a48cd-356f-41d6-af22-82a0fe700904",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "07572c81-2e02-4346-a431-3e7b9641fb91"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "776a7641-c8cd-49ff-bc6a-b4f0ea56bf3a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ec0ffa7f-7446-4275-939e-22fc159ab5dd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1af54cdb-bd71-4da6-9907-631217427542",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "efe1e29b-f496-4df1-b5c8-8912aa1d25ac"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9e22eadd-fe8f-4ef2-814d-67ca19f84418",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "111472f9-4cc8-49e7-8de5-452993133933"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e29e369e-7538-41a4-bf4c-6aa4decfac6d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ad30f8ff-f0ab-4084-9bf9-688a4d740eb4"
            }
          }
        ]
      },
      {
        "id": "e13a7358-2587-4327-bf37-df05e5277d04",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "9830ced5-2df6-47e1-88a0-53444a99e75b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5310cfd6-1938-4514-a342-09f1ba958de7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0cf5a066-c129-4c43-8bf3-7e5541ae8b63",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "143c71c3-173f-4cf7-a57c-658c260411ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a2741c8-db21-4c2a-85a4-0f066360d2d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a15359f-9b46-405c-8e95-dfc67d4e6751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3da0be9b-af2a-4be5-8504-dcec842da87b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75655cdf-410d-45aa-b551-5a9196b00ab5",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12072a0d-72b2-4beb-8d05-8119cbcb1ac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8851c25-3782-449e-93ff-36f294750834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43771eac-371d-4369-b51a-b8152984b541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6151d4ad-7cd3-4507-9b27-667df362e7e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97abbf88-0f88-40a1-8af5-8436019fb268",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a180cba4-c084-4169-a081-ad7e2af81ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2635b5d-ba2b-44cf-9a06-6493603a992c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81a2d4ad-d631-4813-a201-47b47e17dec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4662dde6-b38a-4957-9c6b-bd6092986221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b339898-25f2-470b-8c6f-1de8a4cf639a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4075242-4c4a-42ad-8f3f-eb2b2a890843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "854361fa-14f2-4336-8cdb-924b20e0233d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2a99479-2bd5-4019-aa4b-d432708d7034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "947c66e0-5357-45f5-93fd-7fcac6c523b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3999a951-d765-49eb-aea2-ed02bc59d27c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "295057aa-b328-4823-ac66-49d3d0f181aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d44aaf5e-0e89-4012-8261-de06e8b2b452"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b276693-8eff-48a1-b9bc-2306348fe2c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5ba8936-10be-4bfa-85e5-089f1f8dcc79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b13d18-e63c-4fd4-aa2a-43113097e8c2",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26718913-5d55-4146-a89f-a625ff1597b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2f42e90-9a9e-4fd5-afe6-82c7b84a28e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2347a16-4823-458f-81b8-01ef226c9574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e50b4019-6df6-4ac1-a545-bc79f646fd33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "405cf03b-7815-425d-a123-dc17207a63eb",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b3ce2ef-bd30-4e63-beeb-ec264723f6f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a4d230d-2dc7-4415-b650-c16445e217bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d02b16d-32c9-497e-b4df-6083fe33c44d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f262168a-5bbd-4e92-b875-e74095bd605c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4500c634-f14a-4c85-8d65-20a05d303ba4",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02646ac7-cbcb-4239-bfd3-8f268e916a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d486bdb-f27a-4de0-a6c1-9ac7374086c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cab08b29-a435-444e-9afd-a4ec483b4e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "144e5921-bc33-4f60-8c63-41aaab985fe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b273936-8555-41da-a628-a41072b943b2",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a1b36e-3ca1-461f-abb1-8d1b7c57263e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7132b54b-1256-4293-ae5d-f231fdac94d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6880a491-e511-4f4a-b017-67d327cd6c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "500c2174-3d00-4311-afaa-c4ef3822d2f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d41201-280d-4176-99bd-287c92adb7a2",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c8fe511-cb7e-48a6-8fea-de2ff6bb9c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe82227a-d2cf-4b34-8559-4a098d18ea76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cf3017a-a297-4288-b5c3-96479dba1e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1bcc1ec-9f88-45c0-afc3-192a42b99139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0061c268-2261-4fa5-90d6-b6d8549dfab5",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15bdf6e7-3e2d-4c64-a3e0-5e830097860d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02c99315-4f7d-4a45-ada8-69b6f11e8e9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459269f4-b97b-4561-87f8-8b243dcd5649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0e4fd733-d5db-44f9-aa40-d66f5b155a71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5fa0b72-fc3c-44dc-8678-04c042184131",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c25be9-067d-4064-a40d-b9833bba7020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "095b18c9-14fe-4aac-89a0-186226e4f0e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4044b565-ca8c-4a19-a068-e018f6544a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e1218054-547b-44d9-97aa-27f4834ed0ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93edfe83-aec4-4820-afe3-0467eca91df7",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a46aa4-c918-4396-9ec3-34b855263061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fadd8d2-a55b-4553-9dde-c7226d0705e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe57d0c3-7112-42ab-b05f-5bd3d4c90348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "65e8cd31-5078-4efc-9466-57bac2633e3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a4abb36-c557-4e90-ab26-7d2060d7b747",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edce6746-5443-4ba2-a2f4-21a6b276b512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee7bd3bd-a79e-4b7f-b449-30a54b873f6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d5c4b35-35c7-43ed-a292-4d4d6d8da155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c72dc12-e0ae-4955-ab5c-45b7c18ed4de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f863d945-b13d-4e88-ad30-afad4df51cdf",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ebecf5a-1515-4812-a2ba-0af221ac2ccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff606189-b853-4749-bc48-7161dc3c8767"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "743de4cc-94ca-4356-8462-362a92f20451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "122991d0-dbf8-4a41-bc1d-49ea1a4db79b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d3ed76-032c-4b56-86f9-1f163a302c08",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32eb9c51-834a-4a89-98dc-be48492757a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70deec76-b625-4d49-9fa0-590e1923284f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6d4963-fbb3-4ece-9ea8-cae098920fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "61db2308-0cc5-4072-8df4-1d4c050db5b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1bb765c-0d59-4d54-b71f-2d71d613a598",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2e63aa-05b8-4323-934e-5e90869c3b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f32f771-c426-44bc-b682-cf82144889d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f8717a2-0b29-4f7c-bef5-aa20346edb82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f32b6c2-53aa-45c1-8bea-e9db8ee54bbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a6f6178-22cc-4a80-ba1d-abc31bfc9ead",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4893358-cb9a-47ec-865b-29ab472fbb7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d38b3127-999f-480c-8cc8-b42209708818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d15064f6-37d5-4af0-9d86-019ecd615b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e5c20c8-9232-4de5-82e6-30617fe7e7da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87dfb859-debd-4b1c-b98b-250eae60faa3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8899e47e-6921-4a4b-af9e-7f64d7fbfa35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f365c34-dc6a-42e2-bd0e-294aaeed03ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "842f86a1-42d5-464e-862d-1ce2df3d5f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b24af2c9-6b30-4286-8195-c5e0eb0b9e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84b9c7fd-4d39-43f7-a0d4-18e4810d3959",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ceceb1c-fd57-42e8-b7f8-f6d6031cef6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b387ab41-5bc4-4746-b2a1-76b1ad9c83f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "112dc1d7-58f5-4b24-80db-b7d2cf59d8ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e10183c1-8ac4-4a18-9034-d43c770853fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb925888-6659-4f3a-8dba-0a6484bbb591",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e60d115-ed29-4ee7-a05c-0cc7d3c2b1f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3115cd98-0b8a-4bf9-9275-4d8c58a1e7f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16550c8b-ccae-41f7-83e0-84405cff14a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24f33d58-33fc-42c0-8d5d-9fae42b86dff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b41cb3f-7b1e-4413-9d4c-b19480771775",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efd7f69d-fc45-49db-8781-46a7d85d2b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bb827fe-0984-4a53-b728-c9648ef52285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d9fb47f-000a-4a81-956a-dc5697d6262e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7ebb1e4-d299-403a-9b46-5a41b795c68d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ad728e0-f53c-4a86-8056-05f71fa935f0",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d07cb688-eaa5-485c-b9d0-b233c3cb135c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebd0ea15-e85b-4925-aaaf-2031df6f9b21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d880b20-34d3-4efd-bff0-8a924782f382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bce5a637-5c7e-4dbe-9943-04051c1d2f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc90a851-2def-47e9-8e47-cec8277e5410",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b5275ea-1072-4bfa-a14e-eae519d2ba7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0eb40e2-2636-4850-a34a-1d7a323bb993"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7070fa8c-9817-4ea1-9c0d-f2caf7489a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad14c8ed-2965-426d-938e-ef9a2c95d8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d501d5b-41ea-4b1b-a23f-2c0c21c8bfbc",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb3e1ad-a069-4ff5-bf3d-5c9586d72ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7a14f8a-6400-4120-bbad-25327ab5c73e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfc28add-3276-4082-bcd0-2bf9e9fb6c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "835d9484-9cfe-46bc-b41d-023922e114de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5430fba1-98a5-4153-8656-801f34b558e5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c032f21-9bbe-4d78-a975-bd710ec1aae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d825def-a25e-495b-9dcc-bb01bb6aa362"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f61bd3-ba0f-47d1-ac6a-73435e2bc48f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "025e2888-2cd8-48f8-82ac-6ea54be98a52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cacb40e-aa24-4266-8383-706824b32681",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "979d6be0-29f9-4381-85c0-e6f2d935fda3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cc43750-1c3e-4e43-84b4-3738637da4a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa8f7c6b-6e5f-429e-8c07-641d5b525b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04f5fc9a-2f2b-4642-92ea-8d947d068878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40424e2e-f1b2-4264-9361-565ac3d1c93c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1302105a-0b91-4a56-ac4a-b384a2979693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b663b1d-851c-430c-bae0-a315cb4ffe05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94577cec-c4a9-4c03-a8a2-a38aa819ffd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36f1e575-5524-47ab-a09d-d2fdc0cb25f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86903d6b-4d86-4b15-a0ab-a2957a44d42d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0983fba4-385a-4925-ac6d-aedb0433299c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19b0060d-b3c5-4435-bf4c-64b72981c87b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a9e87b3-9ffc-4529-a233-172ab5d0d085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46e2bbf0-e72f-492f-af33-b304d1af8ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b4a7cd6-d078-45a2-a312-16547b4f7ce9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e849a87-603c-4467-90b1-21d83c2db04a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d27959bc-0117-4f29-9a20-3774b53cf36b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ea0b7a-09b5-49e5-8a70-66eb710581d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac7ed576-5774-4828-87a7-010cf253d6b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49519784-59be-41f8-8d5c-6d79baf1ed41",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2344704c-3912-4cf2-b08d-512e81e46c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b40e898e-45eb-419b-8921-b2553c2fb2fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fa18d61-006e-484e-83db-face948565a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdf5c591-3b17-4ea5-8aba-3df39d5982bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f153406-115d-4998-94d9-cb4398e3a288",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d49476-344f-4328-9401-39c3f2e44ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ece5ec4-b16b-4a4b-8089-2c569416fb91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "802e6995-bc43-460b-9d35-2d05bb785bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4513df3-e8b4-4213-9e0f-100686c8cc4b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "53272898-5d09-4037-ab52-11d2ec968b73",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f5de01f6-920a-4b78-9230-6a772271233b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78567e1b-f916-4362-bcd8-2f9098a58fca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bf42373-d015-4fbc-b4cd-84415eb71342"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f232d3d4-fcfe-4a3c-a008-3e30e0840bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e6c653d-e225-46a3-8008-5ef2408bd9b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "134e4eb0-5957-40eb-a6aa-823bea37e9b6",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da949bc0-970e-4c90-9dba-a640e0b214db",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "9a9bf5ba-fa85-41c8-a4aa-1d991fb98940"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d949b69b-e361-467f-8597-a2e52b4edacd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a723999-5d75-457d-a8ce-f53f32841c9b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7ab51042-ba94-4ef7-87de-1ea77a6a1911",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5745bc35-399d-4323-9e3e-71c36969130a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "43ce8247-e8ea-4b94-9791-786e601ebabe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0368f75f-1b6e-4843-b39f-ce3742e96e90"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8ec45c34-ebd8-4bd4-9998-67369796df9f",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "973355b4-57a0-48cd-9745-ec956754f1e2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0d7e9a66-398e-4e3f-84e9-b4acafaa91fc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b8a65747-4f40-4890-ba44-74b6311355e3"
            }
          }
        ]
      },
      {
        "id": "66ee4215-c320-4e30-b7c5-a516cb0d41a1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "451d1447-0a29-4fb3-89c9-24992badd1b1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6398c777-213e-4875-801f-5138617b0051",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b4859607-3bed-4184-97cb-ce20709a944c",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff09f78-fd8f-43d0-8bbf-68ae142d37a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b72865c8-7b2c-4bf7-8c0a-2803f2f9819f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0782391-82e1-4731-b488-4f43308947b5",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5167e87a-6cf5-48eb-b6f4-b2e969a89369",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65309c2a-8fcd-4acb-9da0-3a12b58d2d27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c205aba2-af84-404b-849a-b8a01158738f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1598f490-3897-4cf3-a232-d6e732497021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57f92e85-c9c2-4714-8957-c9a01202f08f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be7dbb65-5404-4cb2-a4ff-4c91fc0b0784",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f38b20-c89a-4e77-b15e-aec68c0ebe9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7cb849c-c2f8-4df3-93d1-d79f319c81dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c10d3caf-bce7-4dae-957d-2fdb27ec656f",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e81b3f24-d1e5-45ce-aab2-f263b91ddac7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "342e20a0-d7ee-4acf-ad92-71fce7831bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f10498-a4d7-4bc2-b879-b3c6b5c2b3a3",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "797453e8-fc69-4e32-a06f-74dce1e5cd14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49bce97c-7a02-4876-aff8-5715ab42138e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8efe02f4-51c8-46d1-b28b-f306cba3ded8",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b63f986-818b-4414-9451-cd2ba7c92c31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83c48480-66f9-44f0-a7df-f15bb7bd18bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c00fc1-67e5-4463-aa6f-55cea1b636dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9acccb49-5c2f-4326-8ed1-5308d3a798ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab9d1145-fe74-435a-ba8e-74d7f653eab3",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe6054d-07a4-4701-8149-90aa7e6af565",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3f110b0-d9bf-49ef-b3c0-b13a044895c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8788ab9a-75d7-46c7-8e78-66fa34baf71b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68c4c33a-572e-48fa-87b4-bbdcf3523550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f19ddd1-f560-447f-a5c9-b7f2bd04a851",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "360d5ac0-74dd-49f7-b8cc-07a1a19d9b32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac555f1e-b03f-40af-936d-d378fa8f099a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd1a1b0a-2ab2-435f-b42b-8031425ae771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6975f03-4884-4c9f-a9f4-b3a64780685f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75fcac6d-beed-4b23-b60a-94875dd09d9c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99a370bc-39ee-452b-a7b7-9a3616ffe7b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "525c5a28-8623-4978-8969-d7de204d8d83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f4dd8c6-22da-41b8-bf4c-8ac4bb45b466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19d646db-e3f0-4b1a-8769-8916e4ff085d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26508908-0a54-4399-8a8b-95ab06027e1b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b4c275-010d-4f1b-bc2b-9472fa7fed05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3436d88a-6696-4a55-b0b1-8405d7872c51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2df4232-d467-45f5-9a1f-41a4b796417b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "412216bb-add6-4abb-922e-88870daf65c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8828adf0-8fd6-4676-af02-8722588d13c9",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bccbd928-fad0-4828-9824-3301ecb0fba2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e97d821c-cf7f-4afa-82f2-10419ffe5be5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd94d4b-6614-4368-867a-521158baf336",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd3b3351-3a74-4a28-b28e-0db3bc3defc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34045f7e-07a8-45e7-8197-b9edf0845e3e",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37632fd2-3360-46d0-a816-2fa92f9d2499",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecf6c379-32be-4af3-a6dd-0d75bc912528"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e7ba0e9-1019-46e9-a0ba-80b3cb4a6622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25aff0e3-1657-4724-8e1f-4bec7b43ff7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d16e18ee-eec3-4660-99a8-633f93fa7e5c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f845009-cc51-46a4-97a9-a05e64844e55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd66b647-6fa0-4d85-b003-b35be7e9480f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9594948e-0de5-450f-86b6-c2095299f7c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36abd191-06d2-4e49-a7a9-334c4072bd81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ff2551-d80d-462e-9e94-7b40be7bbe56",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f331a189-14fe-4e72-b031-62405516c552",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d3a6934-1c85-4d41-9cea-804fb68c424d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a87234-cffc-4010-aefe-ac8c02f4767c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67e518f5-a5a3-4a4b-950b-00647ef7d0cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e29050f2-9c4f-403f-8688-a1bf8da1b2b7",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f0dcd35-2e4a-4bb9-9008-b775ce8ad639",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7957e5e-21c7-4870-8370-9fdadd121830"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70da67e3-008b-4f4a-8ca8-8f3bdf4d4abd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a71bb64-17c1-4b09-8217-5d8834d679bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf2b419-fc3e-49d6-98ab-ff417a26a0ad",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6818728a-208d-4a06-9c31-a18647897f91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e0af5fe-a927-483d-81e4-22242e730cd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "285d8404-acde-4ade-b28e-371a98fb0370",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "861b79aa-46a3-46db-bf13-138d1c22ad54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ca79528-ec6f-4081-bd88-2eae13298e44",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb0b0233-1416-45ae-8f49-defee0299f04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "626e8672-68e0-4897-a915-79fc2fbeb311"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc977007-9732-4c42-8b7a-19a93bb7b436",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec775b44-a51f-44e4-a613-2bd25bdc16e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "234be94f-74d3-4702-b1b2-454e2abaca29",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab3eb15a-44f8-43ed-a041-44630714e402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bbd72bc-0efa-4691-9e9b-242dd68781ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c48877-5a87-4928-bf5b-0f799526da29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f2663c7-f9a0-411f-87af-acf9a19c6876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6700f34b-e091-4c10-afa5-6303aebd44c2",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b73dfb96-167d-486f-ae66-2835714abef3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d63c5cb4-eb49-4438-a255-195a8c878ba2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97cb957e-5d8c-4d87-8ded-61109dc8e9d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "724ee866-96b6-4da4-862b-10c9c6b532ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a3e8f65-f08d-4024-b40e-b6be0619b262",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df722ea3-7592-439e-ae97-c2b5edd88ea1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90b39c84-5d5e-4857-85be-be58d456baa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d1be99f-cc41-4227-aeee-1bc5a4df4730",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fce4d5bf-44c2-4fe8-adf7-d4066fbb7e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fee2109-89ad-4f3c-a928-5f5ed0adcd61",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ec003a-e21c-46f0-9c3a-a0c2a3bbbfcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8b59511-e76c-42bc-afd2-6424bc829d25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a39520-428a-4941-956a-d60f88031d01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "282a9f4a-b9e1-46b7-a3cd-72c20309c429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "992deec4-076d-4060-83bf-f5337e84b9a2",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "846140b2-ce17-4cd3-a86c-23eb26a1336d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e2632be-2389-439a-8fca-2fd89f510167"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "624b67ae-3991-4012-b975-56271f8e8120",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d283c73-a020-4753-96b6-0b435578e925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ea6872-53a8-4c7e-a2b8-b4f7973214a0",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f97e173b-906a-4eb3-b364-0c8b1212cda4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2575ccd0-b8dc-4044-9c99-eba3802eabf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "873c092f-205d-4443-96f7-197ee005687d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5bc2318-c20d-4ffa-a546-7ed84350162d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cefbc6b-fbbf-4e0c-a483-d588ed7bf4e7",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "235c3b3e-d343-4429-aff1-c4ade887884a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4d96a72-d904-4ab5-8b6b-709bec5a16f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de403eb3-02ad-4f88-92d9-494fc7645b10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a7524a0-3733-47b1-829f-eaa7068f8347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "327e4809-195a-456a-876d-c1e8228f3b5a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61f4319c-d425-40a1-bd53-089e86bd16da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c542079-08d8-408b-83ab-0dcbfb9f4901"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8053c9-2a54-4513-a596-3d4db1f0c8f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "511d1606-1a2f-40b3-93ad-c5bb413ff432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3d03d33-71e8-49ef-b15c-7c26bc3b99ec",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c88a41-eb4c-43c7-9770-8bd2e9b40333",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d58cc53-d631-4b23-b833-4f71a94ebd11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e27308-dd05-47e5-b988-64a36da1ade1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2963985f-6fbe-40c4-8374-f0b8aadad58e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "563d821b-1612-4610-8e05-4bddc5f2f988",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf253d45-195c-4486-bd3e-b1136653d89f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74502c82-e33a-429f-8c31-58bba034636d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c2423f3-7d3e-4ae6-9ebc-a2652eb163cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61d747ce-2c94-4a14-b765-0e4ed7f66faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba1851c-6f78-4d3e-8292-84505daaff25",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e0fbc11-0834-4648-906b-899885cf94ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1afc000-8c92-4c98-b995-60190a3f8182"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0904cf0-58e5-460b-97e0-c854f7f674d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc2ea725-220d-4a00-a502-a7990a99a984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e00abac4-bdce-467e-82c4-56176c566ce2",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e9cfc5-55fe-4170-a75d-022967e1a2fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e8b6bec-6c08-442d-96e6-18183e05720e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cba8bec-0a35-4198-ab19-625e63fc54da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2675b455-940d-49c0-88ff-dd64f18351b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8629789a-20be-46b5-8285-406cef3d6d8d",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac6152e5-20ac-4c22-b158-5aade4465236",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cd768b6-95a9-45bc-acc9-3992f8c8830d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7557024-0074-42c4-9379-95690948e3a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af72da85-59b4-44d5-9213-c1341a674b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cc8d857-b520-4a24-8b2f-c72b36926649",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879fad48-c4fe-4446-8ddc-e0a00108dcfb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22b1ba99-1477-4cd1-8211-0ac91b3efcac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76faf26a-7f7f-4a13-be94-422b30e96002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "049d7690-d3be-46be-ace3-055be570c24d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cd75f04-623f-457d-9ab1-3e640ff0107b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92e27dd0-b6e2-4784-aefd-72016d87015d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f987cec-c738-4a08-b616-866968b7c68f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "759cad03-6617-42d4-a23c-0c6ed0464431",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cebf086-9017-4fff-a22a-dbc31603892c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68083363-3dfc-417d-97a4-8ec55a2d2c85",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17625875-773c-41e0-bcd3-29f8fd7fd1f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f83560d4-4e22-4959-84a5-48553c0002dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9989c08-310d-46c7-96aa-520c9a199086",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a470cb78-bc18-4bba-88e5-6b77afcc89af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "732a0b6f-b9e8-41f4-aa7d-5f769985ddf9",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a46b4061-feba-4a35-99c3-7e274aef762c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85d02b3b-2956-4b2a-aa47-4eaf8b163580"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a026bec-d3bf-4f8b-acb4-1c6ac3bd93d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "003cec79-1569-42d5-9787-4dd83417a3dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92b978fe-e3f8-4d8f-a083-fe22677d641c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f29b615c-f498-45b3-aca8-af8263b6d8a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e76584bc-2f20-46e1-8560-bd70494c6744"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76f56e6e-57c9-4752-b3aa-92f531eb5ecc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14efdba0-87f2-4ee0-9eb4-5f482f7ec9a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f619e46-8c33-4b3d-ba31-2ff2a69f9f51",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a79254ee-ca47-48de-951e-0296ed7f99b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f49aebdd-a230-40ad-8e93-48184fd44845"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76dd3c4a-de3e-43d4-9d0b-7426c8282908",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "912e6e73-95c3-4d67-bbc5-610e988136e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494f8b0a-9726-4ee1-abdf-514ce64a900e",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5754715f-97fc-412e-91f6-40f0972e4678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5acefcbe-bf76-47ea-ab78-035c202be02e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1ba9431-948e-4e99-81b1-475f336f5921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "705fc30c-a689-4d6d-9e96-ec7a57577b59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b759e3b4-0ca2-4701-86a1-4c24eaedeb8c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3ce995f-babe-4467-a277-b8dfe83297ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1e1e5cd-1d15-4bd5-b48e-36260bb81ef4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f13583-460a-4380-a734-63bfa71a9aaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "629d4cb1-20ec-457d-b7a2-20aebd30c38d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f00511-08d4-496b-a593-9694d254c925",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06c8ee75-9183-4837-8429-e393e1c166ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "466bce52-bfd3-4cd4-a3f3-adf656cba132"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0f3fc2a-e374-4e16-84f1-5c2fc3973303",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b115f04-ca5a-41ed-86f6-42df8925391d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f1781c-1b4d-4355-8f47-6793282bb63e",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cefa4434-7299-4848-a47a-4dbad241b9e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bc81010-89f5-4c48-86cf-001f04b08d1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e153be-f570-4131-93dd-584d8ae836fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31216231-85b3-4520-a5f7-a6d1deb7ed3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566e600c-b050-4047-b00e-f217c3e038df",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c76764d1-7285-4fb0-8467-26ddf4846780",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96907471-c53b-4add-8158-d527fb8ed1ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cba78848-eb0b-4f56-ae19-a50c5b1ecf39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d249e737-132f-40e0-ad74-6a5fb623b04f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f6e0315-e733-4c2d-879b-dead57684a0b",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bc5083a-1b7d-48b2-8579-8787f3f041e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c57999c9-cdda-4032-9724-e7aba0deffcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c93524ab-0994-4f2e-ac53-c7d6bfd60baf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc613ec9-eaa3-4368-be86-7df26a7038ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e33d5ce-9c2d-409b-932f-0ef3b64c42d1",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6679d4d6-e204-4367-9b2c-4f7f2151e321",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dedf5805-b639-4890-9521-7170b36f6686"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac28d26-6d6c-4c40-b3a2-c05a67946dc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4dd895d-1d1a-46ce-ba25-96328b2f3752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b5d503e-3164-429b-9297-430a4c48733e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "639e5aeb-2b1b-41a7-b807-8ba6c75b24e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0812b968-72d6-4c4d-a770-8afdc649a199"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d1baf8-6d8f-4c89-9074-2296b48d8411",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d87db25-acce-467d-bc1f-b16085910645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a204952-3ca9-440a-98f8-df5b48ee8f47",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcdfac85-2cfe-4456-8d3b-9405bf22fd65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6867a543-abfd-48bb-a0c0-f9af1f7f5023"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c6ba028-480a-4813-aed9-892723381b3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8ad9cf1-02b9-4442-b09b-05eac44bd69d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f663a6f-7a52-4e1d-a0c4-2cf01370911d",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f114b86-d3f9-4ae8-a073-d9a78c3f0f9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b537db9b-9338-4998-8853-5390acd9fb97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e478c380-5230-46e0-b854-d9bb4f239637",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5237a532-e4e5-4064-985e-90ed91066d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3539d15e-7a97-479a-b947-10a916acbe47",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54dc1f7b-ae4f-47e8-bf6f-65578f1958de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c42fd897-6680-4a47-910d-f0543eac6a75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99d294ac-fd4a-48e9-b568-3b3d53025797",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "109238f4-819a-4a76-baf5-b5573101f408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "386e9c8c-2f7a-4d3f-a67c-8aed3d8fb639",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df5cabff-4784-4337-83e0-27ef7ecf63b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2bf905e-7b29-4799-bf9f-35fef89aa93f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "955f3af5-34f5-4aa0-b5ed-b840cb35d3c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ba3b1e5-d491-43d1-b58e-757da67e8974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de604c82-e6cd-4e95-aa2c-8129fee5511b",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31555055-9022-4311-b9f7-4f01bea19dc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f6889b8-74fd-4bef-9af2-ebe85ae345f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac2466d6-9d74-4c25-ad19-e400f4568251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f209b84-9e12-4978-b71b-fda85134a4b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd0cd4c-72b4-4796-b951-0d2be8430031",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e94940be-242d-4227-993c-80f31d78fca1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e02dddee-87be-41d3-8e83-b047094697ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a81bcdeb-0f83-4662-974c-ee807201effa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d1ec337-be22-4dc6-9dcb-367739181b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee48b47d-2419-4817-a58d-dc8f56b0c9d7",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ef5e54f-8598-4965-94d6-b42b77fc826c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93223622-e029-4705-bdf6-e26d5badacfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcde9ae2-6f46-4d84-b7e2-a8c58243b553",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dac1dab1-380e-4104-816b-bb28d78d9cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "774b0243-5fcf-4b3f-b2a2-c38ecf4f15ef",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34113579-a3c4-4ff0-bd6e-dc39d8181f0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eabf438-0405-476d-ab4a-ca9914ba4b1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a36bde05-f50b-4c3a-b93e-415c509e0553",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e65cbd35-4b53-469e-b213-53fdf8de8c1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1300a387-f492-48f1-b923-9a4d2d86f53a",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ade4121a-2bdd-4f7e-94e9-4ea2480ac4d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "981f3022-afc4-4ccf-9ba9-730c76e33e48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4955e19-4beb-4c71-ba89-3912cac7ae57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fc07cd3-8060-4ddb-950b-f41e1bafa81c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cab1601c-007a-4789-905b-5f33a3ffa9f9",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a205411-e5e3-4ce1-8c07-d7b4c86360b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e3e2750-cf1a-4b4a-b872-36108d719d9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "981ab5ce-7553-4948-902b-7736c62d0dfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a4fbc24-4e9f-4bf8-9d89-49e67273052f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45617933-a1e3-464f-91cb-e34062eec8ed",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dfbc98e-9867-458d-ae22-583f5475f9a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99eac9ef-307d-4975-83f7-f86ba687f934"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7b5b54-087e-4dbb-ab8f-8db49954fb8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de7ce66a-ad36-4398-a44e-7052e70a8033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "722289de-c0a1-4ffc-8b63-8b2ca48e02b9",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c245970f-22ba-49b3-8590-0bd4fa7c84a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f722f9b-4137-45ff-8d9d-9af3dadf2d3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e0e949-b820-4788-814e-49010e60eb78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6aa3956-c850-4c94-b853-b9d54bef37d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83da7866-0529-4423-9dbf-773b8e42c33b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d178871-6c25-4bcc-99b8-9c7ec2a8ae62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3d9bbb8-5f82-4a3f-bc17-bcbc560bf37a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2112dad2-e316-475f-bbd7-a1f97d7b1a46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67f73ccb-2ba9-416c-b356-26f8b92b2cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92adf087-ff50-4568-aabe-3dbd09aebeb7",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb5f5489-0c5b-4dc0-b4e9-0dea81c7fbdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "568b8eaf-61d6-42d0-a230-b290386c31ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eb008d7-af5b-45cd-bc2b-08d24681ff9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1963b7d4-9624-4e87-9f13-fedb0a313269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a376de80-2061-4b53-8ef3-e707ac02902f",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "900bc32a-7ad7-41ab-8e59-5b5a329e1cf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baff900a-fae2-45cd-8f7b-82554f31b168"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e00e8ef-53ed-42bb-a27c-8b88bfd88cc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55d2cac1-e57f-4a39-99f8-7c6ec7e3bd3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec46df22-770b-4894-ac75-866508e5034b",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d58147-e661-4946-9e40-7f9e8d000913",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d71573d3-c94a-4348-ac3b-2c9ebcd6ed1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0cb39a9-a93c-43bd-b7e9-203b43c8ef76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b881a7e3-c077-43b7-a503-dc11b37db5f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e164a6-c9a4-48e8-9d6f-7dcdfe3285c6",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c39e94-1fcc-4890-982f-e7a5f04027bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94466186-4445-4540-94f1-17242b0fcd2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89da4978-f74c-48f2-b6a6-5e6f1ad05e39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4bc520a-a5a8-47f9-9214-958e87c2a15f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac279ddb-75ad-4940-81dd-58f77a2bbf5f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f627a51-3a01-4fe0-8e99-37c3cdd76f4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5c0f903-ab3b-4799-8073-a1c052f753b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f88cc99a-4a19-4d58-8dc4-53a40146fbaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33857304-6851-44e2-baab-b349d512703d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d80bdd5b-0ae4-48a6-9dd2-5ae0dd34b7cb",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "828df4d6-8f44-48d7-b72f-256a07e615bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34ce0afc-2928-4c24-a882-409f2136bc54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d12c02-6ec7-49d6-9c7c-899d2bd4f930",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e91c5911-7bc8-4dae-9a08-c804fcac881c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c5d0472-f4d0-4379-9c7b-f5824c333fd8",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f3a822c-2c22-46ff-b07d-7493c508a192",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e6f344c-5be2-4ab0-9958-c279bb92e12c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df5077be-b930-437e-8a98-e7219c2dd33a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0c616d2-4df4-46a4-be05-b08017536e1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c23f948b-4bd6-4dc2-81c2-c5d055a78a37",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28fe5faa-0ef9-4499-a4f3-011ff568d1fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b47ae41-8244-490a-af00-b7adfb7fab3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d22b4727-fb94-4f70-8328-629ee4366c19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0f79189-beb8-4669-acee-53c8282af103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b4c792-1cd9-4df2-9ac0-399c1f878d97",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "523ef21e-0ccc-4199-9a07-c33aa3cf64e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f160e47f-2e4b-41d8-9f51-2f0ce52e3e6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2156d966-65d2-4dc4-8727-c99203be2d8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a43aa93-1576-4fec-ade3-e8c9fb2b9581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "844add3e-c27d-4bc1-b83c-7e7d6610dba1",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5d04330-d7ac-4879-bfe8-6840976fec51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f4518cb-bf85-4078-8742-ea29034dbc78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf1549a-a0f5-441f-9a22-d2552a629976",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b144a815-f4ba-4378-8870-4190bac64b4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55fb4a05-1ef7-4ba3-9942-b2fd62373ced",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8410ebf4-9d5f-4a42-bc9c-8ff4d109ce85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d84f091-596d-43e1-beb6-0b030b55504e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "316c8732-deb4-4931-9f64-2911ae9da5b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0314c707-f0d9-4ee5-9a84-ccf7dec7f598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3dcd61b-fa61-46ef-bbde-df4476d806f0",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd98ad8-f4b2-4031-b6d8-a96c9f04138a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c309b6d4-b5ff-439f-bdbb-e9cdf0a75161"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f1f094-131f-4a9b-a4d1-4298063b25f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09ba3929-ff98-4330-97a8-bb3318a534e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e069239-423f-479f-b5b4-48de3a84a3cc",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "767f4f31-4a94-4a4a-9826-258f0f7ea4b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c8e575a-3170-4d2e-be37-af256d2f6a3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d197932a-fa24-478e-a967-03627c075711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ea387c4-bd86-4c7b-a05b-af9536dafcc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ccc387-7718-415f-8fbb-09b394b115fe",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a910b5f-7ffd-41ac-ba3f-ff1bb91592dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "576b1f70-33c7-4a5f-99a7-b554ff4863be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d809ce-3f05-40dd-85a0-c55b2504d4b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0f1ebd8-27b3-4c70-9b05-892ff78ab097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f9dcdb-7a1e-487c-926b-25dc67276230",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2108c1e-be98-44ff-aeab-a2d2e77451f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50d57451-7cdf-4270-a0bb-82140dbac150"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f47b8939-ce12-42e8-b49b-7c76f0ace503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f29d2e25-6665-42f0-a6f2-8f09b3a0197e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e786e14-06ec-4d2b-9b20-4ffb68caf532",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e951694e-3bde-43f5-ad8a-526407c99e63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7837e0d6-4dbc-4d44-8e91-5f98fc1355cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f85b72b3-b786-4660-bf05-e5c12ccb0207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c5d4ab7-7708-49b1-8523-6aa68c9e6fa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad318561-d6cd-41c6-90ae-40c31ca848a1",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84be4741-76f0-483e-b02a-6b7c0377469c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70ac2a2e-6905-4ade-a348-0378aa67ef2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52fc858b-eea0-41b3-bada-ba90f7ba83bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f00d26c1-5bac-4fbb-a5fa-842ed3f38eac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6973529-ee33-4884-bcb4-158218764d76",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b70de7cb-5a5a-4084-90eb-c710244a318a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "450f7f6a-d4ac-4cd4-8186-37269846e23e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5629d266-170e-4c52-8f59-c51311aabd87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f11188f-e20d-455b-b0e0-184e16c1716b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edffe1a6-a03d-4f7b-8771-fa1b96bc8283",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab5f82a5-722f-4516-9163-859ddc5967e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c6a7f07-0bbd-45bd-981b-540d726c0fbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3beccf53-103c-4ccc-aba5-2ba41608c8de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92435d60-a5a0-4288-aadb-09c92db10a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52fb46ce-fa10-4d60-a733-6b2fa2fa2297",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a0a3eb1-8b95-4848-a71a-7fb9a6b6f900",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "028ef89b-b25a-4b4e-9190-cb31d9391a9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e06026-7728-4e20-91f4-95ee99df4140",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "055750f2-b1f7-4275-b7b6-608e7f0959a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b33fed-3cf1-489e-8fd1-14ac065189de",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "048d70d0-9196-4e75-bafe-3786dfd2a414",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de86f4cf-7eba-43e0-8eee-d4fd3f438ae8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63bd800c-b29d-4179-a813-8b323219836b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faea94bf-ecd4-4b8b-a53f-7fd4e780faa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b49bd0a4-0942-4600-8e66-235789635062",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8082a409-7344-4f03-bfa6-422723bcd09f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1bfa2d6-4ec3-4f66-9ea9-a54206d53a0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ecde54-a8c7-4e93-a17a-dde5bc565651",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a18a4cd-4c01-4014-820e-b8f19f97a485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cd7c917-1fe0-45e2-a4f4-e24633fa2e75",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5391a563-886e-4441-991b-587a1cb93099",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd49938b-b96f-49c2-a820-bf9997ecffed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb5e214e-59b4-4227-b597-244f79e9b3ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03f7ca95-2085-4810-95f0-165c9de593ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "284f15cb-7aa0-4173-82d9-15eb8ab7602f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4652e885-21fd-40a6-a334-54f2b10082cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80d30f79-9217-4bdc-8da7-a8061b0ccfc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb33f8f-32b6-4dfa-b29b-5b912bdab2cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ddbc392-b580-46b4-837d-b0e4b8c9ac48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "535e2304-e838-4e06-8a57-65b648def439",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58a713e3-d399-4ea5-822e-729a77d6d08a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0614c9a9-7dca-4ada-9b15-baeaa09372e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a63730-7047-4c79-add4-2b56a8b73e69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df74efb0-cd8b-45f9-a5f9-034c1667dd0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6680f8ba-fed0-4824-afbf-71d316ae56a8",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d184b39a-df8e-4e4c-9bda-6d6ab736c9aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e7f3387-db75-41ea-a28d-f6c093916e0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4e4e3eb-3c25-4ea2-b8b3-594f03ca4fa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb39479e-c78c-4c02-8c29-b43b96f8eee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "371f3750-ee1e-46e3-a8a4-75a1e2a6edb6",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24f0468b-083f-4e7f-af08-60fbf8ad0dbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48e3dda6-b7eb-4344-9c79-93b4291aa4ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c556ace-e4a2-48a4-9226-9b56edc6c191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90596053-82f4-4abe-b042-079fd08d756b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eb8d220-bd3b-41e9-bfa0-c62ff9b8b197",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f65d7bd1-d8d7-4795-8a91-06c37dd4724a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f411916e-6976-4304-bbee-a9ee914f71ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9953e0dd-95d0-4564-8227-756592738556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f33af4c-3289-47d8-871a-5d751446bc4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf36a292-20da-423d-9e61-100042ae9781",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe01a1a-a861-4c70-a030-9c3fe502996d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2d77196-515a-4124-857b-cab3c26950c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56aec52e-e594-487f-bfae-745821359c4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54deb0a7-0964-4fa0-8319-e97247fc9502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e242d9e-a77e-4ad0-8b7d-7d3165a628c9",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61054fe9-3748-44dd-b866-2e9f9a52e0ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78c60d1d-8ae1-4188-986c-6afbae65c427"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aadae150-ba40-4a7e-b519-b8d1f54906b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8497665f-c31d-4b5f-9996-87fb1d8f16b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0a0687c-30d4-4570-adda-d41e4747428c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a56e606-0467-4863-9907-25b8a49ef909",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd3c9d9b-bd49-4c1e-ad6d-5022786ac000"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b476b60f-67e2-47bb-b5a0-1f989d850395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b7c9868-0be2-40e7-97c2-850f15bfc2bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "704dc474-6dff-40b1-943d-9044d69f3d86",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8720ca59-d879-4e56-9889-b9b3b926d617",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "474c83a8-5bb4-409b-815c-e754fd4f444f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bceb2ee-1b46-4203-aa9f-5ceff9e93e22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ed9c46a-595d-4366-9273-64a417e4fc9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f7ce93-6268-44c9-a9c6-d2d025b1afd5",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a985ca-d743-4d94-b5c0-b9bd3307a704",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87e816bc-a7ac-4331-aff3-b612755e3486"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "040b4a7a-2685-47ac-bd64-3cd7aa2a1353",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8be8c31b-6e39-4064-a8ea-5334da751a18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a68d7b51-d1e9-4da7-96c0-5bb1af71827b",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2af56cc9-cea8-4c37-a026-2293a482e75b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a7e55a6-96da-42e2-8cd0-b4299c3a6ec0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee32865-f9f6-403b-801c-c8d0d2205731",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0377fe70-27fc-499e-97bb-c5aff20c4916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e754863c-9c14-475f-80fc-c3fc1b048d9d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda78067-428b-4b39-9eab-973351b6c4a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9d482e2-1838-42d0-9896-2c173f91b9f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2998d5b0-5aea-4ebc-abfe-1136c4da2329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7d7209d-8676-409d-877e-698c387aaebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3f3315-725f-4b9a-a962-be7e0d8abf1e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a0e4f6b-a839-4ef3-8493-e09e2428683c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b01881a-67ac-49b4-a8fa-e0b7d98a0268"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d7b984-60a3-4571-93fd-607f5f1e9fe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "211512f7-aced-4c3f-9c6f-e8963b16c994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23565ee1-4a80-4307-9e86-795c2d54ea02",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb9dca7c-be81-4561-bd2e-d02b0111011f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7f44c26-33f7-482d-8466-8ccea9b7db86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4592417d-1dcd-47e7-8a2a-6d61514d5fa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d9bc10c-a49e-4719-8ffd-8bfd9111bbf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea2fac05-0cf0-4f04-9edc-8c40fd99abbc",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb18993-e6c8-4aa1-9d29-96270a2f3f20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2dc12b34-9d2a-45aa-ac73-a7fb68a3fc1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c275dad2-0de4-4023-aa22-1fcfcd6f01b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d77bace0-86c3-4ac5-8a9b-6a924383b6f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "238e3e81-4e6e-4e80-9176-1214cb903e91",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6537edb0-7b6f-4a94-a79e-11714867e2ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "929a578f-5b20-4fcd-9485-f40241fac2f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ee1f9e-86f8-44e5-a8c5-8b96d4048a51",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82403b3b-0bac-4d79-a8fc-aff583d96a4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f680f4b3-f7f3-4956-ac47-e1a9b1949407",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37c9abea-60de-47d7-abb1-a223233a1def",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b8e5a24-37ac-4a40-a7f3-9cd537d3cf38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd93f8c-94e5-4a47-9e72-db3afa133bd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bf47468-8d4c-4e58-a747-ec130d666938"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "779a80f7-ed61-4b67-9130-e91c0dd3d3ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8351a66a-230e-4e5d-a5d0-881042269722"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8dd64963-71b8-4300-a169-b2fc3d4d4bfa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e81d7688-98f5-4650-a215-0eef86e7920a"
                    }
                  }
                ]
              },
              {
                "id": "eb286eea-8e6d-4ea7-bd01-af2c7f337b77",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ed8d3a46-85aa-4afd-9ea5-d01c4b1b5453",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f443bff0-f785-45a5-8095-be4bcc4ac78d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f1e8b924-6852-4859-bfa3-a6c58208eb16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ad22b7-f334-40f9-b8cb-64f03f6b647c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a7e40fe-1906-466d-8276-1ae28803e0b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87abe323-c382-455f-a576-7119946fff7a",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44418bff-7d6a-40ea-a15e-706d3fac8b03",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4fce2c5e-3931-498d-bcfb-e5d1e8393e77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaeb2007-d856-488c-a5c3-acf968bf8cf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9cbb87d5-402a-423c-8481-5f0a4c6fa415"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2615154a-17e2-422b-b1fb-f03ded9beb72",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "195c86d8-8910-4c87-87b0-75a076215cba"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0deeb596-c659-490a-b7f5-f33b15b1db20",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb9a4d47-9f3e-4a3d-8f9b-97bd7ecbf6f6"
                    }
                  }
                ]
              },
              {
                "id": "f1adc0d3-19df-4e34-ad23-4742037f5b48",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "46d7f079-7714-4093-a0ab-8e687b350dbd",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c5f7b62-4425-4ecc-8015-e16b1ab67632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "34ac682b-5070-46d0-b13c-0aac69898428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82fec048-7696-45d6-a65e-6f15c3eecd15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efcc2452-0a9b-4cb0-b0ea-0d712f79e5ec"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0199327e-59ba-4299-8d8f-5260753561ec",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8e65bded-3734-4943-886a-2cde6ca9a845",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d532b2c4-ba74-4986-bc47-92c1a0c3dee7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a1ffdde9-20bd-4d42-87e6-46e7caca7f01"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "031249cb-f102-4d93-b8da-f0659018af14",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "653c06ce-83f0-49fc-8a6f-3b448f7d7389"
                    }
                  }
                ]
              },
              {
                "id": "4e43c733-62b2-45a7-9508-ec960b891c99",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a47229ed-176f-4bc9-8334-6cb0a0d30652",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "07503db5-7fd0-4a44-84d1-b8c7a1521424"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "31de6282-0c43-4ef6-944f-4df0e7bf86c5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "636d5cdd-2011-450e-8c70-fd8305eea7a0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7f6f0db4-0245-46fb-b377-c8d6ebaa94b7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "4c774a55-2556-4d40-ab16-a54467ce4894"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c83b8b93-ca0d-4731-b627-870387740f43",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6d6383a7-ca43-4ce3-ab68-7526065df09e"
            }
          }
        ]
      },
      {
        "id": "e0f79266-9b68-4bba-825b-5a71f0eac958",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "30e24d4d-d282-4c1c-bb4d-76f68122f121",
            "name": "Negative Testing",
            "item": [
              {
                "id": "80a1e028-0fbc-48d6-baff-415cf5dfcbba",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c0f9f109-35f6-4905-a9c3-85e1f94c4ef4",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab80f624-0491-4f84-a2a0-ccb11a20296a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9a2777f1-d54f-41c7-a699-18784b455b02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8cc91dc-1ec5-4490-aeba-7685d68b853c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d5ff8137-b316-4e4e-b9b5-c67e26e45ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd10d068-1ad0-42b7-8985-907e5c339560",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ab54f48-e24d-41e7-a223-7b9f82d048c1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "14b200af-3cde-42cb-8366-b094baa90c2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "242fe18b-00da-4027-982d-27426b9a5a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6e4e1f5-7aab-4c40-89bc-207b709e6e51"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1587ac5d-2b26-47bf-af38-2444bc3785c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab41c80a-6be9-4571-b2d1-339ec8665390"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "866afd14-92ba-41e1-a91d-b37d5536b762",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b4453d55-d503-4564-8a59-e8e94fb080c7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e519c28c-a5a9-4be4-85d6-fcb334caa9c0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "639463cf-a3fe-4df0-8f07-d56f27df46fc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "55aa797d-c075-4003-9f0f-d7e6e86129d9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3f0b8516-1271-4ee5-8952-35cd2469e1fe"
            }
          }
        ]
      },
      {
        "id": "621bb038-49a9-4e81-b678-45181314e896",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c63820c2-6b34-404b-a16a-9deab3009067",
            "name": "Negative Testing",
            "item": [
              {
                "id": "66b1a6c6-e2ff-4327-b934-d31c488f2422",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "baf40eaa-9585-47c6-89d8-61f8fabbfd05",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f269ab4-f0ca-473f-ab12-fc15ffec490e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "330b86d4-48f8-4d98-bab1-6d5bb44c1d3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1327d0fe-12d4-4729-8811-e48c5ee2aac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4dcd2e84-1b6c-47d5-a259-d5c327185ebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65120dfa-df62-4406-be00-0617b94f00a1",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b12d444-a515-495a-8b75-8df38b01c82c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "57f6dc7b-2b3e-4241-9f44-1e30a8ad57c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c762457-eaed-46fb-9bab-205960cdf061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e47a4f3-ec63-46bd-9807-c86d2cb6aa91"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "152e7272-7c23-4fa5-bf23-ad69fa7a8c6e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "be18528b-0f2d-4360-ae9a-7f7d7ef5f33f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e4c88d7-5238-420f-b234-ad3d19cc492c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94f5b545-7fa2-4f67-bc4c-c4fa3a1e29b6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b1a32eca-6997-4a0e-9296-bb21dff1b081",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "adb3d7e5-a7c5-474b-9982-50af21a9518f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f344fd23-dcaa-4246-95fd-f0b12695408c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8730c3e1-b328-4851-bc21-d4ba4c7298a9"
            }
          }
        ]
      },
      {
        "id": "e7493e65-5142-4bc7-9909-42b9c0e6dbef",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "328d3352-5eb4-4bab-b053-73ccd568adf2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "11964195-9e01-4a0f-b14b-a99d5f979cfb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a83c88ba-7124-46df-ba15-d181180f2b2b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063757de-e4aa-4882-8ec3-01677786d329",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "346153d2-0035-4639-89e2-a0982d8be3b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "793c768f-4aca-46b3-8c58-5895239fe616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e880cdd7-d95a-4e15-82fc-fd515b119325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46332725-3a45-4734-83c1-a8c36b625b63",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d317c2-fb7b-4e7d-93c6-737fba88b319",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0f02ebe9-a232-471e-b9e5-ebfea63038dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4985e432-b34c-4660-bf94-d0daa5a7050f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3eaf68bb-267c-405b-bc5a-9296f4d38d68"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5bcbf15-aada-44a4-b15d-2e8b6cf80c99",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f347dc00-e2a8-47f2-adf8-d878f12e1c26"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3800aaaa-1958-4a5d-ab3e-2a32b5f008eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0e3373e2-f5b8-4d87-a1d2-2c0e939d6ef2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2e55397a-f7eb-475a-afaa-2ad9a67b4f98",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "09638c5c-4c19-472d-88cc-b58c6fdad493"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "160457f0-fb1e-4ab0-b16d-580a119eed5c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bac52662-13b5-4f02-af7c-66feda37c6d4"
            }
          }
        ]
      },
      {
        "id": "2b08a7ef-cab7-4dfb-9448-cc9bb77b7206",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d7a32985-4e1b-4f7c-900f-6ae8f0cc10bb",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9b5d7233-7435-40c2-8f9d-9ab7acb1318c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "066258ab-8a67-498f-baa7-2bb46994bb42",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "46395738-5b3d-4fa2-baf3-62920d642a2d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e65e83c2-86ba-4fa1-8234-ed7a62a2057f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1917,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 515,
        "pending": 0,
        "failed": 39
      },
      "testScripts": {
        "total": 963,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 954,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 12.409961685823754,
      "responseMin": 3,
      "responseMax": 306,
      "responseSd": 38.57267282033073,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1676649622297,
      "completed": 1676649636441
    },
    "executions": [
      {
        "id": "685a07f6-343e-4e28-ac51-18ec85cae517",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "fd34cdc8-6a25-4606-abb8-a28eb2247a5f",
          "httpRequestId": "eb7be67e-b2ba-407b-b14a-43858577aa99"
        },
        "item": {
          "id": "685a07f6-343e-4e28-ac51-18ec85cae517",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b811224d-e14d-4c7d-abec-da0fe452b95f",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 0
        }
      },
      {
        "id": "e8297b2b-6854-4ab2-8a07-21f9f845d2a3",
        "cursor": {
          "ref": "54192ab8-74f2-4dd6-8b0f-b8367382ad0d",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "cff92fbf-8774-49ba-8cf6-dc856bd8acf1"
        },
        "item": {
          "id": "e8297b2b-6854-4ab2-8a07-21f9f845d2a3",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d89e5b39-14db-4336-8fb7-00f3b8415377",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "09184730-5244-4a8c-ba0c-cb79327cb0f5",
        "cursor": {
          "ref": "a452da23-b1c0-4d23-b5a5-560dc92344ed",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "9ab1b442-ad5b-4405-9558-7306405aecd0"
        },
        "item": {
          "id": "09184730-5244-4a8c-ba0c-cb79327cb0f5",
          "name": "did_json"
        },
        "response": {
          "id": "87a7cf34-be19-47f7-a4a7-5e03ab301b0a",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "196aa5c1-9ba0-4b07-b774-c4a817658184",
        "cursor": {
          "ref": "b4afd537-d4e0-4f20-9f0d-bdaaa439283e",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5a11d9dc-91ff-4386-9702-c0b59ed1abe4"
        },
        "item": {
          "id": "196aa5c1-9ba0-4b07-b774-c4a817658184",
          "name": "did:invalid"
        },
        "response": {
          "id": "667cf4eb-ba5b-4e14-9ce9-a80ee16f7aca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "196aa5c1-9ba0-4b07-b774-c4a817658184",
        "cursor": {
          "ref": "b4afd537-d4e0-4f20-9f0d-bdaaa439283e",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5a11d9dc-91ff-4386-9702-c0b59ed1abe4"
        },
        "item": {
          "id": "196aa5c1-9ba0-4b07-b774-c4a817658184",
          "name": "did:invalid"
        },
        "response": {
          "id": "667cf4eb-ba5b-4e14-9ce9-a80ee16f7aca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "f8e70798-5ee3-4e54-81c0-84be0dec3fbd",
        "cursor": {
          "ref": "5d318bef-3e1a-4471-8177-668db0818848",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "08118924-e70c-462c-8f55-14bc60ae9ce0"
        },
        "item": {
          "id": "f8e70798-5ee3-4e54-81c0-84be0dec3fbd",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "4427dacc-9c1b-46e4-9452-ff1bcb9b7991",
          "status": "Not Found",
          "code": 404,
          "responseTime": 49,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b8cb41a-4f8e-414c-adaa-eb24956af38c",
        "cursor": {
          "ref": "f48bd9c9-acb6-4f7d-af94-16570c505bae",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ab5901e8-8cd2-4ee5-ad05-997b59836744"
        },
        "item": {
          "id": "4b8cb41a-4f8e-414c-adaa-eb24956af38c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "6d358f14-7626-43cc-96c3-ceb1faabef7a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 4,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c257ed7-ec70-4056-a31b-ba46860e7ec8",
        "cursor": {
          "ref": "98e19188-a72f-4ac6-9c9e-6561da9d9d02",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d933fe9b-8848-4ace-827d-61712ae977a7"
        },
        "item": {
          "id": "0c257ed7-ec70-4056-a31b-ba46860e7ec8",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c83736e6-70c4-4f3c-9e17-0b78623aaf18",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6fe5ad0-c254-49d7-bee7-a6c23ed81f05",
        "cursor": {
          "ref": "96b8040b-cba4-4032-a245-57ef4e2a5a9a",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5f8aa3fb-0433-4318-8e5f-f2e157800814"
        },
        "item": {
          "id": "b6fe5ad0-c254-49d7-bee7-a6c23ed81f05",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3a1053f7-15b6-42d0-beeb-bd33b26db839",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6fe5ad0-c254-49d7-bee7-a6c23ed81f05",
        "cursor": {
          "ref": "96b8040b-cba4-4032-a245-57ef4e2a5a9a",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5f8aa3fb-0433-4318-8e5f-f2e157800814"
        },
        "item": {
          "id": "b6fe5ad0-c254-49d7-bee7-a6c23ed81f05",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3a1053f7-15b6-42d0-beeb-bd33b26db839",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cccb4676-d16a-42cf-84ef-adb8567c8891",
        "cursor": {
          "ref": "d8cc9f53-9187-4fe0-b49d-bdc7df13bf92",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "d50577fe-f540-46bb-aebe-3b7ec1b9938c"
        },
        "item": {
          "id": "cccb4676-d16a-42cf-84ef-adb8567c8891",
          "name": "identifiers"
        },
        "response": {
          "id": "00ef52a7-2839-4da8-ab65-ffb6557cc955",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecf12037-7f36-442c-b38a-2200cb75ca01",
        "cursor": {
          "ref": "9655398b-8684-43cd-80f7-d89c07a92a0f",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e9ac6b9a-af1d-452a-9c3f-bfc09db1e3fc"
        },
        "item": {
          "id": "ecf12037-7f36-442c-b38a-2200cb75ca01",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "455fd566-71f3-40c3-a49f-1c0cde86cfce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecf12037-7f36-442c-b38a-2200cb75ca01",
        "cursor": {
          "ref": "9655398b-8684-43cd-80f7-d89c07a92a0f",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e9ac6b9a-af1d-452a-9c3f-bfc09db1e3fc"
        },
        "item": {
          "id": "ecf12037-7f36-442c-b38a-2200cb75ca01",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "455fd566-71f3-40c3-a49f-1c0cde86cfce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "014673ab-0c42-4387-b1d6-4ba227ffdae9",
        "cursor": {
          "ref": "dbaa51f2-380b-4ece-9171-37a50d116d7c",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "9fff1d7d-654b-433d-959f-52ec61c61bc8"
        },
        "item": {
          "id": "014673ab-0c42-4387-b1d6-4ba227ffdae9",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b9521d41-947e-40bb-96ad-e057cfdd8e75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "090c7592-7aa9-43dd-9291-cd6093b91fa9",
        "cursor": {
          "ref": "c19d54c3-e37a-47ec-b84f-4d3a4ba2e474",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "fd714fbc-bf81-42be-a31d-35730152041b"
        },
        "item": {
          "id": "090c7592-7aa9-43dd-9291-cd6093b91fa9",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "9c413dae-aebf-4c17-97e5-250b7106065a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "569a36c9-e635-43cb-8ea6-667cabfad3ce",
        "cursor": {
          "ref": "e25b8aa1-9a52-46fe-8e1b-a20c7369f6f9",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "62513c6d-2936-4063-b088-fae5c36d634c"
        },
        "item": {
          "id": "569a36c9-e635-43cb-8ea6-667cabfad3ce",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "0ac57656-5e03-4bc4-b4cd-609f5f121d1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5af537da-170b-4555-99f0-2da644f96b21",
        "cursor": {
          "ref": "5f5ae18e-9c5e-4a5c-adc3-0f6ec1b741ae",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "958978cc-aa8a-4bd0-be03-fc2b99a34097"
        },
        "item": {
          "id": "5af537da-170b-4555-99f0-2da644f96b21",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "95801a97-b901-450c-bdb1-524169b8b4dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5742640f-7aaf-4233-87b7-0f915d878a09",
        "cursor": {
          "ref": "101d08c9-7384-4ca7-8f3d-dda4ef71931b",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b8c49d4f-17c7-4f71-b5b9-12cbadca4a2f"
        },
        "item": {
          "id": "5742640f-7aaf-4233-87b7-0f915d878a09",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "8086e10e-b508-4499-be48-2039c0c27e8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "089640f8-7d3b-44c6-9e82-1ef3bf4c3a91",
        "cursor": {
          "ref": "e898def0-9da9-4843-90a7-1f139bd8191b",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "21197e9b-c0bd-4d56-871b-cffcd5c7d0da"
        },
        "item": {
          "id": "089640f8-7d3b-44c6-9e82-1ef3bf4c3a91",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e67d5032-cdd3-4332-8540-bb3e4bb8f809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a2b7746-e39b-4de4-bb32-c58df489b0c3",
        "cursor": {
          "ref": "e7b4a4f7-5eca-45ec-b1d6-f32d5b47e081",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6f98b672-f700-4320-8e12-23a51d851bef"
        },
        "item": {
          "id": "6a2b7746-e39b-4de4-bb32-c58df489b0c3",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "5c5bc63a-eebe-4fd4-a0d5-7de4e9af88c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "777ddf2b-9e2e-46d7-a2a1-6802aa1c074b",
        "cursor": {
          "ref": "c0860d0f-597a-4456-ae91-dfdd15683022",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ff2a66b2-cbcf-472a-96ca-9a455b3085ca"
        },
        "item": {
          "id": "777ddf2b-9e2e-46d7-a2a1-6802aa1c074b",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "1a86b9a5-c04a-4e24-9fd7-9e3f83ec7913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26f48b45-2e77-4ac9-93e4-aabd5b47380d",
        "cursor": {
          "ref": "d5b1edc1-576c-4337-af29-d173ecd6acd5",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0050dbf3-2e25-4ea3-84aa-0f5d094a61dc"
        },
        "item": {
          "id": "26f48b45-2e77-4ac9-93e4-aabd5b47380d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a40d33d5-88ad-4f97-9aaa-22c6629ac7f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a8fe01d-789c-4111-aa6f-d440def3c0aa",
        "cursor": {
          "ref": "d4928379-f57b-433e-ab36-bc634b7e94d5",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f41eaf3e-f263-48ea-8d03-a9231bd9d088"
        },
        "item": {
          "id": "5a8fe01d-789c-4111-aa6f-d440def3c0aa",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e5f0a82a-7c5d-40f1-bc38-0fbca73ed5bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a91992c5-ad66-4d44-8742-ed351bc9f023",
        "cursor": {
          "ref": "5f4225f0-2f8f-455d-bbc2-898c414eea9d",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "0a6605f8-4b68-457a-868c-42c29e59532b"
        },
        "item": {
          "id": "a91992c5-ad66-4d44-8742-ed351bc9f023",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e9b1d432-f868-4a50-9a80-6b96fef31ca4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d938ab36-8bb6-4370-826b-533ba31f71b1",
        "cursor": {
          "ref": "2c6a4d30-4ce9-4ee1-937a-bf724cf264e0",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a53fb1da-e029-403a-a0b4-eda2bf3880cb"
        },
        "item": {
          "id": "d938ab36-8bb6-4370-826b-533ba31f71b1",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "3d73415c-4419-47cb-b969-2e7b3515ec6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54429b2a-38bd-4573-86a0-a96aa5e2d1c1",
        "cursor": {
          "ref": "096cfef2-1005-4649-942e-542f779e5192",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a557efa9-cbb4-4dd0-b1af-60ed2cf433de"
        },
        "item": {
          "id": "54429b2a-38bd-4573-86a0-a96aa5e2d1c1",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "fc0c9adc-7fc7-4a0c-a9d3-506c2aeb06ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3ebce0f-32d2-4b7e-87c4-7a26db4898d9",
        "cursor": {
          "ref": "b1c480b3-5510-47d4-ae5a-499cabbb681a",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ae45fde7-5778-4991-a163-96cd3b554a1c"
        },
        "item": {
          "id": "c3ebce0f-32d2-4b7e-87c4-7a26db4898d9",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "1284adc6-4afe-46aa-b7a2-9d5ad6d4915c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8f8caf5-e221-43dc-b68c-702c76434a7c",
        "cursor": {
          "ref": "0d86912c-6ac0-4f7a-b225-9a79be429d90",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a69a951b-0d65-472f-b8e9-9fc929853978"
        },
        "item": {
          "id": "e8f8caf5-e221-43dc-b68c-702c76434a7c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "47bb9581-c985-4054-ba0e-31f6fbfa091f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec117f6b-3534-422e-885a-0ce83893c7f5",
        "cursor": {
          "ref": "56aa384e-0507-421b-bb61-97be5bdf9e55",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e7ed3484-3a83-4300-9d1d-f4ad07052cb4"
        },
        "item": {
          "id": "ec117f6b-3534-422e-885a-0ce83893c7f5",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "6f0ddd49-ff5a-4737-a001-ceb87e39eedf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c78d7a11-ef20-4f4b-a0e4-2e344abcecfa",
        "cursor": {
          "ref": "fc4f6e3d-31d4-4380-b6ec-ffd9a1306caa",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "5de04391-5a12-4916-a675-5c79da1106e6"
        },
        "item": {
          "id": "c78d7a11-ef20-4f4b-a0e4-2e344abcecfa",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "bb4cdad3-e0f8-4f95-9a24-ccd835dac98e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b646adc7-46d9-4a36-ac52-2e1db6142a82",
        "cursor": {
          "ref": "5578a50c-5f09-4a8c-b70c-843ffdac83de",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ff30fb13-8c98-4536-89da-3a269c5e55a2"
        },
        "item": {
          "id": "b646adc7-46d9-4a36-ac52-2e1db6142a82",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5358d383-1ecd-4c23-b1e6-d0e200e2b748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "427a9772-237b-471b-a8ff-a2ef81a0c4c2",
        "cursor": {
          "ref": "a208f559-d4d2-46a3-bd52-8878e9da0768",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "edba1f37-11c0-428e-aebe-e1f7f27fddae"
        },
        "item": {
          "id": "427a9772-237b-471b-a8ff-a2ef81a0c4c2",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "3a54b833-ebe1-49df-b8b2-e7ae502c43ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b21b8673-a382-4803-a6b6-26f2d3c0906c",
        "cursor": {
          "ref": "b23a9a8a-4802-45c4-a365-fe771c01470d",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "96224490-a639-427d-9cfd-dbb89cdaeaf1"
        },
        "item": {
          "id": "b21b8673-a382-4803-a6b6-26f2d3c0906c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "fe8ad5a0-60e1-4a15-8c9b-b3f6d073be0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "534b6f1a-7d40-4b2d-917f-79def634dff3",
        "cursor": {
          "ref": "ea5d5f89-056a-4ff1-aa4d-19b5e5a994ec",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "6b4f454f-0925-4fc9-b669-c33283939512"
        },
        "item": {
          "id": "534b6f1a-7d40-4b2d-917f-79def634dff3",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "6e51aa3f-de01-43fb-84b9-766bc12d0ac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040dac75-03ed-4bde-957f-fea7047edcd8",
        "cursor": {
          "ref": "33c7a481-83a9-4951-ab65-0f812695a644",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ea9f4cff-a16c-4c6b-a524-6045f66bf18c"
        },
        "item": {
          "id": "040dac75-03ed-4bde-957f-fea7047edcd8",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e3bbde90-7054-4a12-b3e2-9e3d1ff96db2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb0517b9-a3ca-45dc-8bc6-85b47aed615e",
        "cursor": {
          "ref": "92429e96-dec1-43e8-b028-709d57e3903e",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "927ee2c2-e44f-4996-9232-bd1d8635b3f6"
        },
        "item": {
          "id": "fb0517b9-a3ca-45dc-8bc6-85b47aed615e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "6de9aa9c-aca5-4be1-8d09-cd6d55549374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93253350-8094-4951-a355-14c14958c7df",
        "cursor": {
          "ref": "fef1723e-a6d2-4f5d-94f1-301616ab4877",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "794d3a1a-bdfe-4d1c-9ac8-4f3287b8cce3"
        },
        "item": {
          "id": "93253350-8094-4951-a355-14c14958c7df",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "4d49ea38-c999-44d9-91e8-56c10bb0ae82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d220ecdd-9f19-4283-8511-7c06f038f632",
        "cursor": {
          "ref": "1b3b4f5b-f4c9-496b-87be-4026bb45bb38",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "333ccfe0-deac-41a1-836e-0a8c35857565"
        },
        "item": {
          "id": "d220ecdd-9f19-4283-8511-7c06f038f632",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "4d02da2f-f84b-4fd3-a67d-486c3a0a1ed3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae346e1d-734e-4d66-aee6-0466115c23fd",
        "cursor": {
          "ref": "521c1675-b4cf-466d-9803-f1e33fd64464",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0e80bac7-aa99-4f9e-b63c-76d7178420a2"
        },
        "item": {
          "id": "ae346e1d-734e-4d66-aee6-0466115c23fd",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "3c96360f-0503-4545-96bc-281e523703ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edeb91b9-e682-4360-9d12-d9fe1055aced",
        "cursor": {
          "ref": "51e492ba-8d9e-4f82-b28a-03216516d784",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e10e5634-1cec-45d6-bf95-45e0817b2e25"
        },
        "item": {
          "id": "edeb91b9-e682-4360-9d12-d9fe1055aced",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "3cd145f4-a682-429c-b623-b6f1468e8571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e530f5-ceb1-4152-8397-7652cc1c5704",
        "cursor": {
          "ref": "61dc8a7f-1728-4fe0-a4b8-58d94e2ae621",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "57f8e7b6-4ca9-44fe-bb29-3e351c34cd4c"
        },
        "item": {
          "id": "27e530f5-ceb1-4152-8397-7652cc1c5704",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "6a61e0a2-ef86-453d-8962-54e4d2725193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e6b0f81-ded9-4b59-a1a5-411287ec6f0b",
        "cursor": {
          "ref": "a1c20a1b-6595-42d5-b7d3-6d38d68f30db",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "594364fc-237b-41e3-9125-1c9e21f339d5"
        },
        "item": {
          "id": "2e6b0f81-ded9-4b59-a1a5-411287ec6f0b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "49918ad4-d865-4796-9ed8-4e334cfd943a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d28ca872-a380-423b-9182-7de2894f124b",
        "cursor": {
          "ref": "23fdc3b9-6f45-43f8-8a89-ddea16c9da82",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "16c94c8c-6491-4ad9-9f1c-d5329101f403"
        },
        "item": {
          "id": "d28ca872-a380-423b-9182-7de2894f124b",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "2c743b04-d93a-4e3e-a5fa-c642137032bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73241d03-337e-401e-909f-f1dec01223bd",
        "cursor": {
          "ref": "248d00c5-0611-423e-b09c-f9f39d38e481",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ee264823-0d88-4562-b1d0-9579e2798dc9"
        },
        "item": {
          "id": "73241d03-337e-401e-909f-f1dec01223bd",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "30ae94b3-095b-45d3-934c-644072a43e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da849b08-f647-434b-beb1-87f5d306d041",
        "cursor": {
          "ref": "573fe3bc-67aa-4ae2-9230-c5005f276d9e",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "9f4ca319-5525-4635-8c81-df7db0955271"
        },
        "item": {
          "id": "da849b08-f647-434b-beb1-87f5d306d041",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "2951b7e7-cebd-475c-ba35-a059c4a4e0cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12aa2ec3-2c81-432b-aa32-572e40a619d5",
        "cursor": {
          "ref": "5e09a771-b399-43e5-bf11-292bba422f83",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "98344f44-82cb-4689-87c7-8ff45c7bef51"
        },
        "item": {
          "id": "12aa2ec3-2c81-432b-aa32-572e40a619d5",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "57e910b3-a980-41fc-973f-fece71791ec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "015f8eec-3b78-451d-aa5b-da4e01d68fad",
        "cursor": {
          "ref": "2b038717-b602-4e03-bbec-7a6da737fa57",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "54a19790-ee55-4262-97dc-1f99987cc2e7"
        },
        "item": {
          "id": "015f8eec-3b78-451d-aa5b-da4e01d68fad",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "d1df99b1-ec44-418e-bf4c-5a388cdfa847",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "136da76f-1f61-46ff-8921-4966c36ef6d4",
        "cursor": {
          "ref": "94496f4f-23e4-4384-948a-30acfc4e74c7",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "86dd5a95-683f-4dd0-beed-cf1c8e3f3f32"
        },
        "item": {
          "id": "136da76f-1f61-46ff-8921-4966c36ef6d4",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2e781f0d-4b0e-4fb3-9e06-8d5c2ab1a9f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be8a7487-68be-4678-b19c-5431ab84877f",
        "cursor": {
          "ref": "2685ee84-568f-486b-a359-04b96ccd08e8",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8829bc1a-62d7-4300-b833-074f02084c9d"
        },
        "item": {
          "id": "be8a7487-68be-4678-b19c-5431ab84877f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e3ba168e-7719-4d21-af0e-a82fbd32eac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "10f372e1-3e6f-4ef9-a0cb-137a266dc874",
        "cursor": {
          "ref": "49837661-58fe-4759-bf37-5c6d0e40dae4",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "4f4c17ee-8f67-4af5-a3df-a038f1aba65a"
        },
        "item": {
          "id": "10f372e1-3e6f-4ef9-a0cb-137a266dc874",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e01caa0d-f5c0-41fe-ab1c-a24120ffc9c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f79312a-c150-441e-ba51-42651812dada",
        "cursor": {
          "ref": "08bcdcc6-5ce6-44b0-b25f-ce03bd4357dc",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d743cb33-3f1e-4390-8f4a-cb9d766f0f87"
        },
        "item": {
          "id": "3f79312a-c150-441e-ba51-42651812dada",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a9819b10-838f-4ad6-901c-e4988bd2d3fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5fae470-382d-4bd0-b529-dd8b13885efe",
        "cursor": {
          "ref": "f500b4d9-5857-445e-b49a-4dfe696af757",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ec70d0a7-218e-49cd-aba3-6aec27c6b3f0"
        },
        "item": {
          "id": "d5fae470-382d-4bd0-b529-dd8b13885efe",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "fc2de72b-0e2c-4a8a-83cd-ed4c3c75b696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f91347-1b25-4fed-bf72-266f6659feda",
        "cursor": {
          "ref": "47dace0d-c804-4f40-9929-9f047a849fa6",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a5236dcd-ed05-4b47-96de-f139a2ff91d3"
        },
        "item": {
          "id": "40f91347-1b25-4fed-bf72-266f6659feda",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ddd2b1ae-b9a6-49e5-9eb7-bc6a8f474c94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "669ba68f-e8da-42c0-8dac-cbf23e843cfa",
        "cursor": {
          "ref": "c8fe865b-75eb-4d3f-a0f9-79caac234dfc",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "39b32949-1c12-403f-8b53-5a20a20348be"
        },
        "item": {
          "id": "669ba68f-e8da-42c0-8dac-cbf23e843cfa",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "7a693f9d-e2b2-4fae-b59e-140578ddb65b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7666ddc5-820a-4497-b268-8cca5b6df2e5",
        "cursor": {
          "ref": "2432e5b9-2e56-4085-b794-732101054c10",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a1cf6b5c-6bef-444b-8d57-cc23452b7d1b"
        },
        "item": {
          "id": "7666ddc5-820a-4497-b268-8cca5b6df2e5",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ceb80fd3-adbe-4b39-90ed-0d6cc64d70b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f5f83d2-e567-4b83-9242-422afd603dc6",
        "cursor": {
          "ref": "dae6482b-af47-4aeb-95aa-7e0e699e9fb8",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "43837278-b9eb-46db-ae50-317de59cac32"
        },
        "item": {
          "id": "7f5f83d2-e567-4b83-9242-422afd603dc6",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "7e006a4d-97d5-49fd-bdea-220698599ccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "44d55e4f-b038-4722-9d6a-df2141c9a0b3",
        "cursor": {
          "ref": "36d9ae83-a8ea-40ce-bfc2-c6c95c8a8af7",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ba3bfbd1-3be1-4995-9c8c-554139fc1fe2"
        },
        "item": {
          "id": "44d55e4f-b038-4722-9d6a-df2141c9a0b3",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6665a1a9-a8d0-42a3-b1b5-37cde03345ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c358c7c-b5b7-4bd6-bda3-b25d046adabb",
        "cursor": {
          "ref": "6ea27b51-01df-42d0-be0f-7b010e65aac0",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ecada629-f001-409f-9b60-d8260e9acc29"
        },
        "item": {
          "id": "1c358c7c-b5b7-4bd6-bda3-b25d046adabb",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4208c813-f7d9-4206-a7c2-35959f3726f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8356bda9-f170-4e17-9b64-8a72496adeaf",
        "cursor": {
          "ref": "0dc65ffc-4ee3-4a16-9ebe-e8234e841acc",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "fb1e2be7-a260-494e-8889-f2350d56ebb4"
        },
        "item": {
          "id": "8356bda9-f170-4e17-9b64-8a72496adeaf",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d17cd332-f929-4e02-9cf2-0f1880bce177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e0e505b-def8-4996-aa54-74772bde1a98",
        "cursor": {
          "ref": "5994bf8d-c052-4570-a10a-ce6b06a7e11b",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "7851a2b0-6c54-45d8-9c9a-7e258e713bc6"
        },
        "item": {
          "id": "6e0e505b-def8-4996-aa54-74772bde1a98",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "80778227-396f-4fe1-974a-dba3ab344248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5cdc455-913a-4b16-8aae-f8596879d66d",
        "cursor": {
          "ref": "21e9abf8-d75b-41b0-b473-b4c220afa492",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "7baf2fd9-2659-4b47-a4a4-6dae17b0874d"
        },
        "item": {
          "id": "c5cdc455-913a-4b16-8aae-f8596879d66d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "41c4ad91-f612-4c3f-a534-aaeba846acb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f23c4436-42f9-4def-adee-552276a03540",
        "cursor": {
          "ref": "c0b9a90e-9103-4057-a554-d19dcffcf88a",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "cf118aaa-a23c-4276-8654-15dbebdc4884"
        },
        "item": {
          "id": "f23c4436-42f9-4def-adee-552276a03540",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "4411f77e-1385-417c-81f8-43a84aa52411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c636d88f-f02e-43db-946e-d3dc52b64f65",
        "cursor": {
          "ref": "ab8223ad-6191-43b4-ab74-8dd9d5a0e7e9",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "25af444e-83c3-4b77-b12c-8a50a20c75b7"
        },
        "item": {
          "id": "c636d88f-f02e-43db-946e-d3dc52b64f65",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "eb6e1491-95ba-439e-b389-98604525c02a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5385b737-4b14-49ae-af7c-c3e6da220f4b",
        "cursor": {
          "ref": "c06d4b7f-f060-437e-8534-3f463bcc7a3a",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "41f3d790-6648-4c2e-b89f-3c0a3658d108"
        },
        "item": {
          "id": "5385b737-4b14-49ae-af7c-c3e6da220f4b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ad031809-7d15-41fa-a153-5306b9d7aae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "484410ed-89bd-414b-83b7-761487c9c8dc",
        "cursor": {
          "ref": "65de99ef-7e71-4b5c-8fb6-3c6059f5df7f",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "7c88d64c-5d5b-4893-9804-3b4cc546771f"
        },
        "item": {
          "id": "484410ed-89bd-414b-83b7-761487c9c8dc",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ba583ec1-68e1-46d0-a9c5-25020ff865a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e8aa34-e381-473a-80ad-766361ed0078",
        "cursor": {
          "ref": "331d2719-b5f4-473a-9934-80aab3ba2fe6",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "9d21c46b-29c1-455e-b9bc-d9285913e899"
        },
        "item": {
          "id": "08e8aa34-e381-473a-80ad-766361ed0078",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "887465cd-cc1c-4d06-814a-43d7d37f76e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaad8270-0a25-479b-b2f7-dc4a4ac871a1",
        "cursor": {
          "ref": "c99a1aee-1f53-4d5a-882e-9c28d40cef6b",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "d2e1494d-7665-4f40-8eb9-4d0078dd1df3"
        },
        "item": {
          "id": "aaad8270-0a25-479b-b2f7-dc4a4ac871a1",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d68ded34-c92b-4836-bd5e-59b4fb61581d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c73ab0ef-be6c-490e-b201-5a332ef935c5",
        "cursor": {
          "ref": "b5279fcb-f48a-4f03-807c-e4451ec576ff",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7a0bfbb8-77f5-4275-9006-cd1f631ec9c3"
        },
        "item": {
          "id": "c73ab0ef-be6c-490e-b201-5a332ef935c5",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b1ec4660-c481-4379-a382-765a9179789e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba0ad651-4875-47e6-885e-4748e065d1f6",
        "cursor": {
          "ref": "060eadbb-a455-4293-84f4-9797b380ce1b",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "37729ce2-c41b-4406-909d-fa0d8c1d8b67"
        },
        "item": {
          "id": "ba0ad651-4875-47e6-885e-4748e065d1f6",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "7a5fd0a2-dc34-4834-9a4a-aa9ec08de724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9810ddb1-0ab8-456d-9647-1548042aae97",
        "cursor": {
          "ref": "42e94b61-9917-4cbf-ac2f-2e6a4799582b",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "40088895-553b-455d-8570-852878be9a29"
        },
        "item": {
          "id": "9810ddb1-0ab8-456d-9647-1548042aae97",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f8a54de1-d225-4739-9ee4-4a1c39f283aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62dd62d3-b5b7-431f-830f-98c55e955269",
        "cursor": {
          "ref": "a3e3b71f-fe10-4888-8e9c-b479387892f5",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "81929b29-8226-4611-a742-ead684ed1b0f"
        },
        "item": {
          "id": "62dd62d3-b5b7-431f-830f-98c55e955269",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "2f28168f-523e-420f-9d73-73cb1f195782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f27873eb-e979-40fc-868e-4309b9df6d44",
        "cursor": {
          "ref": "e75f980d-aa32-4fd4-b72a-21a24682ba1d",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "024d2bb3-8a08-45de-a757-210ee2eebd0a"
        },
        "item": {
          "id": "f27873eb-e979-40fc-868e-4309b9df6d44",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "46c87c3c-77ef-4b22-aa68-d53ecdb7fc1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "670e128a-b5cb-414c-8a19-212f774ac17f",
        "cursor": {
          "ref": "ee6ffdf1-e530-4769-a612-33e5ca90ad8b",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "63598e2d-8642-42b0-9f59-2f42cddad22c"
        },
        "item": {
          "id": "670e128a-b5cb-414c-8a19-212f774ac17f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "aed734cf-ebfc-4c3c-9c9f-fe5af76cec5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d996e73-dfd8-4cb9-a072-7d5381d34473",
        "cursor": {
          "ref": "eef266b6-b7cc-4a15-81af-28586762f317",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0b53d2d7-8175-43f2-ab23-0f72098bf785"
        },
        "item": {
          "id": "8d996e73-dfd8-4cb9-a072-7d5381d34473",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "25b9bf3d-73f5-4fc7-890c-48bd5f5613f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "462e4be4-c50e-4e61-9735-11ab8d38bc60",
        "cursor": {
          "ref": "e721793d-4788-4b31-be62-ee1a10afd45b",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "c7b008f2-e85d-4f7c-9e1c-c7ed958bb75b"
        },
        "item": {
          "id": "462e4be4-c50e-4e61-9735-11ab8d38bc60",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ad87e45e-ec05-4820-a574-a1dacb796237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0d64303-1567-47fd-a2b8-d0ea24591e04",
        "cursor": {
          "ref": "5b52080a-f4ac-4d20-8b67-44e83f369c43",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "f10896ff-98cd-4ae6-a9d8-277117209f4b"
        },
        "item": {
          "id": "e0d64303-1567-47fd-a2b8-d0ea24591e04",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "18c7d222-0192-47d0-95cf-e79fc54a294c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0118adca-178c-4a11-a23f-02115def02e9",
        "cursor": {
          "ref": "1dedf112-acb9-473d-933e-008be04c1b3e",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "3f59bf87-c323-466b-9656-16051490497d"
        },
        "item": {
          "id": "0118adca-178c-4a11-a23f-02115def02e9",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "e9b5b659-e3c4-4fd2-a0d4-f195362cde64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e381d68a-1ce9-4b19-9d2d-6a810b3c6bee",
        "cursor": {
          "ref": "9ff3996b-f21b-40bb-9fe9-841a31ae27fc",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "e5f3a999-885f-4590-84f3-29510a9f13e1"
        },
        "item": {
          "id": "e381d68a-1ce9-4b19-9d2d-6a810b3c6bee",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b6f5744e-2aed-4929-ad4a-60856de34409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64c777d1-b0c4-4ee6-be56-3ac4c0814190",
        "cursor": {
          "ref": "50551dcf-e206-4925-a9fb-a230117e7b89",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "bda68af0-605c-47cc-9299-38cf61ef8828"
        },
        "item": {
          "id": "64c777d1-b0c4-4ee6-be56-3ac4c0814190",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "da758c7b-2ddc-4b85-b9d7-b2ef5d21c094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf53fd1-7072-43a1-b561-891e09779261",
        "cursor": {
          "ref": "e3813e3b-d079-487e-9b05-18a3588d3a96",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d213d7f0-ed3c-4b4b-9c7d-d87ea340afc5"
        },
        "item": {
          "id": "9bf53fd1-7072-43a1-b561-891e09779261",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "04049432-8044-4557-9515-072c6b1a192f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4553c50-693f-4aca-9b60-25ba867caca5",
        "cursor": {
          "ref": "f91fefe8-11aa-4059-9597-334d383aad05",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "98009390-0a2e-440e-8033-db181ef0e73d"
        },
        "item": {
          "id": "b4553c50-693f-4aca-9b60-25ba867caca5",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5bd6bf17-7392-4b0a-b738-1487df375b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c5a5c60-5083-419a-a3e6-f5aece439ac6",
        "cursor": {
          "ref": "841f5477-e3d8-4865-a818-bb8e363e58f4",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "6658ae68-8c3a-4683-92ff-01720f5e0740"
        },
        "item": {
          "id": "5c5a5c60-5083-419a-a3e6-f5aece439ac6",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "bb1037df-05c3-4135-85b1-5d6d97dce86e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2190d51-cbe2-4355-a1f0-acb7266ce950",
        "cursor": {
          "ref": "a8cae379-6a40-499c-81ab-a61b83a671b7",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "5ab98aca-401e-4d22-aa12-0ff463924048"
        },
        "item": {
          "id": "f2190d51-cbe2-4355-a1f0-acb7266ce950",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "9d7b8bfb-70bd-4dfa-9d17-a069eae9ac8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b7ebc07-55f7-44a0-8367-1e1178def98e",
        "cursor": {
          "ref": "4ceced31-c825-441a-a1b2-50c4fc103be6",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "54a6c356-e727-4bde-944e-6f77adcb0878"
        },
        "item": {
          "id": "5b7ebc07-55f7-44a0-8367-1e1178def98e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "8f581222-9520-41ad-9dc2-4766891c3857",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c8d488d-a888-4dac-bbe9-2a583c6ab650",
        "cursor": {
          "ref": "0329f022-4fd1-4a87-918e-b75d9fe2e830",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b475d12f-cfbb-4a46-99e8-3b4a2675186d"
        },
        "item": {
          "id": "7c8d488d-a888-4dac-bbe9-2a583c6ab650",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4885e30a-61ac-4ab9-846d-1154019267f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc7fd72-b00c-4894-8872-3fc9cc1e83d4",
        "cursor": {
          "ref": "4178cf92-2c55-4b39-9102-d893447827a7",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "d75f308f-0d1b-45d1-a621-c86d655f4057"
        },
        "item": {
          "id": "3bc7fd72-b00c-4894-8872-3fc9cc1e83d4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "572ec65d-9b06-4cd1-b6ad-04cd174dbfc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835b7b55-66c7-4f75-82ce-6b729548e8d4",
        "cursor": {
          "ref": "d048a3d5-0601-4a64-87c7-10c8fd7355a1",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "58098e64-acc6-4faa-afdb-3a9434700238"
        },
        "item": {
          "id": "835b7b55-66c7-4f75-82ce-6b729548e8d4",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "86cdb49e-c233-4cc7-8129-cc2fb9b1ed26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcce739f-4bd8-4082-94f9-7982aff6e57b",
        "cursor": {
          "ref": "649ec515-2e48-4fc2-a33a-b597ddde5449",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "10b118e9-599e-4d89-bf19-40cddf59b09d"
        },
        "item": {
          "id": "dcce739f-4bd8-4082-94f9-7982aff6e57b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "fdc686fb-ae9c-4021-a176-af3696461dce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58f5c34f-a112-4394-98cf-a4b124f01953",
        "cursor": {
          "ref": "55defdd9-b9f1-442f-8217-fa4ff9cea56a",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "392a1cba-38da-4674-a994-7165186a6157"
        },
        "item": {
          "id": "58f5c34f-a112-4394-98cf-a4b124f01953",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "cbc3a0d2-a5eb-4097-8a26-9355d4462e66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9665c8a-218f-49f2-902d-646ecd2585e2",
        "cursor": {
          "ref": "27cee022-0611-4e17-a168-d5e757cc65d6",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "790d03a2-01c4-4b22-8e3d-d43b0ff56677"
        },
        "item": {
          "id": "b9665c8a-218f-49f2-902d-646ecd2585e2",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "89e11a44-fb35-4a10-85d8-350a41d4c748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db7a1f03-e052-4f78-acda-17aca1161d92",
        "cursor": {
          "ref": "bde088d7-2fe4-4f80-925e-24cf031a821d",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8c082a1d-987a-4b79-ab7b-06189a80680d"
        },
        "item": {
          "id": "db7a1f03-e052-4f78-acda-17aca1161d92",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "aa566ee0-ffb0-4dfa-9aa9-824a2bab588e",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "3c798874-ea16-421b-af10-72b0363e8912",
        "cursor": {
          "ref": "b0defea0-bdca-420e-bedf-588de214ec79",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "4b949c92-908e-4560-aed7-3ae5776b9d29"
        },
        "item": {
          "id": "3c798874-ea16-421b-af10-72b0363e8912",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5e5fcd35-959a-4de0-9578-a87d700393ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3717805-91a7-4b26-a405-6d1c47d27953",
        "cursor": {
          "ref": "5e688d50-1ec0-4b7a-b47c-83b09704238a",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "049ddf6a-3d52-4d0a-8ec2-dececcb0932d"
        },
        "item": {
          "id": "f3717805-91a7-4b26-a405-6d1c47d27953",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "53915c83-58f5-4c0b-a160-9ac1acd7302b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37b8b096-2c6a-4ea7-ad7e-0aa608e7ed69",
        "cursor": {
          "ref": "b5a08e3b-07b6-4419-8f7b-617d6558f43d",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a4f28a62-37ba-4d5d-ab67-841b62357647"
        },
        "item": {
          "id": "37b8b096-2c6a-4ea7-ad7e-0aa608e7ed69",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "36e26b7a-1e35-4312-aeea-45859568fd1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "002b9f49-cb31-4677-b422-82937a4d2837",
        "cursor": {
          "ref": "d7a9c672-6926-4725-9d55-23a934c7343d",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "92235e0f-73de-436d-9673-c617320a7c41"
        },
        "item": {
          "id": "002b9f49-cb31-4677-b422-82937a4d2837",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "320c22f7-d8d3-46c8-9ec7-f52aef3ca450",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14afcefc-1f4f-4c36-99ec-2e2a3186bb54",
        "cursor": {
          "ref": "c5d1fa33-477b-41be-88e6-9f23f9942b59",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "4e1ab5c1-7971-42ef-a99c-dd001cfeba0e"
        },
        "item": {
          "id": "14afcefc-1f4f-4c36-99ec-2e2a3186bb54",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "3abbb891-78b3-4c2c-952f-555a2a41d7ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f98eb43-7a23-45bf-8695-952fadfc2f60",
        "cursor": {
          "ref": "6b88c0ee-9797-4ed9-a9c2-de244f9f05a1",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "763034a7-c1d6-4cb6-8e75-5e019ff0bf96"
        },
        "item": {
          "id": "2f98eb43-7a23-45bf-8695-952fadfc2f60",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "7e7cdef9-0a07-4ca0-be81-04017ad89661",
          "status": "Created",
          "code": 201,
          "responseTime": 22,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "a27d6074-5ab4-48d9-9343-7b0fb27e089d",
        "cursor": {
          "ref": "9c0550b7-12cf-4c4c-9e25-23579216317b",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a7ebc32a-d828-45a8-bd62-807d6ec3dfe9"
        },
        "item": {
          "id": "a27d6074-5ab4-48d9-9343-7b0fb27e089d",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "11180302-c34d-4ce4-9969-d0b055582509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8fde26f-ff6d-4f87-a349-e6ebf9527493",
        "cursor": {
          "ref": "84ea9484-0eec-4904-8a18-005a1bbedd10",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ace7f3e5-d7e2-4605-8ab3-2297b7adc0da"
        },
        "item": {
          "id": "c8fde26f-ff6d-4f87-a349-e6ebf9527493",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "1c51edf9-3468-479e-8698-48f90dcdaf60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33970604-4685-48fd-a1d9-b385a37cb691",
        "cursor": {
          "ref": "130d1d47-0cf2-4599-addb-102dd1bec513",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "f513b31d-0025-4c5e-b1cf-b132a1d0b703"
        },
        "item": {
          "id": "33970604-4685-48fd-a1d9-b385a37cb691",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "09da9490-c05c-4407-8f1a-70671a0b731b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e276357c-d1ed-4693-83c2-013768fa0c93",
        "cursor": {
          "ref": "0c00f7eb-ed25-4735-ab6b-d7dca0f5ff3b",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e37efe02-d6b3-446a-8409-15068dcfe135"
        },
        "item": {
          "id": "e276357c-d1ed-4693-83c2-013768fa0c93",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f46827cc-5f45-4255-8f7e-01b145ae3088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7880740-5f33-45a6-9792-15378ab931e5",
        "cursor": {
          "ref": "ffd6f733-84d6-4810-8357-5ec8360feaf8",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "550d5acf-9e70-4bb6-9997-ac747103a7d0"
        },
        "item": {
          "id": "e7880740-5f33-45a6-9792-15378ab931e5",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c734c977-93cb-4c60-a289-6b13437661fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca28d7b6-a455-415d-a546-d317c25d35ed",
        "cursor": {
          "ref": "6ecd7312-54a3-4c5e-9c18-d0775a12154d",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "2cfd83e0-c98e-40de-82e2-802060fc16f5"
        },
        "item": {
          "id": "ca28d7b6-a455-415d-a546-d317c25d35ed",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "05e2e45a-7bd7-4f3b-ab1e-a96bb27ebb9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "663727a2-27c7-4425-a0a2-030c05aa602a",
        "cursor": {
          "ref": "b3d31b1c-b972-4ba4-9db9-149178f0cedb",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c3d3fbc0-0336-45ff-9dbd-cefe8f09c52a"
        },
        "item": {
          "id": "663727a2-27c7-4425-a0a2-030c05aa602a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "89fc7fb3-7dd7-4dc3-a85a-adfe0c50e158",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c13bade2-27f4-4e06-92cb-30fad7b065f9",
        "cursor": {
          "ref": "0ed761ca-396d-46cd-a381-740dc261839d",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "a09c8a1e-30bd-4056-8a13-2dca24808354"
        },
        "item": {
          "id": "c13bade2-27f4-4e06-92cb-30fad7b065f9",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c4ebc089-29c6-4802-b1f4-7669f1f350ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae76cf78-951a-4b6d-9c21-c40c5713a374",
        "cursor": {
          "ref": "85e12f47-8bab-43ac-acc9-ae13dbeeb349",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "4adf2762-f87b-4d74-a3f2-8c8cd0ffd84f"
        },
        "item": {
          "id": "ae76cf78-951a-4b6d-9c21-c40c5713a374",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "8f5bbc84-0565-4ecf-bc6c-8c44649a0b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "8310de10-9caa-4821-99db-66be2bc59716",
        "cursor": {
          "ref": "61f44877-f79d-4c0a-b4fe-5fdca4d28121",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f2543566-65dc-4036-a9c9-af516aa8c5b6"
        },
        "item": {
          "id": "8310de10-9caa-4821-99db-66be2bc59716",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "4aa0a606-5529-40d4-ad00-5f3fb68d5063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "3575843b-5acb-44c7-971b-a0c99d0373fa",
        "cursor": {
          "ref": "19622d8f-5c88-4113-8946-3450106aa7ee",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d50a88d4-30a0-4db5-931e-3aa06940c203"
        },
        "item": {
          "id": "3575843b-5acb-44c7-971b-a0c99d0373fa",
          "name": "credentials_issue"
        },
        "response": {
          "id": "993f0507-19a5-459b-8a59-0ecc2e104e44",
          "status": "Created",
          "code": 201,
          "responseTime": 21,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bcb309a-2d7c-4c21-800d-139f6518302e",
        "cursor": {
          "ref": "9944121e-9f9b-43e3-892c-ac1d16cfcef5",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1b525482-85b6-4695-b7d4-9e438341f73a"
        },
        "item": {
          "id": "5bcb309a-2d7c-4c21-800d-139f6518302e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e272e95d-d888-4160-88ea-d5a328b0696c",
          "status": "Created",
          "code": 201,
          "responseTime": 23,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fca158b-ff44-4051-a1c6-f137abea0d4f",
        "cursor": {
          "ref": "ac2e08a0-c99f-49d2-bb83-7162982a6e53",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "a5c3350c-1af7-469d-8b94-86cbded090e1"
        },
        "item": {
          "id": "2fca158b-ff44-4051-a1c6-f137abea0d4f",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1ee5a909-3c1c-40cc-b9ec-e5e8f265905b",
          "status": "Created",
          "code": 201,
          "responseTime": 21,
          "responseSize": 665
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc07fc17-36fb-48c2-aaf9-a00b062fe8ab",
        "cursor": {
          "ref": "45fb9807-5739-4f77-850b-2efdca6b43ca",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c2cdaaae-14c1-46eb-bf26-3416798e5fb1"
        },
        "item": {
          "id": "bc07fc17-36fb-48c2-aaf9-a00b062fe8ab",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "0a6771de-0e54-4c29-ac2f-2fd6b4eb8f22",
          "status": "Created",
          "code": 201,
          "responseTime": 21,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "e418a59e-a7ab-4927-93f7-de3e6d521b36",
        "cursor": {
          "ref": "7a7ae685-3d17-452a-b12e-3bff1fdaf8d1",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "9081c46a-fb79-40fe-ad76-712feae8b8b5"
        },
        "item": {
          "id": "e418a59e-a7ab-4927-93f7-de3e6d521b36",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0affa767-9876-4c5f-b2b4-8b3d5c29130b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:109)"
            }
          }
        ]
      },
      {
        "id": "0cf5a066-c129-4c43-8bf3-7e5541ae8b63",
        "cursor": {
          "ref": "4ff2faf3-961e-44b0-b2c2-b006857753e2",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "99dc1433-ec3d-4f3f-ad3d-f81a31108787"
        },
        "item": {
          "id": "0cf5a066-c129-4c43-8bf3-7e5541ae8b63",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f7856e12-028e-4004-9663-8a2e527fafdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cf5a066-c129-4c43-8bf3-7e5541ae8b63",
        "cursor": {
          "ref": "4ff2faf3-961e-44b0-b2c2-b006857753e2",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "99dc1433-ec3d-4f3f-ad3d-f81a31108787"
        },
        "item": {
          "id": "0cf5a066-c129-4c43-8bf3-7e5541ae8b63",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f7856e12-028e-4004-9663-8a2e527fafdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75655cdf-410d-45aa-b551-5a9196b00ab5",
        "cursor": {
          "ref": "761d3dc0-0a1c-4299-b947-9b2d1960509b",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "357895b9-00b2-47ca-bd05-20d6764c1b8a"
        },
        "item": {
          "id": "75655cdf-410d-45aa-b551-5a9196b00ab5",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "62c9fc36-83a6-4a64-89e5-c350ec8831dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97abbf88-0f88-40a1-8af5-8436019fb268",
        "cursor": {
          "ref": "e6e505af-3a22-4863-832e-927ced8220bf",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ca401f3e-180e-4662-9530-4b947bfa716a"
        },
        "item": {
          "id": "97abbf88-0f88-40a1-8af5-8436019fb268",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "86fa10db-1be3-44a1-901f-9d620066c39c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b339898-25f2-470b-8c6f-1de8a4cf639a",
        "cursor": {
          "ref": "aa3df24b-06ad-489b-b448-48af3e601dca",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "42e6a271-8266-4b46-9fbf-c3f981cb7916"
        },
        "item": {
          "id": "3b339898-25f2-470b-8c6f-1de8a4cf639a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "85bb93ae-4428-4fe5-8124-d7289de6c5a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3999a951-d765-49eb-aea2-ed02bc59d27c",
        "cursor": {
          "ref": "81a71189-4547-4489-8dd3-b4cacee4b365",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b1703f2c-7808-408c-b339-7d3cb875145f"
        },
        "item": {
          "id": "3999a951-d765-49eb-aea2-ed02bc59d27c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8feac73b-d0bc-48dc-b57d-bcb3d421dfb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42b13d18-e63c-4fd4-aa2a-43113097e8c2",
        "cursor": {
          "ref": "6194624b-bc8f-4f19-8dff-5432439192fc",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "1eb15c8c-23e8-45bb-b251-bee65c796355"
        },
        "item": {
          "id": "42b13d18-e63c-4fd4-aa2a-43113097e8c2",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "2b4281d9-2343-4346-ae27-eedabbc3dc5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "405cf03b-7815-425d-a123-dc17207a63eb",
        "cursor": {
          "ref": "07d5ce26-7b30-4b77-9b9c-93321a733ff4",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e0bf17d1-628c-4bde-9cc6-e699ed6abfc0"
        },
        "item": {
          "id": "405cf03b-7815-425d-a123-dc17207a63eb",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "fdcbaa41-4abd-47c9-86f9-b4ff2d7570b4",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "4500c634-f14a-4c85-8d65-20a05d303ba4",
        "cursor": {
          "ref": "6e1c86e8-c5e7-4feb-8f79-860dd3a3dc4e",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f937f323-2ae8-4ad7-911c-7da602d41b46"
        },
        "item": {
          "id": "4500c634-f14a-4c85-8d65-20a05d303ba4",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "8a47efcd-0a32-433c-942a-367ced2aa9df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b273936-8555-41da-a628-a41072b943b2",
        "cursor": {
          "ref": "dd9a96b4-ecd6-4afc-bbca-573085a3caeb",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "092777d1-0c26-46a9-a96a-e277ca7d535e"
        },
        "item": {
          "id": "0b273936-8555-41da-a628-a41072b943b2",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "994e5dbc-8422-49d0-b356-bb5874403b9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58d41201-280d-4176-99bd-287c92adb7a2",
        "cursor": {
          "ref": "89a306d0-fbe9-46cb-a20a-b55dcf7013be",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "eea5fdf0-36e0-4210-9784-a82cef210596"
        },
        "item": {
          "id": "58d41201-280d-4176-99bd-287c92adb7a2",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "19ed0c1b-4074-441e-98e4-bfb6d9461c0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0061c268-2261-4fa5-90d6-b6d8549dfab5",
        "cursor": {
          "ref": "f1380cd8-90fe-43a8-bf4e-5fd7942d7c17",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d834f3ad-5ffd-4718-af0b-2a932d653b2b"
        },
        "item": {
          "id": "0061c268-2261-4fa5-90d6-b6d8549dfab5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "85570436-e854-412d-a806-fbe1dd06ccc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5fa0b72-fc3c-44dc-8678-04c042184131",
        "cursor": {
          "ref": "726e5c1f-19f7-4e2d-a3fa-de11d854d7b5",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "48696fa6-a502-47a0-8420-af6f8c7ab079"
        },
        "item": {
          "id": "b5fa0b72-fc3c-44dc-8678-04c042184131",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a2091c15-d84e-4fd9-b1b8-b9f4f0c7883e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93edfe83-aec4-4820-afe3-0467eca91df7",
        "cursor": {
          "ref": "b7925c98-39c8-42dd-ba9d-090b661c4114",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "f1fcfc84-a618-4f55-84cc-a2ac452e06f2"
        },
        "item": {
          "id": "93edfe83-aec4-4820-afe3-0467eca91df7",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b1c33793-3c4a-401b-8823-b2d28a9460fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a4abb36-c557-4e90-ab26-7d2060d7b747",
        "cursor": {
          "ref": "d11e904f-eaca-47fe-80e4-ec5cdf973042",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "aff5b3c1-8c25-4195-98c3-9b73f5572cd1"
        },
        "item": {
          "id": "4a4abb36-c557-4e90-ab26-7d2060d7b747",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7f8d47c2-8df6-4919-afee-39c10cf81753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f863d945-b13d-4e88-ad30-afad4df51cdf",
        "cursor": {
          "ref": "ab6eb333-92b8-4b38-bdc2-357a97d73ab6",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6de6c5c3-6eb2-4d55-a983-bdad619a46e1"
        },
        "item": {
          "id": "f863d945-b13d-4e88-ad30-afad4df51cdf",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6f79a197-1c9a-48fd-a840-1ba760ba5b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1d3ed76-032c-4b56-86f9-1f163a302c08",
        "cursor": {
          "ref": "90feaeb5-4c29-4f07-9218-6fcf922d3fe2",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "1be77b04-25bf-4e61-aae3-56ba0ca27124"
        },
        "item": {
          "id": "e1d3ed76-032c-4b56-86f9-1f163a302c08",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "57be8c29-e9e6-46c9-afb9-05c9a08272ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1bb765c-0d59-4d54-b71f-2d71d613a598",
        "cursor": {
          "ref": "3e78eb98-bab3-4995-85eb-7aab43006999",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "706add54-1a49-4a46-a231-46765dc5a04d"
        },
        "item": {
          "id": "c1bb765c-0d59-4d54-b71f-2d71d613a598",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8caf56d0-e3d7-4f36-a260-93a3ecc30ea2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a6f6178-22cc-4a80-ba1d-abc31bfc9ead",
        "cursor": {
          "ref": "ade5f928-50b0-43c6-91df-3aa9853cba19",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c0bc618e-3cb7-4276-98ec-b677f8b41f10"
        },
        "item": {
          "id": "8a6f6178-22cc-4a80-ba1d-abc31bfc9ead",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "43e1f30a-a146-47ee-b2be-be9f084c7f32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87dfb859-debd-4b1c-b98b-250eae60faa3",
        "cursor": {
          "ref": "287a9d53-d450-4d30-b004-c3f90f44c1bc",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e2332346-78c0-4cd2-b21b-40af38e62d01"
        },
        "item": {
          "id": "87dfb859-debd-4b1c-b98b-250eae60faa3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "025d334d-0abc-4c82-a84c-06bd09ae3197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84b9c7fd-4d39-43f7-a0d4-18e4810d3959",
        "cursor": {
          "ref": "25c9e84d-952d-45b7-a268-2c5890556b85",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "fef1393e-3b4b-4530-9db8-69e214f9b4e8"
        },
        "item": {
          "id": "84b9c7fd-4d39-43f7-a0d4-18e4810d3959",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1375c3c0-fb95-4931-b38a-5fe9bbf8ae33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb925888-6659-4f3a-8dba-0a6484bbb591",
        "cursor": {
          "ref": "bc9bd982-3986-451a-98cc-322a081b62bc",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "436a451f-db29-4c23-bba8-cff4c06103ea"
        },
        "item": {
          "id": "bb925888-6659-4f3a-8dba-0a6484bbb591",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "48c524a5-9eeb-4829-81a6-4463dca68ac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b41cb3f-7b1e-4413-9d4c-b19480771775",
        "cursor": {
          "ref": "3c37d8b9-4346-41cf-99b6-fe452e3eee1e",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "cbf34b28-af53-412b-8089-fb4ce82138ea"
        },
        "item": {
          "id": "1b41cb3f-7b1e-4413-9d4c-b19480771775",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8ac9cece-bbef-4319-9cd5-800b53225864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ad728e0-f53c-4a86-8056-05f71fa935f0",
        "cursor": {
          "ref": "61746fa2-2e2e-4acc-94bb-c6c00314f3f3",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "6007ba9e-0708-4a3e-a20e-6612f1ed0833"
        },
        "item": {
          "id": "4ad728e0-f53c-4a86-8056-05f71fa935f0",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7981291a-b2d2-4693-bca7-e2f626967407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc90a851-2def-47e9-8e47-cec8277e5410",
        "cursor": {
          "ref": "7bd2bc40-6e3b-4f42-bec1-894992a135de",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4005f91d-003c-4e26-b71a-a3d040383cda"
        },
        "item": {
          "id": "bc90a851-2def-47e9-8e47-cec8277e5410",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "405af857-e7ff-4b98-8e8c-1861ccd5ec05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d501d5b-41ea-4b1b-a23f-2c0c21c8bfbc",
        "cursor": {
          "ref": "c44f0ae8-a0eb-4b00-9383-dacf86606eca",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "8fcf193f-405b-4ebf-92f0-d51917246955"
        },
        "item": {
          "id": "8d501d5b-41ea-4b1b-a23f-2c0c21c8bfbc",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e813e6b6-de83-4622-b000-4a2d0686ab5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5430fba1-98a5-4153-8656-801f34b558e5",
        "cursor": {
          "ref": "bc0997a4-b78b-48b7-8c16-4cd4da7f091c",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "037f0ba9-053c-4d75-bdcd-aa7bcf0a46e1"
        },
        "item": {
          "id": "5430fba1-98a5-4153-8656-801f34b558e5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "71f109f0-fc12-4647-ae25-7ed8e75ffa1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cacb40e-aa24-4266-8383-706824b32681",
        "cursor": {
          "ref": "84f2b797-47a1-470d-bac8-b17dc6207bc7",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "339b2d38-108d-4e87-9cd0-f68bfd229a90"
        },
        "item": {
          "id": "9cacb40e-aa24-4266-8383-706824b32681",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ed400784-e421-4be6-aba0-84b8829bdbd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40424e2e-f1b2-4264-9361-565ac3d1c93c",
        "cursor": {
          "ref": "2fb0a87f-fc41-48a6-8aab-f75b1f8f55e5",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "8cbbcd6c-27b7-49c7-bce9-42e9d3d96bf6"
        },
        "item": {
          "id": "40424e2e-f1b2-4264-9361-565ac3d1c93c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3f877540-303a-4d86-96a5-ec4417738b1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86903d6b-4d86-4b15-a0ab-a2957a44d42d",
        "cursor": {
          "ref": "02050559-605a-4b09-8776-5dc116b30f32",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "5c33ee3e-1ffb-47e5-8d4b-b252e64658c3"
        },
        "item": {
          "id": "86903d6b-4d86-4b15-a0ab-a2957a44d42d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "bef14912-409e-449d-bf67-7ef411b9e305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b4a7cd6-d078-45a2-a312-16547b4f7ce9",
        "cursor": {
          "ref": "39ebc879-c32b-42d4-91e6-ea1ebe25d3bc",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6c6b8d24-ed26-4524-a996-f332383a69d4"
        },
        "item": {
          "id": "8b4a7cd6-d078-45a2-a312-16547b4f7ce9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "04462de1-eef4-497c-a4e3-a42052f0627c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49519784-59be-41f8-8d5c-6d79baf1ed41",
        "cursor": {
          "ref": "d8246520-2057-4688-a89f-1095175feb25",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "0be8519d-ac20-49ba-a446-c13b8e816e9c"
        },
        "item": {
          "id": "49519784-59be-41f8-8d5c-6d79baf1ed41",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "56a3b1c0-6602-40a6-989e-c3afd0c8cec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f153406-115d-4998-94d9-cb4398e3a288",
        "cursor": {
          "ref": "1aef7385-b8ed-41a6-a1e4-c9390e383dc4",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a744b512-bbd1-413e-a588-f8f0be064654"
        },
        "item": {
          "id": "2f153406-115d-4998-94d9-cb4398e3a288",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "d2ef157a-5ed5-4927-9730-6f55875525fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5de01f6-920a-4b78-9230-6a772271233b",
        "cursor": {
          "ref": "e1c60d04-d13e-43dc-94ce-3decf3cc822d",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "12b52f68-6094-4f8e-8f8b-954437c15b53"
        },
        "item": {
          "id": "f5de01f6-920a-4b78-9230-6a772271233b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c571af68-57a5-4ad9-b9fb-026d23e7f6b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "134e4eb0-5957-40eb-a6aa-823bea37e9b6",
        "cursor": {
          "ref": "0fd33533-107c-4652-8790-58479a79d6f2",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ec8e343b-8673-4ab2-9602-0614e107605a"
        },
        "item": {
          "id": "134e4eb0-5957-40eb-a6aa-823bea37e9b6",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "6018f15e-18b1-47fa-8a3e-1caeb88b61e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "b4859607-3bed-4184-97cb-ce20709a944c",
        "cursor": {
          "ref": "43d8f0aa-7c37-443b-a312-adbd0bc16e0d",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6137a5ce-4956-4881-9fb7-8c541bc0ce0b"
        },
        "item": {
          "id": "b4859607-3bed-4184-97cb-ce20709a944c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1b1090c3-6d69-4a73-a6a0-4d38178e037b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4859607-3bed-4184-97cb-ce20709a944c",
        "cursor": {
          "ref": "43d8f0aa-7c37-443b-a312-adbd0bc16e0d",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6137a5ce-4956-4881-9fb7-8c541bc0ce0b"
        },
        "item": {
          "id": "b4859607-3bed-4184-97cb-ce20709a944c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1b1090c3-6d69-4a73-a6a0-4d38178e037b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0782391-82e1-4731-b488-4f43308947b5",
        "cursor": {
          "ref": "fdb83245-ed1a-4d2c-9507-83407b14a57d",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c8ea5088-8722-44d0-9b66-fc071581e5f1"
        },
        "item": {
          "id": "f0782391-82e1-4731-b488-4f43308947b5",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "213301a3-1b4d-41a9-87c5-22ed23b942d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c205aba2-af84-404b-849a-b8a01158738f",
        "cursor": {
          "ref": "9c23d490-91ee-476d-9c5b-070edbd4c6a6",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "7532ada7-c404-4f42-a11b-5b8aab3ec22e"
        },
        "item": {
          "id": "c205aba2-af84-404b-849a-b8a01158738f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "051c6d1a-20ff-431d-9a61-216443144e37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be7dbb65-5404-4cb2-a4ff-4c91fc0b0784",
        "cursor": {
          "ref": "b826919b-afcd-4bc7-bccf-5b7266afdef2",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "53550616-342a-4861-9f2a-175abc5e9523"
        },
        "item": {
          "id": "be7dbb65-5404-4cb2-a4ff-4c91fc0b0784",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "326d1571-2f83-40e9-b4df-a90b8be3cc30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c10d3caf-bce7-4dae-957d-2fdb27ec656f",
        "cursor": {
          "ref": "14a57ee3-bf58-4740-9fa6-c1df117e798b",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "353ba527-2a2b-485a-8e8f-3d611bd739c8"
        },
        "item": {
          "id": "c10d3caf-bce7-4dae-957d-2fdb27ec656f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "79aa343c-69dc-439a-aea0-e40d7b016801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09f10498-a4d7-4bc2-b879-b3c6b5c2b3a3",
        "cursor": {
          "ref": "2fcc6bfa-b1fe-4a12-936a-8aaaeac49dca",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "4c82c016-3b07-4862-9dcd-d31db1d621ce"
        },
        "item": {
          "id": "09f10498-a4d7-4bc2-b879-b3c6b5c2b3a3",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "94669835-eb31-4712-a522-a0c34fbb0f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8efe02f4-51c8-46d1-b28b-f306cba3ded8",
        "cursor": {
          "ref": "a476ff30-c929-44d7-8b65-89b697352558",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "63e3ff2f-a586-4b4e-8a74-2433484cdc95"
        },
        "item": {
          "id": "8efe02f4-51c8-46d1-b28b-f306cba3ded8",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "4572a842-8bf5-42b3-8102-96254a989f89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab9d1145-fe74-435a-ba8e-74d7f653eab3",
        "cursor": {
          "ref": "d689b1a1-0079-4b96-8484-9fbbb9b73330",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "0941d7fb-a431-40a9-be32-4d28c64e13ab"
        },
        "item": {
          "id": "ab9d1145-fe74-435a-ba8e-74d7f653eab3",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "03f4fb02-56ac-4e1e-ad42-e15bab49b1f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f19ddd1-f560-447f-a5c9-b7f2bd04a851",
        "cursor": {
          "ref": "cd881c29-746f-4d09-a336-0441bf383f33",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "ed58b4af-d4d0-48b1-ab9d-23caa7d46f65"
        },
        "item": {
          "id": "9f19ddd1-f560-447f-a5c9-b7f2bd04a851",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "21d58462-8213-466d-9c9e-d569dd68ca58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75fcac6d-beed-4b23-b60a-94875dd09d9c",
        "cursor": {
          "ref": "2950f634-8cd4-4730-a191-6bf6445c73bf",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "dbffc9cf-e28d-4d92-a63d-77b775c8c39e"
        },
        "item": {
          "id": "75fcac6d-beed-4b23-b60a-94875dd09d9c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "ad7f4bcb-cf5c-4dde-af04-52b77e78bcb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26508908-0a54-4399-8a8b-95ab06027e1b",
        "cursor": {
          "ref": "5a2378f1-db1b-45c8-96f9-799ed211a57b",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "29c44a7e-6676-4e4f-b82d-ec571e72bfe4"
        },
        "item": {
          "id": "26508908-0a54-4399-8a8b-95ab06027e1b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f9132fc7-b661-4b55-9ca0-e978e207c32c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8828adf0-8fd6-4676-af02-8722588d13c9",
        "cursor": {
          "ref": "2f1f1a32-623c-47d4-8b68-d0540482638e",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c0fde822-e7c7-4391-9c1c-3a90e72f44b7"
        },
        "item": {
          "id": "8828adf0-8fd6-4676-af02-8722588d13c9",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "aaa4c9d5-386d-402a-ba9e-82058e573fee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34045f7e-07a8-45e7-8197-b9edf0845e3e",
        "cursor": {
          "ref": "f17e9e84-02b8-4aed-8a55-a405154d97b7",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "dc526b0f-0ac4-4095-91ae-885100b8ecf8"
        },
        "item": {
          "id": "34045f7e-07a8-45e7-8197-b9edf0845e3e",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "095735f0-a982-42ce-a0ac-75570733aff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d16e18ee-eec3-4660-99a8-633f93fa7e5c",
        "cursor": {
          "ref": "81e91509-3b2e-45e1-91aa-a71bb06903bb",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "4207db88-de42-488a-bdf4-93fb92e1275d"
        },
        "item": {
          "id": "d16e18ee-eec3-4660-99a8-633f93fa7e5c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "c705eeb0-9496-4a64-9961-f4bf1bcabea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ff2551-d80d-462e-9e94-7b40be7bbe56",
        "cursor": {
          "ref": "d6eb68cf-958a-4927-9af9-4a4b123cd1ba",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "487b6549-8a4a-4daa-b9f2-76ba7b727625"
        },
        "item": {
          "id": "65ff2551-d80d-462e-9e94-7b40be7bbe56",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "48566855-59e5-48c5-9035-0c6e66b91556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e29050f2-9c4f-403f-8688-a1bf8da1b2b7",
        "cursor": {
          "ref": "18697886-6a98-4f68-80b4-95a296fbc095",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "16812761-4793-4399-8b14-cd67347b313e"
        },
        "item": {
          "id": "e29050f2-9c4f-403f-8688-a1bf8da1b2b7",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "57334b0a-ec5e-44d7-a7cb-8b1adf8930b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf2b419-fc3e-49d6-98ab-ff417a26a0ad",
        "cursor": {
          "ref": "0edc03e0-00fe-4060-845b-9a13fdb5e90d",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f81ad29c-c1fa-4acb-b210-cf1c51a8379a"
        },
        "item": {
          "id": "2bf2b419-fc3e-49d6-98ab-ff417a26a0ad",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "cf7e5679-3591-4e0c-8c71-9e633fbb78fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ca79528-ec6f-4081-bd88-2eae13298e44",
        "cursor": {
          "ref": "56691c31-582a-4782-8ea4-7044705df6b5",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "69f18cf0-6342-41ff-a604-f288b791eb9c"
        },
        "item": {
          "id": "4ca79528-ec6f-4081-bd88-2eae13298e44",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "3ecad0e3-d50d-42f8-bd96-99b6ff766b98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "234be94f-74d3-4702-b1b2-454e2abaca29",
        "cursor": {
          "ref": "916cfb67-496a-4d9f-9364-817afe91e9d0",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "6592288d-47bf-4326-baf5-1c2933ca22a8"
        },
        "item": {
          "id": "234be94f-74d3-4702-b1b2-454e2abaca29",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "e0d80fb0-3a26-43d6-b1d2-224c26f11b80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6700f34b-e091-4c10-afa5-6303aebd44c2",
        "cursor": {
          "ref": "f18cff71-9ddf-464a-adfd-f3e03d442950",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "86a6ee4c-bc09-4669-a6a9-966afa9817f7"
        },
        "item": {
          "id": "6700f34b-e091-4c10-afa5-6303aebd44c2",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "777a7d9c-0968-4d9d-9cf3-7830b71df2b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a3e8f65-f08d-4024-b40e-b6be0619b262",
        "cursor": {
          "ref": "d550820b-cdbf-4c13-9472-cc9e5ed86c08",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "fef392ba-abe3-486b-889a-a2a7491d8e48"
        },
        "item": {
          "id": "0a3e8f65-f08d-4024-b40e-b6be0619b262",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6dc86c23-28e2-474e-9881-578e2234105a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fee2109-89ad-4f3c-a928-5f5ed0adcd61",
        "cursor": {
          "ref": "1172244b-0afd-4a99-adb7-6282088c0844",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ee50a7be-4159-4fa5-b814-8ea7b8d9b32b"
        },
        "item": {
          "id": "5fee2109-89ad-4f3c-a928-5f5ed0adcd61",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9c64d74e-7415-481a-9461-f4199fdbae81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "992deec4-076d-4060-83bf-f5337e84b9a2",
        "cursor": {
          "ref": "7b334293-b03b-4927-8793-4b993da41c96",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "83553a40-d81d-4d6e-a4f9-84bfd63e7a4c"
        },
        "item": {
          "id": "992deec4-076d-4060-83bf-f5337e84b9a2",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "133c9937-0d18-4b42-a2b6-825f921123cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ea6872-53a8-4c7e-a2b8-b4f7973214a0",
        "cursor": {
          "ref": "5209abb2-fd53-4f4d-9c36-472c5bfd342e",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a236caf9-f4c2-48b2-a856-b37b94f962c9"
        },
        "item": {
          "id": "d8ea6872-53a8-4c7e-a2b8-b4f7973214a0",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "311381c7-54ed-4198-825f-26db396db8ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cefbc6b-fbbf-4e0c-a483-d588ed7bf4e7",
        "cursor": {
          "ref": "00230641-c406-486b-a71d-406e36d6604c",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "6acff5b3-795a-4800-add7-70386ace717a"
        },
        "item": {
          "id": "0cefbc6b-fbbf-4e0c-a483-d588ed7bf4e7",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "bcc828ef-b12c-4868-95c6-579a2c6c2b65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "327e4809-195a-456a-876d-c1e8228f3b5a",
        "cursor": {
          "ref": "4d0cd72f-c372-482a-b831-df64e5f99d8a",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "9d0a9229-bb2b-489d-9c36-1cb2af9c7dc3"
        },
        "item": {
          "id": "327e4809-195a-456a-876d-c1e8228f3b5a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "6b1e64f3-029b-4c74-8fc9-59016193035d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3d03d33-71e8-49ef-b15c-7c26bc3b99ec",
        "cursor": {
          "ref": "80d6d5d5-68e0-4e29-a154-089684ea8787",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "290a3f28-fb74-4f7e-9b6e-49763773ae7c"
        },
        "item": {
          "id": "a3d03d33-71e8-49ef-b15c-7c26bc3b99ec",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "7bfc890c-8711-4d95-81fa-d12ed67d54bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "563d821b-1612-4610-8e05-4bddc5f2f988",
        "cursor": {
          "ref": "af2d97f9-a096-4378-8ca1-505b7f7d8c77",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "cc56c7a9-7672-47d0-8da5-e574656335bd"
        },
        "item": {
          "id": "563d821b-1612-4610-8e05-4bddc5f2f988",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "646d3c68-ede1-4d50-af87-b335a435500d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ba1851c-6f78-4d3e-8292-84505daaff25",
        "cursor": {
          "ref": "fbee18ab-ec15-4f1d-95f8-b79748237650",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "15813704-6f13-4db5-bd1e-02acfc27ef17"
        },
        "item": {
          "id": "0ba1851c-6f78-4d3e-8292-84505daaff25",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f76cf9c1-63a1-4980-910c-d50805c8bb37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e00abac4-bdce-467e-82c4-56176c566ce2",
        "cursor": {
          "ref": "efb5035a-ae21-490a-a111-e7c84f5c534c",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "15f6eb17-f04f-4fc9-a8ae-96d52c051c68"
        },
        "item": {
          "id": "e00abac4-bdce-467e-82c4-56176c566ce2",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f1797fd0-1cce-40aa-94a0-f8d7efa521a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8629789a-20be-46b5-8285-406cef3d6d8d",
        "cursor": {
          "ref": "ad2bbc7a-0933-4c99-9156-1bcdadfe906c",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "956edfb8-10f4-4e6d-8844-7a1340890a89"
        },
        "item": {
          "id": "8629789a-20be-46b5-8285-406cef3d6d8d",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "98ae7c33-c35c-4c51-aff4-2deca7ebfbf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cc8d857-b520-4a24-8b2f-c72b36926649",
        "cursor": {
          "ref": "bf6d2751-fa63-4f89-a2db-749a69502509",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "6c5a5c0f-744f-4ef8-a726-0f07846cede6"
        },
        "item": {
          "id": "7cc8d857-b520-4a24-8b2f-c72b36926649",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "786ee21e-9006-4610-bcc8-908ebec779e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cd75f04-623f-457d-9ab1-3e640ff0107b",
        "cursor": {
          "ref": "0f7b3ec8-b560-4c5c-bd47-a14080a694b5",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4b595a5e-952c-4421-b784-62c7a724892e"
        },
        "item": {
          "id": "5cd75f04-623f-457d-9ab1-3e640ff0107b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "49079347-719a-46a2-b2b6-22848cb2bb87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68083363-3dfc-417d-97a4-8ec55a2d2c85",
        "cursor": {
          "ref": "25c147e7-6ff3-45b8-926a-af487713ac07",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "4ed44f2d-9266-4510-a253-22dfc9421f6b"
        },
        "item": {
          "id": "68083363-3dfc-417d-97a4-8ec55a2d2c85",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d0196e88-d191-4782-85dc-c87c3e2af3a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "732a0b6f-b9e8-41f4-aa7d-5f769985ddf9",
        "cursor": {
          "ref": "265235f5-45cb-4d46-b6aa-35854e906276",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "ce1a14e5-afbc-4976-9637-92d4aba34f0c"
        },
        "item": {
          "id": "732a0b6f-b9e8-41f4-aa7d-5f769985ddf9",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "59f0755b-0534-4f0d-b5de-58a4f922794c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92b978fe-e3f8-4d8f-a083-fe22677d641c",
        "cursor": {
          "ref": "fbb353a6-d858-49ab-b54f-db4373751a19",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "bfef2c66-18a4-483f-b8f2-ec8b39bdf2a4"
        },
        "item": {
          "id": "92b978fe-e3f8-4d8f-a083-fe22677d641c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "eb55345c-9f83-438f-937e-caff50f45a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f619e46-8c33-4b3d-ba31-2ff2a69f9f51",
        "cursor": {
          "ref": "2a2a1cfb-fd82-4283-8cdd-ad7bdae77b1b",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ab86d0d5-357f-4d49-a638-a527af8d6698"
        },
        "item": {
          "id": "8f619e46-8c33-4b3d-ba31-2ff2a69f9f51",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "0ed78a2d-784b-410a-95ff-e0ceaf0fcb1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "494f8b0a-9726-4ee1-abdf-514ce64a900e",
        "cursor": {
          "ref": "eb05d0ef-a1af-4447-a1d8-827f4f572552",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "0e8b5285-6d45-4e0f-98a9-d5cb7914aab8"
        },
        "item": {
          "id": "494f8b0a-9726-4ee1-abdf-514ce64a900e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "4da3fc5c-f132-40f4-9417-006814092b0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b759e3b4-0ca2-4701-86a1-4c24eaedeb8c",
        "cursor": {
          "ref": "b0e7a1d5-f614-4584-9893-7c2f9679bd93",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b3e01cac-e3b3-47c7-a5b5-8e382db9aae2"
        },
        "item": {
          "id": "b759e3b4-0ca2-4701-86a1-4c24eaedeb8c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0533ac0d-c594-4865-8ebb-fda1267722bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5f00511-08d4-496b-a593-9694d254c925",
        "cursor": {
          "ref": "56b3e32f-964e-4290-ac3f-d0ca4d56d914",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "0ac9fa27-495a-45a1-a095-2a354cfa355b"
        },
        "item": {
          "id": "f5f00511-08d4-496b-a593-9694d254c925",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "76c1c77e-04c2-4f02-803b-b924e739b123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74f1781c-1b4d-4355-8f47-6793282bb63e",
        "cursor": {
          "ref": "c53f6664-0aa9-4a0e-8928-2c20a887ba1c",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b80ef5e9-af7c-4933-8ce7-736741aae599"
        },
        "item": {
          "id": "74f1781c-1b4d-4355-8f47-6793282bb63e",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "db868552-d18b-4a56-bca5-af930e00427c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "566e600c-b050-4047-b00e-f217c3e038df",
        "cursor": {
          "ref": "715b6e74-22fb-4221-8365-7384c01f128d",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "4008e333-4349-4a25-8b96-52f25cce558e"
        },
        "item": {
          "id": "566e600c-b050-4047-b00e-f217c3e038df",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "67dc3e78-2251-4986-9025-84f00f1e488c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f6e0315-e733-4c2d-879b-dead57684a0b",
        "cursor": {
          "ref": "db9d9766-a240-442b-9cd6-3fcff8856b5b",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "514d3b28-3622-427c-868b-cae69a0a7a46"
        },
        "item": {
          "id": "5f6e0315-e733-4c2d-879b-dead57684a0b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8a7e024a-cdf9-4992-8751-9a317646c454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e33d5ce-9c2d-409b-932f-0ef3b64c42d1",
        "cursor": {
          "ref": "c8ce350b-bf65-4022-97f3-44d0693361ce",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ad0d6d0e-73a2-407b-8326-8bd138862f21"
        },
        "item": {
          "id": "3e33d5ce-9c2d-409b-932f-0ef3b64c42d1",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "dd971869-1423-46fa-8f6d-55b28f225142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b5d503e-3164-429b-9297-430a4c48733e",
        "cursor": {
          "ref": "34eb6e69-0688-4ef3-82c4-e198db51ef39",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "869f450c-0aa8-4216-862d-3753475d90f0"
        },
        "item": {
          "id": "9b5d503e-3164-429b-9297-430a4c48733e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "cfe547b7-d84c-4e83-9f76-b999598643a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a204952-3ca9-440a-98f8-df5b48ee8f47",
        "cursor": {
          "ref": "3c2ec710-44bd-485d-8058-65591f07411d",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b9d320bb-a7d3-445c-8513-8869fed528a0"
        },
        "item": {
          "id": "8a204952-3ca9-440a-98f8-df5b48ee8f47",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d3713c5a-8b5f-47fe-8408-2b2e8d0fae96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f663a6f-7a52-4e1d-a0c4-2cf01370911d",
        "cursor": {
          "ref": "a8de2e65-7a00-4816-87bd-871bfcb86617",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c6a00385-68c5-425a-9c38-345cac698c51"
        },
        "item": {
          "id": "2f663a6f-7a52-4e1d-a0c4-2cf01370911d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "348f80f8-dd91-4dd4-8d4e-b34b55451cf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3539d15e-7a97-479a-b947-10a916acbe47",
        "cursor": {
          "ref": "b57db1d0-fbc3-4fb7-9e02-21c0cb354ef5",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f538ae27-132e-4219-808f-3f63ac6b799d"
        },
        "item": {
          "id": "3539d15e-7a97-479a-b947-10a916acbe47",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "6bdddf14-3f55-4d65-a196-79ad935eddc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "386e9c8c-2f7a-4d3f-a67c-8aed3d8fb639",
        "cursor": {
          "ref": "d7816518-57dc-493d-9568-dca14199a76e",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "27cb561e-3901-4456-b761-ab25379e6594"
        },
        "item": {
          "id": "386e9c8c-2f7a-4d3f-a67c-8aed3d8fb639",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "dbb246f1-a606-4ba3-941d-e1e8b6203d4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de604c82-e6cd-4e95-aa2c-8129fee5511b",
        "cursor": {
          "ref": "82df5575-1202-4b27-be7d-d0f7055c6bc3",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "5ef9260d-d92c-4872-810c-b207a79ca911"
        },
        "item": {
          "id": "de604c82-e6cd-4e95-aa2c-8129fee5511b",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "01926d97-c165-4591-8c17-47889e41e9da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd0cd4c-72b4-4796-b951-0d2be8430031",
        "cursor": {
          "ref": "973747e7-8102-4f2c-8704-6a50e1459cea",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "7d1bb992-b83d-47b3-aba4-b864759dbe80"
        },
        "item": {
          "id": "dfd0cd4c-72b4-4796-b951-0d2be8430031",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "3458bf09-a977-461a-a538-9f5513ff18e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee48b47d-2419-4817-a58d-dc8f56b0c9d7",
        "cursor": {
          "ref": "21134590-5f48-47fe-afc8-3da7eb7a776d",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "06211e2d-74f4-4784-819f-47116897566b"
        },
        "item": {
          "id": "ee48b47d-2419-4817-a58d-dc8f56b0c9d7",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "917bb334-0ecc-45da-b5ea-614d1c953dcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "774b0243-5fcf-4b3f-b2a2-c38ecf4f15ef",
        "cursor": {
          "ref": "f2bdcdc5-33ca-421f-ab9d-a5e402d8933f",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "11867684-4123-4945-9119-72ccf74d7d95"
        },
        "item": {
          "id": "774b0243-5fcf-4b3f-b2a2-c38ecf4f15ef",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "0e0a9511-7a89-47dc-9843-88514e9f400b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1300a387-f492-48f1-b923-9a4d2d86f53a",
        "cursor": {
          "ref": "d1ac1c85-f946-46e9-a38a-f3d3af8f2428",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "42c9be85-ac05-4cf2-9065-2780ce3a1d0a"
        },
        "item": {
          "id": "1300a387-f492-48f1-b923-9a4d2d86f53a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "0107fad7-78e4-4a6b-a40c-29437ec25e72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cab1601c-007a-4789-905b-5f33a3ffa9f9",
        "cursor": {
          "ref": "1710797e-75ca-4539-9e1e-7f77f042ab52",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "6b422cd5-b851-4122-8524-a40d6d190a49"
        },
        "item": {
          "id": "cab1601c-007a-4789-905b-5f33a3ffa9f9",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "dbb62e61-4547-4e2f-8f83-14857e9896eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45617933-a1e3-464f-91cb-e34062eec8ed",
        "cursor": {
          "ref": "1a75194c-1af8-42ea-a4c7-74c98405bdb3",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "7b10ee2b-cc4b-4e45-b05f-d18054c33bdf"
        },
        "item": {
          "id": "45617933-a1e3-464f-91cb-e34062eec8ed",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "67f27e1e-9d36-44e3-a70e-dbb49c5ff146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "722289de-c0a1-4ffc-8b63-8b2ca48e02b9",
        "cursor": {
          "ref": "6ed5b07a-437b-47b2-bb43-b81bec38b08a",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "6babaa45-43a7-4a58-9d0f-ec3ab46bd218"
        },
        "item": {
          "id": "722289de-c0a1-4ffc-8b63-8b2ca48e02b9",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f15d84e0-12e0-4af5-b111-030ed25ed926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83da7866-0529-4423-9dbf-773b8e42c33b",
        "cursor": {
          "ref": "3f1c4212-8bdd-497d-8900-493830b023fb",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f12815eb-bc47-4278-a2d0-0b9663ee39ec"
        },
        "item": {
          "id": "83da7866-0529-4423-9dbf-773b8e42c33b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "79a8ff4d-0dd4-4162-8b74-da20014e33ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92adf087-ff50-4568-aabe-3dbd09aebeb7",
        "cursor": {
          "ref": "7e27810d-c9fa-4fd2-8a75-2309162613f7",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "49d5c6fb-bac3-401e-933a-38a111313e4c"
        },
        "item": {
          "id": "92adf087-ff50-4568-aabe-3dbd09aebeb7",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "c76caf08-c215-46d4-a465-479ddfabca73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a376de80-2061-4b53-8ef3-e707ac02902f",
        "cursor": {
          "ref": "97995b50-2bc6-4abf-b30e-f4df9e4a3bc5",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f4b90b4a-5733-4b3f-8e22-e2f110c50c2b"
        },
        "item": {
          "id": "a376de80-2061-4b53-8ef3-e707ac02902f",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "26e2cf3c-e39a-4e5a-bb06-a58fb838cd82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec46df22-770b-4894-ac75-866508e5034b",
        "cursor": {
          "ref": "3842491e-b495-4604-bb0a-65439e8275b9",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "114d4867-363e-43fd-b0b8-07265bcf14a0"
        },
        "item": {
          "id": "ec46df22-770b-4894-ac75-866508e5034b",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "ed859291-6a6a-4e87-8f87-7cfb8b693208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e164a6-c9a4-48e8-9d6f-7dcdfe3285c6",
        "cursor": {
          "ref": "e5618ea0-b3ba-42bc-af79-cf7308a055a2",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "00c55a20-9ce3-4b28-8269-48354d2ce68a"
        },
        "item": {
          "id": "58e164a6-c9a4-48e8-9d6f-7dcdfe3285c6",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b5534b01-64fe-4927-9a98-94a257977aae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac279ddb-75ad-4940-81dd-58f77a2bbf5f",
        "cursor": {
          "ref": "b2a92b74-4e20-42f0-bd40-ad34b1379fd4",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0ff64075-8318-42c2-9d82-af19281f84c0"
        },
        "item": {
          "id": "ac279ddb-75ad-4940-81dd-58f77a2bbf5f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "e8358999-cf07-4dcc-b82a-4a84ab9a7312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d80bdd5b-0ae4-48a6-9dd2-5ae0dd34b7cb",
        "cursor": {
          "ref": "c06c96b1-7d88-454f-ab33-15d554e3fa32",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "79316890-11ac-4c82-8e16-63e1fdbdafa2"
        },
        "item": {
          "id": "d80bdd5b-0ae4-48a6-9dd2-5ae0dd34b7cb",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d4b4b902-9f59-43a0-9b20-27cc429e6c67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c5d0472-f4d0-4379-9c7b-f5824c333fd8",
        "cursor": {
          "ref": "852c12df-3998-4be3-b536-9973c31243ab",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "d33aa86e-63d2-41d2-800b-04bc89f1af3f"
        },
        "item": {
          "id": "6c5d0472-f4d0-4379-9c7b-f5824c333fd8",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c2435c03-5032-460d-a064-35b78b6a6934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c23f948b-4bd6-4dc2-81c2-c5d055a78a37",
        "cursor": {
          "ref": "aaa0c4d1-563f-4528-a8af-0a98be94129a",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "31358f7d-dc23-4b4e-8b8b-de4ecccdba04"
        },
        "item": {
          "id": "c23f948b-4bd6-4dc2-81c2-c5d055a78a37",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "f733f796-8a38-4bd9-9d69-b09b76f4d698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b4c792-1cd9-4df2-9ac0-399c1f878d97",
        "cursor": {
          "ref": "66b83e37-b10d-4ba5-9c67-7931cfb2f57b",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "614c1a2f-22c3-42e4-8daa-c4b1d532aa63"
        },
        "item": {
          "id": "07b4c792-1cd9-4df2-9ac0-399c1f878d97",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b266d432-ca6e-4f48-abe9-cb5cdc9138c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "844add3e-c27d-4bc1-b83c-7e7d6610dba1",
        "cursor": {
          "ref": "464a249c-896d-4732-841c-56eae3b982ad",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "daf34509-d86c-43d8-86a4-fd960ff406ef"
        },
        "item": {
          "id": "844add3e-c27d-4bc1-b83c-7e7d6610dba1",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e27b919d-a5c6-4a69-a6e5-95b0c7f68d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55fb4a05-1ef7-4ba3-9942-b2fd62373ced",
        "cursor": {
          "ref": "2d6f6f64-aa5a-4485-a23b-9933255bbf0a",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "2fe4b0ea-4575-48aa-b298-3cfd2b90f782"
        },
        "item": {
          "id": "55fb4a05-1ef7-4ba3-9942-b2fd62373ced",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "03629871-cc17-4ac7-8c5b-cf60f42702ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3dcd61b-fa61-46ef-bbde-df4476d806f0",
        "cursor": {
          "ref": "2656351e-d0de-4566-90da-d920e3373318",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d71d5044-1ed9-4a2b-afda-803790449750"
        },
        "item": {
          "id": "f3dcd61b-fa61-46ef-bbde-df4476d806f0",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b42a4aa2-219d-423f-ae60-34d6fc700d97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e069239-423f-479f-b5b4-48de3a84a3cc",
        "cursor": {
          "ref": "8d1701ba-42b8-43e7-9d2e-7e091bed817e",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "851f0b76-f15f-49ae-b098-7a448cf0e9c9"
        },
        "item": {
          "id": "6e069239-423f-479f-b5b4-48de3a84a3cc",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "af5ad162-b39c-4507-a3f0-eed11fdeb96c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8ccc387-7718-415f-8fbb-09b394b115fe",
        "cursor": {
          "ref": "26dc9631-d479-4f84-adb6-14492197c830",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "167e7683-9a53-4ed5-888a-b1682af1573d"
        },
        "item": {
          "id": "e8ccc387-7718-415f-8fbb-09b394b115fe",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8a2897a2-7b22-40a1-a940-22bde0ddb4d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63f9dcdb-7a1e-487c-926b-25dc67276230",
        "cursor": {
          "ref": "75d15810-f518-4fe6-b2bf-1c96bf5298d6",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d6ac7f7b-2203-4c26-9ba8-7b9200c69c20"
        },
        "item": {
          "id": "63f9dcdb-7a1e-487c-926b-25dc67276230",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "c163022f-58b4-4c86-8d90-d18c77685691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e786e14-06ec-4d2b-9b20-4ffb68caf532",
        "cursor": {
          "ref": "6b4dc42a-8055-4e16-b697-2aeea15fd37f",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "d49154f3-add7-4c3d-8602-9cb8706e0f4e"
        },
        "item": {
          "id": "2e786e14-06ec-4d2b-9b20-4ffb68caf532",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b02404c5-c50f-4a0a-ba7c-55eee990724a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad318561-d6cd-41c6-90ae-40c31ca848a1",
        "cursor": {
          "ref": "b12f522e-c694-43c3-bf8b-2a419f559bf1",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "24aa83cb-b628-462f-b929-27a993e9eb13"
        },
        "item": {
          "id": "ad318561-d6cd-41c6-90ae-40c31ca848a1",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "6b5101de-b87a-412d-bae3-04cc4380dba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6973529-ee33-4884-bcb4-158218764d76",
        "cursor": {
          "ref": "774af1cc-cebb-40d4-8616-32217130ca23",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b63450a5-e280-4c36-a557-79a9860e1772"
        },
        "item": {
          "id": "f6973529-ee33-4884-bcb4-158218764d76",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "635af6dd-0436-4340-8195-579f1d063e42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edffe1a6-a03d-4f7b-8771-fa1b96bc8283",
        "cursor": {
          "ref": "7c99ddee-df07-465a-a05f-61213e298bc0",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "aee25d35-d301-4ca0-b4a6-ea782f232f71"
        },
        "item": {
          "id": "edffe1a6-a03d-4f7b-8771-fa1b96bc8283",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "1e4b36f6-16c3-4a51-aaad-b8865eeb53c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52fb46ce-fa10-4d60-a733-6b2fa2fa2297",
        "cursor": {
          "ref": "0f91b161-b0c4-4cd9-bb1b-760ffb84f574",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "2c80ad44-7b6f-4a88-bc74-9a68c2806cd5"
        },
        "item": {
          "id": "52fb46ce-fa10-4d60-a733-6b2fa2fa2297",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3135bfba-a7b2-4b93-a4f5-738f3bda4cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96b33fed-3cf1-489e-8fd1-14ac065189de",
        "cursor": {
          "ref": "c229206b-6de9-4f8e-ba0b-328bff18564e",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "5c4f31d2-a302-4684-80a9-1865b26603c0"
        },
        "item": {
          "id": "96b33fed-3cf1-489e-8fd1-14ac065189de",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "8549587e-e693-413a-a1eb-931408ebab4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b49bd0a4-0942-4600-8e66-235789635062",
        "cursor": {
          "ref": "b0339746-311d-4a62-a3d0-eadb2d00c938",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "fdc9f847-b8f7-441b-a923-b1caaba788e2"
        },
        "item": {
          "id": "b49bd0a4-0942-4600-8e66-235789635062",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "84d09f1f-2051-45b8-b404-6595f8c46e23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cd7c917-1fe0-45e2-a4f4-e24633fa2e75",
        "cursor": {
          "ref": "7ca7df28-c93e-4a5b-b0e5-b1c84c6fa49d",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ad4cf315-c486-4aa9-8f31-9187f6bbdb10"
        },
        "item": {
          "id": "8cd7c917-1fe0-45e2-a4f4-e24633fa2e75",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "6e0f1eaf-5ed2-4183-80a7-5af0945a1d45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "284f15cb-7aa0-4173-82d9-15eb8ab7602f",
        "cursor": {
          "ref": "67e96e2c-d230-4ac4-bf92-9fdc753074c6",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "8fd59144-0d4e-4a2a-b48f-a7a75cebda1c"
        },
        "item": {
          "id": "284f15cb-7aa0-4173-82d9-15eb8ab7602f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e3b003e3-f11b-4b77-8b7d-c87d581a2e5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "535e2304-e838-4e06-8a57-65b648def439",
        "cursor": {
          "ref": "74de5a7f-7cd9-4057-acf6-00208caa316f",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "18e6a451-8160-499e-9a36-c8e042d75048"
        },
        "item": {
          "id": "535e2304-e838-4e06-8a57-65b648def439",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5144e424-3e8b-43b1-bfa2-4257ba304084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6680f8ba-fed0-4824-afbf-71d316ae56a8",
        "cursor": {
          "ref": "a3e41d91-58c6-4b9b-8606-e5ba02969c86",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e53bee2d-d4d8-47e3-83b5-a90f835f6ace"
        },
        "item": {
          "id": "6680f8ba-fed0-4824-afbf-71d316ae56a8",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "0235b6c9-705e-466b-8bb4-a1f0a2b5a091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "371f3750-ee1e-46e3-a8a4-75a1e2a6edb6",
        "cursor": {
          "ref": "5c9b48ce-5845-4c90-ac68-1b8743bd0b16",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "9d627e0b-749c-434b-a0db-9e5bd26b1c11"
        },
        "item": {
          "id": "371f3750-ee1e-46e3-a8a4-75a1e2a6edb6",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "d997c9c7-7a42-43f3-8757-49349395f9ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eb8d220-bd3b-41e9-bfa0-c62ff9b8b197",
        "cursor": {
          "ref": "07e03ad2-09e7-456e-b091-f3b13c765e37",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1db49512-c38f-44d8-a54e-e4adb5d91af2"
        },
        "item": {
          "id": "6eb8d220-bd3b-41e9-bfa0-c62ff9b8b197",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "2fc3bc65-0abf-40fa-8c72-8096238bcdc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf36a292-20da-423d-9e61-100042ae9781",
        "cursor": {
          "ref": "e9bd3f70-8ecb-4316-a88e-433ce0c10a8c",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "254a4795-9a07-472f-8df6-5712c47d74b7"
        },
        "item": {
          "id": "bf36a292-20da-423d-9e61-100042ae9781",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "888f09b7-6305-4a8d-8441-2609f64d3fee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e242d9e-a77e-4ad0-8b7d-7d3165a628c9",
        "cursor": {
          "ref": "c3a4b647-1d1d-47e9-b9d6-b1bd0c1f1299",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2723f406-7bb8-49a4-b031-0adb6ea8ab53"
        },
        "item": {
          "id": "7e242d9e-a77e-4ad0-8b7d-7d3165a628c9",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "110571a9-6534-40b9-9808-7311589be283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0a0687c-30d4-4570-adda-d41e4747428c",
        "cursor": {
          "ref": "1423e001-ec65-4a19-be85-0ce5b56aaf86",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7ee0ad68-d3df-4956-9f06-553e80548529"
        },
        "item": {
          "id": "d0a0687c-30d4-4570-adda-d41e4747428c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "35c7cba4-0009-4fad-b43b-f5d71260d170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "704dc474-6dff-40b1-943d-9044d69f3d86",
        "cursor": {
          "ref": "93ec2327-32d1-4599-bc49-3ccf0b6e801c",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "c6b1c5f1-bf59-4590-8452-6994007830d7"
        },
        "item": {
          "id": "704dc474-6dff-40b1-943d-9044d69f3d86",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a1d6908f-98ad-42a2-8c2f-dc5e3224b8f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f7ce93-6268-44c9-a9c6-d2d025b1afd5",
        "cursor": {
          "ref": "326b2f4d-e7ac-47fa-b222-064ecb60ee0e",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c17a55c7-6164-4f72-9d75-f7d73d7683b4"
        },
        "item": {
          "id": "13f7ce93-6268-44c9-a9c6-d2d025b1afd5",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "7904e0cd-5ac7-4c64-8dd4-d6388fa33869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a68d7b51-d1e9-4da7-96c0-5bb1af71827b",
        "cursor": {
          "ref": "767dc534-2868-46d3-ac23-32bf402a9c62",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "8ecbf997-4a0a-4bcc-a1a2-4737192fe584"
        },
        "item": {
          "id": "a68d7b51-d1e9-4da7-96c0-5bb1af71827b",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "2ced3d63-89fa-4537-bf57-a5fbc53fce1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e754863c-9c14-475f-80fc-c3fc1b048d9d",
        "cursor": {
          "ref": "5c4e54fd-722a-49b0-a06c-0b74279324a4",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "435de045-5aec-462d-8f65-60c8d987b7ec"
        },
        "item": {
          "id": "e754863c-9c14-475f-80fc-c3fc1b048d9d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f2f79d91-ab90-4e7e-98cd-c51feef6c9fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3f3315-725f-4b9a-a962-be7e0d8abf1e",
        "cursor": {
          "ref": "5093652f-5be6-4b63-84d5-d0167f7abc82",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "123badba-a852-4b2a-bf09-33ec039138a1"
        },
        "item": {
          "id": "ff3f3315-725f-4b9a-a962-be7e0d8abf1e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "0eddbcdb-3901-4270-bef8-949e1fa449f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23565ee1-4a80-4307-9e86-795c2d54ea02",
        "cursor": {
          "ref": "5e345fad-d658-4a97-a011-0db7020f54d1",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "603df98a-b206-4b6e-bca3-56541519d273"
        },
        "item": {
          "id": "23565ee1-4a80-4307-9e86-795c2d54ea02",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "f4f1e542-b84d-46b5-8855-5d8815933f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea2fac05-0cf0-4f04-9edc-8c40fd99abbc",
        "cursor": {
          "ref": "af540038-f82f-4f09-9f6c-dbab5b08c075",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ae52a2ec-544f-48fb-9f27-88d77db6e615"
        },
        "item": {
          "id": "ea2fac05-0cf0-4f04-9edc-8c40fd99abbc",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "139f9823-d886-4061-bc6f-b2156fc360d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "238e3e81-4e6e-4e80-9176-1214cb903e91",
        "cursor": {
          "ref": "6e95823c-2d8c-4a2b-b1f7-9ade2fd3b380",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f3973319-a075-418d-9bd5-4daf138a1192"
        },
        "item": {
          "id": "238e3e81-4e6e-4e80-9176-1214cb903e91",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b845b9b0-82df-4af2-bd59-81ccf1c9a824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f680f4b3-f7f3-4956-ac47-e1a9b1949407",
        "cursor": {
          "ref": "5289a67e-ee4b-40c4-b7f2-f84ef2987102",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "fda95d43-f063-47f7-a83f-b58ea4fb6da8"
        },
        "item": {
          "id": "f680f4b3-f7f3-4956-ac47-e1a9b1949407",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "ad06ee04-7ce5-433a-b861-28a513440cd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed8d3a46-85aa-4afd-9ea5-d01c4b1b5453",
        "cursor": {
          "ref": "617efca6-e945-4851-aff5-09fde4c23a48",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ad80f4af-14b0-42aa-ac3c-1c2cba55d612"
        },
        "item": {
          "id": "ed8d3a46-85aa-4afd-9ea5-d01c4b1b5453",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "3a35e556-4f8e-480f-ad95-bd682972e3bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87abe323-c382-455f-a576-7119946fff7a",
        "cursor": {
          "ref": "60d84516-1676-497d-90b2-cc4c2fcf80dd",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "182bf8d6-392a-4a57-b69a-f4bb0925f665"
        },
        "item": {
          "id": "87abe323-c382-455f-a576-7119946fff7a",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "9d40d45c-1bda-473a-b283-6598be5b4378",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46d7f079-7714-4093-a0ab-8e687b350dbd",
        "cursor": {
          "ref": "c8939039-b03b-46b2-9b50-d8fd960988cf",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4d60b675-cd25-4992-9b36-70582c478b07"
        },
        "item": {
          "id": "46d7f079-7714-4093-a0ab-8e687b350dbd",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "dda4b0e0-1606-4d82-bb02-b2f8705f28f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "8e65bded-3734-4943-886a-2cde6ca9a845",
        "cursor": {
          "ref": "e81d36a1-3250-47dc-a560-5cceeba63842",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "1fb5eddd-a238-488f-9840-baeb0546650e"
        },
        "item": {
          "id": "8e65bded-3734-4943-886a-2cde6ca9a845",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ba6181ca-ca65-468b-8dfc-f1de6a194dcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "4e43c733-62b2-45a7-9508-ec960b891c99",
        "cursor": {
          "ref": "e370d5e6-2923-4270-bd1e-40473a0fb38d",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f3434faf-67b7-4fe1-a109-68baae5ed35f"
        },
        "item": {
          "id": "4e43c733-62b2-45a7-9508-ec960b891c99",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "98f41a94-b5ef-4303-9556-a470bd1f225f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "c0f9f109-35f6-4905-a9c3-85e1f94c4ef4",
        "cursor": {
          "ref": "a351713c-a039-4eb4-9f54-33604c18d8eb",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "90576823-9926-4dd4-b1c8-77bee354b0d6"
        },
        "item": {
          "id": "c0f9f109-35f6-4905-a9c3-85e1f94c4ef4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "595082ac-8afe-4682-9fc9-c0debd758b1e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0f9f109-35f6-4905-a9c3-85e1f94c4ef4",
        "cursor": {
          "ref": "a351713c-a039-4eb4-9f54-33604c18d8eb",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "90576823-9926-4dd4-b1c8-77bee354b0d6"
        },
        "item": {
          "id": "c0f9f109-35f6-4905-a9c3-85e1f94c4ef4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "595082ac-8afe-4682-9fc9-c0debd758b1e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0f9f109-35f6-4905-a9c3-85e1f94c4ef4",
        "cursor": {
          "ref": "a351713c-a039-4eb4-9f54-33604c18d8eb",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "90576823-9926-4dd4-b1c8-77bee354b0d6"
        },
        "item": {
          "id": "c0f9f109-35f6-4905-a9c3-85e1f94c4ef4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "595082ac-8afe-4682-9fc9-c0debd758b1e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd10d068-1ad0-42b7-8985-907e5c339560",
        "cursor": {
          "ref": "980a0677-820a-498f-9688-c5d7295ccd0b",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ad4e47ed-9061-4c19-8e8c-24035fb031d7"
        },
        "item": {
          "id": "cd10d068-1ad0-42b7-8985-907e5c339560",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "55ca5a11-08ee-40b5-ad1c-7cdd9668ba82",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baf40eaa-9585-47c6-89d8-61f8fabbfd05",
        "cursor": {
          "ref": "0ea4a3ea-65cd-4aa2-a709-189e2d2473cf",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "fa178e76-da7a-4394-b99d-248cd7e9e0a4"
        },
        "item": {
          "id": "baf40eaa-9585-47c6-89d8-61f8fabbfd05",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "02c3bbd9-5112-4bd9-bd59-e59e7dbbc064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "baf40eaa-9585-47c6-89d8-61f8fabbfd05",
        "cursor": {
          "ref": "0ea4a3ea-65cd-4aa2-a709-189e2d2473cf",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "fa178e76-da7a-4394-b99d-248cd7e9e0a4"
        },
        "item": {
          "id": "baf40eaa-9585-47c6-89d8-61f8fabbfd05",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "02c3bbd9-5112-4bd9-bd59-e59e7dbbc064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "65120dfa-df62-4406-be00-0617b94f00a1",
        "cursor": {
          "ref": "0e6f508b-c03c-4cc8-bdac-64b5547fd7b6",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "d555c3b2-0efc-4916-a135-5d934dc4c4d6"
        },
        "item": {
          "id": "65120dfa-df62-4406-be00-0617b94f00a1",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "4ca0f247-45be-4b87-a47a-63e54926a6c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "a83c88ba-7124-46df-ba15-d181180f2b2b",
        "cursor": {
          "ref": "326dd470-1db6-4300-b49d-b09c3853a39f",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "b6daf785-97bb-410a-b0ff-7af56ae7cceb"
        },
        "item": {
          "id": "a83c88ba-7124-46df-ba15-d181180f2b2b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "5a5d18d5-c2e8-4b61-8309-e0d22cf9fb79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "a83c88ba-7124-46df-ba15-d181180f2b2b",
        "cursor": {
          "ref": "326dd470-1db6-4300-b49d-b09c3853a39f",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "b6daf785-97bb-410a-b0ff-7af56ae7cceb"
        },
        "item": {
          "id": "a83c88ba-7124-46df-ba15-d181180f2b2b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "5a5d18d5-c2e8-4b61-8309-e0d22cf9fb79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "46332725-3a45-4734-83c1-a8c36b625b63",
        "cursor": {
          "ref": "d84517a4-9e25-4614-be78-e56e9305f01c",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "a96c4b78-a539-4715-a670-a954838bea9e"
        },
        "item": {
          "id": "46332725-3a45-4734-83c1-a8c36b625b63",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "358e8fa6-3e19-4753-b7a9-dfc6ce8ed04b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}