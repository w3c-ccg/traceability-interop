{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "64492dea-b7fe-4c7a-8de8-b7942daa313e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "9914c822-9e71-47dd-9749-2cc682e5106b",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8ea28bcb-6a45-49ae-bfa2-dcc888a469b3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "fa72cdb1-b344-4661-9473-e6b9b72a030e"
                }
              }
            ]
          },
          {
            "id": "07589867-49c7-4a22-a996-56aec35aebe4",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7298e691-f622-41fe-b5da-4f068f2120e3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7270fcd5-b3f4-42fa-87b6-1ffc4abf5ed5"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d3faa307-8fc2-4ad4-8614-d99fb44354a6",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "04d8bbff-613c-4ff5-a93d-89801418a154",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dd55e54d-b12d-414d-8a9f-e9183c5cc0da",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "556965de-d08c-489b-a897-89f1ebcace84",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e683ac4a-bcec-4033-bd75-c488c2ad5ab8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bf4a7049-a7da-4518-a203-c858ba653501",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2343a53e-5372-4a22-8b3d-cd46331716ec"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "08d62d8f-1f29-46e2-85b5-ff59a3a3fbf3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ea4c4259-184d-4e49-ba68-553287f4d82b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ad9c4c71-2367-45e6-8cdf-ff740e2cc115",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "8d1e195b-6cb6-43bb-9610-815483ce8636"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b41328c7-4dcb-4eb5-abca-6a1eef87b307",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0d206b98-a454-4bf9-9338-98ef1e48f24b"
            }
          }
        ]
      },
      {
        "id": "d343cfa2-c426-440a-8e16-7ec92cb79831",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "097b7918-5ec3-4d29-9cc5-7a30054b3511",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9705e38e-cd8c-49f6-9f53-23c49816e8c3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2944c4cc-bd8f-4270-95dd-762c974d9dd9",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e2f8fb4-a135-4408-8a77-213b1df834ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "22590a16-c655-417e-8750-70cfe4e26fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69de3d16-2155-44f5-b55d-daf3fe158857",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1364d0c-8d67-4ba7-b48c-08517564e8cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "45421807-c202-48ca-9452-3603d18bd8c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06d3794b-510a-4697-8bd0-d6db7b4153a3",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "146ecd86-a27a-4065-99ad-5175b7ea498c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f859cf6f-db57-492a-87ab-92ce8c955011"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "db161e2b-1ac0-47ac-abd1-3d0092275bf5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a918a53a-3cc3-4e1b-b95b-880d3720613d",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdfc222f-a150-4f22-b9e1-7da54a595a89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69373493-348e-462c-9500-1f2b9af081be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aea6ac0-3488-4828-b9d1-887431810c11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5765afe2-09f8-4b31-b1fc-3dc1cc763982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a53bbc10-cea0-4a90-a691-d70beaf144ba",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f09ec225-925c-40aa-9a6f-0a7fc37982c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28fb3b93-af59-43eb-9577-9426ac76d602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34057890-b424-4440-a9af-6521a3f86781",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "b3155cb4-a564-42eb-bd9f-e3c683cd141a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fc04c75b-3df2-4703-93a5-5110abbd1527",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3fe58174-b754-44ea-a67f-eeb3e00d60f2",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "10c1f358-cdbf-4eb5-9834-ac597957baa5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "fd16dbab-c60d-4bce-99ea-2df7a1941c51"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "48aaddd6-7520-4229-9218-cd42b70faad4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "093d34cf-fc51-4f45-befb-e09ac77fc854"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5feecf97-3547-478d-8e12-a1ccd0416842",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "38592af7-9105-4937-a95e-221eafcb20b1"
            }
          }
        ]
      },
      {
        "id": "ab6f8df3-ee70-4e8a-9e35-15cb8378f748",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "1f08465d-1126-40db-8253-9c4144a0eeba",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2d3ec29f-b300-4173-9fb8-950301378f34",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "2b49e29a-a5a5-4c5e-abbe-ba1df21761ba",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b0f132-7e02-4a72-ac2c-5fd1868b2335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d9d042d-f883-4404-aac9-69ef275f6b1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "972ca9c4-d710-440c-9ee5-8e4ddf5226db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd34d758-47e6-46af-a441-771b20e460ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9898ad1-4d2f-4b1a-8977-f7fde91ce5c8",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c4f9604-e66a-48fd-bf89-65ec90bd351a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5bd6ad8-6f86-4198-928b-68da875a9eac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb96e54-414f-404e-bc62-094e8609b280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "285e8df3-a1c1-412e-a7bb-f632e0608da4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e64bc92-3b9f-4cc5-8c5c-fdcfab139161",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8142e44-c1e1-4dbb-9cef-f87515177bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7de25f71-d182-476c-8a57-d71141289491"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1235b198-367f-4afa-a542-7139fd6455f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad572d0c-3968-4cf4-be71-16a0b16036c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6028e54-1299-441d-8fd1-b3b6767578dd",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aae263a-db92-4825-8bc3-1f0d80700f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eccd9009-fb3f-4689-99e0-9dd09dc12d2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28d5df73-51fd-48b4-8257-aaddc637e954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67c69dfb-91b0-45dc-b34c-eb5f3b0490c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a86023-edef-4b08-8e03-427b9998fb93",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f389fd57-ef9c-4763-b275-6fec133c5d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "923a3c5a-0a58-41ba-a025-53bf9128139d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b5d5bd-dd01-400d-a7af-6c62e64a9d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "392e7470-d403-4bb0-ab44-3783c4763000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "187b805f-9b57-4149-94ea-9d485bb7b70d",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f29006c2-7963-4590-b95e-fc26321f61fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26deff61-2faf-4360-bac6-b5543d12bdee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d46f4a85-d6d1-4893-8c46-fa5271fb16b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "34561d05-6cfd-40c5-be84-922d9502a95c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac05074-e2d4-4930-aced-cf979b98fa59",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6bbda37-30d4-44e6-b7e5-308ae7ec463f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4b69a0e-7094-4538-885a-49c6f40c1037"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a3e9505-c1b8-4300-83d8-f654b999090c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5f5c800-98d2-4cf2-b0f1-79609453f1a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d86e3cd-8bc9-4362-b3e1-4627a8434c34",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aeac79b-a2f6-4212-91b7-b4ef66575439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f239c6c-a135-4f63-8a59-be1ebcc6c550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a97e536b-7af7-4813-b60d-d9b5f49a269f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2ead42f-82c5-4571-b45f-15182b46de8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d06e1a76-ab10-4144-bb6c-14868868a946",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29f5335f-d1a5-4846-8776-ec702aa319bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0c7bdec-0ba6-4106-884e-c1e7922e26a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1b9ce18-9eeb-4ba6-83c0-8cc7985f85ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba953c5a-c391-4c82-a62f-240c35e8f467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717d6992-32e8-46ce-84d5-f66ee655c4b3",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c609a33-2056-4f1f-8f04-08778bfabde5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94ae0f38-f8b5-4a57-950d-f53539881e44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a150b811-ecff-4169-ad39-dfa22ffae1f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "716923c8-21ea-407f-a548-70d5bbb7857a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a9138f4-ed8e-46e5-8528-b0701795f54b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37ecf775-b490-47f6-bd48-cf992a97b2d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9af7be8-a880-4ae0-985c-b767265e5c9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b52a453b-9551-44db-a05a-a3717990eefa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97bed753-6534-42f6-9a27-396c2b85abbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c4179a7-8bc6-4dce-9b56-7484fa5655fc",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d327a243-2868-4e63-9a52-ad3d12c9d012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b52a4dd-8297-471a-bf66-5e01655ff679"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "577c3067-47f5-4b8b-96bd-f7eb7669dc89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "25f54bb0-cf99-4ca5-b7c0-238c539a960e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36508188-132e-443d-9d16-43d3cd96ac05",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85eb3c4b-24d7-4c82-81d7-6acb4ee7e87b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3504681e-f41d-47c3-95e5-d8e05dfae62c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6c9cee5-017b-4891-b2ad-1b1e2ea808d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "141967dd-c9aa-4dfa-bb38-d8d34547d940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7276dce-3745-4b41-87cd-adfb4513b1b9",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "734dfb83-174f-4c3f-b8ff-f85a2186a87e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed52ac49-b03e-40e8-9891-f5e90976d62d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cb311d0-347c-4411-91d5-c09877b505ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c425c0a5-eb40-4fa3-8cbc-474003c42014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d408bc33-a93b-440c-9eae-d648c004bb59",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a34220fb-c8f0-4589-97d1-ea909cf92353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a1d5442-1927-4214-aff2-a7130fbf301f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c75f36-a7fb-4332-b08d-1760a74b5136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e360909c-4824-462d-af83-aa1db6c00790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b2b7985-510b-4cbf-8a99-fe855fa8a64d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0153ab33-5e66-418a-b676-f34c952d2ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d3a3d5c-adf2-4ab3-ad66-a0cab3b4c97a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4b08227-ab54-432a-b99c-66c417295a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31d949d6-d3ef-4139-ae5a-783ec276ecde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68dc5d9-a673-49f9-80ad-90114b3fef10",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c3833dd-aa10-4ce2-9be2-4a2ee77bf72d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4788aa5-d7be-4817-ab91-573f99bbd6a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30b23d5d-e874-4bd3-966e-23abd506d0c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e1e8e1f0-ba38-4b7a-8e76-520188130f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b78bc16-953d-4566-bf0e-9ca52ace99b7",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d36bbac6-da19-4fe4-9dbd-9f673be53562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a495b76-4d44-49b5-9e9b-283319fa5ff1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "084e414f-af26-4029-bac9-b2752dc77049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "397567ab-8435-47b2-8f7f-a8c9fa58cfaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38c46905-e312-4044-ada3-4b8f5a1eb44e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f7f840-126b-4a9f-a39e-f98ae4be8df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47f727cf-62b7-4562-a971-5b4a5d46b0d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c40302db-d626-4c9d-8d99-746db035e7e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c32a4b8-fe64-4e0b-bb80-be82033bb65d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8ce1e55-3f85-41b2-9f74-981306cbba4b",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "872c75e1-1cdd-4d02-b345-0130695c8ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bb6eff4-24ad-4c57-b2e8-dfa26575fb14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f97430d-c576-45e9-be56-1f884c0fcf45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "de63414a-72a6-4339-9e40-ec43f3bf4f2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e1aa1de-a621-4255-8e0a-e6252ab4f664",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50efbe66-11dd-45f2-88b8-40417f332a92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "104f9139-90a2-41b0-a14b-36133918f295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb62459-8cc3-406e-a682-404380aba438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bde7d8a-6d91-4931-9f04-1536dd17696a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5e10086-c633-4123-bd3d-15a4badc5d8d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f945a4ab-9f4f-400a-87d6-83d3b7aa477c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e5b48b1-e6eb-4907-8c50-19df5dde163f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1632923-53ef-4caf-9514-cd62c1b817bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae90288e-eba7-4c7d-bfb2-f599783a95e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5faebc0-1751-4e3e-859a-c8ba1376dc1d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f7983bd-6a36-44d1-a680-65745ed6681a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a3c378d-21d1-4d9b-93e5-da136f2cace1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d61ba8-4634-49b5-bf6e-14e07bc6a935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "36fd8e80-1e82-485e-8889-4ec258e3a1e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ebc0eb-2b38-4a96-95a2-797c1e79f873",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0e9842-d172-423b-99f9-7e446648e831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d11a3748-24c6-4f0b-926a-218e8dbdafa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cde1a103-ea86-48c0-a30b-20919f88e76e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "315d0d08-d328-426b-a917-0fa1dc6b0111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f510ff38-4d59-455e-bc84-a917c053d42f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc8924a2-eebc-4ee8-a5a6-e8215e70eeea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbd025c4-f681-4baf-a142-92902a590d24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc1682d-ec7d-4022-8bc3-f7f5e8e76156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ada06ff4-725d-43ce-b0a1-690819cffc73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13833a1a-8912-469a-a4d7-2d3b4ff88b63",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78630e7e-3f5d-4996-809b-50f99264b57b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "756539f9-d77b-4608-823b-b344edb193d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10dc80da-953f-426f-ac6a-d189eb5f7bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9507a828-29fe-4c2a-b1b7-5a40d6eaf2f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b733267d-d2a5-478c-92e8-933f6c95c3ae",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28eccac8-c53f-4749-a489-6f9fbedb757d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "038087ae-f09d-4779-9ad1-1d177d2f5035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90ca98d0-1b14-4369-b3a5-03c05203fe37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc2e5463-0e93-4d8e-970d-82d8c2f2a1f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22edef24-e6a9-4900-90f5-0d5841f686a8",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a879977-5b36-4efb-94fe-b899b69b26dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e939803-2032-435d-a130-a62e2e3bef67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffb5ae82-5057-41ae-8280-2d52d80b7b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a36564f-dbc7-4dba-8699-8513ca7ed708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc8f02b-a66f-4cec-a893-03c4890a7954",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e99657-1a2d-48a4-a5f9-2c8875694dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af030d3f-76c9-4ce6-b341-952ad76a9e7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddea00dd-0873-4f58-b480-7e1df9402a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c2cd907-a495-4ba0-af97-ac21482da31f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea3bb04-58fb-434e-bbc1-a3191716d57f",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "554ec1ce-e6bf-4df4-88e8-8e43bd851570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43fd8f16-05fa-4d0f-b75e-667011f70892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b30d59c-56a2-4bc4-ad9f-6c317e127f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2d6181d-370c-42eb-bb52-e3e97dee39c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c74157f3-269a-4474-b0e9-ac94d203c1b0",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a273d9c-3504-42a6-935c-6ba66efbbab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7529116a-643e-4abc-9d1b-5eb517b99144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9b836a-258d-478a-a084-4f722a980200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0a9e6d3-b3da-4956-9472-4142f03ec47b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4df514e5-1fc1-4ff9-93f2-8b3c5120f811",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3c855d2-c7c0-4b38-800c-c8d2a3a9b4f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a415dc18-33e6-4a58-9899-37473d11b4d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2718321-2c27-49eb-8f71-b82d67f60ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9368ed5b-77f8-4bbf-b089-f26fb8cbcbed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57263167-c99c-429a-9dda-790a6485f033",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "431e3b53-f634-4e92-b6dd-016dc85356df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87866177-ede8-4a5c-8964-d299abbc7edb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bacacc1e-76d4-45c7-9fd4-835805bfd80c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "18e2e280-caa5-4341-b09c-7f696e02c691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "254cf4ad-89fb-4498-b3e2-677db13379f7",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cd482c7-0be9-4b9a-913d-cafae14cbd78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8288c25a-92cc-4f51-9dff-5b9cfaf1464b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f4560da-2c98-404d-9518-fa09c2a736ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8ae790a-30ce-423b-be2f-59e502c5d95c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deea17a9-c51e-4242-91fd-afcb3d8ba1bf",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff645a0-7f44-4b74-842c-df785a17d917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "778f624a-712c-4d8e-a2f2-916b0d65d2b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f9defc7-0b8d-4c41-91ba-3ff82ad70069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "64c1bb9f-53f4-42b4-9559-d08aca244bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aa92dd3-2e0f-44bb-ba06-ce933abb5323",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccbf7223-d8cf-42d9-8315-2ea92a57bc90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd889268-d7ac-4185-aade-ba1ba43ef303"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f1e2ed-5b1a-4e18-8cc0-eadb3e677379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c0a78b69-ad29-44a9-ae5e-c5f1685f6986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb740958-634f-4f52-a811-672f34cb4fe6",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42897187-821b-4a20-8489-044c88fd0d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f2ff6a8c-7512-4e19-b8f2-a5221db3992e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69309991-a3f8-4751-a0dc-b9ac5f4dcc88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d693623a-02af-4416-b130-dda4f638fdb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24bad87-1408-4bd3-8e73-2df61c3a1966",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3231136-ceaf-4231-bba1-6684ad70ae2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b0f502e-012e-4547-b7f3-bf32c20cc91d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9172cb11-295e-49f6-830e-36a39eb5ca3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "70eee89b-a973-4ff8-a7f8-cb9b96ae62b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a857ea9f-3c7d-4ff3-84c5-9e0df0f90f4f",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67bb8d21-e259-43aa-af96-8e12cead4b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cffcb76b-bcc7-4b73-82af-937d4384f8f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a52184-e62f-4e19-bb79-bc1f1ad645e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4269f60-ab1a-4c8a-83d1-c6ef00d58251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ddac3f-6b4d-44d6-949c-8825310d33b4",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9187b5de-884f-4f31-a26c-64babccf18c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72b919cf-4ccd-4012-b9be-d8c4ce0cf16d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1353fdfb-5271-49b6-824a-557bd4b5ce4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d0dc4c4-3a57-4a6e-beca-bd57ff18b339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c71a2c-7eb4-4f42-b499-0aa1319c2646",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12819ca0-ab99-484d-a5dd-d34cc17b8f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d293e952-eaf6-4944-9618-78fc47c1dee3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef623ff4-c9f9-4973-86d3-347d1e517649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1271a932-5bbf-4030-bfa0-7843a5876fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1bc1b63-458d-4237-b5e3-a8c05b13475b",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b6ba42b-6324-4774-9195-5c41d5a61824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afdeb8de-cf46-4bf0-a001-caf41abc17fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "503506e7-8b4d-496e-ab52-f2d2e850c996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ca43c33-686d-4241-bb95-e3ae2a0224b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8608cbb-55f8-45be-b790-77aaa8f58c32",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4369d735-fc74-4970-9372-e1d72de60be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "803e928d-4268-41d9-a28b-d129e745ba71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c3553fd-2479-4850-ad75-c94521922d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "9ea4c716-6b75-4eed-98a3-519dbf9d5597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19446103-9a29-44b7-9913-4f6a12b885a2",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feda3e6c-f5da-4830-b712-b493b0a5f33f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16c861d5-7f25-4073-80a1-c40d3cf06583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8154cb7-b05e-4f63-b810-4749406e41b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "22a79433-b973-47c4-8ac3-3bd4ba160699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e4221ca-286d-4157-9bd8-ca213dc6217a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ee3566-a3fa-47d6-8369-da621a003e3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c6419cd-a4a3-4628-a619-31f9af9e12f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e6d48d4-649a-4b9b-91dc-0c85d72d9517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c131498-18ca-4520-9c86-aa70862119ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2312ed9f-97bc-44ac-83d7-2b273ea86f44",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7da3b9c1-5a4b-451d-a390-023015440555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c36c76d0-2346-4c62-9090-577ce299bb3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48e6cd95-bd72-4f90-8374-14e432dec8a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "42066a74-72ae-4a24-9db5-489206410d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "581b5319-565c-4fd0-b712-1301e9e1ef3a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26cd56df-3cd7-472f-b827-774c0d78c5e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d6d1176-84e8-4678-bf9a-6f0be226d1d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aceea52-2525-4e87-bea4-bcb5db8bf769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb3a8050-8477-4d56-88df-415e24767ed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "406d7c7d-fd3e-45e0-8ff0-d7c9acb5bd1e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c0ee424-cb87-4c81-b119-5dfb153540d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8dd7209-2b4e-4847-a3b4-100bcba6ac27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e837e0e7-029d-44f6-b420-2cb7d1d7ca6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b68f795-025a-447e-8ca4-ff3b9333523a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d0df366-0b04-4304-acc6-cfd3036fc95a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb177d79-577a-41a2-92e1-8c8e93572511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75e5b4b7-dffb-42f3-9a75-059d8a6fd14b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "466aea6e-f489-45e0-88d1-8e7f8334c3f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "22504b26-1bcf-41e7-bf0d-9e60594e1447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d189eb4-de58-425e-a68b-5abb70433867",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eb2f979-197c-4000-a446-6cd137c0a049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78846f41-1bac-4b50-80bd-e7d0cf3c8367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eadbd7c-f33a-4496-abcb-daa15168f1a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ccf7863c-56dd-4f3f-9796-b549c28f4f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "512c766b-3f32-4724-8795-b5f6995daad1",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "867e09b7-7221-49bd-a9ec-a3b58aa5f123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ae05963-332b-4c2a-8139-27addfb3f7a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfecfd3c-f789-4e52-b5c7-f09f04766ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "396ba5d2-77d5-46fd-9f95-75444a80d182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc00035b-e750-4f15-8211-87e7b8849664",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a4de707-c2a8-423b-9466-a4404c9e22bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0940f824-efb8-4c91-b193-ca520417dfb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9445e9a-a443-4fe8-aa9a-5e206c3c0703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a5d2a0b-2169-41ff-bf31-a2060489b8c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fdc73bf-fbec-49a3-b820-bc34daf15f16",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7048c6ee-c6e7-4851-8672-fd31435a5dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c47315c-0c00-47a8-81cb-25222743abfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f38ce2-f4d5-4bdc-9344-6e3e31fb94fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d49c8df-0fac-4860-aa6c-cec5c4cb1550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d0fe510-4c8d-4abe-8fac-a9a85ef050f1",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9b84e80-dc60-4b67-80a7-9836fb2cc53e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3b5651d-0554-495d-8140-f497029998f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8650259-364e-4b26-b248-3d162d936d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdcec212-3637-4251-a7f9-50fb1ee40660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ffc7d8e-1e8a-4608-a23a-0c0c77cfaad7",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5acf8c4d-dc07-4f75-a939-ea0d80d98abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c2ddaec-37a0-45c5-8d69-ef8e0f4430be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d35d1402-e636-45ff-bb06-03bb32206516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "526ab9fa-f8c3-4b50-bbcb-d92ddc68efb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52357c1-d446-48d4-ae32-ed7371a0f03c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb66d52e-c853-4e0b-afc1-c1fe7f093d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0596c14f-d352-4733-bab9-2f941beaa8eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4864cee-6e75-4f54-bfdf-1550e20beb53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1ce4052-b3d6-4f18-8223-e1f0496988f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49fa71bc-bdd9-437c-9cbb-16fa6bfb7060",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e62ebb1c-f3dc-4cd8-9dc1-bd235bafaeee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5b2d9cf-396a-4170-9f08-faeefe79e017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8034993c-e986-4e13-aed1-6468c3386be0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "17662d22-d259-4519-89a5-3f51a552647e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12149af9-21c3-4e76-8b3c-38a793816984",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab999fe-e3ff-4c0d-96e5-fa38e9dad972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a9d27cb-0ff7-41c0-9e9e-7db3f656e1d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "425f1e3d-8e46-40e5-9a6a-95bb33f5bd70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bbbf835c-bd9b-4d55-9fb1-cde49c7d48c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b3abda-04b3-4450-8e0f-ae6b96ccfc29",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62e80fa6-d93f-4586-bad5-313b3fb8f6e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03c3c408-7746-4a58-9832-b57292f25b8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "260da0a7-f090-4e37-b4ab-6a34c8d03804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "85be86b6-2018-4941-b7c3-290e70f9d5a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80cd8e4c-e46c-4a83-b3b9-4baefa347de5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d6ca068-7326-47b7-95e3-f17af7e0af8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "310c55f9-083e-452f-b4be-51f47b015854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec0b499-cbb2-4405-9ebf-27de784d1ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "858ceb1b-eaaf-4fab-9e06-35ea1e867a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49cf79c3-2d91-49ca-881f-77d1c33ee327",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5454cc23-74dc-4a99-9c90-8a78b95babb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81eaff22-5aff-4022-b9e4-f85d0d1d7780"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46245d33-f09d-4de0-805e-49662b605219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0220b2da-5171-4412-8e42-110ce38d03eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37230177-d48e-4c24-89bb-e710abcafe5d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "385380cd-aa50-4a54-a48a-34cd7b5461a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b969fd7a-0189-4c8d-b01c-56ebac240f02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64cd6cc1-5865-4df4-bb03-071cef4ebfd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b741c27-c826-451c-990e-ee53c161a850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60243cff-fe7d-4a3e-a0df-1a9442ac97e8",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "580f378e-39ae-46b4-9ffc-58835df5e4cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50019de5-8d02-46c7-94a9-23eebc8ab3e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4e9b1c8-9a06-462b-acd8-42baef2be4bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbe1a51f-7517-43d1-aabb-5f013431bdc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c18c3414-ad1b-4417-b2b9-f3ae722f9e1a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edc6c9b3-7729-4653-8525-29c42a15b9b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68b27dd2-a11f-4eb4-949a-bfcb7833da9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ece945d1-942d-496e-b269-57564775aeb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "533b147a-99b7-43e4-811d-745413c1b813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38eed542-e62f-4dbb-b48d-6c7b9eaab672",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c37845b-b518-4993-b7ab-a596b41641b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7d399d0-ecd2-46d9-882d-5febda6dca90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afad6d41-8695-4b29-8e5e-d924b95b8ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5775953-09bf-4b6a-be7c-b59164990509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7935f00d-0ec2-420b-af45-83a67ec432a2",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a50c0cbc-3751-4198-8098-e712f9b5e84d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83c871f5-fbc3-4fdb-b365-2a6e71432312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a9adaf2-2e28-455a-86f0-1514cdbcb0ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2f3e4a9-bdf2-4097-a416-5e3da974ab57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b13b3600-f548-4752-95aa-3224aa0d8758",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "611c3261-681e-4d92-9029-da89b9f4f782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3165c2d-770b-426e-a483-bcf4c49f5ac3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18acc8bb-6eac-4945-9814-34db54778f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdbc465f-b7c9-4f95-a7bc-9f2dbad70545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2deaafd-320f-418f-8fe5-fd6cd1efd39c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a9c3bd-45b0-4ca0-84bf-84b4bbb9879b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbcbfc9e-f1a9-4b71-805a-2578a8385318"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4f21249-3f5e-4e9c-97d9-db06ae4dc074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e1be69f1-16cb-47d8-876e-797ca8b66c8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1baf931-4db0-4c5c-9d8a-df799138465f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14f8d488-22bc-45ab-b580-45c663b379aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54d29df5-4df5-4b59-b0f5-3d776e744afe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2124b521-6bb8-4f94-b6a7-e00a45d953fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "90e30251-6548-4596-8ae2-7a6333ec745a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25a106d5-978f-4aa2-a6e0-395437b4432c",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27fb7028-6807-442f-a248-d6b4b4b8fbd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91d6087b-4646-4c2f-874a-8bfd478f1793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20138ba8-062c-4200-91c3-5c85ff39339a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ae4596a-59ed-41dd-bf85-064e41a8acd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14601ec7-6c1d-4816-96fd-5024bf0e0181",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a85a7548-4a47-48d0-9293-65a39dc9932f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2126aafe-7347-47af-b491-b1746c7e13d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4213976-e8ed-490c-82d1-89e3c85417fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eac049fa-d150-438b-ac81-19949d50726c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2250ed8-c046-467a-9962-2ad49ffd0ed6",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "229b27d8-743c-46a0-847b-e3e46c798217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e11da5d4-105a-46d1-bfde-be3748a84c0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c19c3c8f-ebfd-444d-8361-12f4f293d5f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "34d0e6c5-0182-47f6-b752-9d5984af12d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed0a436-6858-4c7e-be85-277b30512d53",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa2752f-2975-40a6-b38d-d7d5acf48b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b540f536-70c9-4150-b518-80e3f05c20b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb34d76e-a2bb-43cd-a215-31464de030a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "79f99d0e-7f14-4507-a43b-4b9f9ef47cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9938b63e-9888-4dbe-874f-f922aa41c29b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f9413d-ce60-4c45-a4ad-8116c9e4a12b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9e0fdf7-d5ed-4ffb-b50b-c471ab5ddbf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "486e67cf-c979-45d9-92d8-77e10d8e0d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca41b0be-a3a1-4ae0-8225-35e93eb2f701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065913d4-37a2-4184-ae9e-0957020af998",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deec54cd-1883-42b5-b6b9-396b7941d6ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feb1bb71-f516-4666-82dd-90b915f4d7b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "661880fc-9b89-4915-8ccd-b6e822153c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "513c7479-1fcc-45ff-87cb-76f6e7620202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85557573-2808-486b-9b74-5c2f0c5a6a32",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5584d1d7-ff8f-4eb0-b189-48cadafb5ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2827cfb8-7ad3-4714-833a-2c770140c9bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afccd149-5268-40bf-bc8f-64e2999dcc27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c923887f-a05f-427c-9b9e-8e5ad011b8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b701371e-c740-4aba-a21b-b1c271c6786e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1c4f3d-1b6e-447f-9a10-fa6b66e10084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f711de87-c839-4c99-b98f-3bdf9a5e5465"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3893b97-ad81-497d-ae6d-300238d9f4ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c11ecdd-ba30-4615-a8a1-ef23c63b7011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9415c493-a1ab-4245-9482-d4b0ea62f2d8",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf751478-dcf6-492d-8cc5-46373ac37c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4271f55-abb1-469b-b694-1045107cf810"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "001730ae-3b31-41b5-8f06-0ba1e0e77823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "614525ad-5aa7-4e17-9870-f6c0b7777220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a34a55b2-b16c-4426-ac55-3a804be91e05",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "425e25f1-fcff-40b1-bda6-4d6bd8bc1379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21ac69cd-62c1-4a8a-b948-22a78ac7b198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfc5e6a5-3d20-49a7-9d06-fc6540456fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7af609eb-a5f1-4a8c-81ff-63e2aeb961c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8447e52d-b874-49bb-9d93-4ef13841ab6a",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5251497-0021-4e38-8e81-f0c48289e627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b0af8e0-0b92-4803-aa82-51437236acf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa355fe1-522f-442d-89f8-c5bb783a57f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3dd683a-b892-4e08-af4d-187fd0a872b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35f8c606-b5bc-4af6-aeb9-606b9fd22612",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f1b348d-cc3b-48c8-bcf3-c7f8e44badae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48746b61-0a20-4145-a6e6-94663a1cc321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3613f095-7194-4416-ba01-d661d25a1901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "56f726df-1cb0-42c2-9515-8c21b456ae73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae23f32-0dbd-4acc-90db-23cf13af81c3",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fa43b45-4217-4915-8de7-7bb253d6a46b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94374d4c-0a21-4f4e-966a-cfb001bcffcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aab4e491-7f42-4fcf-abcd-eea055406888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "85f5f49d-d631-4417-bde4-fa2b3c40fcc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "337de2d4-6c00-472e-9419-f42e8c613f28",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9984c99-dbb4-4ebe-a9fd-5c69c1a071c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "633d31a6-c4a0-4e65-8dbc-f0298e1a1555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc1178d3-b123-45c5-9934-b7cf9f89b55b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6061f8d-4228-4325-9715-90de29ca2b8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "076337e4-6f8b-4c3d-9f03-5ccbce02abea",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "138f1855-9b82-4a77-9bab-b41fbd5e393d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e21faad2-88b8-44f7-8a18-280e0b89701e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f0d7d6b-e7d4-4ca7-9c5d-27043d70f4da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a2d4f47-f6c8-476b-9207-d14193edfbd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "611b85e8-fb69-4929-989e-7f72aa3f91f5",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9049239-51eb-417a-8009-91ac9f666dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a40acdd-2749-43fa-b056-208d64618c49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a26c87-74ce-49a6-9bd4-a21af56ee9ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "11e6edcc-d183-4b86-b5e2-1ff9c9fe1760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e960431b-4bf3-40cb-b040-affc0f2d9d57",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99966e1a-b57e-4170-8aeb-4525724a3903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e8dc3f0-6b5c-488f-a8c6-6bdff8100dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b21aafe-a872-4c00-a287-62aa0f99b425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8c7222d4-0424-43d0-83de-7370e03a560e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0789bba2-bca7-43fa-9028-73602daa8be6",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc74333-4492-4d13-bb62-9da6926dba57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f6f8a72-4f81-4c8d-88c2-a5ba17248768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9320962a-b33b-4923-a93f-2282a0ec5b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2212d70-5ed9-42ed-9572-b413b7987dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "662bfa6e-47b1-47f4-8ca0-81b3eefe5371",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d879f5-a22d-4def-b03c-98336142036b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c13bba50-76cb-4ebf-88c0-bbc3bd98918c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aaf5fe2-b05f-449b-89c9-52f1dd4e7135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "958f364a-152c-4bb5-af9e-e2caf63182bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61f63d33-7080-4610-b86a-04f73c5e5fdf",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4a69582-8826-4c7c-8a56-ded4112a50fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2f416e7-232c-4b6d-be56-3aed304715f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "944a2332-7893-4806-8ba3-0e3f62e12d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c75e920-cd6b-49f2-93ac-80ed61cd8e8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b1a7de6-afb9-4a91-811c-0d9239422878",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a85b7788-e50a-4b1e-bc5c-29e99c957bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6490e66f-b8de-4685-aa06-2b17a5beb7e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f3194b-b69b-4569-9524-dbcb31466bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4961f1d2-c15d-413c-bba2-627983174480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81b7c3d1-0a73-44ad-9087-77738ff36ff7",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "107e23d0-7809-4cc4-9840-4905533a29d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a787e7e5-8196-4cd4-a8c4-e54893e8978e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d84e29-f84c-4519-aec2-323ff9782234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba1f3eba-9817-4ef6-b0c0-cddfd935d361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8885d9d7-d396-4de9-98d3-a88367e1fb2e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1177557d-2c3c-4c8b-9673-753e1e6594c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94a66e52-a364-494d-91fd-619b9398a826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39898ece-624a-47b1-8c27-0df41cd134fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "00d5d5e6-e9db-41d5-b597-f6e53eba097d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e980dc1e-70f0-451f-84c1-73e2d31b7b3f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5f6302f-cf1f-414d-92bb-0554227395d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "04e8b2c5-18a9-4ef5-88a4-e5c521e704f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "467271ad-2560-47a4-9e3c-586e1594ad0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "15e7d57c-54de-4979-b5f6-d298fab5a26a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7975341a-002b-4661-bb42-f6119a703cf5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d532b58f-2f3a-4ce2-88e4-22c39e037eec",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "543f59f9-2f3e-4eef-a164-1d64dc7847f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0beeca8b-b99c-4943-9cb8-fdec79a3cc32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e99da364-354c-49d9-93d7-7dcd0673274d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "14c7f04f-a4fa-42b7-aff6-17e32197f353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1e53297-987c-4b8d-bbdc-1f0bb76e3f54",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca48ff1-f554-43cc-9427-d430a6675b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6da7d37-9635-44cd-a39b-4ad340b12a75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2007fbb5-7ff8-4e67-88d0-b09c735230e5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "f8e1c157-c652-4003-a5c5-0c29c9d5c2f7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba7197bd-9bad-495a-87b4-4550c517f1d7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cb78795c-3a4e-4dbc-b66d-95548b2f9207"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3247f367-0669-4e0f-a096-caf18ec0cc34",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "33703bd3-6304-43a5-b03d-965b612d7c3f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1b7d3a3f-fdfe-4b4e-9447-28911213cf4c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "08c4a5ac-329f-4b01-9f3d-d009ecbea5fc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9332774a-b0ba-4f56-8a1b-4f8defcbd0ff",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0845b32a-f46c-4bce-abfc-065cf2b78f17"
                }
              }
            ]
          },
          {
            "id": "14f7a71e-2d32-45d9-9f45-82314cae744a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "03bfa49f-8c00-4a44-b90d-215ed7dabe66",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bceb65e7-01ce-4805-b00d-0e638c9c6f3c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e9d86193-afc5-4508-8cd9-41d231f488a6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cfd97f88-14c3-4150-8bfd-6c946a97fe94",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "11087784-ef99-429c-ae30-d3b51905a2c4"
                    }
                  }
                ]
              },
              {
                "id": "e4904993-9a67-43a4-91ec-52793cdd2803",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c554745b-c969-43e8-9192-8a9de96af34a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dd495fb1-0ec4-4f55-aac6-56505206db6d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eef42ba3-4645-4247-8a16-c03430b50b9c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cf82c2e4-ecd0-435f-ad52-5722c81d6d86"
                    }
                  }
                ]
              },
              {
                "id": "15f54940-fadd-4f39-a5cf-46e05cde03dc",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a0f779a-5e2e-4fc4-8613-d5be38579994",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5584f588-623a-4c9b-9587-81105a043549"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "53a43a6a-0938-415a-9a25-f162c47005f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1714bef6-0e9e-4f78-8903-5c5815abab65"
                    }
                  }
                ]
              },
              {
                "id": "450aa9dc-64af-4e3b-a331-53480019eac6",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "96dfe47a-99de-4323-88b6-a73a964eb12c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9c6598be-829f-4eb9-8b28-6910ec1887c3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b1770935-ee95-4ed1-8076-d9c2b4f0a6a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "a685c4d5-b9ca-499f-b53d-7c0e3b4a9b6a"
                    }
                  }
                ]
              },
              {
                "id": "242eff23-3e64-48a3-99e7-04a423135883",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b45869b-42d8-4da0-8eca-17f4abed2564",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d91def34-b6bc-4e74-b192-ff6aa081c1b7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b81957e-ffaa-4029-a40c-55928b5dfe7d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "234dfb04-2936-493b-9713-a8112fbda803"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a4faa6c4-790e-4197-85ae-e1d0857904e1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "53eeaed8-51b2-42a5-83ed-a09cf8e8eafb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d9e452dc-1fef-4cb0-a21d-ea0e0abe0447",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0f23dd45-c4f6-45c7-a975-56954a204c9c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "569f6a65-5678-4030-97e6-c863b7a427b4",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "6618863d-8492-4f2c-8e5f-a838d399bd17"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a4227218-ded7-4744-bed3-c0bcae11faf3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dd26df6f-22ee-41be-af9b-d7ed3b3c2e9f"
            }
          }
        ]
      },
      {
        "id": "6ea8d7f8-c7b1-4d7e-a22d-09225b69cb21",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c3a25a07-e141-4ac6-8f46-99f239a18d82",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fd0a70cd-0973-4e68-9b30-3f9f21805094",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f8a59d06-67e6-4dcc-b3ea-2f7b5443ba47",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c21974-70aa-4a9e-8de9-76ba430d4fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01f10d83-7378-4345-94ca-49e7de281f2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c2bad57-a59c-43cf-9f69-a91f3ec5d64d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf0cb893-cdcc-416d-89b6-a826aebb4858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "792d1105-4953-413c-a8c5-dd8e248d358b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a1f24f-2b89-4653-9914-f3e120b3c03c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fdd2d79-3003-4301-b24e-f1e9dfcde082"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eccfdaee-19df-488d-b5b9-ba98ad1cedb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "99e7f3fe-63d8-48e5-820c-16c1dcdf6f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e48f92-1274-45c6-beda-7bd92a00e43e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "233c2725-9672-4364-a14d-ea6e3ef2d791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfccf6ce-cd6a-4860-a8f6-632e69e1a09f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fa940fc-7b76-4d24-8fb6-58f440d5e963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d3f5377-057e-4967-b5b6-7217f27ab054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38137fc-df11-4a95-ae41-8ca8bf81dba1",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae18deca-9c6f-4e2f-9d16-2040497c6594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00db4e4e-797d-41cd-9de2-5976da0e1012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca61c37-f090-4002-a345-cf71f1a60483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "38f50320-76c5-454e-a497-364e439a34dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5fe3ec6-73a4-46a8-bd46-11bef7eeaac3",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f66f8de5-b7cb-4d6b-8fd5-b5238cff5c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6adc266c-4ee1-4e90-8d4f-e5c57a3f4886"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd0e9fd-9acb-4030-afe7-7dae9567af63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "301d9fd0-518b-4c79-b801-ca4f51043765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "351acd3c-37d3-4919-acc1-6fce2fe2ca18",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fdfd559-868b-432f-96c9-e19f5985e445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8103edaf-5844-4dc5-a221-a5c51cd2b79b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36805b5f-dd2c-453b-ab5e-9c6cd05cf420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa425658-91c1-4155-a0f0-5e7622a4a75d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f03c501-1420-4dc3-9987-70d9dcb97b46",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95578836-99d0-449b-913a-f9e6de5e209e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bf0e4d3-9938-4dd5-a566-3addc8f322ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09bb5b78-de1f-401f-a07b-cb0117bc6139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "20df8397-2c8e-492e-8196-0328cea988dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "500b5321-e102-4ea5-ae46-5baaf08384ac",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6991c751-b40a-4e10-b89c-12fc91f69470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dba6a830-8dfc-4161-9c9d-63fb8f24d232"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d09779fe-0443-4276-b1ee-f52c88f75d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b11b9dc7-0cab-45bb-963c-6c61decc10d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d35af28-d41f-4740-b799-78a98489ccfb",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b1cd53-6440-429e-af20-c9cac07da1dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6615d4a5-4992-4a53-8902-a02ed0a60f20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f948acac-47dc-4edf-b513-eea4b0a85328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe06c6f7-4802-4ff7-b149-b4a9bb16c2ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4fb8fe0-4f65-4997-89c2-0f4ca2ff1922",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb40dcdf-f92c-4d14-8700-ae891956cf4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3eb4eff-00ff-4bda-83a5-06d45e82b15c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b4f6742-f018-4b90-bccc-97a7459e52d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "067f621d-390b-4122-96dd-8308cb69afe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b214685-4975-4979-886e-5f361eb28589",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3bb6033-60bd-40e8-a4ee-4320505ec9dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87a2e99c-ff69-457e-b788-7b99a0817d55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99789736-2f02-41da-ba1d-ad5098ee3702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8ba10aec-19d0-4b0f-9649-1d9c79fd7f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19b903d7-907d-4829-8f52-eff882ddac04",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f06fff-c828-44a3-b113-798458aee93c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92575804-295f-445a-973a-1f814c3879dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ee59498-0e43-4232-97c8-844b15e8d72b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1312952f-db49-41a3-9a24-28ea4f1ce67e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e6ce10-f2b3-4558-a1b1-37007ee40c14",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a372fe9a-989a-492d-ab06-aaa90a4efbc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "764bd661-6d0f-4f40-b0da-8a1fa2ddd63f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c993d9fa-59c5-409e-b3a0-8d6b878619af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "84bf64de-a7b0-4e72-8bc0-9fcdf8a86902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e44154-5ab9-4d34-9214-a26025b94e92",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5809a3ac-efd7-42d3-ba5d-0b5397dabc00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f890e53-629b-4b9d-aa66-e6c44c6c290a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b9a98b-b7d3-4475-b3ce-8754004616ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7350fc40-3dac-4f6d-bf46-b660b5d8ac08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83fca398-4f94-4442-a0ba-cc2f2066f5f0",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a31e1678-e778-465b-94ad-636f941ed5f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44179f6b-c107-47ea-a606-59c4eb0a9798"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cdead16-b6b7-48bb-bf51-dd61c022d9d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a768ef8-7fe4-49bd-8341-9a67228782e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2245a215-6207-4f4d-85ac-fd40a5301935",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e369d267-3b0c-47bf-a29e-8ca6e7e9ba53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "190c4fe5-14f9-43e5-a849-864c0d068d3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e30ca8fa-c6dc-4b25-8556-958e30f3b573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca1fbcfd-aeb3-4ae8-8b63-23aeecb8a6ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0fd0ae3-2e08-4fad-af24-75fddfde81ac",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95dbf50e-da6d-4969-bd6e-68ca7f81f7a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0296892-168f-4451-8b42-fd6fd86eb82f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d04fe6-4f1d-4663-bf4e-d3ebd512b4d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d5a4c29-2f58-4620-b195-c7f4bb642971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81fa5ee4-1f6d-4ce0-89ad-01904ca36cf2",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e84b2183-dc18-4790-8a37-81ec9f0bfd32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "458c84c0-fb72-411d-986b-0e4d5ae19d84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32f06bf2-0af8-404f-842c-3d6851a9fd7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "08f0ec56-272d-43dc-8fb6-4364545c404e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e5b776b-1d44-4c51-8480-7ed865d139a1",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d71b23f-2ecf-483a-9726-1ad98c38338e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a9cebbe-aab1-4011-8e72-9ceacf276f8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee26c371-0601-4065-9b5b-698900ea2550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8872fb72-8682-43c2-a7e8-a4c0f85077bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c724d25f-9b69-4bcb-b246-ac7d5a742c72",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "400cbc25-a7b5-445e-b2f7-9b0563480ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67b17d8a-0a46-4e2d-b8d3-d341daad57ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "484353cb-9895-4b04-bf2f-a34a856c7860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb278321-89e2-46a9-add9-baee8093a1ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c879dcd7-c47d-409d-a11b-298ddfb64233",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae51adf-da03-4e49-9517-d3f8671d916c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e179c8a-ccd9-4879-a164-cc5792585f52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae97f85-72c6-4baa-9ae1-331193ec7197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f5d6a03-0a3c-49b6-825c-9d65c6bb01e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "870c3fb8-e027-4f34-bfca-0921be9c051f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "410c3575-da89-4f94-a6c5-b6113d256893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e072a179-f832-4172-b2d5-7554213e87eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e839e06e-2783-4817-b818-8273cd703fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "edfe0b24-24be-4b3b-afa0-466b45f9a173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "502f9f21-0ebb-421d-80fc-6148106c7b5a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fdc1dd1-2f47-4a97-b21a-1c35b88d05a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8de9421-768b-465d-b00c-9f50fb9e3b6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "230ee059-89b0-4a0e-9403-2c2db3df6271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d933a1a5-6551-49c3-9ee7-ea16f3963c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e004748-fd55-4937-9944-613728da39a7",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a483bd70-b709-4d49-bf11-c28c1e531ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dc2c405-fd49-4d80-bd41-b989c501615b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b72a90e-356f-4363-9b67-085c2b2ef73c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e29fbf1-4244-47d4-a4fb-09155f6ebbef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "028c8d67-80f8-4949-8dcb-2d94d0149b4a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b331cb26-9d5b-4452-8dce-4f6962787290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93a86727-660b-4066-9659-644b6924c367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "757bd41f-d7a6-400b-9887-6f4e95a57c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3214458-182c-4902-960c-dcd47d5c8729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf2570de-719d-4216-ae4b-fefbb6ddcf3f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3059dba8-2239-47dc-bddc-f0711aa69ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1bcd40f-15ab-41cd-8f61-5e0b77fb7b26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eebf864c-216a-4330-ab31-be96e4b047da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f45fc00d-f485-46a8-9800-b756a5068544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6f6d433-5661-4f13-8142-a8758f689b6a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f7981ba-6e46-41ec-98cf-b0c90ba17fce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c2946a4-50c8-4097-a594-6ba5f568217d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf4f45f1-b3fc-4b6f-bac1-14c174566d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb2631dd-3ad1-46e8-8e22-188e39d821f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffc2075d-7284-473a-9b0e-f6f52084f1f5",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e569c0-9e05-403a-90e4-6f5ad9dd9ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e1d0102-1bc6-481d-996e-469d1d5e0d96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23c038d5-4458-43b1-81cc-ce085fd501b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d445190-070c-449d-9131-183ffd3b52b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbed2e9b-faec-45e1-98cf-82ae2586b105",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22090af3-bb23-4859-ac60-689c720f434f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30f088db-10b6-4c7b-b4dd-c564779633d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a033111f-fe00-4c3e-ab09-a010896e5b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "269c03b5-de5e-44a9-b976-30b479fff065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "144a70f1-586e-49d0-9d75-a8203993b5ea",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f6abb6a-ef50-414e-8e80-75fcdac93480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46f32cf1-c546-4ceb-95c5-d6f924b7d251"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb17756-2306-42d7-beae-3ce05bd4bc76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f583e7f2-87a6-4fcd-9cb8-6fb292a821a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c39052-1cb9-4f08-887f-cb66a3f22252",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c29a0bc-9e28-4dfe-9544-777ccac64fd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a25d83e-a170-4b83-9623-8abda1a413f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0b6d65d-8804-4a5b-8523-b1f8b6e8ffd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1143909-cc5d-46cf-9a2a-a1baa7e01e8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fbe2272-aca4-4e53-9959-05a3c3aa2e31",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d14faeb-ab71-4c69-a9dc-259a8c579d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e83572bf-82fb-475e-8b54-dd5ef4d7e994"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c3ab2e-61da-4a5f-b250-4a1cb5c3640a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51da510c-e776-4234-82a5-35b0751aa8e5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1e1c4c2f-2381-4b4f-b144-5418edc0f8a0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "37b621fe-37b2-4cc8-a810-b7648ba9031c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6124491e-4c6a-4059-bfcb-b589aad8877f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78a4289a-ba19-403e-a552-d203592f06e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d507f1fc-cfbe-4aff-8835-db41f40cfa8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "92cb2f5f-3f78-4d59-848d-c14c91586c81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca4cf12a-e077-4991-9f2a-c41132063a29",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f34c4df-bfeb-4dfb-8c10-fffa76b99f35",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "c1edd144-5302-49fd-a4d0-87c9f836766d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dabbfbcb-ce47-400f-937a-23b0f24daa51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f2b781b1-54c7-4d10-a64c-f02d41d1c090"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2e2d1c0c-88c0-4821-a57c-42c6fcd700f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f2d8c6ef-85c8-4393-8017-46012cfdbb95"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6021973f-3fca-4133-a259-e1b59a0da233",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c83eb7ac-d08f-4d2d-a85a-c256495b1ef4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "50a006ab-bfa9-4028-bda5-9a06fe6c4e12",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "95288b42-f5a9-46b4-8edd-b847ecc06108"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6b07deec-b93c-4ae7-aea8-2c844340c764",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "587fc48d-8922-44a8-ae84-9ce316789ef4"
            }
          }
        ]
      },
      {
        "id": "ad442fa8-a836-4283-bc4e-cf0024bc667f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "573d42d9-4fe7-44c4-9c8f-cc1cbe325bb1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f522d091-8f03-46dc-8208-b8c06e9a4113",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "236f8d5f-dfeb-419f-8f03-da40144e38c8",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7b6ab42-78fb-49e5-b5e8-6665abde7fd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "784d7749-cdc1-4808-93aa-408fbd83c6ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "002836d9-a546-444f-a94e-a741d5d810f7",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b71fb1df-068b-497d-9c3b-b917fa0011b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39549964-9ec7-42ca-8856-6aea77e6e0d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad289cb-58f7-4b88-b25b-6172481b291d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61bff929-ea76-496a-9e3e-7894b537cfd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4ec1b44-2adc-417b-9a60-87d586bbc0a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b76af8c1-1032-4d9e-8c6c-75450def4c13",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4de69fe1-1b41-46f3-ac79-888d64cfb50f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8702ec7b-6da2-4dce-99f5-97cb3bbe93b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f321513-5e73-400b-8bbd-eab954f75200",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e5c495-08cd-4981-a5a0-54f1b9d22350",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58185fea-a86d-4807-ae0a-bdd3d01c0bc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a991eeaf-e3e9-4bbd-92ab-756335242779",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6385a22a-5d84-4b6e-becd-c8d43fcabfdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6ac8156-f77c-4142-9e5a-56481726b0e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b83364cb-1791-44f8-8d3a-77986ea2b844",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5602d3f4-2594-43fa-956d-a026666b8390",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e1372a9-9dd1-4f45-bd0f-59e838fb4bf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff31cf2-8052-4e7a-b198-de6d5a8efe3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ad48ce9-265a-443d-ab9f-6ac70ca48925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5956de58-92af-44b4-a697-95db1c908f80",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfd0076a-d3ae-40e1-b09a-f0d90c19d8f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae8656b1-a5aa-4f08-bbff-f077be5bd87b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a8c25d4-481b-438a-aaf3-123305223f88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f2782bc-86cf-41b1-983c-f5f6ac2030af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff659351-09e8-49e2-83c2-bfc184145d2a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "727eeff4-ed5e-4c88-b27c-dea1f308ed45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e622b05c-cbc0-45f2-8bdd-4e12b14f1fba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d09601f-24aa-465e-942d-e07b73f226dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ca7d336-6833-4900-ad21-9915c265204d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1e307fa-298d-4c26-8019-f5c553876505",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ca9cbd-d60a-414c-8d81-93ed7070132f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e100468f-876f-4397-928c-c717983350c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcb8da51-7af5-42a3-8e77-8e312eb506e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ee12c71-a16b-4f16-b1d3-e823e2cba374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1153ac7d-0bff-4213-a4e2-c9a01106b5d1",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4b507a3-239a-4abd-bc54-e24c2f3c3897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc54a5e4-7e2d-48de-8394-612a64b8c1fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "583596d8-69dd-4733-a623-97e51f59a17f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf584fcb-3153-420c-b784-c8c73838e42b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d1c6ba6-da92-465e-a61b-cc092ce01e20",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa6ddd8b-b54e-49f4-b121-3419ae97ea00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14af8187-1dd7-4402-8ce1-96a65f54dbea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "832c55c3-86b0-44c1-8b71-0769f4078329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dbc0326-68ce-41c5-920f-604d14d0ec08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1e9c973-c1d2-450c-8edf-9ae5005b0242",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a65866-9edb-4214-840c-b4750d439d0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91ace4a8-6976-42ca-b523-8b5bbe2f7be9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49febbaa-23c5-4203-8bc8-5f713eb7bd1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f5017a5-5eda-41a2-8528-28ff002ff4c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a562fcf6-0230-43b2-aa2b-50bfa2e16094",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48f8475e-e860-4c37-b71f-4f0659301fa5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cb4c733-91f5-4798-9749-89223ec38f94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b7f3868-6c4e-49bd-8cc3-1bf0fd37b731",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02830ad0-4fb1-488e-bf44-fe3900b4893c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab0c37ed-707e-41f1-821f-4d34e820caf4",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8325d9d-f10e-44f0-aacf-cd623360b6c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b3976a6-9109-4028-a7e8-36c13b49c1e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e81676-c49c-46e4-95ac-f8673e334fb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cd6524a-4665-4819-848d-7ac79d60ff67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75ecb93-51f9-4987-9a6f-9b46b9c8e6a7",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcfccfd5-23fd-445e-8629-5d5cf1684857",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b8c86cb-cf42-44ab-bf43-ae613c127e46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb143934-f4e5-488f-bd34-37f639afde3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43c44f6e-9c21-41ce-857d-e61292f5c3e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66b887b4-80de-47f6-8e88-222f0240daa2",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a588952-793c-495a-af12-fccbfc1af124",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bc43e82-b777-4518-9118-80cea442ce00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e7c7ab2-b093-462a-956e-eaadf341d5ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "676d8693-a56f-4b12-8450-d96a8635dd88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "955a1f15-6d3d-4579-9b94-9254b6913ca1",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74327981-2502-4be1-a40d-a982a534cced",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "725b29bc-2743-49c0-b967-4e71bfa64225"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0396e43e-5ff1-4de2-a63b-63ec2cdd4be8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "445a8645-d1d2-44d6-947f-157bc1d7316a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b7e76e-3e3d-41ce-987a-3d526ccf7942",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603fb785-5934-4472-a70d-e4d0fa0ee817",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de27c216-c039-4536-9ad0-8a457f4a2e16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dccf52d9-a72f-4303-8df4-ecee44a05589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a515ca96-611f-499f-a49a-84e70cc9300d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6968bc49-b1ab-4547-a64a-b5147fb01047",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "370a2fdd-35fe-408e-92c7-4cb019f9c472",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78a34a60-e9e7-4209-917f-0a333e087e12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdbb5aaf-8ada-4997-8097-3d0c903286e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06675a2f-fa43-414b-800b-354f9083f4f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d45ecc-432d-4573-a9f3-6d9245cf51ef",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd106947-cbfc-41b3-9a43-352bf0d26a8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c129b74a-8ea6-46b6-a297-80b294f096ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8771f679-74f7-42d5-8dcf-1752f6a6305a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98870c74-5f99-49ac-8854-76e44be1c06b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "773ed89e-372e-46f9-9f81-429705d8857c",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82a0e79b-3334-4b90-974a-25c03af1dd85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5821d7e9-096e-46c0-903e-f45ad46183db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34994b39-b177-4078-9bc3-18249cb9f041",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1174afc9-c901-468b-a391-889f5b839157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3bb0a8b-c4b5-480a-870e-2a805822d313",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97687ca3-19cf-4646-8d12-78357f18f061",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43ea8b16-07af-4bfb-9e59-354e6892a220"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfbc2200-b5d2-4eb2-9b34-257259d19032",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "181d1dd0-0500-497c-903a-f3e01d9604b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b84a41a-87fb-4164-b10d-baaf99b22fdb",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "533c61c4-d62b-4cb9-a4ab-9f2fc5475c6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ef37a91-c03d-4e70-8b0f-08676d371737"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94786c34-6294-4bbb-8e25-3a6537818f5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e9a4043-e221-4aec-9eee-b5f649f3a6d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec71c0f-4bab-4a88-93bb-c6969874573d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb32664d-4ee8-4b5a-82c8-a236d24c1384",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49c5275f-9569-4bc8-afb5-3c58f9cc0cf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d172d37-bb17-46b7-a4b8-e8da24eb92dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5de3848f-786c-4631-a882-b7259d245930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b298ac0-3c8c-4fd0-99ca-5e5b83a3359e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb944da-dd77-4c34-8610-88d6763bb94f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4865c66e-c08d-4c6a-a14c-b3135801624d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a529194-af3d-42e9-b429-bcedcd07a862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7c7c313-6a5b-41cf-8f7b-e91bd7a850cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bcfd555-5bc8-4d6e-8f2b-0dc555786dca",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afcba78e-c69b-4782-aa15-6e203abf6d98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cb67e8f-d123-4126-abf4-768cc6ea8150"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e5b6454-b400-4765-b7b4-c216d605071a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad2ca721-1f23-4744-b4bb-c4935b12cda3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d860c354-0133-4e2a-b3e2-de083013a04e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43afaf05-e1ec-400f-84f3-37fdedf076b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3fcaeb7-0acf-4db9-8ed4-11fb329ec0b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dfcf454-5dbb-4673-ac2a-8deb76646f72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6831adc-61ee-4033-95ab-5ac444a2098c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f25f2994-58b2-4dc1-b866-bb7fe1651806",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b74f21d-2c9f-466a-83f7-8440962886f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e155654e-3f23-4d45-b1ce-6eb59418d27d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "642b0de6-93b6-41ad-83ae-ff2b76611936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c07baf1e-310d-41e9-8dc3-eacd5984caf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e843fd57-b7a3-44b0-87c8-dc215bac481e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a033a465-f185-44ca-8e01-e0e18f51a2a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9163e2e5-630b-43f2-9a0e-bce695769b04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf36025-cb04-4e2a-9937-119811316e76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2801f31b-4283-47ec-9e0a-e3ce5dad6061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c762a16c-ff18-419d-b14e-7f539b0dd056",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b5aae40-a993-4ec8-be70-f32bfaac768f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f8a1fc6-a93e-4895-befa-92addfb86e3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94123e3d-f917-48f9-bdf9-714c823ef756",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adf810f8-9960-426c-b6d1-7f9c2db04a1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18012238-291d-4335-971a-36398ac361d5",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b2018fb-c9a7-4767-b983-823c52345276",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25ae77ff-6f30-4e81-b542-bff14957f0ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03fc4ac1-22c5-4546-b6d0-c6e19c9e6c37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3401d621-70f9-4ebc-b45f-8d41295c71d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9fc386e-b391-4871-8b48-c452948e7b37",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c9db6e-ebcb-4b4a-8561-a1cd1b4ce04a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b0968de-248c-410c-b8cf-4c2a02946e1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c196d9b0-ebe3-4770-a9fd-8010b55d2447",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3bea4ee-4352-4eff-b179-eefd6a54536a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a94074ff-e41e-4ffd-ba3a-eea609f7bef2",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e1fcf5-46b5-4223-8018-65607a16dcb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdea0640-5cdb-44b1-ba4e-09f84877804e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5327e900-aa3e-4702-8649-115d79ef265d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8c8472e-9933-4daf-88be-7cef04e51d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aec5fff-23d2-4210-bae5-eee1bdde3470",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ed7b1e-2795-41ad-af6a-191977727681",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96cd6674-c792-4200-a369-74419b4f5883"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3069e548-292e-4244-85c8-c3d9da78e7f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a637911-ab55-4c3f-bdd7-8939cf70fb4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f404ef42-25e0-44f1-86fb-70ff43551cc2",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f8119f-9fbe-4a68-857b-6e87ea32eab6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deb02628-d464-4a3a-9fa7-c2155ad97e66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a45697-cc08-4a3a-9af2-2fbf35e987ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54d6267f-1b2b-4e0a-93e6-109168dc2f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6283790a-0e24-4ff0-9502-1945e3060a5e",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae2277e-12a4-4ca9-9283-ded7b0c9447d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6c88a71-cf88-4525-9363-4a54739bd83b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ddd919a-6f0b-4c23-85a5-2912cc4248c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae098dfa-1958-48dc-87c5-2828ebc79d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf83bac6-3d48-43e2-bf7b-d8f374526ac4",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f08521f0-d4ad-4c1b-8fec-25dcb9dddc63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b13f288-8226-4b3e-ae0a-e4a8f0515dfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d07e1c-0bb0-4579-97b5-750868d05b18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f95f417d-ca1b-4448-b94c-4d8cf0d6e4b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1140c1b5-b136-4f75-a83a-00ceca54dbcd",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86dd6008-a1b1-4ea3-b0f1-c766a5a47462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fec309db-951d-42cc-81a4-abcd12f68e6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c2d497-894e-4b0f-a972-40dc339ea638",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7defe126-f99d-4613-95a7-8970b91de95d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "511ca484-a996-4ddc-84d2-2866b8b9f71e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1731e21b-1464-45fa-ac92-8c4f4274a172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bf703a6-2c53-48f4-995f-9e348bfb738f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f15fb70c-2c5c-46dd-ae9b-e7d7732961b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aef7c9c9-0049-4f38-945b-73d312c036c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0061669-4187-4c2e-8db9-376c84bf72ec",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ccdaac0-c947-42ea-8d27-e3505287727d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71b78105-2efe-4e00-b79b-52109248db23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "278e819a-9d45-49c1-b0d5-79a5edf1e016",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7fb4a6c-21c5-4cbb-ae03-bd91bdf0f089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "207d9a0d-2e33-4147-824f-dcbfb288b719",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "761c48b2-8939-4262-ae1e-375d0b96bbb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f453ee74-757f-4fb1-b8e8-bb67b78f0e58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4a0d513-7d0c-47f0-86cc-5700680f6090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b2e434f-22ea-4de1-bbec-e9af6d59578f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08fc9b90-a09d-4bf7-ac45-d3da8d0897bc",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f78a3fd-58aa-4708-9a20-3319d9e56f93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a39e9a10-2a15-4520-bb25-977ab6e4f434"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2027d97a-eb1a-4a39-8058-0913eaaae900",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99e25d4e-cf40-44d3-8892-13683a9b6b1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d807dd9-381d-4282-84a7-7477653d7a33",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a403a2-ea79-411b-8a38-ab5d17cedd50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fccb91c2-0102-43af-bd7f-a202581e15fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f126698-dd51-476a-93c6-5a275a46b2b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5192483b-f5df-4fea-ae6f-190e72c37b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "838f6fed-7583-42ba-8256-63d20819a924",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee765872-4310-4459-b9b3-b1ff00d0ae88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17fc5716-290c-4d7f-9860-997568eac613"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "279f2a15-7234-4728-a716-b584cdb4d4c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69acd0b9-db73-48e5-93f8-c9a75bd9512c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d78d7a0-3739-4878-911a-f972ebae7133",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca0c996-7d3c-4743-92a5-c967b475a803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "308be6bd-f8bb-4220-aa80-dc429b8f365a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "694ea892-0186-4753-8fb8-bcfa17a4e4bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b00acda-1144-481c-bbb0-9d25f93deda0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79c9240b-9cb5-46f3-a2ea-aeb5ccbd6759",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e33b602-f7d2-424e-ad5d-d3725a818d0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c2b30b1-1139-4ee3-ae2f-3bb8f1d0bfb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "274c839a-1582-49b9-9a0e-18319cd54b95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48980c4e-b461-41a6-b176-078468efbbad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36df4711-3228-4e10-9fa7-cb7fb27ffb1d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2d20e8c-dde8-48b5-a49d-29248e47fb07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a2c6330-795f-4324-bc1e-d2c92d3a798e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bfa5938-0831-40de-ab3e-397198aa1df7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d4e159f-b1d9-45ec-beb7-bb041e4a1fbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09543035-5ec2-4100-a12f-6e3b118196cf",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aedd962b-6626-4583-92ac-ad5160753ffd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "398eefd7-798b-444e-b416-5c8fc68a5ab8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ac440d-d4f9-4eb0-bf6a-4731a25541bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b88a66e-c601-4383-82f4-aed580516dd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce9b1fd2-9a84-451a-b68f-7cff7319b5e5",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "430906be-9273-4b19-9103-9b2c0c6927bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72088b36-2f26-413e-a17e-9a3fe4b61fb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6829eeea-ebe0-4f24-a5bb-59d7d3d0c7c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa247705-b21e-49c1-a1c9-879ab181d4eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b78eefb3-9364-42b0-95da-7725ebf9f8bf",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fafb626f-9f0f-4b6d-9cf4-1331188bbdef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2a4aa11-7100-44c5-ba10-c175d3c910fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0668e7f2-4c51-458a-b9ca-65bb90afb4ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d0e99a6-03a2-45a6-94db-022f23666085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f00469-c867-459f-b769-247a6e1d7d1c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7dd4593-e9e4-41b9-b092-8d7490d916e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd6803fd-6b36-435c-9823-211321e43ac1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "785c0721-2840-40fa-b3c3-5d68f198bccf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fa27a7f-4155-4ef2-9318-e17753beb23c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a0ef39-aed2-43fc-84f3-cea8dd4689a0",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81121a44-9f67-4fd1-bd39-bcd972531909",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2a875c7-7262-47ec-a00a-83c54b06feea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d581fee-3f71-4d3d-9101-57fda6fcbd10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31a18e0a-9e21-494d-be82-ba8b67bc9e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33cb6dde-99af-42bd-b3e6-a60d380d9f1c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaecd57a-ec06-4104-b832-1a2d048449fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0a0f7c7-0941-41c1-84e6-4b8c657a7590"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9393e3a-14c2-4d6a-ba96-ac872582a838",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ef13db1-c03e-48c8-baa3-48c10ee5b22c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8324fb1-9d9d-405e-b976-92eca79072a5",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "680360b7-ebb4-4e84-aa0e-766f67f4b35b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8858194-f40f-484f-9c5d-23a19b68868c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f637ee21-7786-4c37-b62a-da7eaba6d820",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb7b6ebc-f7c7-482b-bd20-1aad08cc4cd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e81bcb6-4b43-4833-92ee-3cdedabbb509",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d881a8c0-4cab-4f59-975c-02e6f0d03751",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4d808d9-92dd-49d3-b834-ea9151d77d22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5365c9b-5c24-4225-b316-43a58e0cd098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05e05e5b-529a-4c72-afd2-90220bbc2534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31c77ef0-8b43-4e14-a43d-48236e34dbc9",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e906fb71-10a3-449a-8786-3d73670f0d50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7cb2a02-bd15-41d3-993e-1e4c723ee5fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19dfc0d2-8009-4eec-92cb-22b623457a28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7b6fa4b-e83d-43ca-a12b-59b31a6f1bf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b31f7f-bfbd-4ffa-85e4-b2e2cc96cda7",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e3cf9a-49ab-4320-8be5-aaa3ed89812d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66cac46b-d948-4082-9304-648dedfbf705"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2357824c-883c-4a46-b9af-411ac1fd6871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a929512-a7b4-48bf-b525-880136843523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f7228d-ddb0-41dc-84a6-948d57f1b491",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ab3f28d-899c-4877-be19-628a0fe427ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd005bb8-9e51-4f89-8a2f-7afee4f9a5b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f620eb30-ad03-482d-b565-ce4295f2c6be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb06b1e2-1cc6-4b05-8d01-337392f5fdb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81b88c0c-948f-4312-a1af-a1edf980a48a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba697c41-5d87-49c4-8a56-1f62d79edc67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d89db87-62a1-485b-b1de-821c834da24b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "980f251c-561c-4c9f-9661-803db38aa4a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baa80d65-5911-4e86-b31f-582fc3f194c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5265e1-7703-450e-a1e9-10bcba67f1b4",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4a17c87-a634-4635-aba5-207abff04719",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30533055-1402-48d4-b39e-0e80ba3d14a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af59e3f4-9286-41f4-b42b-844e6a19220c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53d36f6a-56f9-4480-8337-c8a454c75918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5549ea-53a5-4584-b413-7ec95bba0680",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a0413c2-e5ca-421e-9967-d99224103b40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d8d90eb-11ef-4c07-9d4c-85a7a9f03949"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1325ca98-9fac-4025-bf9f-d9ec70a6e09e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "078984d0-e2b8-430b-a801-d07a65c063f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9fe98b7-c85c-41d3-9a6d-84060e8b9be6",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5476a94e-4ff9-4d44-8bcd-8f6d5f406241",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3a2e636-5a72-41e3-877d-87cd23ce789e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c1c6f1d-7e66-4ae5-b5d4-137c683a7e33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d13adf79-9981-4312-afaf-0c1ebb969356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ebc777-5619-4984-80cd-c75f8e2bea49",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b620703-ee90-4c22-8de5-5bd33c04d671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "930c9a81-2bda-4e6d-9d58-1944b24dd3c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75d84b6c-ac17-4f67-b7f7-49e5767cc05a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c11ee12-3a1b-4a01-82e8-523d161cfdfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec03ef6-ab22-4f9b-be7c-a46c39a0a7b2",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c999217-33d5-4289-868e-175916438994",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d8c1718-25b2-4764-bda2-1f4498f8a9a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c9cd84-7cb6-4ea6-99fd-dc16215de122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5acd20a-23d1-4faf-a605-e39f2abe5ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e0c197-e3fc-4c58-9b17-0d9a6a908fce",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c3ff40-c7b5-454b-9ef2-c889a6cd2ecd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bae58371-7a4d-47dc-ac22-c613370de57e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aaf95b9-769b-416f-8dae-cd706e3af4ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70089726-e9a7-4a08-9d8d-9bed7a5e887a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d7a4788-3fe7-4fb2-abc1-b36f41e80e30",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ac7971-db76-4088-8b80-23e95dcfa449",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "908352a0-7653-4a2b-9f3b-682cb277dc8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e819ec1f-ac62-41c2-90db-1b6244ba4e78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "956ba3cd-b40b-4373-aad7-c6a8c7b29a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5031a7c8-3a52-4fc9-8919-9c07956af027",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64354bd7-f6e8-474f-bd00-8107bf851fb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f39709d9-b0c7-4042-8291-3021d781bac8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f85e005-41f1-4d90-b874-c8147e838ba2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79871c86-78ab-4af9-a1e5-738d8fef4385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54bf5f6b-3113-49f5-9045-61ea0fafda86",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e71d266-a2eb-4417-b48b-11e0b38b6735",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e8748e2-814d-46cb-a23c-b8fa8dfdfd1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d7e8759-5fd0-401c-9b16-e89dc646330c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90853475-3de3-46c5-a4f8-3361a4f81d7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fda2314-ca1d-4736-a08a-999ea622f832",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4158faca-b633-4672-bd56-7e1f24d5fdd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d05191d-fa29-4f4c-bd8d-470c4074328d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eb0d6d0-07c1-40cd-8383-1461c274376a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e73127b6-74da-4804-b3cd-7630b3b01feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09476458-b584-4e18-b369-caa956a84364",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e54924c-4578-4a26-a13b-f92c9d1d7781",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b42ae38-5b51-4043-b4e2-9ba53c8f50c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb7b5f81-db0e-42bd-aca5-a0ffeddc3bf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ea4f564-2fe8-4806-9235-8ff00266f595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85417ae1-c7cf-4bd4-a491-2589c3ea7d53",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40242d21-a6d2-4ad9-89a2-245f2c0b2f41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d21d9cc9-716a-4727-84bc-e144aa4d1d40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e90cbe4b-3a87-445a-b651-441bda1b4df1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "171ea527-1578-403c-ba53-acd1d16c0f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd32b0b-f368-4ec9-b80d-da96b1e23142",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f4fc2c-6070-4d83-8665-da71ed9019db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd902212-4c2a-41b5-8deb-0a91dbc4f471"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9920329-aeb1-4ea9-aa26-194917721d0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d316d87-2ab7-4f7b-bb77-c0fc2c99a3b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3910bf3c-668e-4992-9f1c-f3b9a4a67d07",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f94883-da98-446f-b07a-f85ee59591d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbf2baee-69d8-402c-895e-d705d08d292b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be6ea16-2303-47a8-a61b-ae1116bafdfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4ea48ad-c3da-4081-952a-9cf67007e890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56108f0c-6a90-43b9-98cc-a572cff7a8b8",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95fd36ac-2396-4c3f-90da-da39dcac2660",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1118e3d2-d95c-4b5f-b48e-46d31948fe8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8d3b0c4-e6bc-41b9-9cd3-781ba6cb9e0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68b4f1b6-18e8-42ca-80bc-62f70dd32196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16a58b7c-4a9d-47a3-a12d-70eaea49e9c3",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c30c2d1-ef33-457a-894c-6bc79b99a13c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ba721cc-3741-49f7-b8ef-f61565deda8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9cb3e43-4db9-4a07-b167-49384858d660",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "107bbf94-c9c3-4792-b9ae-cf1bc7e5a11a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e28547-4723-4048-9bdb-d7b8e13fd7a2",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f889a36a-0ef6-448a-9904-2fdfdcbfbb26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ccbd2a7-559d-4ad6-9c03-a1aaccef0007"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea375b5-89f1-49b9-a239-a99927bedeed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "effd622c-fe5a-4504-be45-4bf66ff01e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a590d168-bc76-40e1-8ba0-9a6705a544a1",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77aaf43d-c0a6-447b-97b7-6d7bc5fe1d74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e83f6cb-12c7-4ec9-98ea-e607eec86e71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7b5ee76-6981-4a8d-9583-04f30cd62ebf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17265553-7bab-47a2-9725-da8b95b55946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39c094cf-3e52-4f72-b6d5-05b38a5d3a01",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91588264-aae3-4292-bd3c-55104aa41607",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c23515f2-254a-46d7-aedd-d2d1a4be1a16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa78f712-17bb-486a-9c9e-471c13cb0b9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8596e6f8-340e-49c8-b7f8-2135f6687625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9fc5ca2-1d0e-4894-89eb-d4a92c8a3d48",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36176425-4f0b-4d7b-9185-3f00252ebf31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d30d2da7-4cb6-4b32-8965-891e810b4351"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e8fd5e5-90aa-458d-b077-45d570ecd665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d371ace2-4f29-407c-9c32-8d6bb89785b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e666565d-fa52-400b-9fe6-e5b457bad83e",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dfe69d5-fc82-464d-8885-9cae3102195b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbc48549-fbdc-4c34-90b7-f65458976366"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a57f2ec-9c23-48b4-88db-477848248b3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95431ac9-7284-4cda-bd96-89d06b0c7208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4589ca9e-2739-4c56-a8b0-5b361c170a06",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84de1782-fdea-4b75-af2b-3eb931f84c35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c615e1f3-5aa8-4081-863f-3154f24d3bbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91cb6b3a-cb03-40f8-882d-bcac94817d09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b665277b-2c61-44ad-bfa5-9a8e2e11faec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f03094ab-0d16-453e-9e64-7de991ee377f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f62575-4cdc-4100-b9d1-e2f614175873",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f84adef8-91e0-450c-a787-9c4e16e43476"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0295f631-771b-4e67-80be-ce0c5f80d844",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "662ec22b-6804-4579-97e5-c8bc9d22af16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "810f61dd-f203-4e6e-8367-4ce6437e7ec2",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "817cb025-3336-4a98-ad59-3e4244b5f92a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdb1412a-83fd-4186-9ff2-9ed7a9d05f78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b98e7386-cf48-4c94-a92f-418c6a62f8f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34030819-90e5-4e39-96ca-518a9880b012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ebe12d-6f51-44fd-baf2-f522f54468d4",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfcc7a2f-c4dc-4b0d-a2f4-36ae3b47fa04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82dd201e-3856-46df-b2e4-20f53836cf58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "246e5bc4-feca-41b3-ab95-d667398b5204",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33d8b21d-9941-42e2-b894-623b4885cf59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a3d103-8c7c-499a-923e-72960b718aef",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a6d4712-1ad2-4ea5-894e-012481b3791d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5812ab8-bb2c-4698-8551-19d481c137c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c1be04-42ad-4f3f-8dd0-9408ca9dfd8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1809166a-f312-404b-91a9-1d0aca4ffc6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e36b932b-b0d6-4d0b-a1a1-41bb575fb762",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d64e275d-ad4e-498d-b10c-4c7ec6f9a89c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2282bb7a-e966-4cfe-a567-2df87344829b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42d7802a-d01b-493f-a066-3cd014cf6cff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fea6b00-0312-467c-9520-110aea8de185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2441fb54-c36c-42e3-acae-1fc6e5cc4be3",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae4d2c11-619c-49c3-9bb3-972f56a28b7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f094683-9428-4583-80b1-c324f4e226be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39189221-33bd-4586-ae29-811ce813fbb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b775449c-bbfc-4aa4-b1c9-a9c91feb34d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c19a6bc6-fbc8-41e9-bf12-8332beed0830",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3570e78-3045-4161-96cd-8a503a83028e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0793150-511e-42e6-9afd-6223f3258769"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8178580f-e8b5-4775-88ff-1c139d62fd5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39368653-3c94-43ff-9992-2299c8977419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c9895b-20dd-4f9e-a30d-66fe7ebce14a",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "344db3bf-961c-4c73-be15-20f1e6b79c08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "681434f3-512b-4e66-b045-122cfe133932"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "809744dc-7e21-453f-987b-0bb76610699b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bd8cdd0-e8e3-4120-9b3e-7e25b4dde044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc9daa5-9aaa-47fe-98af-f77127692bdb",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ad9cc54-fd0b-48eb-a53d-5475b0caeeae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "823aad29-ecd7-42c3-b1ad-dd228af9091c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa3d49cb-d4ce-4704-aca2-a0749ffabfb7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "541dc553-96fa-472e-ad6d-04edc2bcfafd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fe29867-f3bd-4dfb-970d-dbac1970ab04",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2143e89b-3b12-4ab1-9f26-2790f4d0c813",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04c80a98-bd73-4918-b232-82a69930a622"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf6bf29-a2a9-4672-9b1b-c42c9a0af0bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d0293d0-15cf-4b3a-943c-eda7cce45e12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b047ed69-2ea7-417b-9b8c-91c847b57e24",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da7cc09-29f7-4eba-b3da-caa44e5d019f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7e5e2cf-7ebc-497d-84f1-3fc67e221925"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f84f3bd-9473-42b2-818f-c21284a705d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcfa6d7b-1bf3-4af1-aba6-29dcc364d147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95f36493-16fb-4bb9-a5a1-d28c5d5ec6d2",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a150441-f436-48d6-ac77-dee4a3678535",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13bc1c98-001f-4cbd-972f-5f32472d7e9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd1985a-e2a4-4a15-9755-084ef640d385",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cf58cf9-182c-4125-b7a9-785b276a0732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d285bc2-4dae-457a-a6ca-0332bdd15c5a",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b14959e-a9a1-4cb3-94f8-53c1d8e91be6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7df81e45-e077-4d7e-8a90-5cc9282dd636"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0185a89-8eb3-4907-bb9a-0e3a1358f623",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4698067a-72c7-470e-8877-5db56e9b0e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3d3d32-2b7d-445b-b1ad-980d138f1ea6",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35fe52e5-7f6a-478b-91a5-8bb8cd3d0778",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87b7b489-29e9-4c1a-9333-df1fbfea5326"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "953cc429-b721-4f5b-95a0-3de3b3cd87c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75285574-b5a1-4266-8a14-01af653b5a80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f32cbe4f-f424-4ecb-ac41-1f71ddec3fda",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d68792-2351-4d1f-8abd-92cd26e394cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54ae9299-9905-4fb9-8843-7859df911cbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e71ebb-09a3-4cc2-89cd-169b47b88285",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e39c9b6-c395-413b-b956-2a0a000110c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c94cb9e-0ef0-4c21-bcc6-565bb62b9e2b",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "675e2354-9b95-4d31-bbc8-2b1e2371cda3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56f9bc06-897a-4bfd-9864-954c71402a85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57c7a14f-62a8-42f3-9f90-68dd46d2b829",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53915b36-40d2-4c07-955a-649d160c243d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e352137a-5235-4058-afdc-3fa43fa7815f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e3a3e09-3670-4631-b516-ecb2329c11e4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "656dd476-ae4e-4c30-8794-52dad57e47b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2a851933-3fdf-4b97-95b0-a0dd07875436"
                    }
                  }
                ]
              },
              {
                "id": "516928dd-3cff-4aaf-8486-0daebc257ff0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a556d400-dd29-4b19-aee2-af5dc8a6563e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aff6dc1-23b0-489e-86e9-21eafd0e3659",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a235c3eb-3797-4fa0-8fee-940c83ee13f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c530866-84be-4f29-96c4-5e97c346e160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da17b61b-5e53-4cb6-90e4-a4ee0af9d41e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba78672-5b50-41f1-9ec2-5386b8460a36",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97a0108-7087-4cd5-9c8e-cbebc82fdd45",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "fa74ef67-5454-4a42-876a-8e65afc7746b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a9de92f-410e-42a7-b6c1-8391a8a09d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "81f8b7ec-f6ed-44a2-8c03-a59ef8815619"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b945fc43-7d0e-4f37-95ea-ee9dbbb4a9f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89a291e6-3268-499c-88b9-e4b226d6fdb7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "301a7fde-01df-493a-a356-a22f5874b7ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e3fe3c90-50db-4ff6-b992-3d5924221ee7"
                    }
                  }
                ]
              },
              {
                "id": "7af2a6e8-18cf-409a-b686-f14ffbd7f7f7",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "61e4d8e9-e12b-4da7-b193-72bbc230b876",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a6c60c5-c089-4a81-93b1-1148adb92405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "4abb4a12-fa5f-4484-a68f-f284d7334409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd4ba016-015a-4e90-a57f-6181595a6845",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bf1c34f-2b55-49a4-8906-bc13fe2c832a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "034fce58-afbd-458a-96f8-591fe0bef624",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3e7991b4-b3ba-4ad3-86a3-7a3ff66dbd49",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d301f73c-8640-4a68-b311-ae316d3ff6d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "bd862039-0c0d-481d-a079-4275627050b7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "718d3859-4396-464c-b2f4-95a954d1cf39",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3937c667-9846-4846-b7a8-f46b60aee5c9"
                    }
                  }
                ]
              },
              {
                "id": "87c23beb-1d8b-47ed-9649-de8780e7ab95",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a992c3c5-ac08-4770-b4c2-871a7e6fa317",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "427ff946-b9ee-46bd-9166-e7afa5323a3e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "76a9a1d9-f903-4301-9dc7-54e48b93de27",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "67312fbd-6faa-4b94-8fdb-11c9e6bf11e2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eb76d58f-9e30-438e-91ae-e25fdac65706",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "a70cfb65-a84a-416a-9701-f0ea2a12ad77"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f7f8a561-a672-4166-a8f1-f0cd82ff196a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1fb72ecb-d381-4868-9296-42be5f603265"
            }
          }
        ]
      },
      {
        "id": "86f8131c-50f3-4ed6-adcb-fd03a82162e4",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "4f68ea81-c8c2-4b5f-a93f-fbb228849812",
            "name": "Negative Testing",
            "item": [
              {
                "id": "12e88575-5c95-4850-9a04-6d98581e6afe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f750dd4f-a9a6-491f-a02e-d9d262b35aa6",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f730f901-b928-446b-bd2f-3ab33e9e2b9e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7e32a662-a608-48ac-9a57-576c9d5f62d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af710c84-d435-4ea6-93bf-9b65216399c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00aead36-13f3-4eba-8e04-a8016a5d512c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d86e345-3e08-4386-85e3-fe3449e5145f",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cac6fc1-6132-4530-9b5c-6afbd5972ef8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "faa36a32-2601-4816-ba44-857d6ba99f99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9692a7c9-d296-4170-a002-2efd71a2012a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "21300910-895e-4dd3-a6f8-cc1e3a6f8a71"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fbbcff26-4e99-4ea0-a073-4fbc1641d833",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c43be02-c5d0-4f44-8084-24d19b56bba9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5148b78-0f2e-4592-b059-9a6aadd7d897",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cfd8b724-3a61-4571-962d-88df0547ef5e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "20d5dcde-cc64-4786-aa03-6762e5a4bf24",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b59a0aa8-9fa1-47a0-a009-584650e6d8b5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "87f7c550-cb75-4521-a22c-b98d58cde302",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "35869c8b-64ba-4446-ab84-9a4fe263243d"
            }
          }
        ]
      },
      {
        "id": "e81c33f9-34d6-4b75-9202-037016c4a6b1",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "49bad27f-445e-404b-9cb5-8025fdb7e01b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4909570f-300b-4a43-b245-ef7d3ea8972f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cdb48616-a04a-43bf-951f-0582d706cf0e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfe346e1-dfbb-40cc-bcf6-61465eff8c6e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ac1175c4-bf53-44a9-bcf4-1199a3d66732"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "263b98df-2739-46cf-9894-0a3f0ef9fedd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec7f2c75-8274-4f5d-a0be-cc3335bb90e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f37b454-f1e5-44d7-8c4f-8ada7004773c",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9cb6c9b-37cc-4fa5-8502-81c6767f7c6d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cf6507bb-12c5-4144-a5c8-fb2c78033d49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ad798f-bac5-429e-ac3d-b107217c283f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e49e0248-f717-47f6-aecd-f07972091eb1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b00406c1-f621-4aa7-8337-4bbcc11e6cd4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4bd94a4a-3c29-49e4-9f79-7e22a3ca7769"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "53b135b3-4d83-41cd-acbc-0ded77dc79ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f72fa4b-846b-4ba4-a401-f29ca8d7f9ec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7caeb096-685c-4184-bacf-5ce9e1ce10ba",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "afe5150a-be62-44b1-a643-56a26f9364ec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7101dd81-8f2d-459a-9779-d64547aaccfb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9ca26e8d-9a10-4aa6-848f-ccab008acec6"
            }
          }
        ]
      },
      {
        "id": "fb287423-47f7-4f59-8b6c-dc26f5e8c360",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5370fe00-fd69-4431-8f13-521f935962f4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "391bd4ef-834a-4b47-a7b9-122a36067f14",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "393ac74d-670e-4f03-a4f5-c478ca276a80",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "433c0875-153a-4792-8bd7-7e172ffe3709",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "44e155d4-4968-447c-9d1e-8b4a0e1047f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fbacbf9-3954-4cc7-b663-877a2bef6d86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb9a3310-6a90-4d69-ba2b-7bf8a9cc2563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0660a1ef-46e7-498f-8a8d-b62b7ffcaebb",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6a6df76-74f5-460e-a5ad-6aeb00d0d3d9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2b844afe-fdf2-44fc-b19d-786ffe40696a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0047426-ff6c-4ebc-bc64-96bd2f5ee66d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9869d6cd-07ed-477b-aaed-c1df14fe530a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4164f8de-971c-4847-a405-3b47c7df8a69",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aca3f0f9-b485-49cd-9ca3-3b98f6e9d538"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c7cee93-53ff-4fd5-b2f0-0e6bd97662bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e849d87e-52b2-4e0d-b58b-0fdeb2a22b7b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0a4c88a7-dd38-43e3-9dda-65db423e91a8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "95057a1a-39d0-40f2-b7cb-4bd2c2ffdbf8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f0b2ba5d-c96d-44af-aa6a-1daa99a4fb17",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a33b26c6-f0d5-4670-9917-bfbd3a6b9732"
            }
          }
        ]
      },
      {
        "id": "6f0b32e9-d943-4f5d-8b43-21810a809be1",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7b453b0f-794c-4fbc-83dc-bb8b2ae32a35",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ab668320-3ddc-4bc9-8555-b1a85c404ad3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "3749ca68-bf45-4286-830d-57fbb85b8c21",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7d349527-0cd0-440a-a3c5-22e94c11ac54",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5567e783-9f4e-44da-aa92-5a125f642de3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1917,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 404,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 515,
        "pending": 0,
        "failed": 472
      },
      "testScripts": {
        "total": 963,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 954,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 177.62253009337746,
      "responseMin": 25,
      "responseMax": 7160,
      "responseSd": 819.968120923465,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1676649627174,
      "completed": 1676649709003
    },
    "executions": [
      {
        "id": "9914c822-9e71-47dd-9749-2cc682e5106b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1096e861-165d-43cf-87c8-108137fe77f6",
          "httpRequestId": "9204a5f6-2a7a-4172-9447-925d75f006dc"
        },
        "item": {
          "id": "9914c822-9e71-47dd-9749-2cc682e5106b",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ff1cdbd7-026b-4241-859f-8304423d56e9",
          "status": "OK",
          "code": 200,
          "responseTime": 3776,
          "responseSize": 0
        }
      },
      {
        "id": "07589867-49c7-4a22-a996-56aec35aebe4",
        "cursor": {
          "ref": "ef33dc48-7a02-40ca-b6b3-6fa3c5a6c5bf",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6d0297f2-3115-46e8-b05a-a8c6fb6eac26"
        },
        "item": {
          "id": "07589867-49c7-4a22-a996-56aec35aebe4",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7756a6cf-bff7-4edb-b21b-518563ec6c40",
          "status": "OK",
          "code": 200,
          "responseTime": 25,
          "responseSize": 0
        }
      },
      {
        "id": "dd55e54d-b12d-414d-8a9f-e9183c5cc0da",
        "cursor": {
          "ref": "852fc91b-90a9-4790-8593-693003aa3185",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e20d942f-7b19-4f19-a55b-422494b1c394"
        },
        "item": {
          "id": "dd55e54d-b12d-414d-8a9f-e9183c5cc0da",
          "name": "did_json"
        },
        "response": {
          "id": "495a4efa-c53a-42fe-895d-428c8e066889",
          "status": "OK",
          "code": 200,
          "responseTime": 383,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2944c4cc-bd8f-4270-95dd-762c974d9dd9",
        "cursor": {
          "ref": "f1fd93f1-b93d-44cc-a792-7b904ca2ce00",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2d293619-2e4d-4209-afa4-f1c6867e1b03"
        },
        "item": {
          "id": "2944c4cc-bd8f-4270-95dd-762c974d9dd9",
          "name": "did:invalid"
        },
        "response": {
          "id": "8c64ea98-8797-4329-9d3a-e39d73d94628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2944c4cc-bd8f-4270-95dd-762c974d9dd9",
        "cursor": {
          "ref": "f1fd93f1-b93d-44cc-a792-7b904ca2ce00",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2d293619-2e4d-4209-afa4-f1c6867e1b03"
        },
        "item": {
          "id": "2944c4cc-bd8f-4270-95dd-762c974d9dd9",
          "name": "did:invalid"
        },
        "response": {
          "id": "8c64ea98-8797-4329-9d3a-e39d73d94628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69de3d16-2155-44f5-b55d-daf3fe158857",
        "cursor": {
          "ref": "ca96acdc-610b-4e19-8195-4d64b41a33e7",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "64651295-6582-460a-b345-af4f998ae23e"
        },
        "item": {
          "id": "69de3d16-2155-44f5-b55d-daf3fe158857",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e159d93e-5726-4464-9b7f-6baea69629b4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 226,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d3794b-510a-4697-8bd0-d6db7b4153a3",
        "cursor": {
          "ref": "7b7e9549-d202-419c-9ace-b247cb703bae",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4e4e6bf8-fd1e-40ab-a06d-5849ea69fef2"
        },
        "item": {
          "id": "06d3794b-510a-4697-8bd0-d6db7b4153a3",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e436067b-78f7-4345-979d-f0ddd9e9b98f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 79,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a918a53a-3cc3-4e1b-b95b-880d3720613d",
        "cursor": {
          "ref": "4f4ea8c4-3b67-4e2a-b4ef-5d7b38baadff",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "7025c689-a53f-49ce-82c8-db7787231271"
        },
        "item": {
          "id": "a918a53a-3cc3-4e1b-b95b-880d3720613d",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b4f20fd6-199a-42b1-a995-20f853366db8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a53bbc10-cea0-4a90-a691-d70beaf144ba",
        "cursor": {
          "ref": "c4de398a-f747-4b8e-9477-07cbe64d9128",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cba28e14-1630-43d2-b7ce-543ef793c182"
        },
        "item": {
          "id": "a53bbc10-cea0-4a90-a691-d70beaf144ba",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "cc86eb57-c0bc-4644-b130-a10b43cdd7bb",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "a53bbc10-cea0-4a90-a691-d70beaf144ba",
        "cursor": {
          "ref": "c4de398a-f747-4b8e-9477-07cbe64d9128",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cba28e14-1630-43d2-b7ce-543ef793c182"
        },
        "item": {
          "id": "a53bbc10-cea0-4a90-a691-d70beaf144ba",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "cc86eb57-c0bc-4644-b130-a10b43cdd7bb",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "3fe58174-b754-44ea-a67f-eeb3e00d60f2",
        "cursor": {
          "ref": "b09f81d4-c0ec-4c2e-90c5-c040b00a7846",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "62c1a49e-983c-4df1-9534-325b0469fe11"
        },
        "item": {
          "id": "3fe58174-b754-44ea-a67f-eeb3e00d60f2",
          "name": "identifiers"
        },
        "response": {
          "id": "807d39fc-8450-4742-bb58-bdb104284530",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b49e29a-a5a5-4c5e-abbe-ba1df21761ba",
        "cursor": {
          "ref": "d3812dd0-2f29-4550-94de-b4a6e637296f",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ac4958c6-91c2-4b0c-b78d-bd78159c3f3b"
        },
        "item": {
          "id": "2b49e29a-a5a5-4c5e-abbe-ba1df21761ba",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "acbbad0e-39fa-4c92-adb6-d6a1410f3756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "2b49e29a-a5a5-4c5e-abbe-ba1df21761ba",
        "cursor": {
          "ref": "d3812dd0-2f29-4550-94de-b4a6e637296f",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ac4958c6-91c2-4b0c-b78d-bd78159c3f3b"
        },
        "item": {
          "id": "2b49e29a-a5a5-4c5e-abbe-ba1df21761ba",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "acbbad0e-39fa-4c92-adb6-d6a1410f3756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "a9898ad1-4d2f-4b1a-8977-f7fde91ce5c8",
        "cursor": {
          "ref": "af215bcc-48a2-49b6-9f29-574d71e6a0e7",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "7cd274af-c826-4e40-8c5f-30543edc3739"
        },
        "item": {
          "id": "a9898ad1-4d2f-4b1a-8977-f7fde91ce5c8",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "acd7cd7c-e1d6-4420-961c-6e3610d09387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "6e64bc92-3b9f-4cc5-8c5c-fdcfab139161",
        "cursor": {
          "ref": "54f5bd58-d7a0-41ef-9beb-42ca0c4b2948",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "769b879f-57b9-4b8f-b55b-bf41729b0b27"
        },
        "item": {
          "id": "6e64bc92-3b9f-4cc5-8c5c-fdcfab139161",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "a73f44ce-420f-4ee9-ac29-b26245400b04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "d6028e54-1299-441d-8fd1-b3b6767578dd",
        "cursor": {
          "ref": "7a1d81c1-6c3c-457d-b325-6157499f0b85",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9a1e0d59-a723-4ad7-89a2-5ce94dbb2148"
        },
        "item": {
          "id": "d6028e54-1299-441d-8fd1-b3b6767578dd",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "0a84e248-a590-494f-a79c-8665275579c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "d9a86023-edef-4b08-8e03-427b9998fb93",
        "cursor": {
          "ref": "bf1f3a70-21a2-4143-ab9c-ec65590ce8c8",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "602ca92b-ac7b-41e6-9c83-b59257a0c607"
        },
        "item": {
          "id": "d9a86023-edef-4b08-8e03-427b9998fb93",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a4d5e2ba-8c22-4659-8700-acfea83fa835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "187b805f-9b57-4149-94ea-9d485bb7b70d",
        "cursor": {
          "ref": "74a6080f-c235-461c-aaef-5dc645904cde",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "00211505-c853-44f9-886d-90e83f525436"
        },
        "item": {
          "id": "187b805f-9b57-4149-94ea-9d485bb7b70d",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "39afde3f-2ce9-4708-89a9-9bb62cdccc02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "aac05074-e2d4-4930-aced-cf979b98fa59",
        "cursor": {
          "ref": "f67c7caa-381a-4105-b37a-77293a9f5a04",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c8b0c0f3-84a6-4719-8f35-36ce6f9e3548"
        },
        "item": {
          "id": "aac05074-e2d4-4930-aced-cf979b98fa59",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "bdd5aa2f-9553-4eb3-bbef-c1b3f73e6fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "7d86e3cd-8bc9-4362-b3e1-4627a8434c34",
        "cursor": {
          "ref": "47d556cc-4adc-4697-b122-6150a862f391",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0b079f82-8162-49fe-8550-57cec2b3041f"
        },
        "item": {
          "id": "7d86e3cd-8bc9-4362-b3e1-4627a8434c34",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "7809b3cc-ccc0-4424-90d3-02b72c8d375d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "d06e1a76-ab10-4144-bb6c-14868868a946",
        "cursor": {
          "ref": "bca9991b-2d10-4f67-bb61-bc23d82c3df3",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "cbd0d457-21de-4fb3-ac1c-88f51f97c8e0"
        },
        "item": {
          "id": "d06e1a76-ab10-4144-bb6c-14868868a946",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "d5f96dda-846f-4eb4-9f72-ee5e81b4c8ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "717d6992-32e8-46ce-84d5-f66ee655c4b3",
        "cursor": {
          "ref": "ebd9084d-a227-41b7-b2fb-c3eb1d444acb",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e0e697a5-9554-4804-8d09-092c052077f7"
        },
        "item": {
          "id": "717d6992-32e8-46ce-84d5-f66ee655c4b3",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2898c004-5cc4-4192-ba2d-61bf6b95918e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "5a9138f4-ed8e-46e5-8528-b0701795f54b",
        "cursor": {
          "ref": "f2fc3c18-1940-4139-b0f0-2f272eaf3fd2",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "6c495ec6-c964-4980-94e7-e38c700ca28b"
        },
        "item": {
          "id": "5a9138f4-ed8e-46e5-8528-b0701795f54b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "466b39ab-4693-4bd9-9362-a6887d1a13d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "5c4179a7-8bc6-4dce-9b56-7484fa5655fc",
        "cursor": {
          "ref": "d260c1b1-da1e-41fb-9a78-13be5f7ba2eb",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "56215fbb-68e2-4788-9a25-381d5ad31006"
        },
        "item": {
          "id": "5c4179a7-8bc6-4dce-9b56-7484fa5655fc",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a750535f-4c1d-419c-92db-9ec6048237d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "36508188-132e-443d-9d16-43d3cd96ac05",
        "cursor": {
          "ref": "fd8b934e-aad4-436d-8e1a-15867a79246c",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d5eb900c-1aae-43ba-b92e-e3b5e29478ff"
        },
        "item": {
          "id": "36508188-132e-443d-9d16-43d3cd96ac05",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "67946693-51a3-4563-b0bd-70fd98c9e405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "f7276dce-3745-4b41-87cd-adfb4513b1b9",
        "cursor": {
          "ref": "1f1389fd-579f-48ab-8dd4-e005ce9fed67",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e5df5d1e-6fc0-435a-9998-dae40d79990d"
        },
        "item": {
          "id": "f7276dce-3745-4b41-87cd-adfb4513b1b9",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ca70f672-c42e-4811-b7b9-101f3c944c0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "d408bc33-a93b-440c-9eae-d648c004bb59",
        "cursor": {
          "ref": "f3419846-c7ce-4431-99a5-459667a7a80b",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "df235229-a618-4782-9a66-f5ee04035bdb"
        },
        "item": {
          "id": "d408bc33-a93b-440c-9eae-d648c004bb59",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d1d7579f-5b82-4580-aee3-9253d30a0474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "9b2b7985-510b-4cbf-8a99-fe855fa8a64d",
        "cursor": {
          "ref": "1d462c45-936a-4ad0-846c-387f569c1cb0",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e6647ab8-89e2-4877-ac88-2459c17769c4"
        },
        "item": {
          "id": "9b2b7985-510b-4cbf-8a99-fe855fa8a64d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3b9c99dc-f2dc-47bd-b0de-da9230b2bc37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "f68dc5d9-a673-49f9-80ad-90114b3fef10",
        "cursor": {
          "ref": "341eed79-dd89-46ad-9afe-575af19ef488",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "19ed10d8-3c33-45f1-a761-42501a72e52c"
        },
        "item": {
          "id": "f68dc5d9-a673-49f9-80ad-90114b3fef10",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "a81172be-cf61-4146-8248-329c97ba483b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "2b78bc16-953d-4566-bf0e-9ca52ace99b7",
        "cursor": {
          "ref": "868b6064-c5a9-4d89-b3ca-f41deaf2619e",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ac465edb-8fcc-4cbf-9120-64825f058e0e"
        },
        "item": {
          "id": "2b78bc16-953d-4566-bf0e-9ca52ace99b7",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e15bb81c-c397-4ca5-9c42-03d79b9ffa06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "38c46905-e312-4044-ada3-4b8f5a1eb44e",
        "cursor": {
          "ref": "8ad55e64-1389-4fb5-b3ec-c234bae5f7a1",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0d3400c0-bea6-48d5-be0b-44bcab732e38"
        },
        "item": {
          "id": "38c46905-e312-4044-ada3-4b8f5a1eb44e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a95bd87b-466e-40a2-8a27-88209fec24c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "c8ce1e55-3f85-41b2-9f74-981306cbba4b",
        "cursor": {
          "ref": "7feebe16-d4cf-4a78-85a9-f2d63eab2bac",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8ff37808-7b26-46bd-b455-4d6766e8262e"
        },
        "item": {
          "id": "c8ce1e55-3f85-41b2-9f74-981306cbba4b",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "dcc0542c-bac5-4860-ac77-fb9445dc3cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "9e1aa1de-a621-4255-8e0a-e6252ab4f664",
        "cursor": {
          "ref": "aa8313f6-9cc2-47a9-831f-6057a031a693",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "11836b20-16ac-4c56-9de7-1a10f20e6818"
        },
        "item": {
          "id": "9e1aa1de-a621-4255-8e0a-e6252ab4f664",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "70feccda-fbfb-49b4-9346-2b466997d6f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "e5e10086-c633-4123-bd3d-15a4badc5d8d",
        "cursor": {
          "ref": "ff6121d1-feca-4f5a-b128-917dbf97fc34",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c16116cf-719c-4563-adf9-653192baf0f9"
        },
        "item": {
          "id": "e5e10086-c633-4123-bd3d-15a4badc5d8d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "0a4e81eb-6b25-4cd1-8cdf-1189f0bd4eec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "d5faebc0-1751-4e3e-859a-c8ba1376dc1d",
        "cursor": {
          "ref": "eea7886f-bc02-4dfd-92f5-7a9b7b645e20",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "dd6e60e4-666c-45e8-84b5-206a34eda370"
        },
        "item": {
          "id": "d5faebc0-1751-4e3e-859a-c8ba1376dc1d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7a7f42da-09d6-4f00-a457-c7a31c3ba869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "83ebc0eb-2b38-4a96-95a2-797c1e79f873",
        "cursor": {
          "ref": "02afa154-bd0f-4523-95ba-d0668bd832f2",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a08dc658-d7b1-472a-b522-f6d6cb342b9c"
        },
        "item": {
          "id": "83ebc0eb-2b38-4a96-95a2-797c1e79f873",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "fa0bb836-7af0-4dc3-9c88-6fb9f2bd48ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "f510ff38-4d59-455e-bc84-a917c053d42f",
        "cursor": {
          "ref": "75c50b0d-53ff-469b-bcb5-e0380b41820f",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f065814d-2a5f-4dc9-a4e7-65139f724965"
        },
        "item": {
          "id": "f510ff38-4d59-455e-bc84-a917c053d42f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "0fe794a9-210e-48f1-b34f-f2fd13872fcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "13833a1a-8912-469a-a4d7-2d3b4ff88b63",
        "cursor": {
          "ref": "b974beea-7e67-43ce-876c-d220c963edd3",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "f779c41a-e981-40ab-85e4-78f7b1e4ae74"
        },
        "item": {
          "id": "13833a1a-8912-469a-a4d7-2d3b4ff88b63",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "664b204c-042d-46f5-820a-f5e442efcad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6970,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "b733267d-d2a5-478c-92e8-933f6c95c3ae",
        "cursor": {
          "ref": "8fb0fcec-a1ed-4ff8-bac1-8e0cfec676ad",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "562c920c-3367-4255-87ac-da1fa6cdb6c6"
        },
        "item": {
          "id": "b733267d-d2a5-478c-92e8-933f6c95c3ae",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "353491b7-8b5b-468e-ae63-563ef0063793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7160,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "22edef24-e6a9-4900-90f5-0d5841f686a8",
        "cursor": {
          "ref": "a95a9523-a2ba-49a7-8d57-853102bbbbd9",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0a238e29-f24a-48bd-a570-bfd1cbd5f10f"
        },
        "item": {
          "id": "22edef24-e6a9-4900-90f5-0d5841f686a8",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "9717e434-593d-432f-a7b1-e8a21f7540fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4748,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "9bc8f02b-a66f-4cec-a893-03c4890a7954",
        "cursor": {
          "ref": "72765345-590c-4213-a9c9-c59a25173e45",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7f694f44-6129-45f1-9705-7ad62c9bef73"
        },
        "item": {
          "id": "9bc8f02b-a66f-4cec-a893-03c4890a7954",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "61bb372e-0955-4721-aa64-cec24ee8cee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6960,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "2ea3bb04-58fb-434e-bbc1-a3191716d57f",
        "cursor": {
          "ref": "ac8c0db8-30c3-4f2f-8ad8-fd56ddfb263c",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "4979ffe3-bbd2-4658-8336-6f03407ae4c3"
        },
        "item": {
          "id": "2ea3bb04-58fb-434e-bbc1-a3191716d57f",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "ebe83a4f-d0d6-452a-a177-7b49f8422bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6746,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "c74157f3-269a-4474-b0e9-ac94d203c1b0",
        "cursor": {
          "ref": "91b305ef-a215-4678-8638-6fc0f042d620",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "9e924c51-297c-449b-beb1-9dc1266f17f0"
        },
        "item": {
          "id": "c74157f3-269a-4474-b0e9-ac94d203c1b0",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a7e83498-b4fa-4499-9c5c-396c2017cfcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "4df514e5-1fc1-4ff9-93f2-8b3c5120f811",
        "cursor": {
          "ref": "689694ef-2d62-4cf3-8f49-db14cef6d324",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "940ae7a1-21f7-4ada-9341-ad4639648a3a"
        },
        "item": {
          "id": "4df514e5-1fc1-4ff9-93f2-8b3c5120f811",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "dac6c715-3af3-41d2-952c-dd9922646481",
          "status": "Created",
          "code": 201,
          "responseTime": 4621,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "57263167-c99c-429a-9dda-790a6485f033",
        "cursor": {
          "ref": "d200d19d-7d8c-46c2-b56e-4682a8e06c51",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "439c2dd6-d21c-420f-9028-409a240fa245"
        },
        "item": {
          "id": "57263167-c99c-429a-9dda-790a6485f033",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "4c6a1fe2-9928-44da-acbb-7d959183fdb5",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 5125,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "254cf4ad-89fb-4498-b3e2-677db13379f7",
        "cursor": {
          "ref": "e8d0845e-d236-4804-90e8-cdaff3e3e54d",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ca0a5c91-0312-4f0a-892e-7dc55928da97"
        },
        "item": {
          "id": "254cf4ad-89fb-4498-b3e2-677db13379f7",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "bc74718f-d5bd-4669-85b8-4bd4c1a72d88",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "deea17a9-c51e-4242-91fd-afcb3d8ba1bf",
        "cursor": {
          "ref": "50d92319-42f8-4d59-8f53-73bf4f9e1d2c",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "fe963029-e6c1-453f-b623-ea67c607c685"
        },
        "item": {
          "id": "deea17a9-c51e-4242-91fd-afcb3d8ba1bf",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "09f73d5c-0a70-441b-86b0-a7c5e9a8e5a3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "7aa92dd3-2e0f-44bb-ba06-ce933abb5323",
        "cursor": {
          "ref": "35ead43d-93c2-4782-8ae3-3873b239be9a",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "4dd4bd08-dce4-4c55-aca7-ce736e735245"
        },
        "item": {
          "id": "7aa92dd3-2e0f-44bb-ba06-ce933abb5323",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "dea1d478-dbdb-4a76-875b-81ae74f2cf88",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "cb740958-634f-4f52-a811-672f34cb4fe6",
        "cursor": {
          "ref": "45d2db38-1696-402b-92d8-dfe178c13f52",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "155e77a9-e5d3-465e-960e-3feb89f72d02"
        },
        "item": {
          "id": "cb740958-634f-4f52-a811-672f34cb4fe6",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3bd55bb0-345f-4392-bbb9-a0d7751bc6da",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 503",
              "stack": "AssertionError: expected response to have status code 422 but got 503\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "b24bad87-1408-4bd3-8e73-2df61c3a1966",
        "cursor": {
          "ref": "c1e59273-a955-4d4b-9af5-c0a5c85515ac",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "4ce8d979-1229-4e81-9f13-85b58fa68180"
        },
        "item": {
          "id": "b24bad87-1408-4bd3-8e73-2df61c3a1966",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "7a0b3124-a5d3-4981-8839-92424d02392e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a857ea9f-3c7d-4ff3-84c5-9e0df0f90f4f",
        "cursor": {
          "ref": "1886ab06-4b2d-4b1d-959b-e04b5e3b1059",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3698549f-c7b9-4487-9ed0-d0540f12625d"
        },
        "item": {
          "id": "a857ea9f-3c7d-4ff3-84c5-9e0df0f90f4f",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "232e3a87-3883-4b24-8fc4-8cbb5ff0b3ef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 60,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "b2ddac3f-6b4d-44d6-949c-8825310d33b4",
        "cursor": {
          "ref": "9e444c7b-1bf4-4a32-a294-68973abc8807",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2797349f-6f5c-4be1-9847-75f750e3414d"
        },
        "item": {
          "id": "b2ddac3f-6b4d-44d6-949c-8825310d33b4",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f2a8d2b8-b766-4ba9-92bb-3390f2ded407",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "c5c71a2c-7eb4-4f42-b499-0aa1319c2646",
        "cursor": {
          "ref": "1dee6392-0c99-4c5e-8435-ab01ddeea72c",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "fcbeff83-5529-4c08-b83b-4568dbefa1b3"
        },
        "item": {
          "id": "c5c71a2c-7eb4-4f42-b499-0aa1319c2646",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a5aa7d6e-f39b-420f-bcd9-c5a486b94e3c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "c1bc1b63-458d-4237-b5e3-a8c05b13475b",
        "cursor": {
          "ref": "c5cec689-9730-4d13-97f3-0370d04ebb0f",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e581feee-f6dc-4673-9402-409e58c3f4c1"
        },
        "item": {
          "id": "c1bc1b63-458d-4237-b5e3-a8c05b13475b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "dfed6057-b350-465f-9b29-27f78b16423d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "a8608cbb-55f8-45be-b790-77aaa8f58c32",
        "cursor": {
          "ref": "7bd65547-c897-45d7-9490-275b139f0d17",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d77e41b5-b461-4918-81cc-e462c68efe01"
        },
        "item": {
          "id": "a8608cbb-55f8-45be-b790-77aaa8f58c32",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "588c2d49-82b6-4950-99cd-a35a9f78938c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "19446103-9a29-44b7-9913-4f6a12b885a2",
        "cursor": {
          "ref": "f01771fc-440f-40e3-b2a8-225207d3849e",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "565ee481-62d2-417c-a3f0-5fd081f2f690"
        },
        "item": {
          "id": "19446103-9a29-44b7-9913-4f6a12b885a2",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "90f6169e-8227-4a76-aee6-fc638c09de11",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 503",
              "stack": "AssertionError: expected response to have status code 422 but got 503\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "2e4221ca-286d-4157-9bd8-ca213dc6217a",
        "cursor": {
          "ref": "009a6776-7dbf-42d1-bd95-d8d72caf4f8c",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "bef746f1-55f2-43c4-a538-4bed7cbd3aaa"
        },
        "item": {
          "id": "2e4221ca-286d-4157-9bd8-ca213dc6217a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b7d1c238-4d1e-4769-a5cf-7dd6c4609565",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "2312ed9f-97bc-44ac-83d7-2b273ea86f44",
        "cursor": {
          "ref": "b6b7ac1f-4ae5-4a13-b04f-1e05118a3ea8",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f0d65c15-5b52-4eb4-9414-2e21012f4465"
        },
        "item": {
          "id": "2312ed9f-97bc-44ac-83d7-2b273ea86f44",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "effc460d-4bb6-45be-ad2b-a9fc74124af5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "581b5319-565c-4fd0-b712-1301e9e1ef3a",
        "cursor": {
          "ref": "b12fd0fe-189d-4d3b-a333-90c20c86cf8d",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1c0beda4-bbf1-422a-882a-ae4cd6048d65"
        },
        "item": {
          "id": "581b5319-565c-4fd0-b712-1301e9e1ef3a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "b97903de-aa05-4250-8793-bc25217ff1dd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "406d7c7d-fd3e-45e0-8ff0-d7c9acb5bd1e",
        "cursor": {
          "ref": "5c97ea0d-89b6-4b04-9621-e6f7eaa97f4f",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "84bef932-1a2e-4e04-86fe-5d25180bf402"
        },
        "item": {
          "id": "406d7c7d-fd3e-45e0-8ff0-d7c9acb5bd1e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "48173954-578a-4551-b838-80013b60373c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "8d0df366-0b04-4304-acc6-cfd3036fc95a",
        "cursor": {
          "ref": "5f3a062a-da61-4ce3-b90c-9cc95b1724ce",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ab2aa508-11e9-4dea-868c-49b8f2879ee1"
        },
        "item": {
          "id": "8d0df366-0b04-4304-acc6-cfd3036fc95a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "440d7037-5cf7-498e-883f-15c72ff0aed8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "7d189eb4-de58-425e-a68b-5abb70433867",
        "cursor": {
          "ref": "939d0ba9-61c8-4b55-9d01-c221314179ce",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "e8872e46-7ebb-4599-b931-647b56515767"
        },
        "item": {
          "id": "7d189eb4-de58-425e-a68b-5abb70433867",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "e6674afd-eab3-4840-bba5-80fc32b9ca6d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "512c766b-3f32-4724-8795-b5f6995daad1",
        "cursor": {
          "ref": "e51c1f25-c6ee-4bb5-b9eb-e00e3152b93a",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "498d4d9b-6968-45af-91e8-9e98409a2ee9"
        },
        "item": {
          "id": "512c766b-3f32-4724-8795-b5f6995daad1",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f8d01dbd-ba00-4e83-912e-18adfbe79dad",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "bc00035b-e750-4f15-8211-87e7b8849664",
        "cursor": {
          "ref": "12319708-e849-4d72-9bbe-76439a244520",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "17b53795-5fbe-4826-9d0c-5842283975a7"
        },
        "item": {
          "id": "bc00035b-e750-4f15-8211-87e7b8849664",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "29b666bf-7ce2-4dba-b9d8-f3f3091e6e81",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "5fdc73bf-fbec-49a3-b820-bc34daf15f16",
        "cursor": {
          "ref": "8878abd5-e072-4acf-82fe-501918b014ba",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c40676fa-c0a4-4004-8c42-e265e0e74985"
        },
        "item": {
          "id": "5fdc73bf-fbec-49a3-b820-bc34daf15f16",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e09920e3-d5f4-40e5-9494-c1d1dd995228",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "5d0fe510-4c8d-4abe-8fac-a9a85ef050f1",
        "cursor": {
          "ref": "7ddd8ce1-f75f-45e3-a882-df8d2b37a408",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "289c693d-a8ae-4396-983b-ceb42e448351"
        },
        "item": {
          "id": "5d0fe510-4c8d-4abe-8fac-a9a85ef050f1",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "7ce368c2-5aab-407f-aad2-84f299a18873",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "2ffc7d8e-1e8a-4608-a23a-0c0c77cfaad7",
        "cursor": {
          "ref": "09eb183d-07d1-4905-993e-32cdfc9e1c4e",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c61d80b6-9d04-486f-a46a-94112509b085"
        },
        "item": {
          "id": "2ffc7d8e-1e8a-4608-a23a-0c0c77cfaad7",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "943ae759-30c4-4350-999f-0c8c2ae09c35",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "f52357c1-d446-48d4-ae32-ed7371a0f03c",
        "cursor": {
          "ref": "75016331-7c25-4098-a3d3-d35f1878a5db",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7734e1c8-b974-4af0-be6d-f10bb53c2ff0"
        },
        "item": {
          "id": "f52357c1-d446-48d4-ae32-ed7371a0f03c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "54f432cf-2e84-4783-aed9-b48535595e68",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "49fa71bc-bdd9-437c-9cbb-16fa6bfb7060",
        "cursor": {
          "ref": "4626ab36-8ed7-42e7-a9ad-67108bb65faf",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e521cbfb-29c3-4b8e-93da-c54b44d0f495"
        },
        "item": {
          "id": "49fa71bc-bdd9-437c-9cbb-16fa6bfb7060",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e8c8a9af-496b-459e-b21e-317f6a9e4c88",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "12149af9-21c3-4e76-8b3c-38a793816984",
        "cursor": {
          "ref": "8c2ca50a-3c51-469f-8bc4-7476eda01f95",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "76ca0ede-0607-4aa0-bd4d-1b2d3423b764"
        },
        "item": {
          "id": "12149af9-21c3-4e76-8b3c-38a793816984",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "2c801822-9f22-416d-9194-cde2ddaac4cd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "13b3abda-04b3-4450-8e0f-ae6b96ccfc29",
        "cursor": {
          "ref": "5e2df987-44b2-4fde-a49d-ac82e21a598e",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "d167e4b2-5a72-402f-b584-f87424411708"
        },
        "item": {
          "id": "13b3abda-04b3-4450-8e0f-ae6b96ccfc29",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "38e24d8b-6fb0-45b7-b8ef-1b94928b77c1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "80cd8e4c-e46c-4a83-b3b9-4baefa347de5",
        "cursor": {
          "ref": "f84c9b19-aad9-4b9f-837c-56914c663f5e",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "3f2e359e-964f-4038-a024-446fb9c6fd6c"
        },
        "item": {
          "id": "80cd8e4c-e46c-4a83-b3b9-4baefa347de5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b2a833d4-11f8-4bfd-aa88-6b35a4b36da5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "49cf79c3-2d91-49ca-881f-77d1c33ee327",
        "cursor": {
          "ref": "d876c3a6-9dd2-482d-ab8f-ae110607acc9",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "9f6f5650-e79e-4795-a149-9cc0894c4ad2"
        },
        "item": {
          "id": "49cf79c3-2d91-49ca-881f-77d1c33ee327",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "32b0f6ec-e54b-4160-9de2-37a285d341ef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "37230177-d48e-4c24-89bb-e710abcafe5d",
        "cursor": {
          "ref": "a85addf1-c5e4-4fff-8f6a-c1197a3d7f41",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e623bcd9-d587-43eb-a70d-7f33ded66c15"
        },
        "item": {
          "id": "37230177-d48e-4c24-89bb-e710abcafe5d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "adedd239-4c81-49c5-9980-5fc6209e040a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "60243cff-fe7d-4a3e-a0df-1a9442ac97e8",
        "cursor": {
          "ref": "a825802b-f085-43b0-a961-75509f1ae0b4",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "20d38102-f405-45b7-88bf-eafeb44dab02"
        },
        "item": {
          "id": "60243cff-fe7d-4a3e-a0df-1a9442ac97e8",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "730e8f6b-dc87-476f-9312-928cf6d62c18",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "c18c3414-ad1b-4417-b2b9-f3ae722f9e1a",
        "cursor": {
          "ref": "b0afecf1-97c2-49d2-b0af-0923cd28d37f",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "8aad86d7-1961-45e9-bd79-b5ef9f5feb8d"
        },
        "item": {
          "id": "c18c3414-ad1b-4417-b2b9-f3ae722f9e1a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ddfd2a49-7e59-4a0b-b8fc-0bc1e292dc86",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "38eed542-e62f-4dbb-b48d-6c7b9eaab672",
        "cursor": {
          "ref": "b58e36fc-bdd4-43f0-854f-1e8626dbd853",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "63f5cd15-2de8-4fd9-973e-3ddecadc10b0"
        },
        "item": {
          "id": "38eed542-e62f-4dbb-b48d-6c7b9eaab672",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "6f472d87-aa8e-4c94-9a9b-98b7d915e492",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "7935f00d-0ec2-420b-af45-83a67ec432a2",
        "cursor": {
          "ref": "a57cf957-db08-42b4-9b55-4bc5b7f6bd4d",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "1179f656-4ddb-481c-a337-02c0def7c300"
        },
        "item": {
          "id": "7935f00d-0ec2-420b-af45-83a67ec432a2",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f4faacec-3bd7-466c-8b57-e399ff218ed7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "b13b3600-f548-4752-95aa-3224aa0d8758",
        "cursor": {
          "ref": "a1ced746-c60c-4ffc-b444-cc5b04d5b91e",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "cad1a814-b03a-413b-a0ef-d9bde5fca3c9"
        },
        "item": {
          "id": "b13b3600-f548-4752-95aa-3224aa0d8758",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "6c2d437a-f7e7-4c78-aea2-1e8777c65ab5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "f2deaafd-320f-418f-8fe5-fd6cd1efd39c",
        "cursor": {
          "ref": "f3475884-e97d-4c29-8856-6d3a637c3d97",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1889448f-c9a3-42b8-b679-5b400fb410b0"
        },
        "item": {
          "id": "f2deaafd-320f-418f-8fe5-fd6cd1efd39c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "24cd5c3e-6024-4ce8-b597-cc375fad001c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "c1baf931-4db0-4c5c-9d8a-df799138465f",
        "cursor": {
          "ref": "29bb99cf-c836-41cb-a16a-458bff379220",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "322984dc-b653-4450-a97f-1f42fa61bd49"
        },
        "item": {
          "id": "c1baf931-4db0-4c5c-9d8a-df799138465f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5c676d99-b368-41f4-848e-9446402abeef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "25a106d5-978f-4aa2-a6e0-395437b4432c",
        "cursor": {
          "ref": "11a8ea92-b5d9-4f27-966c-b4b797cdcea5",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f315a0ce-5245-49bb-8018-7049b838c02f"
        },
        "item": {
          "id": "25a106d5-978f-4aa2-a6e0-395437b4432c",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ea2a9ce7-aaa3-48ce-b070-137650639ffd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "14601ec7-6c1d-4816-96fd-5024bf0e0181",
        "cursor": {
          "ref": "ff4ba7aa-e094-453a-a59d-cd2ad3713f75",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ef4eb0ca-5989-4eb7-94eb-ea7642443f90"
        },
        "item": {
          "id": "14601ec7-6c1d-4816-96fd-5024bf0e0181",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b4abb2ab-312d-4e27-9cc4-47267f37ce05",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "a2250ed8-c046-467a-9962-2ad49ffd0ed6",
        "cursor": {
          "ref": "0d9c39de-6a25-486a-b92c-339274801b51",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "30951696-cad1-448e-9f85-09e101387370"
        },
        "item": {
          "id": "a2250ed8-c046-467a-9962-2ad49ffd0ed6",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7f522f55-417c-4894-85ef-a7a9507530c4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "1ed0a436-6858-4c7e-be85-277b30512d53",
        "cursor": {
          "ref": "fe47567e-961f-4820-9ea1-ba82a13ed66e",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "5a75f0c1-5c9d-4a92-88b5-39b99be69c50"
        },
        "item": {
          "id": "1ed0a436-6858-4c7e-be85-277b30512d53",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "163d4019-5706-4658-a12e-7e340972ed59",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "9938b63e-9888-4dbe-874f-f922aa41c29b",
        "cursor": {
          "ref": "2b0f7ddb-bd35-4c02-8c3c-00f804aab502",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b9ef3358-540d-4989-9274-70620c5ad9ac"
        },
        "item": {
          "id": "9938b63e-9888-4dbe-874f-f922aa41c29b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1cfcbc26-399d-4292-a45a-156cd6ce49d0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "065913d4-37a2-4184-ae9e-0957020af998",
        "cursor": {
          "ref": "08b3a3af-b6e6-4618-9530-d45e701d3029",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b9c95fc7-131c-4b8f-b764-f7db59a606b1"
        },
        "item": {
          "id": "065913d4-37a2-4184-ae9e-0957020af998",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9fa04609-ae4b-4718-a6fb-72f9dd9f063c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "85557573-2808-486b-9b74-5c2f0c5a6a32",
        "cursor": {
          "ref": "33e8d290-8d4d-4438-969a-5d8069984625",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a52f602e-9a5f-434b-b135-98faeb5250a8"
        },
        "item": {
          "id": "85557573-2808-486b-9b74-5c2f0c5a6a32",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ba700f74-b021-4785-9c20-34349f8825e5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "b701371e-c740-4aba-a21b-b1c271c6786e",
        "cursor": {
          "ref": "a08f9d63-b46e-4912-bf50-f1068b63a4a4",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "c5c82427-1030-4c35-a2a2-f76ee09a5748"
        },
        "item": {
          "id": "b701371e-c740-4aba-a21b-b1c271c6786e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "27e2a4fd-8991-47ab-bac6-3ad51c8022aa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "9415c493-a1ab-4245-9482-d4b0ea62f2d8",
        "cursor": {
          "ref": "8e9e2b5b-505c-414a-8113-588a3f0b77ed",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d8f0f2f3-8f7b-48c8-8dba-48691273cc52"
        },
        "item": {
          "id": "9415c493-a1ab-4245-9482-d4b0ea62f2d8",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "beea3040-72b0-4519-97a5-048447dbed94",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "a34a55b2-b16c-4426-ac55-3a804be91e05",
        "cursor": {
          "ref": "0a9ab5cd-c703-4f6f-aafd-5dc3107b2a9e",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8847d88b-6e63-4fcd-92fa-d53310f1549e"
        },
        "item": {
          "id": "a34a55b2-b16c-4426-ac55-3a804be91e05",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "e34350ca-75b1-492c-b3bd-8018784296ef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "8447e52d-b874-49bb-9d93-4ef13841ab6a",
        "cursor": {
          "ref": "33dd5737-d8c9-4f61-97d2-0a2e2d879e7f",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7d56c9f5-97d4-4b86-8ed1-4d620a7e5a13"
        },
        "item": {
          "id": "8447e52d-b874-49bb-9d93-4ef13841ab6a",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "307d08eb-6349-4bee-89cb-d86a3b434a56",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "35f8c606-b5bc-4af6-aeb9-606b9fd22612",
        "cursor": {
          "ref": "b7ca3661-9b43-4260-a09a-ed7f51d5f638",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "804608c7-addf-4164-9bc0-6bb15b7f3cce"
        },
        "item": {
          "id": "35f8c606-b5bc-4af6-aeb9-606b9fd22612",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "edf2de6b-fa03-4b33-ab31-a35126696fab",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "2ae23f32-0dbd-4acc-90db-23cf13af81c3",
        "cursor": {
          "ref": "f27ff659-50b6-4a66-9a71-edfb172370c2",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d6b28dfd-206c-461f-b079-4f5c82f45450"
        },
        "item": {
          "id": "2ae23f32-0dbd-4acc-90db-23cf13af81c3",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ad92fcdc-6b57-4ef6-9686-ed3a8e8da375",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "337de2d4-6c00-472e-9419-f42e8c613f28",
        "cursor": {
          "ref": "8cd2228f-4e2c-4e69-a85d-bb0574521fdf",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "8112d1f8-803e-460e-b226-190a7a22a3ba"
        },
        "item": {
          "id": "337de2d4-6c00-472e-9419-f42e8c613f28",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b3e7e536-e79b-4894-8d45-019a74fdf64b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "076337e4-6f8b-4c3d-9f03-5ccbce02abea",
        "cursor": {
          "ref": "ea6c1408-d977-41e2-983c-61ddf6d0d82a",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "7e1ffff8-c3df-4068-9281-4819eab26e59"
        },
        "item": {
          "id": "076337e4-6f8b-4c3d-9f03-5ccbce02abea",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "9dda32e8-dda7-41c4-9601-f45078ecca82",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 67,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "611b85e8-fb69-4929-989e-7f72aa3f91f5",
        "cursor": {
          "ref": "81c989f7-c853-4c33-ad89-c0079b649719",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "676554a0-60a4-43d9-9804-59b7cb2a475e"
        },
        "item": {
          "id": "611b85e8-fb69-4929-989e-7f72aa3f91f5",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "afb9bb30-9357-4a1b-b769-849a7b08f81b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "e960431b-4bf3-40cb-b040-affc0f2d9d57",
        "cursor": {
          "ref": "151f0f3c-5211-4e29-adf1-4c1bbaf90f72",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "254d6969-e49b-4061-9be5-f2e5f584822c"
        },
        "item": {
          "id": "e960431b-4bf3-40cb-b040-affc0f2d9d57",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "14b34266-8f9a-46fe-8dd3-b4643c51ab5c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "0789bba2-bca7-43fa-9028-73602daa8be6",
        "cursor": {
          "ref": "a76ab12d-d6d8-4a0d-971a-21881fa5a8e8",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6dfe9555-6776-4fe1-a01f-47cdba228c49"
        },
        "item": {
          "id": "0789bba2-bca7-43fa-9028-73602daa8be6",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "35dadb6c-f1b0-4dff-bd30-5fff525ffb25",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "662bfa6e-47b1-47f4-8ca0-81b3eefe5371",
        "cursor": {
          "ref": "57fd5ceb-d700-42f2-a2ef-ed99781d8e26",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a06ad46c-d446-4a21-a067-02388e7410d0"
        },
        "item": {
          "id": "662bfa6e-47b1-47f4-8ca0-81b3eefe5371",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e61d6ebe-ee95-4960-a830-9b404c057b25",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "61f63d33-7080-4610-b86a-04f73c5e5fdf",
        "cursor": {
          "ref": "128d0060-6521-4133-bf41-39402f36a9f8",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "74e9f9b8-d384-43ad-996a-1c538ba82a1b"
        },
        "item": {
          "id": "61f63d33-7080-4610-b86a-04f73c5e5fdf",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "de72cadc-42e1-4833-8f74-a136ebbe8f37",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "2b1a7de6-afb9-4a91-811c-0d9239422878",
        "cursor": {
          "ref": "74ac1882-22b1-42f6-b522-0c08e6352c61",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4a3e0ddc-6231-41ab-beb0-5ea0a5d04b39"
        },
        "item": {
          "id": "2b1a7de6-afb9-4a91-811c-0d9239422878",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "bfa2f566-50da-4678-8afd-61f63fcdcf33",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "81b7c3d1-0a73-44ad-9087-77738ff36ff7",
        "cursor": {
          "ref": "c784f0bb-b745-4ca5-abf5-92b4ebb425d8",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "28457953-ed7f-459d-a277-c15cfd834bba"
        },
        "item": {
          "id": "81b7c3d1-0a73-44ad-9087-77738ff36ff7",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "0a88940e-00b9-4dbe-b8c4-a91a6b31df0e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "8885d9d7-d396-4de9-98d3-a88367e1fb2e",
        "cursor": {
          "ref": "acc9faf7-8415-4b7a-827d-f2345ddc71e0",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "43cdeb02-1c9b-410d-b800-eecc46142834"
        },
        "item": {
          "id": "8885d9d7-d396-4de9-98d3-a88367e1fb2e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "2b3967b0-1da8-47e5-ba58-8c34d7aa9166",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "e980dc1e-70f0-451f-84c1-73e2d31b7b3f",
        "cursor": {
          "ref": "4173d018-30ab-473b-9d49-bb2288be62dd",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "6dadb52c-2b77-4e95-b071-af90a3e763d4"
        },
        "item": {
          "id": "e980dc1e-70f0-451f-84c1-73e2d31b7b3f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "9ddb5162-1563-4357-8b34-42ca42b0cb27",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 60,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "d532b58f-2f3a-4ce2-88e4-22c39e037eec",
        "cursor": {
          "ref": "a71b7d19-3ca7-48e1-ab42-dd42111ae388",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "7d04d32a-7d65-4ec2-9412-21af29ce6b84"
        },
        "item": {
          "id": "d532b58f-2f3a-4ce2-88e4-22c39e037eec",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "6cf17b09-b0aa-400b-92c5-082b576cfb1a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "f1e53297-987c-4b8d-bbdc-1f0bb76e3f54",
        "cursor": {
          "ref": "bdd8652c-69fc-4cb7-bbe2-4c461e4f382b",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "412427fe-73fa-439b-a51e-0b42ca470ad1"
        },
        "item": {
          "id": "f1e53297-987c-4b8d-bbdc-1f0bb76e3f54",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "ab63612e-9837-48d1-aca4-906cfdb9158f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "03bfa49f-8c00-4a44-b90d-215ed7dabe66",
        "cursor": {
          "ref": "9943eb95-8dcc-4d8e-a0a5-061e4a3995ce",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "0fe49319-70c4-4991-9b2e-d31252bd8ee9"
        },
        "item": {
          "id": "03bfa49f-8c00-4a44-b90d-215ed7dabe66",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a88c9676-f5e4-4c40-a07b-0dbe643ebcda",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:105)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:5:105)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:6:105)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:7:105)"
            }
          }
        ]
      },
      {
        "id": "e4904993-9a67-43a4-91ec-52793cdd2803",
        "cursor": {
          "ref": "7f731507-c939-44fa-94fb-1077f3ee7189",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ddb86b2f-a262-4821-9a01-500847d92e32"
        },
        "item": {
          "id": "e4904993-9a67-43a4-91ec-52793cdd2803",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2057a9e0-5ed4-425d-934a-ccc59f2b247a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:106)"
            }
          }
        ]
      },
      {
        "id": "15f54940-fadd-4f39-a5cf-46e05cde03dc",
        "cursor": {
          "ref": "22813158-72d5-4b1b-bb0b-b888c396af5e",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2f2452b1-ba6e-460f-93fe-df871b39fee0"
        },
        "item": {
          "id": "15f54940-fadd-4f39-a5cf-46e05cde03dc",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c42a0750-efb9-4f84-b016-64e944ac01fc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "450aa9dc-64af-4e3b-a331-53480019eac6",
        "cursor": {
          "ref": "30df11af-0aaa-4b8c-a697-6b6da255ef99",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8aa2eb59-d298-4ab0-a082-da169fac3d8f"
        },
        "item": {
          "id": "450aa9dc-64af-4e3b-a331-53480019eac6",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "862c5a72-28a1-4ae6-9da5-4445107a8f71",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "242eff23-3e64-48a3-99e7-04a423135883",
        "cursor": {
          "ref": "f74f9059-efb3-4ee8-b51b-0568a2cd174b",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8933c784-dfe4-4eb0-8bd2-90d3a8e88512"
        },
        "item": {
          "id": "242eff23-3e64-48a3-99e7-04a423135883",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "5a857a31-1e82-4a90-bff6-c2c9e96136e8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:109)"
            }
          }
        ]
      },
      {
        "id": "f8a59d06-67e6-4dcc-b3ea-2f7b5443ba47",
        "cursor": {
          "ref": "596db7fe-ac16-4b45-8188-fcc7564ec6a2",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c9793ee1-c6a6-43e2-9f48-db46a11ef70a"
        },
        "item": {
          "id": "f8a59d06-67e6-4dcc-b3ea-2f7b5443ba47",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9f87d1ea-b2a9-4e44-a4ad-d8b155d5cf0d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "f8a59d06-67e6-4dcc-b3ea-2f7b5443ba47",
        "cursor": {
          "ref": "596db7fe-ac16-4b45-8188-fcc7564ec6a2",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c9793ee1-c6a6-43e2-9f48-db46a11ef70a"
        },
        "item": {
          "id": "f8a59d06-67e6-4dcc-b3ea-2f7b5443ba47",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9f87d1ea-b2a9-4e44-a4ad-d8b155d5cf0d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "792d1105-4953-413c-a8c5-dd8e248d358b",
        "cursor": {
          "ref": "d9cd3b28-5729-412e-9a95-6d99efcf7ab5",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1566c103-38d4-4ca2-9ddb-fe5eeeca8232"
        },
        "item": {
          "id": "792d1105-4953-413c-a8c5-dd8e248d358b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d0414072-1ebb-417e-8914-208bc85d563e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "792d1105-4953-413c-a8c5-dd8e248d358b",
        "cursor": {
          "ref": "d9cd3b28-5729-412e-9a95-6d99efcf7ab5",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1566c103-38d4-4ca2-9ddb-fe5eeeca8232"
        },
        "item": {
          "id": "792d1105-4953-413c-a8c5-dd8e248d358b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d0414072-1ebb-417e-8914-208bc85d563e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "f4e48f92-1274-45c6-beda-7bd92a00e43e",
        "cursor": {
          "ref": "a1a16444-5bf6-4874-9262-5e02bcc7cc95",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "4286d6c9-0bc9-45c1-9a04-64c2817f8c72"
        },
        "item": {
          "id": "f4e48f92-1274-45c6-beda-7bd92a00e43e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "8c300812-1b35-4241-841f-feaa69067048",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "f4e48f92-1274-45c6-beda-7bd92a00e43e",
        "cursor": {
          "ref": "a1a16444-5bf6-4874-9262-5e02bcc7cc95",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "4286d6c9-0bc9-45c1-9a04-64c2817f8c72"
        },
        "item": {
          "id": "f4e48f92-1274-45c6-beda-7bd92a00e43e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "8c300812-1b35-4241-841f-feaa69067048",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "b38137fc-df11-4a95-ae41-8ca8bf81dba1",
        "cursor": {
          "ref": "cea514d9-abc8-47e3-920f-7c3be5077474",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4603468d-3c43-4884-85d6-f4929905d40a"
        },
        "item": {
          "id": "b38137fc-df11-4a95-ae41-8ca8bf81dba1",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d113ab12-d5d3-4b8a-82d4-3c6a50476450",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "b38137fc-df11-4a95-ae41-8ca8bf81dba1",
        "cursor": {
          "ref": "cea514d9-abc8-47e3-920f-7c3be5077474",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4603468d-3c43-4884-85d6-f4929905d40a"
        },
        "item": {
          "id": "b38137fc-df11-4a95-ae41-8ca8bf81dba1",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d113ab12-d5d3-4b8a-82d4-3c6a50476450",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "b5fe3ec6-73a4-46a8-bd46-11bef7eeaac3",
        "cursor": {
          "ref": "acff349e-ae65-43ff-b55b-9f0513227b4b",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "dde08ab5-0bb8-44fa-b2ef-965be6fdc17b"
        },
        "item": {
          "id": "b5fe3ec6-73a4-46a8-bd46-11bef7eeaac3",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8d41d266-afa9-46cc-820d-97d2f8019e6a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "b5fe3ec6-73a4-46a8-bd46-11bef7eeaac3",
        "cursor": {
          "ref": "acff349e-ae65-43ff-b55b-9f0513227b4b",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "dde08ab5-0bb8-44fa-b2ef-965be6fdc17b"
        },
        "item": {
          "id": "b5fe3ec6-73a4-46a8-bd46-11bef7eeaac3",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8d41d266-afa9-46cc-820d-97d2f8019e6a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "351acd3c-37d3-4919-acc1-6fce2fe2ca18",
        "cursor": {
          "ref": "52b15b9e-2352-4a18-a754-33237997506d",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "3ec56513-1744-415f-bdc8-1f04cae16e92"
        },
        "item": {
          "id": "351acd3c-37d3-4919-acc1-6fce2fe2ca18",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ffb40094-23f8-47c5-b67f-ed40342da40c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "351acd3c-37d3-4919-acc1-6fce2fe2ca18",
        "cursor": {
          "ref": "52b15b9e-2352-4a18-a754-33237997506d",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "3ec56513-1744-415f-bdc8-1f04cae16e92"
        },
        "item": {
          "id": "351acd3c-37d3-4919-acc1-6fce2fe2ca18",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ffb40094-23f8-47c5-b67f-ed40342da40c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "0f03c501-1420-4dc3-9987-70d9dcb97b46",
        "cursor": {
          "ref": "33bc194f-712b-49e0-a11f-f335222291fa",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6e97579c-ed05-4536-9bdd-497c2adcf5a8"
        },
        "item": {
          "id": "0f03c501-1420-4dc3-9987-70d9dcb97b46",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d9993d26-dc60-4fea-893a-71162293c159",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "0f03c501-1420-4dc3-9987-70d9dcb97b46",
        "cursor": {
          "ref": "33bc194f-712b-49e0-a11f-f335222291fa",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6e97579c-ed05-4536-9bdd-497c2adcf5a8"
        },
        "item": {
          "id": "0f03c501-1420-4dc3-9987-70d9dcb97b46",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d9993d26-dc60-4fea-893a-71162293c159",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "500b5321-e102-4ea5-ae46-5baaf08384ac",
        "cursor": {
          "ref": "12b7b185-04a0-440b-b50e-cc2dba56acd3",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e5620264-7208-43c9-ad0e-efb16cea8b4b"
        },
        "item": {
          "id": "500b5321-e102-4ea5-ae46-5baaf08384ac",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9c039f37-5bbc-4a2d-afca-777fe22c8966",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "500b5321-e102-4ea5-ae46-5baaf08384ac",
        "cursor": {
          "ref": "12b7b185-04a0-440b-b50e-cc2dba56acd3",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e5620264-7208-43c9-ad0e-efb16cea8b4b"
        },
        "item": {
          "id": "500b5321-e102-4ea5-ae46-5baaf08384ac",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9c039f37-5bbc-4a2d-afca-777fe22c8966",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "8d35af28-d41f-4740-b799-78a98489ccfb",
        "cursor": {
          "ref": "9cee768c-947f-4ae9-9bbe-f7395e3e191a",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "0e068cd9-126b-4d87-9610-d818da6eac84"
        },
        "item": {
          "id": "8d35af28-d41f-4740-b799-78a98489ccfb",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e7ffd8dc-5fcd-4b82-ab8b-2969c3eadd09",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "8d35af28-d41f-4740-b799-78a98489ccfb",
        "cursor": {
          "ref": "9cee768c-947f-4ae9-9bbe-f7395e3e191a",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "0e068cd9-126b-4d87-9610-d818da6eac84"
        },
        "item": {
          "id": "8d35af28-d41f-4740-b799-78a98489ccfb",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e7ffd8dc-5fcd-4b82-ab8b-2969c3eadd09",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "d4fb8fe0-4f65-4997-89c2-0f4ca2ff1922",
        "cursor": {
          "ref": "47964afb-fd46-4c47-ac7c-2f6653c6a051",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "42f8d7fb-510e-4695-a7a2-bc926f1c41a7"
        },
        "item": {
          "id": "d4fb8fe0-4f65-4997-89c2-0f4ca2ff1922",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f06e7465-0020-4dd3-b740-8bef2a3ee131",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "d4fb8fe0-4f65-4997-89c2-0f4ca2ff1922",
        "cursor": {
          "ref": "47964afb-fd46-4c47-ac7c-2f6653c6a051",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "42f8d7fb-510e-4695-a7a2-bc926f1c41a7"
        },
        "item": {
          "id": "d4fb8fe0-4f65-4997-89c2-0f4ca2ff1922",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f06e7465-0020-4dd3-b740-8bef2a3ee131",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "6b214685-4975-4979-886e-5f361eb28589",
        "cursor": {
          "ref": "ef80e11b-19fc-408b-b56e-6249a5575c5e",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "f0ef8c0b-e117-4c39-8b72-504f10a08cbc"
        },
        "item": {
          "id": "6b214685-4975-4979-886e-5f361eb28589",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "81b3dd19-b8d1-4619-8192-834af70319f0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "6b214685-4975-4979-886e-5f361eb28589",
        "cursor": {
          "ref": "ef80e11b-19fc-408b-b56e-6249a5575c5e",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "f0ef8c0b-e117-4c39-8b72-504f10a08cbc"
        },
        "item": {
          "id": "6b214685-4975-4979-886e-5f361eb28589",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "81b3dd19-b8d1-4619-8192-834af70319f0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "19b903d7-907d-4829-8f52-eff882ddac04",
        "cursor": {
          "ref": "a7d4aa91-2d16-4d4e-a121-4a6f3a3d60e7",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "eb7fe618-949a-45c2-9128-67010318a11b"
        },
        "item": {
          "id": "19b903d7-907d-4829-8f52-eff882ddac04",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8e664477-4b55-422c-b271-6ed91b1c04bc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "19b903d7-907d-4829-8f52-eff882ddac04",
        "cursor": {
          "ref": "a7d4aa91-2d16-4d4e-a121-4a6f3a3d60e7",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "eb7fe618-949a-45c2-9128-67010318a11b"
        },
        "item": {
          "id": "19b903d7-907d-4829-8f52-eff882ddac04",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8e664477-4b55-422c-b271-6ed91b1c04bc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "46e6ce10-f2b3-4558-a1b1-37007ee40c14",
        "cursor": {
          "ref": "65145368-e9b1-47d3-a3f2-de23136c1c1a",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "02197500-c989-471d-8802-6b57d84e2a19"
        },
        "item": {
          "id": "46e6ce10-f2b3-4558-a1b1-37007ee40c14",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8b1c2473-b080-4647-87a2-4aa238e13b03",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "46e6ce10-f2b3-4558-a1b1-37007ee40c14",
        "cursor": {
          "ref": "65145368-e9b1-47d3-a3f2-de23136c1c1a",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "02197500-c989-471d-8802-6b57d84e2a19"
        },
        "item": {
          "id": "46e6ce10-f2b3-4558-a1b1-37007ee40c14",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8b1c2473-b080-4647-87a2-4aa238e13b03",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "f3e44154-5ab9-4d34-9214-a26025b94e92",
        "cursor": {
          "ref": "c4151c9b-4717-46e4-9e3b-21f5be513008",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "bfedace2-744d-4a19-a0d5-f852ad6c2bbc"
        },
        "item": {
          "id": "f3e44154-5ab9-4d34-9214-a26025b94e92",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "375273ff-e6af-4a75-b60f-5fb132500984",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "f3e44154-5ab9-4d34-9214-a26025b94e92",
        "cursor": {
          "ref": "c4151c9b-4717-46e4-9e3b-21f5be513008",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "bfedace2-744d-4a19-a0d5-f852ad6c2bbc"
        },
        "item": {
          "id": "f3e44154-5ab9-4d34-9214-a26025b94e92",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "375273ff-e6af-4a75-b60f-5fb132500984",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "83fca398-4f94-4442-a0ba-cc2f2066f5f0",
        "cursor": {
          "ref": "d260f629-e386-48a5-8bcc-91170e4a9cc9",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "0d50e518-eb22-4542-95d2-c5eecc1536b9"
        },
        "item": {
          "id": "83fca398-4f94-4442-a0ba-cc2f2066f5f0",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c2110674-4f20-4c8a-8901-c0d823f00dbe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "83fca398-4f94-4442-a0ba-cc2f2066f5f0",
        "cursor": {
          "ref": "d260f629-e386-48a5-8bcc-91170e4a9cc9",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "0d50e518-eb22-4542-95d2-c5eecc1536b9"
        },
        "item": {
          "id": "83fca398-4f94-4442-a0ba-cc2f2066f5f0",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c2110674-4f20-4c8a-8901-c0d823f00dbe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "2245a215-6207-4f4d-85ac-fd40a5301935",
        "cursor": {
          "ref": "4f3a64eb-b5f9-4d91-9d47-21c6da7279e0",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7a72a731-818b-4f04-9c1d-b0845fefb5d3"
        },
        "item": {
          "id": "2245a215-6207-4f4d-85ac-fd40a5301935",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d87eb96f-0bff-4281-95dc-636cbe17375e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "2245a215-6207-4f4d-85ac-fd40a5301935",
        "cursor": {
          "ref": "4f3a64eb-b5f9-4d91-9d47-21c6da7279e0",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7a72a731-818b-4f04-9c1d-b0845fefb5d3"
        },
        "item": {
          "id": "2245a215-6207-4f4d-85ac-fd40a5301935",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d87eb96f-0bff-4281-95dc-636cbe17375e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "b0fd0ae3-2e08-4fad-af24-75fddfde81ac",
        "cursor": {
          "ref": "0fdeedbc-1a05-4f09-8441-356443a39983",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "6955bfb4-4285-42ef-ba78-48d178ca55a9"
        },
        "item": {
          "id": "b0fd0ae3-2e08-4fad-af24-75fddfde81ac",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "3d792a9e-3370-4c4d-86b4-5b880446e4cb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "b0fd0ae3-2e08-4fad-af24-75fddfde81ac",
        "cursor": {
          "ref": "0fdeedbc-1a05-4f09-8441-356443a39983",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "6955bfb4-4285-42ef-ba78-48d178ca55a9"
        },
        "item": {
          "id": "b0fd0ae3-2e08-4fad-af24-75fddfde81ac",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "3d792a9e-3370-4c4d-86b4-5b880446e4cb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "81fa5ee4-1f6d-4ce0-89ad-01904ca36cf2",
        "cursor": {
          "ref": "6cc9d42e-17bf-4e49-9828-f936a2df390e",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "b1a66614-a366-4ecc-b866-a1b0d858bba2"
        },
        "item": {
          "id": "81fa5ee4-1f6d-4ce0-89ad-01904ca36cf2",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "da5aabcf-f454-4b8a-8e94-91c066f937f0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "81fa5ee4-1f6d-4ce0-89ad-01904ca36cf2",
        "cursor": {
          "ref": "6cc9d42e-17bf-4e49-9828-f936a2df390e",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "b1a66614-a366-4ecc-b866-a1b0d858bba2"
        },
        "item": {
          "id": "81fa5ee4-1f6d-4ce0-89ad-01904ca36cf2",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "da5aabcf-f454-4b8a-8e94-91c066f937f0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "4e5b776b-1d44-4c51-8480-7ed865d139a1",
        "cursor": {
          "ref": "31e7de35-dfd6-4fbe-9b7a-2753c52db97f",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "9cc53d69-4c9c-4ecf-8ee9-327918385ee0"
        },
        "item": {
          "id": "4e5b776b-1d44-4c51-8480-7ed865d139a1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "cbef976d-44cd-415e-96c6-06f91d9c442c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "4e5b776b-1d44-4c51-8480-7ed865d139a1",
        "cursor": {
          "ref": "31e7de35-dfd6-4fbe-9b7a-2753c52db97f",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "9cc53d69-4c9c-4ecf-8ee9-327918385ee0"
        },
        "item": {
          "id": "4e5b776b-1d44-4c51-8480-7ed865d139a1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "cbef976d-44cd-415e-96c6-06f91d9c442c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "c724d25f-9b69-4bcb-b246-ac7d5a742c72",
        "cursor": {
          "ref": "a75df6a8-32ef-4c33-9ce0-1926dddc3e58",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "75aa3e36-015c-4479-8486-fd8c09951159"
        },
        "item": {
          "id": "c724d25f-9b69-4bcb-b246-ac7d5a742c72",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c34c5dd5-c5ae-4a2e-b325-c14b25188c27",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "c724d25f-9b69-4bcb-b246-ac7d5a742c72",
        "cursor": {
          "ref": "a75df6a8-32ef-4c33-9ce0-1926dddc3e58",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "75aa3e36-015c-4479-8486-fd8c09951159"
        },
        "item": {
          "id": "c724d25f-9b69-4bcb-b246-ac7d5a742c72",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c34c5dd5-c5ae-4a2e-b325-c14b25188c27",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "c879dcd7-c47d-409d-a11b-298ddfb64233",
        "cursor": {
          "ref": "1ab0734d-8efe-4c32-afca-74200a2f9e6d",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0a5d0027-7bad-4b48-a0e4-017379807dbb"
        },
        "item": {
          "id": "c879dcd7-c47d-409d-a11b-298ddfb64233",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "749f61e0-78e0-4a54-b885-02a0b35d7da5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "c879dcd7-c47d-409d-a11b-298ddfb64233",
        "cursor": {
          "ref": "1ab0734d-8efe-4c32-afca-74200a2f9e6d",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0a5d0027-7bad-4b48-a0e4-017379807dbb"
        },
        "item": {
          "id": "c879dcd7-c47d-409d-a11b-298ddfb64233",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "749f61e0-78e0-4a54-b885-02a0b35d7da5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "870c3fb8-e027-4f34-bfca-0921be9c051f",
        "cursor": {
          "ref": "5f759012-cc90-4797-9aac-28ce07bb44f4",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "8d49f908-de83-4ed5-a8f4-5bc08f91c096"
        },
        "item": {
          "id": "870c3fb8-e027-4f34-bfca-0921be9c051f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d18a93a2-79b4-486c-879d-0ec9404a6c33",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "870c3fb8-e027-4f34-bfca-0921be9c051f",
        "cursor": {
          "ref": "5f759012-cc90-4797-9aac-28ce07bb44f4",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "8d49f908-de83-4ed5-a8f4-5bc08f91c096"
        },
        "item": {
          "id": "870c3fb8-e027-4f34-bfca-0921be9c051f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d18a93a2-79b4-486c-879d-0ec9404a6c33",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "502f9f21-0ebb-421d-80fc-6148106c7b5a",
        "cursor": {
          "ref": "50352f21-13da-4767-ae63-2b90f453f72a",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "5d22385d-b462-4cd0-bcfb-cbb397e35eae"
        },
        "item": {
          "id": "502f9f21-0ebb-421d-80fc-6148106c7b5a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "60f370f7-39e1-4589-8ce8-6bd4e22a93e7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "502f9f21-0ebb-421d-80fc-6148106c7b5a",
        "cursor": {
          "ref": "50352f21-13da-4767-ae63-2b90f453f72a",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "5d22385d-b462-4cd0-bcfb-cbb397e35eae"
        },
        "item": {
          "id": "502f9f21-0ebb-421d-80fc-6148106c7b5a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "60f370f7-39e1-4589-8ce8-6bd4e22a93e7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "4e004748-fd55-4937-9944-613728da39a7",
        "cursor": {
          "ref": "c1bc5999-1aa6-44b4-852c-28f9551e6538",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "8b0e28a8-3c58-46e0-b3aa-c8f02fac7e39"
        },
        "item": {
          "id": "4e004748-fd55-4937-9944-613728da39a7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "686d2bc2-f001-4523-bc06-7844fbd2ae82",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "4e004748-fd55-4937-9944-613728da39a7",
        "cursor": {
          "ref": "c1bc5999-1aa6-44b4-852c-28f9551e6538",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "8b0e28a8-3c58-46e0-b3aa-c8f02fac7e39"
        },
        "item": {
          "id": "4e004748-fd55-4937-9944-613728da39a7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "686d2bc2-f001-4523-bc06-7844fbd2ae82",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "028c8d67-80f8-4949-8dcb-2d94d0149b4a",
        "cursor": {
          "ref": "bb90df5c-d311-454c-9a8f-9b6b785e88a0",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "04c13857-697b-44df-915b-94de07fe6756"
        },
        "item": {
          "id": "028c8d67-80f8-4949-8dcb-2d94d0149b4a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "44f9caa3-0722-4151-9985-b28bd032e84c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "028c8d67-80f8-4949-8dcb-2d94d0149b4a",
        "cursor": {
          "ref": "bb90df5c-d311-454c-9a8f-9b6b785e88a0",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "04c13857-697b-44df-915b-94de07fe6756"
        },
        "item": {
          "id": "028c8d67-80f8-4949-8dcb-2d94d0149b4a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "44f9caa3-0722-4151-9985-b28bd032e84c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "cf2570de-719d-4216-ae4b-fefbb6ddcf3f",
        "cursor": {
          "ref": "3d5396d7-71d5-48a1-a1d1-ed5099547068",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "5ec7d81e-e534-466d-9b55-25dadea84f48"
        },
        "item": {
          "id": "cf2570de-719d-4216-ae4b-fefbb6ddcf3f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "fab2af39-191c-43cd-b2f2-153e38f47b8c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "cf2570de-719d-4216-ae4b-fefbb6ddcf3f",
        "cursor": {
          "ref": "3d5396d7-71d5-48a1-a1d1-ed5099547068",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "5ec7d81e-e534-466d-9b55-25dadea84f48"
        },
        "item": {
          "id": "cf2570de-719d-4216-ae4b-fefbb6ddcf3f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "fab2af39-191c-43cd-b2f2-153e38f47b8c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "e6f6d433-5661-4f13-8142-a8758f689b6a",
        "cursor": {
          "ref": "3fc19ef1-1733-4875-89ea-313ed913ccd8",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "42132028-e56f-4f4d-84c5-2f9f0f84e4ed"
        },
        "item": {
          "id": "e6f6d433-5661-4f13-8142-a8758f689b6a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "323edf9f-2252-42bb-8276-0131dcaefcb6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "e6f6d433-5661-4f13-8142-a8758f689b6a",
        "cursor": {
          "ref": "3fc19ef1-1733-4875-89ea-313ed913ccd8",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "42132028-e56f-4f4d-84c5-2f9f0f84e4ed"
        },
        "item": {
          "id": "e6f6d433-5661-4f13-8142-a8758f689b6a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "323edf9f-2252-42bb-8276-0131dcaefcb6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "ffc2075d-7284-473a-9b0e-f6f52084f1f5",
        "cursor": {
          "ref": "b1cb60c3-f8db-456b-b82d-9bdd4aa2b997",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "86ccfb54-49b4-4b83-ba3f-cac894fd0cfc"
        },
        "item": {
          "id": "ffc2075d-7284-473a-9b0e-f6f52084f1f5",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e3f0bf45-dd62-467b-a3e7-e415fce980be",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "ffc2075d-7284-473a-9b0e-f6f52084f1f5",
        "cursor": {
          "ref": "b1cb60c3-f8db-456b-b82d-9bdd4aa2b997",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "86ccfb54-49b4-4b83-ba3f-cac894fd0cfc"
        },
        "item": {
          "id": "ffc2075d-7284-473a-9b0e-f6f52084f1f5",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e3f0bf45-dd62-467b-a3e7-e415fce980be",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "dbed2e9b-faec-45e1-98cf-82ae2586b105",
        "cursor": {
          "ref": "369b8f12-5ce8-45bf-b138-16dbaa2962ae",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "fe6bf8d3-6bda-48e4-a715-94a4307c65a7"
        },
        "item": {
          "id": "dbed2e9b-faec-45e1-98cf-82ae2586b105",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "131fba05-7634-407b-a89b-154237edd5ea",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "dbed2e9b-faec-45e1-98cf-82ae2586b105",
        "cursor": {
          "ref": "369b8f12-5ce8-45bf-b138-16dbaa2962ae",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "fe6bf8d3-6bda-48e4-a715-94a4307c65a7"
        },
        "item": {
          "id": "dbed2e9b-faec-45e1-98cf-82ae2586b105",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "131fba05-7634-407b-a89b-154237edd5ea",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "144a70f1-586e-49d0-9d75-a8203993b5ea",
        "cursor": {
          "ref": "dce6db3e-4b3e-4787-9f13-cfbbee19e22c",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "3aa698ca-0965-4d47-bea3-1fb83d641d4c"
        },
        "item": {
          "id": "144a70f1-586e-49d0-9d75-a8203993b5ea",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f8b66bc2-731a-4392-9ffb-6b233d01e1f6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "144a70f1-586e-49d0-9d75-a8203993b5ea",
        "cursor": {
          "ref": "dce6db3e-4b3e-4787-9f13-cfbbee19e22c",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "3aa698ca-0965-4d47-bea3-1fb83d641d4c"
        },
        "item": {
          "id": "144a70f1-586e-49d0-9d75-a8203993b5ea",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f8b66bc2-731a-4392-9ffb-6b233d01e1f6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "66c39052-1cb9-4f08-887f-cb66a3f22252",
        "cursor": {
          "ref": "273e1733-1c2a-43e7-ac38-1ff8a8b36aaf",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8c4c08c1-d2e8-4326-97ef-54b6e5e53194"
        },
        "item": {
          "id": "66c39052-1cb9-4f08-887f-cb66a3f22252",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4409a6a1-0984-469e-bd43-a653fcd5528c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "66c39052-1cb9-4f08-887f-cb66a3f22252",
        "cursor": {
          "ref": "273e1733-1c2a-43e7-ac38-1ff8a8b36aaf",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8c4c08c1-d2e8-4326-97ef-54b6e5e53194"
        },
        "item": {
          "id": "66c39052-1cb9-4f08-887f-cb66a3f22252",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4409a6a1-0984-469e-bd43-a653fcd5528c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "0fbe2272-aca4-4e53-9959-05a3c3aa2e31",
        "cursor": {
          "ref": "b024eddc-0b76-40ff-b237-d849d9f5505e",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "23a27f1f-e66a-4bac-932e-ecccabe23243"
        },
        "item": {
          "id": "0fbe2272-aca4-4e53-9959-05a3c3aa2e31",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "16262b2b-4369-443d-9882-182a7de3c41b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "0fbe2272-aca4-4e53-9959-05a3c3aa2e31",
        "cursor": {
          "ref": "b024eddc-0b76-40ff-b237-d849d9f5505e",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "23a27f1f-e66a-4bac-932e-ecccabe23243"
        },
        "item": {
          "id": "0fbe2272-aca4-4e53-9959-05a3c3aa2e31",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "16262b2b-4369-443d-9882-182a7de3c41b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "37b621fe-37b2-4cc8-a810-b7648ba9031c",
        "cursor": {
          "ref": "61093e69-ce29-4552-93d8-6c0cd7a57934",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "5d9a81cd-009d-4695-bd09-0c9d58554706"
        },
        "item": {
          "id": "37b621fe-37b2-4cc8-a810-b7648ba9031c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f6f2567e-cebe-44ab-bdd4-01fa2acfc74d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "37b621fe-37b2-4cc8-a810-b7648ba9031c",
        "cursor": {
          "ref": "61093e69-ce29-4552-93d8-6c0cd7a57934",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "5d9a81cd-009d-4695-bd09-0c9d58554706"
        },
        "item": {
          "id": "37b621fe-37b2-4cc8-a810-b7648ba9031c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f6f2567e-cebe-44ab-bdd4-01fa2acfc74d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "ca4cf12a-e077-4991-9f2a-c41132063a29",
        "cursor": {
          "ref": "45b2b50d-0a4c-44cd-a2fb-861076225669",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ff95100d-f84b-4c92-8a95-4772e3f87f68"
        },
        "item": {
          "id": "ca4cf12a-e077-4991-9f2a-c41132063a29",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "1785b44e-08f0-4f0c-be63-bb9812c48654",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "ca4cf12a-e077-4991-9f2a-c41132063a29",
        "cursor": {
          "ref": "45b2b50d-0a4c-44cd-a2fb-861076225669",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ff95100d-f84b-4c92-8a95-4772e3f87f68"
        },
        "item": {
          "id": "ca4cf12a-e077-4991-9f2a-c41132063a29",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "1785b44e-08f0-4f0c-be63-bb9812c48654",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "236f8d5f-dfeb-419f-8f03-da40144e38c8",
        "cursor": {
          "ref": "0c46272a-7f5c-42b6-98a6-c4d7d4a1a843",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "4b09c1c7-b2b6-4355-90db-9e8d4874003f"
        },
        "item": {
          "id": "236f8d5f-dfeb-419f-8f03-da40144e38c8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7d4bbb92-99b7-4213-bcf4-8fe636efc1b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "236f8d5f-dfeb-419f-8f03-da40144e38c8",
        "cursor": {
          "ref": "0c46272a-7f5c-42b6-98a6-c4d7d4a1a843",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "4b09c1c7-b2b6-4355-90db-9e8d4874003f"
        },
        "item": {
          "id": "236f8d5f-dfeb-419f-8f03-da40144e38c8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7d4bbb92-99b7-4213-bcf4-8fe636efc1b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "002836d9-a546-444f-a94e-a741d5d810f7",
        "cursor": {
          "ref": "d44e8144-0080-433c-8b80-267f74593a5e",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "9980441b-d8f0-4d18-9719-f705272d61ca"
        },
        "item": {
          "id": "002836d9-a546-444f-a94e-a741d5d810f7",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "6511ce46-5e19-4f84-b19a-5e073214c18b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "002836d9-a546-444f-a94e-a741d5d810f7",
        "cursor": {
          "ref": "d44e8144-0080-433c-8b80-267f74593a5e",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "9980441b-d8f0-4d18-9719-f705272d61ca"
        },
        "item": {
          "id": "002836d9-a546-444f-a94e-a741d5d810f7",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "6511ce46-5e19-4f84-b19a-5e073214c18b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "dad289cb-58f7-4b88-b25b-6172481b291d",
        "cursor": {
          "ref": "ffb930bf-f19d-4b30-a3fa-cefe66f7d36d",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "5797f386-76f6-4893-bb97-58c7a885c903"
        },
        "item": {
          "id": "dad289cb-58f7-4b88-b25b-6172481b291d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "c6f8c78b-2d04-4f55-99ff-0c239536addd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "dad289cb-58f7-4b88-b25b-6172481b291d",
        "cursor": {
          "ref": "ffb930bf-f19d-4b30-a3fa-cefe66f7d36d",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "5797f386-76f6-4893-bb97-58c7a885c903"
        },
        "item": {
          "id": "dad289cb-58f7-4b88-b25b-6172481b291d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "c6f8c78b-2d04-4f55-99ff-0c239536addd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "b76af8c1-1032-4d9e-8c6c-75450def4c13",
        "cursor": {
          "ref": "8b53a484-e113-4db8-bda5-9276c9352f88",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "0d00bd50-6b9e-4861-95d2-8f0dc036c0ba"
        },
        "item": {
          "id": "b76af8c1-1032-4d9e-8c6c-75450def4c13",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "0006a806-f9f6-4a8b-ba7c-e73ad835b92e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "b76af8c1-1032-4d9e-8c6c-75450def4c13",
        "cursor": {
          "ref": "8b53a484-e113-4db8-bda5-9276c9352f88",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "0d00bd50-6b9e-4861-95d2-8f0dc036c0ba"
        },
        "item": {
          "id": "b76af8c1-1032-4d9e-8c6c-75450def4c13",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "0006a806-f9f6-4a8b-ba7c-e73ad835b92e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "4f321513-5e73-400b-8bbd-eab954f75200",
        "cursor": {
          "ref": "c85536a7-ba76-41bd-89c7-0cbf6d54c61a",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f9ac6342-964d-4fd9-9e78-5e2abeacca54"
        },
        "item": {
          "id": "4f321513-5e73-400b-8bbd-eab954f75200",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "63a43561-5bce-4f49-926a-427fb414ef3d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "4f321513-5e73-400b-8bbd-eab954f75200",
        "cursor": {
          "ref": "c85536a7-ba76-41bd-89c7-0cbf6d54c61a",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f9ac6342-964d-4fd9-9e78-5e2abeacca54"
        },
        "item": {
          "id": "4f321513-5e73-400b-8bbd-eab954f75200",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "63a43561-5bce-4f49-926a-427fb414ef3d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "a991eeaf-e3e9-4bbd-92ab-756335242779",
        "cursor": {
          "ref": "89af191d-d2eb-4a1f-a167-3f63954b166d",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c40c5aaa-9b24-4d09-a078-554130eb80ff"
        },
        "item": {
          "id": "a991eeaf-e3e9-4bbd-92ab-756335242779",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0a26802a-bce7-40f5-8f67-f3e509d20873",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "a991eeaf-e3e9-4bbd-92ab-756335242779",
        "cursor": {
          "ref": "89af191d-d2eb-4a1f-a167-3f63954b166d",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c40c5aaa-9b24-4d09-a078-554130eb80ff"
        },
        "item": {
          "id": "a991eeaf-e3e9-4bbd-92ab-756335242779",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0a26802a-bce7-40f5-8f67-f3e509d20873",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "b83364cb-1791-44f8-8d3a-77986ea2b844",
        "cursor": {
          "ref": "92002547-6c96-4696-b840-5bb167b963b8",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ba53fe91-efeb-472e-b74c-acb4810718f7"
        },
        "item": {
          "id": "b83364cb-1791-44f8-8d3a-77986ea2b844",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "5cab853e-e5d0-4bf2-b781-7459a6bef6c9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "b83364cb-1791-44f8-8d3a-77986ea2b844",
        "cursor": {
          "ref": "92002547-6c96-4696-b840-5bb167b963b8",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ba53fe91-efeb-472e-b74c-acb4810718f7"
        },
        "item": {
          "id": "b83364cb-1791-44f8-8d3a-77986ea2b844",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "5cab853e-e5d0-4bf2-b781-7459a6bef6c9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "5956de58-92af-44b4-a697-95db1c908f80",
        "cursor": {
          "ref": "4d9cb480-02a9-4e65-b9c9-a356d84f1be3",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "76f3dc71-6064-46d0-b95b-00df45ee9604"
        },
        "item": {
          "id": "5956de58-92af-44b4-a697-95db1c908f80",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "31646b59-591d-4247-a47b-f04e832a0a21",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "5956de58-92af-44b4-a697-95db1c908f80",
        "cursor": {
          "ref": "4d9cb480-02a9-4e65-b9c9-a356d84f1be3",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "76f3dc71-6064-46d0-b95b-00df45ee9604"
        },
        "item": {
          "id": "5956de58-92af-44b4-a697-95db1c908f80",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "31646b59-591d-4247-a47b-f04e832a0a21",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "ff659351-09e8-49e2-83c2-bfc184145d2a",
        "cursor": {
          "ref": "aa4261c1-a4ab-406c-a0ca-84f9be93fcad",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "250f607a-d491-4317-918b-f9b1cf6383b4"
        },
        "item": {
          "id": "ff659351-09e8-49e2-83c2-bfc184145d2a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "5286848d-db1c-4716-8b43-6c788f09959f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "ff659351-09e8-49e2-83c2-bfc184145d2a",
        "cursor": {
          "ref": "aa4261c1-a4ab-406c-a0ca-84f9be93fcad",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "250f607a-d491-4317-918b-f9b1cf6383b4"
        },
        "item": {
          "id": "ff659351-09e8-49e2-83c2-bfc184145d2a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "5286848d-db1c-4716-8b43-6c788f09959f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "c1e307fa-298d-4c26-8019-f5c553876505",
        "cursor": {
          "ref": "68de7028-1253-4287-852d-049f983153b6",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "9966b962-98d6-496e-b764-469d1d7d7cf2"
        },
        "item": {
          "id": "c1e307fa-298d-4c26-8019-f5c553876505",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "eaff38ce-06e5-4de9-bdb1-7a571d8c6792",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "c1e307fa-298d-4c26-8019-f5c553876505",
        "cursor": {
          "ref": "68de7028-1253-4287-852d-049f983153b6",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "9966b962-98d6-496e-b764-469d1d7d7cf2"
        },
        "item": {
          "id": "c1e307fa-298d-4c26-8019-f5c553876505",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "eaff38ce-06e5-4de9-bdb1-7a571d8c6792",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "1153ac7d-0bff-4213-a4e2-c9a01106b5d1",
        "cursor": {
          "ref": "c93a5f2f-2853-4149-9603-20a1d78bbcd5",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f5e35eb8-f31b-4e03-a68c-61982cf9e047"
        },
        "item": {
          "id": "1153ac7d-0bff-4213-a4e2-c9a01106b5d1",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "3ab35a68-ed1e-4c94-9fb7-2d65b897546e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "1153ac7d-0bff-4213-a4e2-c9a01106b5d1",
        "cursor": {
          "ref": "c93a5f2f-2853-4149-9603-20a1d78bbcd5",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f5e35eb8-f31b-4e03-a68c-61982cf9e047"
        },
        "item": {
          "id": "1153ac7d-0bff-4213-a4e2-c9a01106b5d1",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "3ab35a68-ed1e-4c94-9fb7-2d65b897546e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "7d1c6ba6-da92-465e-a61b-cc092ce01e20",
        "cursor": {
          "ref": "c90f5ed8-9f5e-4702-bb13-8f84ece9c089",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "6c58419c-ff18-4095-8750-a84fd5ee3e83"
        },
        "item": {
          "id": "7d1c6ba6-da92-465e-a61b-cc092ce01e20",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "b81cd89e-8bfc-4d64-b83f-fbbb2b068b1d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "7d1c6ba6-da92-465e-a61b-cc092ce01e20",
        "cursor": {
          "ref": "c90f5ed8-9f5e-4702-bb13-8f84ece9c089",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "6c58419c-ff18-4095-8750-a84fd5ee3e83"
        },
        "item": {
          "id": "7d1c6ba6-da92-465e-a61b-cc092ce01e20",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "b81cd89e-8bfc-4d64-b83f-fbbb2b068b1d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "e1e9c973-c1d2-450c-8edf-9ae5005b0242",
        "cursor": {
          "ref": "b0514dd0-6242-476c-a495-879108498af8",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "37fc4b96-2ea6-4241-9be2-34d2908586d4"
        },
        "item": {
          "id": "e1e9c973-c1d2-450c-8edf-9ae5005b0242",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ae210146-0354-44f8-9a54-04dfedc7d36a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "e1e9c973-c1d2-450c-8edf-9ae5005b0242",
        "cursor": {
          "ref": "b0514dd0-6242-476c-a495-879108498af8",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "37fc4b96-2ea6-4241-9be2-34d2908586d4"
        },
        "item": {
          "id": "e1e9c973-c1d2-450c-8edf-9ae5005b0242",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ae210146-0354-44f8-9a54-04dfedc7d36a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 64,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "a562fcf6-0230-43b2-aa2b-50bfa2e16094",
        "cursor": {
          "ref": "fede8783-f8eb-4a3f-8f93-5b380fd81bc2",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6504e0b2-3c13-4a56-9895-6b0daf32e7d4"
        },
        "item": {
          "id": "a562fcf6-0230-43b2-aa2b-50bfa2e16094",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "67c39a09-73b0-4af9-9e36-afd03a2a05c3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "a562fcf6-0230-43b2-aa2b-50bfa2e16094",
        "cursor": {
          "ref": "fede8783-f8eb-4a3f-8f93-5b380fd81bc2",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6504e0b2-3c13-4a56-9895-6b0daf32e7d4"
        },
        "item": {
          "id": "a562fcf6-0230-43b2-aa2b-50bfa2e16094",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "67c39a09-73b0-4af9-9e36-afd03a2a05c3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "ab0c37ed-707e-41f1-821f-4d34e820caf4",
        "cursor": {
          "ref": "83940e38-0969-4ddd-8604-1bddf0583bfa",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8f335682-4ed3-4b5a-bf26-ce470f80655f"
        },
        "item": {
          "id": "ab0c37ed-707e-41f1-821f-4d34e820caf4",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "daaf8369-74a4-47c6-95e9-d543e5258963",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "ab0c37ed-707e-41f1-821f-4d34e820caf4",
        "cursor": {
          "ref": "83940e38-0969-4ddd-8604-1bddf0583bfa",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8f335682-4ed3-4b5a-bf26-ce470f80655f"
        },
        "item": {
          "id": "ab0c37ed-707e-41f1-821f-4d34e820caf4",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "daaf8369-74a4-47c6-95e9-d543e5258963",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "d75ecb93-51f9-4987-9a6f-9b46b9c8e6a7",
        "cursor": {
          "ref": "3e98ac11-c42a-4f5d-9fd3-0102ebc43aa1",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "8ef48cbe-3aa2-4b4f-80b2-96de5020383e"
        },
        "item": {
          "id": "d75ecb93-51f9-4987-9a6f-9b46b9c8e6a7",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "6fb34d61-4355-4ebf-bbf8-d403a342fcfe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "d75ecb93-51f9-4987-9a6f-9b46b9c8e6a7",
        "cursor": {
          "ref": "3e98ac11-c42a-4f5d-9fd3-0102ebc43aa1",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "8ef48cbe-3aa2-4b4f-80b2-96de5020383e"
        },
        "item": {
          "id": "d75ecb93-51f9-4987-9a6f-9b46b9c8e6a7",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "6fb34d61-4355-4ebf-bbf8-d403a342fcfe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "66b887b4-80de-47f6-8e88-222f0240daa2",
        "cursor": {
          "ref": "d4ffa6c8-2414-42a2-955f-bd5694a72998",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f61e3227-68f3-45b7-8aba-4d10110706be"
        },
        "item": {
          "id": "66b887b4-80de-47f6-8e88-222f0240daa2",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f46458c6-55ff-4230-b8bb-28a27bff9a21",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "66b887b4-80de-47f6-8e88-222f0240daa2",
        "cursor": {
          "ref": "d4ffa6c8-2414-42a2-955f-bd5694a72998",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f61e3227-68f3-45b7-8aba-4d10110706be"
        },
        "item": {
          "id": "66b887b4-80de-47f6-8e88-222f0240daa2",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f46458c6-55ff-4230-b8bb-28a27bff9a21",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "955a1f15-6d3d-4579-9b94-9254b6913ca1",
        "cursor": {
          "ref": "48b384b5-fa80-43b3-80c5-1811f4ec20d8",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "85b7a712-cebf-484c-b80e-6531502ead69"
        },
        "item": {
          "id": "955a1f15-6d3d-4579-9b94-9254b6913ca1",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "a4b1fd49-e9fe-447e-83de-5642e3263bc1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "955a1f15-6d3d-4579-9b94-9254b6913ca1",
        "cursor": {
          "ref": "48b384b5-fa80-43b3-80c5-1811f4ec20d8",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "85b7a712-cebf-484c-b80e-6531502ead69"
        },
        "item": {
          "id": "955a1f15-6d3d-4579-9b94-9254b6913ca1",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "a4b1fd49-e9fe-447e-83de-5642e3263bc1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "98b7e76e-3e3d-41ce-987a-3d526ccf7942",
        "cursor": {
          "ref": "4c93d0a3-70ef-409f-8b68-b3430a4ae31d",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "40095c12-7266-4c9e-b115-9ad536967097"
        },
        "item": {
          "id": "98b7e76e-3e3d-41ce-987a-3d526ccf7942",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f95f73ac-dc25-4337-8b71-ddd4c8f7b30c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "98b7e76e-3e3d-41ce-987a-3d526ccf7942",
        "cursor": {
          "ref": "4c93d0a3-70ef-409f-8b68-b3430a4ae31d",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "40095c12-7266-4c9e-b115-9ad536967097"
        },
        "item": {
          "id": "98b7e76e-3e3d-41ce-987a-3d526ccf7942",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f95f73ac-dc25-4337-8b71-ddd4c8f7b30c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "6968bc49-b1ab-4547-a64a-b5147fb01047",
        "cursor": {
          "ref": "4a64877d-3972-4f6e-9c1f-add900cdbc92",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e71b4609-aefe-49a8-8188-75d4dbb4f75d"
        },
        "item": {
          "id": "6968bc49-b1ab-4547-a64a-b5147fb01047",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "284dc0e0-ada2-4192-9ab0-f75f2cefe9aa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "6968bc49-b1ab-4547-a64a-b5147fb01047",
        "cursor": {
          "ref": "4a64877d-3972-4f6e-9c1f-add900cdbc92",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e71b4609-aefe-49a8-8188-75d4dbb4f75d"
        },
        "item": {
          "id": "6968bc49-b1ab-4547-a64a-b5147fb01047",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "284dc0e0-ada2-4192-9ab0-f75f2cefe9aa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "28d45ecc-432d-4573-a9f3-6d9245cf51ef",
        "cursor": {
          "ref": "361736c4-9495-423a-b8e0-d4c61f49f86a",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "cec29a15-cfc4-4ba6-a8e9-36ff05d03303"
        },
        "item": {
          "id": "28d45ecc-432d-4573-a9f3-6d9245cf51ef",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "0c7f193a-ee89-4e3f-a9e9-5df796c127b3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "28d45ecc-432d-4573-a9f3-6d9245cf51ef",
        "cursor": {
          "ref": "361736c4-9495-423a-b8e0-d4c61f49f86a",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "cec29a15-cfc4-4ba6-a8e9-36ff05d03303"
        },
        "item": {
          "id": "28d45ecc-432d-4573-a9f3-6d9245cf51ef",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "0c7f193a-ee89-4e3f-a9e9-5df796c127b3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "773ed89e-372e-46f9-9f81-429705d8857c",
        "cursor": {
          "ref": "4d0b3de5-a8ac-457b-bed0-23d07d8d4f3e",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "47eec6f5-5058-43fb-8cd6-f5a7233c2ecc"
        },
        "item": {
          "id": "773ed89e-372e-46f9-9f81-429705d8857c",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5a408c0b-58ff-4f1b-8255-ff2091ef133a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "773ed89e-372e-46f9-9f81-429705d8857c",
        "cursor": {
          "ref": "4d0b3de5-a8ac-457b-bed0-23d07d8d4f3e",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "47eec6f5-5058-43fb-8cd6-f5a7233c2ecc"
        },
        "item": {
          "id": "773ed89e-372e-46f9-9f81-429705d8857c",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5a408c0b-58ff-4f1b-8255-ff2091ef133a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "e3bb0a8b-c4b5-480a-870e-2a805822d313",
        "cursor": {
          "ref": "81419ee8-9af5-4217-9dc5-caf34cbe1077",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "16faa68c-4ed0-40d6-8a70-079ed988fc7a"
        },
        "item": {
          "id": "e3bb0a8b-c4b5-480a-870e-2a805822d313",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "7c71301e-f3f6-4e20-8acc-87adca32d33f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "e3bb0a8b-c4b5-480a-870e-2a805822d313",
        "cursor": {
          "ref": "81419ee8-9af5-4217-9dc5-caf34cbe1077",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "16faa68c-4ed0-40d6-8a70-079ed988fc7a"
        },
        "item": {
          "id": "e3bb0a8b-c4b5-480a-870e-2a805822d313",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "7c71301e-f3f6-4e20-8acc-87adca32d33f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "3b84a41a-87fb-4164-b10d-baaf99b22fdb",
        "cursor": {
          "ref": "9bbb56c5-f9e1-4225-b000-6ee98c82d8d2",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "44a4bccb-6220-42fb-8bf6-2d3180266b59"
        },
        "item": {
          "id": "3b84a41a-87fb-4164-b10d-baaf99b22fdb",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "28bdaf88-0457-4845-b7a7-b6c0fc185aca",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "3b84a41a-87fb-4164-b10d-baaf99b22fdb",
        "cursor": {
          "ref": "9bbb56c5-f9e1-4225-b000-6ee98c82d8d2",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "44a4bccb-6220-42fb-8bf6-2d3180266b59"
        },
        "item": {
          "id": "3b84a41a-87fb-4164-b10d-baaf99b22fdb",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "28bdaf88-0457-4845-b7a7-b6c0fc185aca",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "fec71c0f-4bab-4a88-93bb-c6969874573d",
        "cursor": {
          "ref": "47cd05c4-c0f2-41b2-a52c-d660e35d5868",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c5d4295c-b5fa-447c-b0d5-c8c16583528a"
        },
        "item": {
          "id": "fec71c0f-4bab-4a88-93bb-c6969874573d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c769d27f-27a4-46a5-a001-32e43fd3d55e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "fec71c0f-4bab-4a88-93bb-c6969874573d",
        "cursor": {
          "ref": "47cd05c4-c0f2-41b2-a52c-d660e35d5868",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c5d4295c-b5fa-447c-b0d5-c8c16583528a"
        },
        "item": {
          "id": "fec71c0f-4bab-4a88-93bb-c6969874573d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c769d27f-27a4-46a5-a001-32e43fd3d55e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "0b298ac0-3c8c-4fd0-99ca-5e5b83a3359e",
        "cursor": {
          "ref": "2cbc9bb3-fdce-4e69-b668-c5030a799531",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "08b2bf76-5e04-411b-9f9d-6a1faae1d72d"
        },
        "item": {
          "id": "0b298ac0-3c8c-4fd0-99ca-5e5b83a3359e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "86cac4e0-a87b-412f-a35c-26211cb831dc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "0b298ac0-3c8c-4fd0-99ca-5e5b83a3359e",
        "cursor": {
          "ref": "2cbc9bb3-fdce-4e69-b668-c5030a799531",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "08b2bf76-5e04-411b-9f9d-6a1faae1d72d"
        },
        "item": {
          "id": "0b298ac0-3c8c-4fd0-99ca-5e5b83a3359e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "86cac4e0-a87b-412f-a35c-26211cb831dc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "2bcfd555-5bc8-4d6e-8f2b-0dc555786dca",
        "cursor": {
          "ref": "ec9d4f4a-b579-4592-982c-3a1655ae2563",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "2d2d32b2-8478-422d-9d05-320e14510ff5"
        },
        "item": {
          "id": "2bcfd555-5bc8-4d6e-8f2b-0dc555786dca",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "93502b0b-ec4d-4639-94af-d5130307d94f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "2bcfd555-5bc8-4d6e-8f2b-0dc555786dca",
        "cursor": {
          "ref": "ec9d4f4a-b579-4592-982c-3a1655ae2563",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "2d2d32b2-8478-422d-9d05-320e14510ff5"
        },
        "item": {
          "id": "2bcfd555-5bc8-4d6e-8f2b-0dc555786dca",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "93502b0b-ec4d-4639-94af-d5130307d94f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "d860c354-0133-4e2a-b3e2-de083013a04e",
        "cursor": {
          "ref": "1f2a32b7-446a-4584-be7c-2ba65c130b59",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "621d2ceb-0818-4249-b2af-2eea19511ea4"
        },
        "item": {
          "id": "d860c354-0133-4e2a-b3e2-de083013a04e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "62e28db9-189b-4907-9fe7-40e66fbaa6ae",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "d860c354-0133-4e2a-b3e2-de083013a04e",
        "cursor": {
          "ref": "1f2a32b7-446a-4584-be7c-2ba65c130b59",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "621d2ceb-0818-4249-b2af-2eea19511ea4"
        },
        "item": {
          "id": "d860c354-0133-4e2a-b3e2-de083013a04e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "62e28db9-189b-4907-9fe7-40e66fbaa6ae",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "f25f2994-58b2-4dc1-b866-bb7fe1651806",
        "cursor": {
          "ref": "d998806d-62c0-43df-9f99-f2304d53f33a",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5cc9c3ae-102c-49a0-b25d-1840a92ffc98"
        },
        "item": {
          "id": "f25f2994-58b2-4dc1-b866-bb7fe1651806",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6bc88f6c-1e9c-4e40-a863-709b56cf123e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "f25f2994-58b2-4dc1-b866-bb7fe1651806",
        "cursor": {
          "ref": "d998806d-62c0-43df-9f99-f2304d53f33a",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5cc9c3ae-102c-49a0-b25d-1840a92ffc98"
        },
        "item": {
          "id": "f25f2994-58b2-4dc1-b866-bb7fe1651806",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6bc88f6c-1e9c-4e40-a863-709b56cf123e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "e843fd57-b7a3-44b0-87c8-dc215bac481e",
        "cursor": {
          "ref": "1e284a29-d0a9-45ac-8b6c-54474355caf5",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "75925d4f-2ac9-4d51-afe0-abd543af0c88"
        },
        "item": {
          "id": "e843fd57-b7a3-44b0-87c8-dc215bac481e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f984ceb7-c43e-4198-89a4-24d1a440bfb5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "e843fd57-b7a3-44b0-87c8-dc215bac481e",
        "cursor": {
          "ref": "1e284a29-d0a9-45ac-8b6c-54474355caf5",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "75925d4f-2ac9-4d51-afe0-abd543af0c88"
        },
        "item": {
          "id": "e843fd57-b7a3-44b0-87c8-dc215bac481e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f984ceb7-c43e-4198-89a4-24d1a440bfb5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "c762a16c-ff18-419d-b14e-7f539b0dd056",
        "cursor": {
          "ref": "09a204fd-b5f0-485e-9a6e-843540bd64e8",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e14537b8-513c-4c88-9923-20c194b0d0af"
        },
        "item": {
          "id": "c762a16c-ff18-419d-b14e-7f539b0dd056",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "6fd2e883-11b9-447f-9497-043649b2e7fc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "c762a16c-ff18-419d-b14e-7f539b0dd056",
        "cursor": {
          "ref": "09a204fd-b5f0-485e-9a6e-843540bd64e8",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e14537b8-513c-4c88-9923-20c194b0d0af"
        },
        "item": {
          "id": "c762a16c-ff18-419d-b14e-7f539b0dd056",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "6fd2e883-11b9-447f-9497-043649b2e7fc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "18012238-291d-4335-971a-36398ac361d5",
        "cursor": {
          "ref": "a9ea878e-87c6-4427-90ea-06d90d6978c0",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "69daebb8-b291-4f84-a750-c1768f566293"
        },
        "item": {
          "id": "18012238-291d-4335-971a-36398ac361d5",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "f71a8a12-5b13-4683-9385-8b14f6a7fc26",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "18012238-291d-4335-971a-36398ac361d5",
        "cursor": {
          "ref": "a9ea878e-87c6-4427-90ea-06d90d6978c0",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "69daebb8-b291-4f84-a750-c1768f566293"
        },
        "item": {
          "id": "18012238-291d-4335-971a-36398ac361d5",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "f71a8a12-5b13-4683-9385-8b14f6a7fc26",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "b9fc386e-b391-4871-8b48-c452948e7b37",
        "cursor": {
          "ref": "e7469961-915d-4c13-81e8-be378b948ea6",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a0557c26-76bc-4467-bf36-400f26ff2ca8"
        },
        "item": {
          "id": "b9fc386e-b391-4871-8b48-c452948e7b37",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5aec7c68-ba2b-4d84-9318-8d06b8df2107",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "b9fc386e-b391-4871-8b48-c452948e7b37",
        "cursor": {
          "ref": "e7469961-915d-4c13-81e8-be378b948ea6",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a0557c26-76bc-4467-bf36-400f26ff2ca8"
        },
        "item": {
          "id": "b9fc386e-b391-4871-8b48-c452948e7b37",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5aec7c68-ba2b-4d84-9318-8d06b8df2107",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "a94074ff-e41e-4ffd-ba3a-eea609f7bef2",
        "cursor": {
          "ref": "0f60170c-4101-460f-a2ec-622c2c058685",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "81832bed-db26-4c83-8764-bc93a3004aa1"
        },
        "item": {
          "id": "a94074ff-e41e-4ffd-ba3a-eea609f7bef2",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ef23fbfd-8b0d-4cce-bab9-7422b0a5200c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "a94074ff-e41e-4ffd-ba3a-eea609f7bef2",
        "cursor": {
          "ref": "0f60170c-4101-460f-a2ec-622c2c058685",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "81832bed-db26-4c83-8764-bc93a3004aa1"
        },
        "item": {
          "id": "a94074ff-e41e-4ffd-ba3a-eea609f7bef2",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ef23fbfd-8b0d-4cce-bab9-7422b0a5200c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "4aec5fff-23d2-4210-bae5-eee1bdde3470",
        "cursor": {
          "ref": "dc804dae-ecc5-4a61-b333-e34ced27fcf8",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "8b3f35c4-4745-49d6-9665-2f3426f3bf22"
        },
        "item": {
          "id": "4aec5fff-23d2-4210-bae5-eee1bdde3470",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "b9f62c3d-a4c8-49da-984f-24f0576072b6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "4aec5fff-23d2-4210-bae5-eee1bdde3470",
        "cursor": {
          "ref": "dc804dae-ecc5-4a61-b333-e34ced27fcf8",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "8b3f35c4-4745-49d6-9665-2f3426f3bf22"
        },
        "item": {
          "id": "4aec5fff-23d2-4210-bae5-eee1bdde3470",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "b9f62c3d-a4c8-49da-984f-24f0576072b6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "f404ef42-25e0-44f1-86fb-70ff43551cc2",
        "cursor": {
          "ref": "06bad43f-3f1d-4586-9751-e93aec9a2ee9",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "0fde65fb-b79c-4782-9c31-19349e7846c8"
        },
        "item": {
          "id": "f404ef42-25e0-44f1-86fb-70ff43551cc2",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "55f5c1e6-5f41-4431-bf14-94449bd4bb9c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "f404ef42-25e0-44f1-86fb-70ff43551cc2",
        "cursor": {
          "ref": "06bad43f-3f1d-4586-9751-e93aec9a2ee9",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "0fde65fb-b79c-4782-9c31-19349e7846c8"
        },
        "item": {
          "id": "f404ef42-25e0-44f1-86fb-70ff43551cc2",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "55f5c1e6-5f41-4431-bf14-94449bd4bb9c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "6283790a-0e24-4ff0-9502-1945e3060a5e",
        "cursor": {
          "ref": "c78700cc-7199-40f1-a782-9874b154c810",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a5ef1e20-0fbc-4647-9847-388cce82e5a0"
        },
        "item": {
          "id": "6283790a-0e24-4ff0-9502-1945e3060a5e",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "166e7ccb-6d9a-410c-9438-60930b6378b8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "6283790a-0e24-4ff0-9502-1945e3060a5e",
        "cursor": {
          "ref": "c78700cc-7199-40f1-a782-9874b154c810",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a5ef1e20-0fbc-4647-9847-388cce82e5a0"
        },
        "item": {
          "id": "6283790a-0e24-4ff0-9502-1945e3060a5e",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "166e7ccb-6d9a-410c-9438-60930b6378b8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "bf83bac6-3d48-43e2-bf7b-d8f374526ac4",
        "cursor": {
          "ref": "3390a764-bf84-47e7-a4bc-d48d27ef2d12",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c3b097a1-f473-4ebb-a600-1e027caf14c9"
        },
        "item": {
          "id": "bf83bac6-3d48-43e2-bf7b-d8f374526ac4",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "bbb329f7-b4d5-42c5-a939-240b1a9d97b5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "bf83bac6-3d48-43e2-bf7b-d8f374526ac4",
        "cursor": {
          "ref": "3390a764-bf84-47e7-a4bc-d48d27ef2d12",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c3b097a1-f473-4ebb-a600-1e027caf14c9"
        },
        "item": {
          "id": "bf83bac6-3d48-43e2-bf7b-d8f374526ac4",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "bbb329f7-b4d5-42c5-a939-240b1a9d97b5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "1140c1b5-b136-4f75-a83a-00ceca54dbcd",
        "cursor": {
          "ref": "25a9151a-ffd8-4dab-a8c7-486a70e4702c",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "e5f6610e-4621-4445-856f-1da03bff4d2a"
        },
        "item": {
          "id": "1140c1b5-b136-4f75-a83a-00ceca54dbcd",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "c30ed058-5de2-47b0-8d15-72609c9c7a7d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "1140c1b5-b136-4f75-a83a-00ceca54dbcd",
        "cursor": {
          "ref": "25a9151a-ffd8-4dab-a8c7-486a70e4702c",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "e5f6610e-4621-4445-856f-1da03bff4d2a"
        },
        "item": {
          "id": "1140c1b5-b136-4f75-a83a-00ceca54dbcd",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "c30ed058-5de2-47b0-8d15-72609c9c7a7d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "511ca484-a996-4ddc-84d2-2866b8b9f71e",
        "cursor": {
          "ref": "70b3b339-b77b-4ed1-8f7d-40f757396898",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "aac7dd1d-f1a8-4677-aff5-853140dbae66"
        },
        "item": {
          "id": "511ca484-a996-4ddc-84d2-2866b8b9f71e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "9cbf6895-13c3-4e78-8dea-95af9383c821",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "511ca484-a996-4ddc-84d2-2866b8b9f71e",
        "cursor": {
          "ref": "70b3b339-b77b-4ed1-8f7d-40f757396898",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "aac7dd1d-f1a8-4677-aff5-853140dbae66"
        },
        "item": {
          "id": "511ca484-a996-4ddc-84d2-2866b8b9f71e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "9cbf6895-13c3-4e78-8dea-95af9383c821",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "b0061669-4187-4c2e-8db9-376c84bf72ec",
        "cursor": {
          "ref": "4dcc7b1e-6b41-48e7-b730-d8be12599845",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "62f0a2f9-774c-4a0e-b7e3-f030ddd9e352"
        },
        "item": {
          "id": "b0061669-4187-4c2e-8db9-376c84bf72ec",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "52c37c1e-0a31-4029-ae41-a6abcb7c77d5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "b0061669-4187-4c2e-8db9-376c84bf72ec",
        "cursor": {
          "ref": "4dcc7b1e-6b41-48e7-b730-d8be12599845",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "62f0a2f9-774c-4a0e-b7e3-f030ddd9e352"
        },
        "item": {
          "id": "b0061669-4187-4c2e-8db9-376c84bf72ec",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "52c37c1e-0a31-4029-ae41-a6abcb7c77d5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "207d9a0d-2e33-4147-824f-dcbfb288b719",
        "cursor": {
          "ref": "17615773-689d-4f23-b3fe-80bec699c852",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8b82af53-8429-431c-9d84-35a198371b05"
        },
        "item": {
          "id": "207d9a0d-2e33-4147-824f-dcbfb288b719",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "be0c5253-84e1-4c62-be4e-315bea34c45f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "207d9a0d-2e33-4147-824f-dcbfb288b719",
        "cursor": {
          "ref": "17615773-689d-4f23-b3fe-80bec699c852",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8b82af53-8429-431c-9d84-35a198371b05"
        },
        "item": {
          "id": "207d9a0d-2e33-4147-824f-dcbfb288b719",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "be0c5253-84e1-4c62-be4e-315bea34c45f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "08fc9b90-a09d-4bf7-ac45-d3da8d0897bc",
        "cursor": {
          "ref": "261e4085-91fa-428e-b820-fb486932c43e",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "5eb2bb51-208b-4b18-a253-8acf59c6fcfc"
        },
        "item": {
          "id": "08fc9b90-a09d-4bf7-ac45-d3da8d0897bc",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "61a4c3c2-1ed7-45c1-b045-84687bd794a8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "08fc9b90-a09d-4bf7-ac45-d3da8d0897bc",
        "cursor": {
          "ref": "261e4085-91fa-428e-b820-fb486932c43e",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "5eb2bb51-208b-4b18-a253-8acf59c6fcfc"
        },
        "item": {
          "id": "08fc9b90-a09d-4bf7-ac45-d3da8d0897bc",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "61a4c3c2-1ed7-45c1-b045-84687bd794a8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "2d807dd9-381d-4282-84a7-7477653d7a33",
        "cursor": {
          "ref": "15e83162-bf38-4675-af33-135f795dd0a6",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ba9f96da-5251-4333-8733-57a43ab9daa7"
        },
        "item": {
          "id": "2d807dd9-381d-4282-84a7-7477653d7a33",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b95e5b9a-ae20-43dc-b68a-5e8871c2a7e8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 60,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "2d807dd9-381d-4282-84a7-7477653d7a33",
        "cursor": {
          "ref": "15e83162-bf38-4675-af33-135f795dd0a6",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ba9f96da-5251-4333-8733-57a43ab9daa7"
        },
        "item": {
          "id": "2d807dd9-381d-4282-84a7-7477653d7a33",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b95e5b9a-ae20-43dc-b68a-5e8871c2a7e8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 60,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "838f6fed-7583-42ba-8256-63d20819a924",
        "cursor": {
          "ref": "61e80dd7-1b12-40bf-b94d-e9dd02716438",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "cf89b6e8-80fd-44e7-a3ed-afe87f519ea7"
        },
        "item": {
          "id": "838f6fed-7583-42ba-8256-63d20819a924",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "1d320e8b-506b-4748-a0f0-2e2a7935009b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "838f6fed-7583-42ba-8256-63d20819a924",
        "cursor": {
          "ref": "61e80dd7-1b12-40bf-b94d-e9dd02716438",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "cf89b6e8-80fd-44e7-a3ed-afe87f519ea7"
        },
        "item": {
          "id": "838f6fed-7583-42ba-8256-63d20819a924",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "1d320e8b-506b-4748-a0f0-2e2a7935009b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "7d78d7a0-3739-4878-911a-f972ebae7133",
        "cursor": {
          "ref": "12e78304-0f8c-42ad-b5a9-8a05cc495c18",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "4eb2a99d-84b2-4183-8005-6d728fb5a026"
        },
        "item": {
          "id": "7d78d7a0-3739-4878-911a-f972ebae7133",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c683cd2b-fba8-4361-befb-3207d965d6f5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "7d78d7a0-3739-4878-911a-f972ebae7133",
        "cursor": {
          "ref": "12e78304-0f8c-42ad-b5a9-8a05cc495c18",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "4eb2a99d-84b2-4183-8005-6d728fb5a026"
        },
        "item": {
          "id": "7d78d7a0-3739-4878-911a-f972ebae7133",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c683cd2b-fba8-4361-befb-3207d965d6f5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "79c9240b-9cb5-46f3-a2ea-aeb5ccbd6759",
        "cursor": {
          "ref": "4917a886-8fc9-4c68-a40b-233214c60b04",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "5a7682ab-89fb-43c0-bb22-ecd51cffa736"
        },
        "item": {
          "id": "79c9240b-9cb5-46f3-a2ea-aeb5ccbd6759",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "037244e7-acda-4984-bf4e-7d687e0d4d3b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "79c9240b-9cb5-46f3-a2ea-aeb5ccbd6759",
        "cursor": {
          "ref": "4917a886-8fc9-4c68-a40b-233214c60b04",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "5a7682ab-89fb-43c0-bb22-ecd51cffa736"
        },
        "item": {
          "id": "79c9240b-9cb5-46f3-a2ea-aeb5ccbd6759",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "037244e7-acda-4984-bf4e-7d687e0d4d3b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "36df4711-3228-4e10-9fa7-cb7fb27ffb1d",
        "cursor": {
          "ref": "14062141-b5f6-4312-932f-74ba7e524966",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c05a6828-b9f2-4af4-a072-ce81bfb432dd"
        },
        "item": {
          "id": "36df4711-3228-4e10-9fa7-cb7fb27ffb1d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "2e5a91d8-6f69-40d2-8e64-d0785c136ee1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "36df4711-3228-4e10-9fa7-cb7fb27ffb1d",
        "cursor": {
          "ref": "14062141-b5f6-4312-932f-74ba7e524966",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c05a6828-b9f2-4af4-a072-ce81bfb432dd"
        },
        "item": {
          "id": "36df4711-3228-4e10-9fa7-cb7fb27ffb1d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "2e5a91d8-6f69-40d2-8e64-d0785c136ee1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "09543035-5ec2-4100-a12f-6e3b118196cf",
        "cursor": {
          "ref": "38422fd1-9869-42e8-9055-0264089015ec",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "584a2ada-e838-4e15-8c2d-c4a2cf4d95ed"
        },
        "item": {
          "id": "09543035-5ec2-4100-a12f-6e3b118196cf",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c8a5607d-4f89-408a-8566-64da3d6b8e65",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "09543035-5ec2-4100-a12f-6e3b118196cf",
        "cursor": {
          "ref": "38422fd1-9869-42e8-9055-0264089015ec",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "584a2ada-e838-4e15-8c2d-c4a2cf4d95ed"
        },
        "item": {
          "id": "09543035-5ec2-4100-a12f-6e3b118196cf",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c8a5607d-4f89-408a-8566-64da3d6b8e65",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "ce9b1fd2-9a84-451a-b68f-7cff7319b5e5",
        "cursor": {
          "ref": "ad4ee71e-92b9-4e83-89e1-e0105402261b",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "cc4d24fd-3d99-4fb2-88b8-5ee2eb1ffdf0"
        },
        "item": {
          "id": "ce9b1fd2-9a84-451a-b68f-7cff7319b5e5",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "153863dd-707c-4bca-9081-818fe5bf7865",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "ce9b1fd2-9a84-451a-b68f-7cff7319b5e5",
        "cursor": {
          "ref": "ad4ee71e-92b9-4e83-89e1-e0105402261b",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "cc4d24fd-3d99-4fb2-88b8-5ee2eb1ffdf0"
        },
        "item": {
          "id": "ce9b1fd2-9a84-451a-b68f-7cff7319b5e5",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "153863dd-707c-4bca-9081-818fe5bf7865",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "b78eefb3-9364-42b0-95da-7725ebf9f8bf",
        "cursor": {
          "ref": "5ba734db-6fd1-47e0-b71b-55f09258ce5c",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "2486cfd8-211e-4c51-b3ee-a95ca99e00a2"
        },
        "item": {
          "id": "b78eefb3-9364-42b0-95da-7725ebf9f8bf",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0a49134e-4a52-4aa4-947f-01680c89182d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "b78eefb3-9364-42b0-95da-7725ebf9f8bf",
        "cursor": {
          "ref": "5ba734db-6fd1-47e0-b71b-55f09258ce5c",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "2486cfd8-211e-4c51-b3ee-a95ca99e00a2"
        },
        "item": {
          "id": "b78eefb3-9364-42b0-95da-7725ebf9f8bf",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0a49134e-4a52-4aa4-947f-01680c89182d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "64f00469-c867-459f-b769-247a6e1d7d1c",
        "cursor": {
          "ref": "0a66dd85-ebc3-4e3a-9b08-28d93f3a9aa1",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f8e210bf-fb3b-4938-a57e-dba47bd4ebc0"
        },
        "item": {
          "id": "64f00469-c867-459f-b769-247a6e1d7d1c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d74065aa-d69b-4c0a-96b1-470e54ca5fdd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "64f00469-c867-459f-b769-247a6e1d7d1c",
        "cursor": {
          "ref": "0a66dd85-ebc3-4e3a-9b08-28d93f3a9aa1",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f8e210bf-fb3b-4938-a57e-dba47bd4ebc0"
        },
        "item": {
          "id": "64f00469-c867-459f-b769-247a6e1d7d1c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d74065aa-d69b-4c0a-96b1-470e54ca5fdd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "81a0ef39-aed2-43fc-84f3-cea8dd4689a0",
        "cursor": {
          "ref": "318477c7-e4fc-404b-af35-976f165c5ff8",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3194f30a-d548-4140-8a65-b3b8031e767f"
        },
        "item": {
          "id": "81a0ef39-aed2-43fc-84f3-cea8dd4689a0",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c14afc81-0232-4630-a112-98503c0c6a03",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "81a0ef39-aed2-43fc-84f3-cea8dd4689a0",
        "cursor": {
          "ref": "318477c7-e4fc-404b-af35-976f165c5ff8",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3194f30a-d548-4140-8a65-b3b8031e767f"
        },
        "item": {
          "id": "81a0ef39-aed2-43fc-84f3-cea8dd4689a0",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c14afc81-0232-4630-a112-98503c0c6a03",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "33cb6dde-99af-42bd-b3e6-a60d380d9f1c",
        "cursor": {
          "ref": "b5d2e5f2-5af2-43f2-9b4a-be921297eddd",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f3a105cd-95f7-4444-9dca-5e74265b2ec2"
        },
        "item": {
          "id": "33cb6dde-99af-42bd-b3e6-a60d380d9f1c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "63d03681-c697-4498-acf9-22e7ceca3aee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "33cb6dde-99af-42bd-b3e6-a60d380d9f1c",
        "cursor": {
          "ref": "b5d2e5f2-5af2-43f2-9b4a-be921297eddd",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f3a105cd-95f7-4444-9dca-5e74265b2ec2"
        },
        "item": {
          "id": "33cb6dde-99af-42bd-b3e6-a60d380d9f1c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "63d03681-c697-4498-acf9-22e7ceca3aee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "e8324fb1-9d9d-405e-b976-92eca79072a5",
        "cursor": {
          "ref": "b653a1cd-acc2-4183-b6db-764a464cab99",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "6325c8de-79b4-400c-989e-3765340b5c86"
        },
        "item": {
          "id": "e8324fb1-9d9d-405e-b976-92eca79072a5",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d044aefa-0452-4e45-b6d7-c3ec22c83fe0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "e8324fb1-9d9d-405e-b976-92eca79072a5",
        "cursor": {
          "ref": "b653a1cd-acc2-4183-b6db-764a464cab99",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "6325c8de-79b4-400c-989e-3765340b5c86"
        },
        "item": {
          "id": "e8324fb1-9d9d-405e-b976-92eca79072a5",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d044aefa-0452-4e45-b6d7-c3ec22c83fe0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "3e81bcb6-4b43-4833-92ee-3cdedabbb509",
        "cursor": {
          "ref": "d8640338-f289-46e4-a3f9-652f1ef3ae3d",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0446ec07-1712-4532-807d-0216fb5a2db9"
        },
        "item": {
          "id": "3e81bcb6-4b43-4833-92ee-3cdedabbb509",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b7c95556-b60c-4de3-9c37-6d236ea36305",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "3e81bcb6-4b43-4833-92ee-3cdedabbb509",
        "cursor": {
          "ref": "d8640338-f289-46e4-a3f9-652f1ef3ae3d",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0446ec07-1712-4532-807d-0216fb5a2db9"
        },
        "item": {
          "id": "3e81bcb6-4b43-4833-92ee-3cdedabbb509",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b7c95556-b60c-4de3-9c37-6d236ea36305",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "31c77ef0-8b43-4e14-a43d-48236e34dbc9",
        "cursor": {
          "ref": "6398e105-0762-4fdc-8a5c-3f66b21d72f7",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b1711f0b-62fa-4b2b-9b7e-92bbc7683030"
        },
        "item": {
          "id": "31c77ef0-8b43-4e14-a43d-48236e34dbc9",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ff17bcff-1de0-4d8a-9ff0-4a04af53dbbf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "31c77ef0-8b43-4e14-a43d-48236e34dbc9",
        "cursor": {
          "ref": "6398e105-0762-4fdc-8a5c-3f66b21d72f7",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b1711f0b-62fa-4b2b-9b7e-92bbc7683030"
        },
        "item": {
          "id": "31c77ef0-8b43-4e14-a43d-48236e34dbc9",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ff17bcff-1de0-4d8a-9ff0-4a04af53dbbf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "51b31f7f-bfbd-4ffa-85e4-b2e2cc96cda7",
        "cursor": {
          "ref": "77337742-98f6-4114-8ea7-6286e83bf951",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7552559c-7275-4ca5-9156-a2075436c38e"
        },
        "item": {
          "id": "51b31f7f-bfbd-4ffa-85e4-b2e2cc96cda7",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9ca2cfde-44f3-486c-be9f-6f954b1536c9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "51b31f7f-bfbd-4ffa-85e4-b2e2cc96cda7",
        "cursor": {
          "ref": "77337742-98f6-4114-8ea7-6286e83bf951",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7552559c-7275-4ca5-9156-a2075436c38e"
        },
        "item": {
          "id": "51b31f7f-bfbd-4ffa-85e4-b2e2cc96cda7",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9ca2cfde-44f3-486c-be9f-6f954b1536c9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "48f7228d-ddb0-41dc-84a6-948d57f1b491",
        "cursor": {
          "ref": "fa304290-9c9e-4c61-bd91-f0b27283436b",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f378ab0c-6614-48ae-bdef-68d6907e72c3"
        },
        "item": {
          "id": "48f7228d-ddb0-41dc-84a6-948d57f1b491",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e43935c2-92ec-441b-b9b5-c0a3b59c2fa5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "48f7228d-ddb0-41dc-84a6-948d57f1b491",
        "cursor": {
          "ref": "fa304290-9c9e-4c61-bd91-f0b27283436b",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f378ab0c-6614-48ae-bdef-68d6907e72c3"
        },
        "item": {
          "id": "48f7228d-ddb0-41dc-84a6-948d57f1b491",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e43935c2-92ec-441b-b9b5-c0a3b59c2fa5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "81b88c0c-948f-4312-a1af-a1edf980a48a",
        "cursor": {
          "ref": "10951c88-35a0-411e-b227-b37e46a1bf35",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "4308ba91-5e6f-48a9-8024-a30f7467a09b"
        },
        "item": {
          "id": "81b88c0c-948f-4312-a1af-a1edf980a48a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f1b1776b-52dd-4fcc-b0d4-e48d6550f549",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "81b88c0c-948f-4312-a1af-a1edf980a48a",
        "cursor": {
          "ref": "10951c88-35a0-411e-b227-b37e46a1bf35",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "4308ba91-5e6f-48a9-8024-a30f7467a09b"
        },
        "item": {
          "id": "81b88c0c-948f-4312-a1af-a1edf980a48a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f1b1776b-52dd-4fcc-b0d4-e48d6550f549",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "2e5265e1-7703-450e-a1e9-10bcba67f1b4",
        "cursor": {
          "ref": "2a225d68-798e-45ab-a32d-9948761c7cb6",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "67316870-a2f4-4898-a0cd-200889e2bd67"
        },
        "item": {
          "id": "2e5265e1-7703-450e-a1e9-10bcba67f1b4",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d7d71681-6dc8-4653-8999-66da5b3d0d16",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "2e5265e1-7703-450e-a1e9-10bcba67f1b4",
        "cursor": {
          "ref": "2a225d68-798e-45ab-a32d-9948761c7cb6",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "67316870-a2f4-4898-a0cd-200889e2bd67"
        },
        "item": {
          "id": "2e5265e1-7703-450e-a1e9-10bcba67f1b4",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d7d71681-6dc8-4653-8999-66da5b3d0d16",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "cf5549ea-53a5-4584-b413-7ec95bba0680",
        "cursor": {
          "ref": "edd57249-a235-4e47-8be4-453e8e8aa68d",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "bc4ef8c3-37b8-4002-8c24-2d731ff04c16"
        },
        "item": {
          "id": "cf5549ea-53a5-4584-b413-7ec95bba0680",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "6bcfd724-5a34-4468-a4a1-ef331ae57ad0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "cf5549ea-53a5-4584-b413-7ec95bba0680",
        "cursor": {
          "ref": "edd57249-a235-4e47-8be4-453e8e8aa68d",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "bc4ef8c3-37b8-4002-8c24-2d731ff04c16"
        },
        "item": {
          "id": "cf5549ea-53a5-4584-b413-7ec95bba0680",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "6bcfd724-5a34-4468-a4a1-ef331ae57ad0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "e9fe98b7-c85c-41d3-9a6d-84060e8b9be6",
        "cursor": {
          "ref": "91810c6c-6fac-4bd1-8979-00b9509ee59c",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "64e63fab-2139-4c5b-b70e-00943f8457ac"
        },
        "item": {
          "id": "e9fe98b7-c85c-41d3-9a6d-84060e8b9be6",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "22a7b5bf-cd95-416e-a802-2545d0f07561",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "e9fe98b7-c85c-41d3-9a6d-84060e8b9be6",
        "cursor": {
          "ref": "91810c6c-6fac-4bd1-8979-00b9509ee59c",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "64e63fab-2139-4c5b-b70e-00943f8457ac"
        },
        "item": {
          "id": "e9fe98b7-c85c-41d3-9a6d-84060e8b9be6",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "22a7b5bf-cd95-416e-a802-2545d0f07561",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "72ebc777-5619-4984-80cd-c75f8e2bea49",
        "cursor": {
          "ref": "a711ce0f-ab52-4bf9-847c-36ec2638ea45",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6a48d76c-d486-47b1-bda5-761cb868670d"
        },
        "item": {
          "id": "72ebc777-5619-4984-80cd-c75f8e2bea49",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "70dfc8fc-d9e8-4e47-8df0-0916286ad28c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "72ebc777-5619-4984-80cd-c75f8e2bea49",
        "cursor": {
          "ref": "a711ce0f-ab52-4bf9-847c-36ec2638ea45",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6a48d76c-d486-47b1-bda5-761cb868670d"
        },
        "item": {
          "id": "72ebc777-5619-4984-80cd-c75f8e2bea49",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "70dfc8fc-d9e8-4e47-8df0-0916286ad28c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "8ec03ef6-ab22-4f9b-be7c-a46c39a0a7b2",
        "cursor": {
          "ref": "651c9ba7-505a-4702-a808-7f7ab834ff8e",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f2cbdf1a-5e00-4967-8719-99bc3b0e174e"
        },
        "item": {
          "id": "8ec03ef6-ab22-4f9b-be7c-a46c39a0a7b2",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ca45e76b-ba27-415d-a612-eaf12a77fa5e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "8ec03ef6-ab22-4f9b-be7c-a46c39a0a7b2",
        "cursor": {
          "ref": "651c9ba7-505a-4702-a808-7f7ab834ff8e",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f2cbdf1a-5e00-4967-8719-99bc3b0e174e"
        },
        "item": {
          "id": "8ec03ef6-ab22-4f9b-be7c-a46c39a0a7b2",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ca45e76b-ba27-415d-a612-eaf12a77fa5e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "22e0c197-e3fc-4c58-9b17-0d9a6a908fce",
        "cursor": {
          "ref": "e57c3357-991b-49d1-a84b-e1be81b55577",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "3b907e4a-b4b9-4f44-8779-7366e94b29ba"
        },
        "item": {
          "id": "22e0c197-e3fc-4c58-9b17-0d9a6a908fce",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "3084a5c3-2d16-497c-a3d4-d327500f1796",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "22e0c197-e3fc-4c58-9b17-0d9a6a908fce",
        "cursor": {
          "ref": "e57c3357-991b-49d1-a84b-e1be81b55577",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "3b907e4a-b4b9-4f44-8779-7366e94b29ba"
        },
        "item": {
          "id": "22e0c197-e3fc-4c58-9b17-0d9a6a908fce",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "3084a5c3-2d16-497c-a3d4-d327500f1796",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "3d7a4788-3fe7-4fb2-abc1-b36f41e80e30",
        "cursor": {
          "ref": "ab1fdc63-2393-4b50-a352-50b459dc2bcd",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "dc5a43cc-f125-47f3-98be-8a06226dff4d"
        },
        "item": {
          "id": "3d7a4788-3fe7-4fb2-abc1-b36f41e80e30",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5a58c6a6-1902-46df-ac7e-40c19c92530a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "3d7a4788-3fe7-4fb2-abc1-b36f41e80e30",
        "cursor": {
          "ref": "ab1fdc63-2393-4b50-a352-50b459dc2bcd",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "dc5a43cc-f125-47f3-98be-8a06226dff4d"
        },
        "item": {
          "id": "3d7a4788-3fe7-4fb2-abc1-b36f41e80e30",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5a58c6a6-1902-46df-ac7e-40c19c92530a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "5031a7c8-3a52-4fc9-8919-9c07956af027",
        "cursor": {
          "ref": "d1096f85-f961-435e-97c2-7fe6ba8622e6",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3453fb82-34ab-4d6d-a915-8eb219c110a4"
        },
        "item": {
          "id": "5031a7c8-3a52-4fc9-8919-9c07956af027",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "252a3790-21d8-400f-af9e-3461a90dac07",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "5031a7c8-3a52-4fc9-8919-9c07956af027",
        "cursor": {
          "ref": "d1096f85-f961-435e-97c2-7fe6ba8622e6",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3453fb82-34ab-4d6d-a915-8eb219c110a4"
        },
        "item": {
          "id": "5031a7c8-3a52-4fc9-8919-9c07956af027",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "252a3790-21d8-400f-af9e-3461a90dac07",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "54bf5f6b-3113-49f5-9045-61ea0fafda86",
        "cursor": {
          "ref": "8619fb95-4cb4-48f0-b0b9-dac91d79e3e2",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "aa3b7af1-b593-4983-8c1a-7b883602c4e1"
        },
        "item": {
          "id": "54bf5f6b-3113-49f5-9045-61ea0fafda86",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "97652a03-c49d-4111-bb92-966e64aef0ff",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "54bf5f6b-3113-49f5-9045-61ea0fafda86",
        "cursor": {
          "ref": "8619fb95-4cb4-48f0-b0b9-dac91d79e3e2",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "aa3b7af1-b593-4983-8c1a-7b883602c4e1"
        },
        "item": {
          "id": "54bf5f6b-3113-49f5-9045-61ea0fafda86",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "97652a03-c49d-4111-bb92-966e64aef0ff",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "6fda2314-ca1d-4736-a08a-999ea622f832",
        "cursor": {
          "ref": "9872c9ae-ba03-4f05-8689-b3e24a36e798",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "bd2130ae-956b-490a-a470-ab0f60ef87e9"
        },
        "item": {
          "id": "6fda2314-ca1d-4736-a08a-999ea622f832",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "9da76656-0ec3-4c46-ad59-1f44543829ee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "6fda2314-ca1d-4736-a08a-999ea622f832",
        "cursor": {
          "ref": "9872c9ae-ba03-4f05-8689-b3e24a36e798",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "bd2130ae-956b-490a-a470-ab0f60ef87e9"
        },
        "item": {
          "id": "6fda2314-ca1d-4736-a08a-999ea622f832",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "9da76656-0ec3-4c46-ad59-1f44543829ee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "09476458-b584-4e18-b369-caa956a84364",
        "cursor": {
          "ref": "cc847300-33c2-4cae-8ed2-eb5ccdea5bdd",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e5323cb1-e0ad-4d4b-b0c7-7000a3ac5ce0"
        },
        "item": {
          "id": "09476458-b584-4e18-b369-caa956a84364",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "403faef7-4c33-4b2a-9385-f88386a411ef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "09476458-b584-4e18-b369-caa956a84364",
        "cursor": {
          "ref": "cc847300-33c2-4cae-8ed2-eb5ccdea5bdd",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e5323cb1-e0ad-4d4b-b0c7-7000a3ac5ce0"
        },
        "item": {
          "id": "09476458-b584-4e18-b369-caa956a84364",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "403faef7-4c33-4b2a-9385-f88386a411ef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "85417ae1-c7cf-4bd4-a491-2589c3ea7d53",
        "cursor": {
          "ref": "701909ab-9e36-4801-9a8d-3849b52c6efa",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "6e33cbb9-1b83-475a-a71f-91c705ea3061"
        },
        "item": {
          "id": "85417ae1-c7cf-4bd4-a491-2589c3ea7d53",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "1f30a381-2311-4f52-a470-f65790b15d29",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "85417ae1-c7cf-4bd4-a491-2589c3ea7d53",
        "cursor": {
          "ref": "701909ab-9e36-4801-9a8d-3849b52c6efa",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "6e33cbb9-1b83-475a-a71f-91c705ea3061"
        },
        "item": {
          "id": "85417ae1-c7cf-4bd4-a491-2589c3ea7d53",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "1f30a381-2311-4f52-a470-f65790b15d29",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "bdd32b0b-f368-4ec9-b80d-da96b1e23142",
        "cursor": {
          "ref": "9541596b-f1dc-49df-81ed-ce1ed6a39832",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "ccfe3a51-56bc-4f5f-a53e-6e5f2829cdcd"
        },
        "item": {
          "id": "bdd32b0b-f368-4ec9-b80d-da96b1e23142",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "5c71c5b8-51b3-48c4-8050-e9121461c34d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "bdd32b0b-f368-4ec9-b80d-da96b1e23142",
        "cursor": {
          "ref": "9541596b-f1dc-49df-81ed-ce1ed6a39832",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "ccfe3a51-56bc-4f5f-a53e-6e5f2829cdcd"
        },
        "item": {
          "id": "bdd32b0b-f368-4ec9-b80d-da96b1e23142",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "5c71c5b8-51b3-48c4-8050-e9121461c34d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "3910bf3c-668e-4992-9f1c-f3b9a4a67d07",
        "cursor": {
          "ref": "1c5d6f07-d6da-4d2e-be54-1ba3bccf520a",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f1a29024-50f6-44e5-af63-6c28b04701c6"
        },
        "item": {
          "id": "3910bf3c-668e-4992-9f1c-f3b9a4a67d07",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "9b4f6dfb-8541-40b3-98f6-e336b5b0908b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "3910bf3c-668e-4992-9f1c-f3b9a4a67d07",
        "cursor": {
          "ref": "1c5d6f07-d6da-4d2e-be54-1ba3bccf520a",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f1a29024-50f6-44e5-af63-6c28b04701c6"
        },
        "item": {
          "id": "3910bf3c-668e-4992-9f1c-f3b9a4a67d07",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "9b4f6dfb-8541-40b3-98f6-e336b5b0908b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "56108f0c-6a90-43b9-98cc-a572cff7a8b8",
        "cursor": {
          "ref": "9cd36ad6-9ef2-4d7c-8997-9d1bdacf9222",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "add8a693-c753-43b7-b692-88aac6ee6511"
        },
        "item": {
          "id": "56108f0c-6a90-43b9-98cc-a572cff7a8b8",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3469662f-162c-48f2-9618-f3895380eb87",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "56108f0c-6a90-43b9-98cc-a572cff7a8b8",
        "cursor": {
          "ref": "9cd36ad6-9ef2-4d7c-8997-9d1bdacf9222",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "add8a693-c753-43b7-b692-88aac6ee6511"
        },
        "item": {
          "id": "56108f0c-6a90-43b9-98cc-a572cff7a8b8",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3469662f-162c-48f2-9618-f3895380eb87",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "16a58b7c-4a9d-47a3-a12d-70eaea49e9c3",
        "cursor": {
          "ref": "011795b5-b25c-4b91-bb0d-344080c88259",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d0aa968e-b781-4e97-a0ac-d9eb4aac6962"
        },
        "item": {
          "id": "16a58b7c-4a9d-47a3-a12d-70eaea49e9c3",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "800d7be4-c446-4109-804b-15cf2aeb18ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "16a58b7c-4a9d-47a3-a12d-70eaea49e9c3",
        "cursor": {
          "ref": "011795b5-b25c-4b91-bb0d-344080c88259",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d0aa968e-b781-4e97-a0ac-d9eb4aac6962"
        },
        "item": {
          "id": "16a58b7c-4a9d-47a3-a12d-70eaea49e9c3",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "800d7be4-c446-4109-804b-15cf2aeb18ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "f8e28547-4723-4048-9bdb-d7b8e13fd7a2",
        "cursor": {
          "ref": "47e94648-8ea2-4bc0-868b-ec767d5ae5ce",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6abdb18f-53f9-48e3-8cce-48bf056ca560"
        },
        "item": {
          "id": "f8e28547-4723-4048-9bdb-d7b8e13fd7a2",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e8623019-b279-48c9-aee3-47252c743b73",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "f8e28547-4723-4048-9bdb-d7b8e13fd7a2",
        "cursor": {
          "ref": "47e94648-8ea2-4bc0-868b-ec767d5ae5ce",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6abdb18f-53f9-48e3-8cce-48bf056ca560"
        },
        "item": {
          "id": "f8e28547-4723-4048-9bdb-d7b8e13fd7a2",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e8623019-b279-48c9-aee3-47252c743b73",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "a590d168-bc76-40e1-8ba0-9a6705a544a1",
        "cursor": {
          "ref": "7dee0d04-747c-45b2-9941-b61529b862ee",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "89673c06-6b28-4b45-8fb8-1139a2223829"
        },
        "item": {
          "id": "a590d168-bc76-40e1-8ba0-9a6705a544a1",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "b0f5b3fd-3999-44a4-beaa-38cce3943474",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "a590d168-bc76-40e1-8ba0-9a6705a544a1",
        "cursor": {
          "ref": "7dee0d04-747c-45b2-9941-b61529b862ee",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "89673c06-6b28-4b45-8fb8-1139a2223829"
        },
        "item": {
          "id": "a590d168-bc76-40e1-8ba0-9a6705a544a1",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "b0f5b3fd-3999-44a4-beaa-38cce3943474",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "39c094cf-3e52-4f72-b6d5-05b38a5d3a01",
        "cursor": {
          "ref": "573749fc-3407-4eab-ad47-75114ca9bb2a",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c29874e3-0dab-4384-bb11-c28cc98505b8"
        },
        "item": {
          "id": "39c094cf-3e52-4f72-b6d5-05b38a5d3a01",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f43c9a0a-a3ac-416b-b729-4f57d44d5890",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "39c094cf-3e52-4f72-b6d5-05b38a5d3a01",
        "cursor": {
          "ref": "573749fc-3407-4eab-ad47-75114ca9bb2a",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c29874e3-0dab-4384-bb11-c28cc98505b8"
        },
        "item": {
          "id": "39c094cf-3e52-4f72-b6d5-05b38a5d3a01",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f43c9a0a-a3ac-416b-b729-4f57d44d5890",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "b9fc5ca2-1d0e-4894-89eb-d4a92c8a3d48",
        "cursor": {
          "ref": "8a5fcf59-c1e7-4751-9f1f-027471f47567",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "29ee0a4a-adb0-4bae-a9f9-99cdcbb2c1cd"
        },
        "item": {
          "id": "b9fc5ca2-1d0e-4894-89eb-d4a92c8a3d48",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "18b5dca0-fd3b-48f2-b82d-a70d7d3a978c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "b9fc5ca2-1d0e-4894-89eb-d4a92c8a3d48",
        "cursor": {
          "ref": "8a5fcf59-c1e7-4751-9f1f-027471f47567",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "29ee0a4a-adb0-4bae-a9f9-99cdcbb2c1cd"
        },
        "item": {
          "id": "b9fc5ca2-1d0e-4894-89eb-d4a92c8a3d48",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "18b5dca0-fd3b-48f2-b82d-a70d7d3a978c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "e666565d-fa52-400b-9fe6-e5b457bad83e",
        "cursor": {
          "ref": "c1e7e9d3-a99d-4571-804f-69558750630b",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "427734f9-f2f4-4e50-97f3-211927e4eb5e"
        },
        "item": {
          "id": "e666565d-fa52-400b-9fe6-e5b457bad83e",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "28ae1a55-fd5b-4ddb-9af4-d84e7d3d1401",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "e666565d-fa52-400b-9fe6-e5b457bad83e",
        "cursor": {
          "ref": "c1e7e9d3-a99d-4571-804f-69558750630b",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "427734f9-f2f4-4e50-97f3-211927e4eb5e"
        },
        "item": {
          "id": "e666565d-fa52-400b-9fe6-e5b457bad83e",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "28ae1a55-fd5b-4ddb-9af4-d84e7d3d1401",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "4589ca9e-2739-4c56-a8b0-5b361c170a06",
        "cursor": {
          "ref": "46b222f5-8038-496e-848d-34bc4feb0fb6",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "317fe075-5554-487a-b023-d5b38e2027c8"
        },
        "item": {
          "id": "4589ca9e-2739-4c56-a8b0-5b361c170a06",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "7e84a001-b7e6-49d9-b92a-76b5c0f3bac7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "4589ca9e-2739-4c56-a8b0-5b361c170a06",
        "cursor": {
          "ref": "46b222f5-8038-496e-848d-34bc4feb0fb6",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "317fe075-5554-487a-b023-d5b38e2027c8"
        },
        "item": {
          "id": "4589ca9e-2739-4c56-a8b0-5b361c170a06",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "7e84a001-b7e6-49d9-b92a-76b5c0f3bac7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "f03094ab-0d16-453e-9e64-7de991ee377f",
        "cursor": {
          "ref": "dfc27e98-5cbe-4a3b-b08a-2555d5150f4b",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "69332026-ed05-47e2-8a66-6fcf60968d1c"
        },
        "item": {
          "id": "f03094ab-0d16-453e-9e64-7de991ee377f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "0db399c2-cd5c-4651-bf3a-2e57935a8665",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "f03094ab-0d16-453e-9e64-7de991ee377f",
        "cursor": {
          "ref": "dfc27e98-5cbe-4a3b-b08a-2555d5150f4b",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "69332026-ed05-47e2-8a66-6fcf60968d1c"
        },
        "item": {
          "id": "f03094ab-0d16-453e-9e64-7de991ee377f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "0db399c2-cd5c-4651-bf3a-2e57935a8665",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "810f61dd-f203-4e6e-8367-4ce6437e7ec2",
        "cursor": {
          "ref": "0b161482-2b95-4bc6-9c64-ae6def9afa6f",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a02c19e0-f3fe-41b7-aaef-3dc8d1bd5c4a"
        },
        "item": {
          "id": "810f61dd-f203-4e6e-8367-4ce6437e7ec2",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b96ec3b1-22a1-49ed-b75e-d3ce8b900451",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "810f61dd-f203-4e6e-8367-4ce6437e7ec2",
        "cursor": {
          "ref": "0b161482-2b95-4bc6-9c64-ae6def9afa6f",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a02c19e0-f3fe-41b7-aaef-3dc8d1bd5c4a"
        },
        "item": {
          "id": "810f61dd-f203-4e6e-8367-4ce6437e7ec2",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b96ec3b1-22a1-49ed-b75e-d3ce8b900451",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "05ebe12d-6f51-44fd-baf2-f522f54468d4",
        "cursor": {
          "ref": "db0685f6-324b-415f-978d-9e5fb72c71dd",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "c6d2de4e-d4bd-4fa5-aabc-bbc851a32615"
        },
        "item": {
          "id": "05ebe12d-6f51-44fd-baf2-f522f54468d4",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "3561424c-589f-4fd1-8564-51a279aaad15",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "05ebe12d-6f51-44fd-baf2-f522f54468d4",
        "cursor": {
          "ref": "db0685f6-324b-415f-978d-9e5fb72c71dd",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "c6d2de4e-d4bd-4fa5-aabc-bbc851a32615"
        },
        "item": {
          "id": "05ebe12d-6f51-44fd-baf2-f522f54468d4",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "3561424c-589f-4fd1-8564-51a279aaad15",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "e7a3d103-8c7c-499a-923e-72960b718aef",
        "cursor": {
          "ref": "644242cb-a24e-4084-8ea1-bc776f40566b",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "0120c9b5-6ab3-4fd8-842d-11a853720f99"
        },
        "item": {
          "id": "e7a3d103-8c7c-499a-923e-72960b718aef",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "bee77bcf-f905-4241-944b-0ce5e2711419",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "e7a3d103-8c7c-499a-923e-72960b718aef",
        "cursor": {
          "ref": "644242cb-a24e-4084-8ea1-bc776f40566b",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "0120c9b5-6ab3-4fd8-842d-11a853720f99"
        },
        "item": {
          "id": "e7a3d103-8c7c-499a-923e-72960b718aef",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "bee77bcf-f905-4241-944b-0ce5e2711419",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "e36b932b-b0d6-4d0b-a1a1-41bb575fb762",
        "cursor": {
          "ref": "09afcf1f-c0ad-4b3b-809e-9afab96bcbc1",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "30f3adfc-6c11-4688-8e01-3d8b4157ae89"
        },
        "item": {
          "id": "e36b932b-b0d6-4d0b-a1a1-41bb575fb762",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "74549970-8657-4ea7-8679-7ee4e9bb9988",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "e36b932b-b0d6-4d0b-a1a1-41bb575fb762",
        "cursor": {
          "ref": "09afcf1f-c0ad-4b3b-809e-9afab96bcbc1",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "30f3adfc-6c11-4688-8e01-3d8b4157ae89"
        },
        "item": {
          "id": "e36b932b-b0d6-4d0b-a1a1-41bb575fb762",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "74549970-8657-4ea7-8679-7ee4e9bb9988",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "2441fb54-c36c-42e3-acae-1fc6e5cc4be3",
        "cursor": {
          "ref": "9d397af2-f615-4e34-90c1-1ac868b205fe",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "147d604e-d2fd-4c3f-b4b3-91758a26bb8d"
        },
        "item": {
          "id": "2441fb54-c36c-42e3-acae-1fc6e5cc4be3",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5e642499-0685-4202-ad66-576c8fcdbe15",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "2441fb54-c36c-42e3-acae-1fc6e5cc4be3",
        "cursor": {
          "ref": "9d397af2-f615-4e34-90c1-1ac868b205fe",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "147d604e-d2fd-4c3f-b4b3-91758a26bb8d"
        },
        "item": {
          "id": "2441fb54-c36c-42e3-acae-1fc6e5cc4be3",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5e642499-0685-4202-ad66-576c8fcdbe15",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "c19a6bc6-fbc8-41e9-bf12-8332beed0830",
        "cursor": {
          "ref": "e4371b13-90da-4757-94d7-57e7c3212d71",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "300fb045-364d-41bb-81b8-6541d562f411"
        },
        "item": {
          "id": "c19a6bc6-fbc8-41e9-bf12-8332beed0830",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "7a2542b5-e5e2-4fd2-99fc-b32bd7e363d0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "c19a6bc6-fbc8-41e9-bf12-8332beed0830",
        "cursor": {
          "ref": "e4371b13-90da-4757-94d7-57e7c3212d71",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "300fb045-364d-41bb-81b8-6541d562f411"
        },
        "item": {
          "id": "c19a6bc6-fbc8-41e9-bf12-8332beed0830",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "7a2542b5-e5e2-4fd2-99fc-b32bd7e363d0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "f8c9895b-20dd-4f9e-a30d-66fe7ebce14a",
        "cursor": {
          "ref": "d0c5009f-d968-4ee0-9a8a-8ed38b82e89b",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "c6dee61a-1805-4faf-bcd1-540c4b20a9a5"
        },
        "item": {
          "id": "f8c9895b-20dd-4f9e-a30d-66fe7ebce14a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "3dff41db-21ef-435f-8895-2242356e2fc1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "f8c9895b-20dd-4f9e-a30d-66fe7ebce14a",
        "cursor": {
          "ref": "d0c5009f-d968-4ee0-9a8a-8ed38b82e89b",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "c6dee61a-1805-4faf-bcd1-540c4b20a9a5"
        },
        "item": {
          "id": "f8c9895b-20dd-4f9e-a30d-66fe7ebce14a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "3dff41db-21ef-435f-8895-2242356e2fc1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "0bc9daa5-9aaa-47fe-98af-f77127692bdb",
        "cursor": {
          "ref": "15b7c1dd-97b5-4f07-9db0-8ee0fbb90c64",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "40f74277-f099-43dc-9a79-95e69a6bd255"
        },
        "item": {
          "id": "0bc9daa5-9aaa-47fe-98af-f77127692bdb",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "cd6d6e3b-7b2a-4f78-954a-165635a1f650",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "0bc9daa5-9aaa-47fe-98af-f77127692bdb",
        "cursor": {
          "ref": "15b7c1dd-97b5-4f07-9db0-8ee0fbb90c64",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "40f74277-f099-43dc-9a79-95e69a6bd255"
        },
        "item": {
          "id": "0bc9daa5-9aaa-47fe-98af-f77127692bdb",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "cd6d6e3b-7b2a-4f78-954a-165635a1f650",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "0fe29867-f3bd-4dfb-970d-dbac1970ab04",
        "cursor": {
          "ref": "9fc5c59a-3233-423f-befb-efd7239b27e0",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "1f2297e9-b8d2-46db-976b-b84f65dc64e8"
        },
        "item": {
          "id": "0fe29867-f3bd-4dfb-970d-dbac1970ab04",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b8bf10e6-68e8-4fe0-992e-b6d06d0422a7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "0fe29867-f3bd-4dfb-970d-dbac1970ab04",
        "cursor": {
          "ref": "9fc5c59a-3233-423f-befb-efd7239b27e0",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "1f2297e9-b8d2-46db-976b-b84f65dc64e8"
        },
        "item": {
          "id": "0fe29867-f3bd-4dfb-970d-dbac1970ab04",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b8bf10e6-68e8-4fe0-992e-b6d06d0422a7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "b047ed69-2ea7-417b-9b8c-91c847b57e24",
        "cursor": {
          "ref": "1453bcd4-0446-466f-a9a9-7b4a52f5e36f",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "fe914847-ef5f-4937-b673-0a268e62d65f"
        },
        "item": {
          "id": "b047ed69-2ea7-417b-9b8c-91c847b57e24",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a2cca32b-e629-414e-94d6-57a8162c5ff2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "b047ed69-2ea7-417b-9b8c-91c847b57e24",
        "cursor": {
          "ref": "1453bcd4-0446-466f-a9a9-7b4a52f5e36f",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "fe914847-ef5f-4937-b673-0a268e62d65f"
        },
        "item": {
          "id": "b047ed69-2ea7-417b-9b8c-91c847b57e24",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a2cca32b-e629-414e-94d6-57a8162c5ff2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "95f36493-16fb-4bb9-a5a1-d28c5d5ec6d2",
        "cursor": {
          "ref": "5c4fc243-cb17-406b-9680-a55a989df2cb",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "2d22b37d-a896-4f57-bb3a-7dfc3cc0830b"
        },
        "item": {
          "id": "95f36493-16fb-4bb9-a5a1-d28c5d5ec6d2",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "76d6a6bc-d9a2-4c7d-abb5-96741d9e9904",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "95f36493-16fb-4bb9-a5a1-d28c5d5ec6d2",
        "cursor": {
          "ref": "5c4fc243-cb17-406b-9680-a55a989df2cb",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "2d22b37d-a896-4f57-bb3a-7dfc3cc0830b"
        },
        "item": {
          "id": "95f36493-16fb-4bb9-a5a1-d28c5d5ec6d2",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "76d6a6bc-d9a2-4c7d-abb5-96741d9e9904",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "2d285bc2-4dae-457a-a6ca-0332bdd15c5a",
        "cursor": {
          "ref": "5789a0a9-7245-4510-9a3d-a91653889ee2",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "ed2e9079-6606-40f4-b9c5-fbc069604409"
        },
        "item": {
          "id": "2d285bc2-4dae-457a-a6ca-0332bdd15c5a",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "0bad5726-9263-459c-8ea4-ee794ac3b562",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "2d285bc2-4dae-457a-a6ca-0332bdd15c5a",
        "cursor": {
          "ref": "5789a0a9-7245-4510-9a3d-a91653889ee2",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "ed2e9079-6606-40f4-b9c5-fbc069604409"
        },
        "item": {
          "id": "2d285bc2-4dae-457a-a6ca-0332bdd15c5a",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "0bad5726-9263-459c-8ea4-ee794ac3b562",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "5a3d3d32-2b7d-445b-b1ad-980d138f1ea6",
        "cursor": {
          "ref": "4b21425b-8eb6-4838-ad7f-80f18fa838bf",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d4f65800-05e0-46df-b215-a34913fe9376"
        },
        "item": {
          "id": "5a3d3d32-2b7d-445b-b1ad-980d138f1ea6",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "12f58ceb-e757-455d-b0b9-66aa29ad4c9c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "5a3d3d32-2b7d-445b-b1ad-980d138f1ea6",
        "cursor": {
          "ref": "4b21425b-8eb6-4838-ad7f-80f18fa838bf",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d4f65800-05e0-46df-b215-a34913fe9376"
        },
        "item": {
          "id": "5a3d3d32-2b7d-445b-b1ad-980d138f1ea6",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "12f58ceb-e757-455d-b0b9-66aa29ad4c9c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "f32cbe4f-f424-4ecb-ac41-1f71ddec3fda",
        "cursor": {
          "ref": "0f6f2abc-8e78-45f4-8f8c-35c858765144",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "02538944-e515-4c9e-8223-6ad72afb2369"
        },
        "item": {
          "id": "f32cbe4f-f424-4ecb-ac41-1f71ddec3fda",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "cca244da-09c2-4b65-9334-73fdc0ca4df5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "f32cbe4f-f424-4ecb-ac41-1f71ddec3fda",
        "cursor": {
          "ref": "0f6f2abc-8e78-45f4-8f8c-35c858765144",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "02538944-e515-4c9e-8223-6ad72afb2369"
        },
        "item": {
          "id": "f32cbe4f-f424-4ecb-ac41-1f71ddec3fda",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "cca244da-09c2-4b65-9334-73fdc0ca4df5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "1c94cb9e-0ef0-4c21-bcc6-565bb62b9e2b",
        "cursor": {
          "ref": "8847beb6-f3b1-4da4-881b-1fbe60e3608d",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3add2ff7-e630-407a-ae5c-c342688d7473"
        },
        "item": {
          "id": "1c94cb9e-0ef0-4c21-bcc6-565bb62b9e2b",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "6e96ac0c-1265-40c6-b2a7-27bc70446465",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "1c94cb9e-0ef0-4c21-bcc6-565bb62b9e2b",
        "cursor": {
          "ref": "8847beb6-f3b1-4da4-881b-1fbe60e3608d",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3add2ff7-e630-407a-ae5c-c342688d7473"
        },
        "item": {
          "id": "1c94cb9e-0ef0-4c21-bcc6-565bb62b9e2b",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "6e96ac0c-1265-40c6-b2a7-27bc70446465",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "a556d400-dd29-4b19-aee2-af5dc8a6563e",
        "cursor": {
          "ref": "9913581c-fcf2-488d-85f2-3b51d79ba3d7",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ba72cd26-d4b3-4340-9c83-b48d5c892f5c"
        },
        "item": {
          "id": "a556d400-dd29-4b19-aee2-af5dc8a6563e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0f7e1a78-a5de-420e-a3c4-0b76115b5ba7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "a556d400-dd29-4b19-aee2-af5dc8a6563e",
        "cursor": {
          "ref": "9913581c-fcf2-488d-85f2-3b51d79ba3d7",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ba72cd26-d4b3-4340-9c83-b48d5c892f5c"
        },
        "item": {
          "id": "a556d400-dd29-4b19-aee2-af5dc8a6563e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0f7e1a78-a5de-420e-a3c4-0b76115b5ba7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "4ba78672-5b50-41f1-9ec2-5386b8460a36",
        "cursor": {
          "ref": "be9a6c1d-547a-4112-ac75-0454c73ba3fa",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e057f48f-cd0f-4b86-9099-f9c047a88b85"
        },
        "item": {
          "id": "4ba78672-5b50-41f1-9ec2-5386b8460a36",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "d1a5f4fb-d0e2-4ace-8e52-b3d155155a13",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "4ba78672-5b50-41f1-9ec2-5386b8460a36",
        "cursor": {
          "ref": "be9a6c1d-547a-4112-ac75-0454c73ba3fa",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e057f48f-cd0f-4b86-9099-f9c047a88b85"
        },
        "item": {
          "id": "4ba78672-5b50-41f1-9ec2-5386b8460a36",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "d1a5f4fb-d0e2-4ace-8e52-b3d155155a13",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "61e4d8e9-e12b-4da7-b193-72bbc230b876",
        "cursor": {
          "ref": "0ecb674c-16c3-4be5-8543-057dddbf64a6",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "826f3e93-3bc8-46c5-8ff3-e37c6a00afad"
        },
        "item": {
          "id": "61e4d8e9-e12b-4da7-b193-72bbc230b876",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "0b27f3dc-6da0-446f-b542-b812182de7aa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "61e4d8e9-e12b-4da7-b193-72bbc230b876",
        "cursor": {
          "ref": "0ecb674c-16c3-4be5-8543-057dddbf64a6",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "826f3e93-3bc8-46c5-8ff3-e37c6a00afad"
        },
        "item": {
          "id": "61e4d8e9-e12b-4da7-b193-72bbc230b876",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "0b27f3dc-6da0-446f-b542-b812182de7aa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "3e7991b4-b3ba-4ad3-86a3-7a3ff66dbd49",
        "cursor": {
          "ref": "fea909f9-d194-49df-81a0-6dadf5fd58a5",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8b80603f-7dd9-40f6-9aab-d7ab3aab7653"
        },
        "item": {
          "id": "3e7991b4-b3ba-4ad3-86a3-7a3ff66dbd49",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8475667f-9e57-447c-97d9-ec1c1bcfdad3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "3e7991b4-b3ba-4ad3-86a3-7a3ff66dbd49",
        "cursor": {
          "ref": "fea909f9-d194-49df-81a0-6dadf5fd58a5",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8b80603f-7dd9-40f6-9aab-d7ab3aab7653"
        },
        "item": {
          "id": "3e7991b4-b3ba-4ad3-86a3-7a3ff66dbd49",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8475667f-9e57-447c-97d9-ec1c1bcfdad3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "87c23beb-1d8b-47ed-9649-de8780e7ab95",
        "cursor": {
          "ref": "2bc6da49-3fac-4339-950a-37111e408a0a",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ce11dedf-0fb9-4124-95f8-4674b3e6b8d1"
        },
        "item": {
          "id": "87c23beb-1d8b-47ed-9649-de8780e7ab95",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "512d9963-2617-4e72-ba86-28261e3fcc4f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "87c23beb-1d8b-47ed-9649-de8780e7ab95",
        "cursor": {
          "ref": "2bc6da49-3fac-4339-950a-37111e408a0a",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ce11dedf-0fb9-4124-95f8-4674b3e6b8d1"
        },
        "item": {
          "id": "87c23beb-1d8b-47ed-9649-de8780e7ab95",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "512d9963-2617-4e72-ba86-28261e3fcc4f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "f750dd4f-a9a6-491f-a02e-d9d262b35aa6",
        "cursor": {
          "ref": "6ca7528d-1a40-42b7-95a3-1cd0ef0d71aa",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "83d4283c-7f78-4424-8b35-35c69e8132de"
        },
        "item": {
          "id": "f750dd4f-a9a6-491f-a02e-d9d262b35aa6",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "f750dd4f-a9a6-491f-a02e-d9d262b35aa6",
        "cursor": {
          "ref": "6ca7528d-1a40-42b7-95a3-1cd0ef0d71aa",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "83d4283c-7f78-4424-8b35-35c69e8132de"
        },
        "item": {
          "id": "f750dd4f-a9a6-491f-a02e-d9d262b35aa6",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "f750dd4f-a9a6-491f-a02e-d9d262b35aa6",
        "cursor": {
          "ref": "6ca7528d-1a40-42b7-95a3-1cd0ef0d71aa",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "83d4283c-7f78-4424-8b35-35c69e8132de"
        },
        "item": {
          "id": "f750dd4f-a9a6-491f-a02e-d9d262b35aa6",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "9d86e345-3e08-4386-85e3-fe3449e5145f",
        "cursor": {
          "ref": "fee5bb49-8d7e-488b-9e70-b613d8c513a1",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "283e06de-d052-4647-bc9d-4dfabeb1458a"
        },
        "item": {
          "id": "9d86e345-3e08-4386-85e3-fe3449e5145f",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "9d86e345-3e08-4386-85e3-fe3449e5145f",
        "cursor": {
          "ref": "fee5bb49-8d7e-488b-9e70-b613d8c513a1",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "283e06de-d052-4647-bc9d-4dfabeb1458a"
        },
        "item": {
          "id": "9d86e345-3e08-4386-85e3-fe3449e5145f",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "9d86e345-3e08-4386-85e3-fe3449e5145f",
        "cursor": {
          "ref": "fee5bb49-8d7e-488b-9e70-b613d8c513a1",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "283e06de-d052-4647-bc9d-4dfabeb1458a"
        },
        "item": {
          "id": "9d86e345-3e08-4386-85e3-fe3449e5145f",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "cdb48616-a04a-43bf-951f-0582d706cf0e",
        "cursor": {
          "ref": "a308a3c1-bf92-48a8-9733-b45c3e6c864a",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "00c1b1ce-86bd-4656-8c7e-72caab115879"
        },
        "item": {
          "id": "cdb48616-a04a-43bf-951f-0582d706cf0e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "cdb48616-a04a-43bf-951f-0582d706cf0e",
        "cursor": {
          "ref": "a308a3c1-bf92-48a8-9733-b45c3e6c864a",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "00c1b1ce-86bd-4656-8c7e-72caab115879"
        },
        "item": {
          "id": "cdb48616-a04a-43bf-951f-0582d706cf0e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "cdb48616-a04a-43bf-951f-0582d706cf0e",
        "cursor": {
          "ref": "a308a3c1-bf92-48a8-9733-b45c3e6c864a",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "00c1b1ce-86bd-4656-8c7e-72caab115879"
        },
        "item": {
          "id": "cdb48616-a04a-43bf-951f-0582d706cf0e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "5f37b454-f1e5-44d7-8c4f-8ada7004773c",
        "cursor": {
          "ref": "e92cf3ff-2db0-4478-885e-50dcda978560",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "57f403ee-3320-4ca6-a45c-f08f973e7f7f"
        },
        "item": {
          "id": "5f37b454-f1e5-44d7-8c4f-8ada7004773c",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "5f37b454-f1e5-44d7-8c4f-8ada7004773c",
        "cursor": {
          "ref": "e92cf3ff-2db0-4478-885e-50dcda978560",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "57f403ee-3320-4ca6-a45c-f08f973e7f7f"
        },
        "item": {
          "id": "5f37b454-f1e5-44d7-8c4f-8ada7004773c",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "5f37b454-f1e5-44d7-8c4f-8ada7004773c",
        "cursor": {
          "ref": "e92cf3ff-2db0-4478-885e-50dcda978560",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "57f403ee-3320-4ca6-a45c-f08f973e7f7f"
        },
        "item": {
          "id": "5f37b454-f1e5-44d7-8c4f-8ada7004773c",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "393ac74d-670e-4f03-a4f5-c478ca276a80",
        "cursor": {
          "ref": "73ec2379-fe3f-4281-a7e3-c1fe5e322b2f",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "d7a7995b-ebcc-4025-af51-0d30bc4071e0"
        },
        "item": {
          "id": "393ac74d-670e-4f03-a4f5-c478ca276a80",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "393ac74d-670e-4f03-a4f5-c478ca276a80",
        "cursor": {
          "ref": "73ec2379-fe3f-4281-a7e3-c1fe5e322b2f",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "d7a7995b-ebcc-4025-af51-0d30bc4071e0"
        },
        "item": {
          "id": "393ac74d-670e-4f03-a4f5-c478ca276a80",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "393ac74d-670e-4f03-a4f5-c478ca276a80",
        "cursor": {
          "ref": "73ec2379-fe3f-4281-a7e3-c1fe5e322b2f",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "d7a7995b-ebcc-4025-af51-0d30bc4071e0"
        },
        "item": {
          "id": "393ac74d-670e-4f03-a4f5-c478ca276a80",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "0660a1ef-46e7-498f-8a8d-b62b7ffcaebb",
        "cursor": {
          "ref": "c1d96e2f-c76a-4756-ae1f-6ea37854c606",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "6558f542-8141-45c7-90b9-65dadb3575ff"
        },
        "item": {
          "id": "0660a1ef-46e7-498f-8a8d-b62b7ffcaebb",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "0660a1ef-46e7-498f-8a8d-b62b7ffcaebb",
        "cursor": {
          "ref": "c1d96e2f-c76a-4756-ae1f-6ea37854c606",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "6558f542-8141-45c7-90b9-65dadb3575ff"
        },
        "item": {
          "id": "0660a1ef-46e7-498f-8a8d-b62b7ffcaebb",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "0660a1ef-46e7-498f-8a8d-b62b7ffcaebb",
        "cursor": {
          "ref": "c1d96e2f-c76a-4756-ae1f-6ea37854c606",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "6558f542-8141-45c7-90b9-65dadb3575ff"
        },
        "item": {
          "id": "0660a1ef-46e7-498f-8a8d-b62b7ffcaebb",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}