{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6afbc84d-74c8-47d0-ac61-b756a211345c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "4fb3afb8-3a3a-4444-9102-c24234c1c1fa",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "24859365-21db-44d2-903c-c3ee6575577f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3528c027-8ec1-4f37-b0f9-f70afcd1c844"
                }
              }
            ]
          },
          {
            "id": "798f3f5a-27e0-4931-b278-8c5e80f439ae",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1e1b00cc-822d-499d-a443-3e60f61ffcb3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "12e82e71-dd0f-4fda-aaec-71993c5bc0ff"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0f49e0a4-8bff-4ec3-940e-ed7b46a0a87a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "82f848ae-00aa-4590-98ae-6b241757a35a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "27614d37-50f9-4a45-8f95-c0138c55aa5d",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "25818396-f270-4f29-9bd6-63125a6f2a35",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0b8f9a28-ca0e-48f0-969d-43716b2afbd7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f418639e-3010-44f8-bbbb-ac928a0909c2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0b5af350-1d7e-4824-a23f-bb9e076ccfad"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4d879bcf-0096-482c-8934-f3597bd986bb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5744bab0-1dfa-4cfd-ae35-051774f91ec0"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "97017437-ba31-4965-a18b-cc19d2fd690b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f6db3f24-c808-4b50-9acd-9e716c1332d5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "69e289ec-930f-42b5-b61e-3a7406f83995",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4990e7d7-6457-42ba-aef0-682c9dee31e7"
            }
          }
        ]
      },
      {
        "id": "64b63c14-b118-4ba3-99e1-63cb06c64da1",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "96e12a84-a672-4eaf-b393-49d8055a3818",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7253ce7b-8e43-4281-a722-d96653d31c58",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "720d876f-0735-4ac8-be8a-f42b2e02eab6",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f592a4d0-17c5-481e-9b97-07f6daf7889f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8a948279-5a38-41d6-9c56-4096a1fc8308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "262c348c-d55e-468d-a363-9df4f64d98c5",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "143c7931-187d-437f-95f1-ccb0269fbdf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "01fd677b-402d-4b36-9a07-e166b62dd489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36509343-be66-402b-b3b4-983ff98f43bf",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7250de1-93bc-4663-8a74-0d263f2eecd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e704e048-f84e-4f17-a09a-b013c64b1cd4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f0fe6e9c-814f-48c2-8312-97c635b2b24e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4d9fc091-b83f-473e-9ac6-7a84fca45fbe",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ada67e9-3f8b-4699-924a-28d2d1ca76c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9aa94da8-c720-4f23-b91a-5d3df8732198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef4f3e0-fb6a-4a96-85db-ff0653b7aa1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e6f0c38-9863-4a46-8c1a-6f1e124f7641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b8fb592-c214-4afe-8f41-e325bd78ed30",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12a0530f-f4fb-400f-9750-645141db80e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31da6032-13e6-4de3-ad81-3a11d498475a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40ba76db-0974-4c03-92cc-ed59c5d585d7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "633f59c2-cc6f-4722-9423-d9a84da6f7fb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3b1ed792-a556-416d-83c2-0b6ed95e30e8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0fab825e-6a57-416d-9b25-36785df75c98",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "28d334aa-4593-457e-85f8-32fdf17f1121",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "58dba0e3-7e1f-4eb7-8b34-8df657a03325"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "19e079b3-b916-4c68-af16-ad3aae5248c6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "e5c806d2-27a8-4e22-8935-fa4d45cb6415"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0461afc4-5541-4003-947d-8cf4f620db8e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bca215f9-967e-47d8-89fd-fd3c953caac0"
            }
          }
        ]
      },
      {
        "id": "438a6a18-0fb2-4476-b692-ccac1f477594",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a9b13ece-d930-4dc8-9267-1bf40c7462a0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a9f9d916-47c9-4cf7-910f-03f5fa0df1d1",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "52ee224f-c95a-47be-82a0-ebb9c54e0e4a",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a967deb3-92a8-4fbb-896e-cb38ca7cf384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57eb0030-b546-4a6b-bd31-85e7520345d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb72197c-6480-4bfb-abb9-76240015894a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71d9a9c8-07b5-41a2-9f21-c08691f8f494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d413c6d6-bc65-4128-b273-a0ff90b2521f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c4456df-12b7-4419-b921-a9b64d09d687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c65e9c8-1063-4e46-bd37-770a466404cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dbb3a9a-7f1f-4c9c-9c2b-d9094585c447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89e435f6-049d-4d80-a5fe-b8667cc3bb10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fde7cb06-ea43-4bf0-bdb9-f64993f98bdc",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aea5125-36ea-4ae1-b76d-edbe9ba1736c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "560b90b6-a386-415b-a929-2f1fac7fb9d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e01cbcc-7bbd-43a9-abc4-750eea3448fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6486bc5b-9883-44ea-ad4e-3d2f9a4c06ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "463d75a0-ef58-4362-88d4-d6935e99aa8f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd4d461d-2cec-4379-85a5-38685acb0518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "108805eb-db49-4659-81f7-9f2c5f49b3db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "404ae74e-75ef-48bc-bd0d-0a56d0a89609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8bb54900-e35a-449f-9f00-f44769f3d9bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f1115bf-52b7-478f-ad5a-f78d7f5d041e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "317387a7-3185-4fea-b32e-f6cd6d6c0600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d08169d-f834-4288-9e82-a97d6f074026"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e397005-5040-4f92-9d62-5fdd8176a512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82625cb1-8b6c-4fe9-8262-4b785cc355c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7eab785-286c-4fa3-90ac-27d9ae175ce6",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a4e7d91-d135-4659-b31a-bb77c44a94b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4ed5d00-9044-4512-8a64-0391d76442d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2110ed77-55c1-4009-b718-6d558e77e68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "35ea432e-f91c-4a0a-83c6-ab6176409f23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "810de0ed-4445-4637-8267-a53fa1a4aca3",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f07e2229-b7c4-4c54-9e0a-f87c8d9bc3ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a29b2cab-84de-4420-a76e-c80527327a52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe5e8e1-b42f-4ea9-822f-c4157f2b3881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d45970bf-217e-4968-b6a5-4dd9e6b920e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f58ae03f-fc3e-45a6-9465-2e56da4ef880",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff727a9f-809c-412d-8003-d4d67b4c3f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30f84985-68ed-49be-9176-7934d85abd55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "338a8269-4412-4958-a4dd-85e6b1aae017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "13eb5989-a7a6-459c-892f-feb5ec4f489a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65648ce7-f3d9-4c4f-9604-baab60d75b29",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "661722b5-d8ab-4fc0-9316-441cd54839ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc9da9df-6d9b-4c3c-9563-0392f22918a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72faf411-2573-4e52-9bb3-06a3bc92f342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4c301fd-e6ea-4c90-94ce-a9e48680b717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f646a77a-84a4-4e5d-a5c4-8da301fe941a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11d45304-b762-4643-9fa6-fdd68a580b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83152049-eb47-47e2-b7c7-e623cd994134"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f22a1cc3-bfa4-48e0-9f34-9b0218847b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb454689-5b4c-42a8-9b18-6a0295ed8f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fa6a0ff-d6e5-4c46-8b7e-8ef9222c22e1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83979b09-413d-4eaa-811c-f31a5282986a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "016b4c04-62d6-4c84-a494-808f1b5a06c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca39e45b-af80-46b1-9b80-aa5f1addaf01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0cee4d45-cfdc-4ab4-be1f-cdb45befbecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd8c1036-44de-4600-91dd-fc101192f98b",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bfd84a0-4f75-425a-af40-3599fe350597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f40946ee-c779-4625-95be-70633080c03b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bdf4793-d682-4a2f-a2f5-2fc3866bd679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "608940af-2679-41c3-bc4d-906931cf13ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d9d6286-b5de-43cb-8b16-56e52dab73f3",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea79145d-1484-4bb0-a31b-6f806b83dcc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d713919e-5d53-43d0-afca-dec54ae8a5a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0ab6027-a90c-4a60-ba5a-db9697ed57ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "aea96226-8c86-409d-a3de-a8f22530a39a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0757996-0fa0-4172-b89f-91bbd3834b9c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "631ac245-956a-436a-ad26-47f2173502c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45c9e3bc-4926-4a00-ab16-50fd11cb13bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "390cec41-3cc7-4c1c-9e8e-84cfcd92540c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3a9f1c1-6a9e-4fcb-91f1-3d1ac82b4653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b849a6f3-d9f8-4915-a169-996f17072a4b",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8914759-97ee-4dc3-9cbb-4ce3fabea341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85a61218-5e00-4653-96db-01c34d69631f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e6803a-dcb9-436d-98a6-1b8ace559da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "904d4271-d21a-4b4b-9cf4-78af7807314b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b3a8f17-232c-48c7-a8e5-4d2bef25a74c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3242f653-653b-42e2-b5dd-d1a8a9b8982b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc5b9ce0-1a92-4e17-80ba-c8921bea6755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b2666a-80c5-4918-bd9b-0d767877efb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84d7cf41-cf09-425f-b74b-3f3be544a6dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17162d51-6f4c-44c5-9927-77419bd7baee",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c5ba34-d787-44ac-86a3-dc119b4671d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b953ade9-b823-4b73-933f-30d0ad0ea71e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a958d35-c3f1-4449-9747-bd668a043bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5253e7e-b9eb-4e54-b4cc-97d2744ad9a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c8a3c98-9735-4b7e-96d4-51f6685cddd9",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d656b8-0069-44c9-816f-1d3c5977471a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb1becf4-a0bb-4271-b7db-a09651d9acec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b79812f-abd4-4b9b-9200-d987a3856c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1daffa9-7f60-4004-b71e-d32c80056f4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b05c2d7-960d-4345-b0d7-e6c181c4179d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4b4b44-34ce-43ca-b92d-9ca33861da3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a36d7a2-fa9a-41af-afd6-1f287881fe55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aefadd34-00fc-40c3-912b-ac140430bce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b018325-6a55-4b70-b293-a07b45f94b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55ab3b43-4969-45e2-ba6d-11741d448e81",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e929ce0-99d8-47fc-b732-215e8120b947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8666552d-87a9-4e2b-9888-36b4f22f6db3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "916d4204-cad9-4da5-b53e-9869cafea04e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bdc3d6c-477a-446a-909b-17d8cf0b131b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b3516d7-02f5-48e6-a5fb-01e6b8b3e7ca",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a65fe29-f84d-43eb-8229-67829cbc50ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7dce324-78aa-49d7-b8fc-8afb0d604536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fbb3cb5-ba80-4a25-a02c-363b803f83e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fd9015d-779e-4d51-b6e4-6adb39f9f379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d636fa2-ffd5-448b-8695-b7127bad7cb4",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f6e85f-1d60-41a1-8f79-c274fabcf81d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ab764cb-2305-4c76-8e38-9e8a2df242b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ac5938-2264-4094-9b67-e8f65aa4ded5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f928b5e-887b-4be7-be18-2e8f10612b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7fce43-5099-43b1-bec6-96f49fd752da",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba3e3e16-15aa-469c-a5ee-be4883a18dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0c3de32-cb4a-4d0b-8d5c-125d83dd4e96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15d4b49c-ef6d-455c-93a0-3037ba1f8b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7eb18a03-ba57-4aae-8b77-d88a510db3d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a71f7a66-5751-41a7-9098-73bc6d43db08",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c7bbf5-763c-410c-a48c-3d16b300e385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b1a9821-4f3b-44a5-a252-a960de35721e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57cc253f-3e5c-46f9-bc08-b6a3b6ec684d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "424c2547-768c-4571-8093-0c27d9e43d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c597384a-882b-4034-8e8f-c0969a93486b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c70009d2-79c6-4afd-8fe7-6352853b1a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4009be73-fcfc-4beb-9936-c1a7d6a16e99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58cacb40-ebf4-4319-b130-4b77d37f8d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9c22987-f20f-41ba-be8d-cab4b31a3c18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c1d448-96d6-4651-bf1c-3db79b7a9aec",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab8b449-0981-4d83-87bf-fac456b5c9c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0211a5e-0784-45fd-8c4e-4666262a4e1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "915fc197-2322-423d-ba27-e3ae939098e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "338c241f-e06d-40f1-ac09-4f077df3e94e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bc63a95-b056-43d5-abb5-801a635ba9d1",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a3f741-84d8-4365-b712-7c352fae0af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d419b21-1135-4c08-ba05-3164aa62a09f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc6145f-7306-4225-8b56-cddb6877bb93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "485dba72-f224-4bd4-86f1-60faf06ba378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce35bee-50be-4641-9857-15fe9c12343c",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d2b512-fb31-4b8a-863d-a74d86c722be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52f5da1c-4fb5-47b4-af1b-939075b60e69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a02ca62-8a63-4e6b-974f-35fb35e5b95f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c44a1f10-089e-47c1-b4f3-7aab1fe832bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccb243fa-9323-470c-93b4-d2e0190353ad",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac3283b-502f-4de9-8778-29cbd919b741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1280e1e4-157c-4b2f-88e4-287a2661f3ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d7f2d7e-d44c-43e9-820d-5284d9e2aa2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ca0cdc7-4b84-49c2-a7e5-79d60d1a1f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5892bf9-ddb6-4b19-94dd-b92efd77baa6",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a686d71-a238-43f9-89bb-ff976d84eea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b45aa42c-8404-42b6-a6a8-2fb8fc26ce09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "174329ad-d4e8-4de5-afd6-5c189d999c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0ad16fe-470b-4bff-8a61-12dc157e36fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29dd74d2-d552-4472-8cd8-54cb5b7c7958",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b51780c-de13-4699-a7d7-dd1f246c7bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65591ce0-bab5-4c45-8617-9ed7972b389d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31df1f12-cdc0-41f8-abdb-f1de53bef557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1311995d-bf67-49e7-9364-335e37acb82f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6941971d-1be6-4490-b01f-96b66b54ee1a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b8f23a8-2645-4470-9a3f-a42a191a3cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2781a35-a6bf-4c6b-9709-aedc284e1023"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02bf1a25-0f34-4dd9-b40c-7040eff6a5b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d2aa1a6-c74f-4348-b2bb-44a9976c7855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd9876ff-ebab-45ec-98da-1c1a45471490",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cca3aca-51dc-4f2c-88e5-04271626267d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45c054be-faed-4d73-a45d-8c8b996a751a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d8b006-80b4-446f-955b-f26b04176281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd1aa026-b01c-48f2-8957-ad11b4744330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7503c95-ced9-437d-a95e-4212705ee7c3",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f5121e-c11b-4953-a6d8-f9e2ca6575cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af3983d3-0256-43ac-99cd-a129650d62ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee965b3a-87c2-4901-9b48-e0184139b315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "870e525c-e118-4864-9089-32ee68db24e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49b053ef-0003-4818-8eaf-a407b6ad8c43",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ae68ed3-76a7-447c-b1d0-fe0b6628d5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84762e5f-96a6-4474-9f20-b4bbd666a503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22f828e8-3764-4729-9205-23f586f66a8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f98675d-2ac8-47bb-8a2a-726ecb908c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a71444a0-a123-4478-a77c-f2f97b8a8ef9",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45606ccc-ce1e-4f49-9cfd-e4284bf72f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4ab4ae5-9a8e-4806-99bc-45217a78b413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1daf8a0-9ae4-4f16-a9df-4564db82f0e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "bda3cb20-bff5-426f-9b05-751e1ee002fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f092f102-88d8-4538-a147-e8510332351f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b357a34d-16f5-4d23-b990-0f72af3d6e18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7cc75afa-4f0d-4db3-a17a-b408d8a509a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d84f235-1515-4678-be59-511a4f572039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "de5c6e1a-7814-4379-8914-7105cc702216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44b4bc0a-c432-4225-bacf-1170818275ff",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a6207a-c078-4e21-a986-5f1cd61606c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2450dd7-d7af-4ca8-acec-2263e47d6e42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "213c474b-aa31-4073-ae8c-ef042c3b3e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7b6b00d-46b6-4d3a-bc71-abe68ab48af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12d595b0-67c1-48cd-9b30-31703d23e65c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31a39531-a5e8-432e-bdb2-631d543c4163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "469e079b-4872-4633-8a5d-ca6642caa7f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c5c634e-883f-49cf-ad64-f9b1956676e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4731acbe-456c-4897-bf52-c4dce0d0c38b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad5a310-2822-4396-97a7-639ed0d771a1",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e9ae9b-7e8c-4bef-85ed-d050b962f877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a31db9ed-9662-478f-9b50-479fa1368610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b76c0124-3114-4298-a49a-a917609803cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c7d4ec5-b2c6-4046-9ed9-77bf156f7b64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35704c1e-554d-438a-9f22-9a784ba01ddd",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b29312d-5a91-404b-b85f-8ab382b43979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adb48f51-68ba-4d7d-8020-a1ea4a53c64e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1053ab1-9d46-46e9-bbd3-b8e1351ca3d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "053c9764-98d7-4908-954f-71bae0449252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac29a3e-562b-48d2-ba9c-5fb4e26abe4e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "471d5de9-a339-4134-80bc-68fade4ad51d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6dd0fdd-796d-45ea-a34b-a8fd5e798347"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f3b890-c3ae-4bb0-b77e-9cbb12c9cd55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6fc71984-6d67-49b8-a8f2-e6e70a9e98e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d405d1-eb42-4f89-a83c-95fe6245e7f6",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8287f10f-ee94-4604-aa8a-d3c9ed7557d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffb16247-b7ff-4def-a4b2-213aafeaf17e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9020bcc4-5029-490b-abaa-73bc8f767468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "88601178-0ebb-435a-b10b-ddc7763a7779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bcb8890-955e-42e0-9e6b-33009a12bf58",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8332807a-3ec9-4e0b-a024-4368da979ee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab598321-a357-4bf5-a6f0-6b1363a80d4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41eb7142-6ada-4f23-9d8a-4b220c74bbf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "651e8994-a92a-46ff-a00d-e18c8f4f16f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8237d64-daf2-4b91-980a-7a644640edad",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f61bde91-68d4-418d-b5dd-d1c01154c60a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bc60123-3346-4371-a580-83312d46c996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57cc8786-5ec5-4dd3-9527-6fb6be3f6875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1242cc9-4bac-48b8-8cf6-19a9bb99f87c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "595cd77e-f1bd-4197-8954-d373b9e4a6d4",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae8789c6-0523-42e2-bf25-46348e6c031c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb3fb96f-3bd5-460e-9fc5-7291c3ef7638"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d08d71e1-de11-4a72-9c60-f2900646121a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a0ab5be-9a5a-4cca-b2e2-341326397da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f63ec7e-17e7-45e2-8b3d-1199028d05dd",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23ae0800-95ba-4503-b03e-37850de3acd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e62c20e-5b4d-495b-96ec-c63cd2ff7e0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce11cf2d-d09f-4cdf-b6ce-2578080d7fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "55961591-e64a-446e-bc84-ea63976ebce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de25178-fa60-411f-9f64-deec625beb6e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "375b776a-8336-487f-a8c2-47a522f2630e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aab7f8e1-6e37-4dae-8c95-093bd42723f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e88f2385-f8c6-4320-8063-3358d9d4ff2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7547fb8b-b191-421d-898e-bc2f090b5385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0317f6cf-1d74-4b24-af02-5581e12cfe07",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d0464e-e305-4c12-99f3-c7ecaf3bfed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fda001c-fdff-4cf1-b770-bc4b9c6b0cb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cbd1e56-dfb6-4bc9-9904-ffe5320a1f6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "59e73ae0-fc9e-4f6f-9963-348c3c310a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8560dafd-f2be-4250-8fa5-511ae989f9da",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc82fd6-de88-4a82-a61e-4aed04c69760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72c43751-8fc1-44cf-9b84-7f8aa8eb8a76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d0a087e-f680-4cbb-9347-83d35d7aa99e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "94cd0f7d-20c3-4839-ba4c-b2240b0417dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d07c9369-2014-44fe-a169-0c207777cda6",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "647eedd5-4aa3-47b7-a13c-c4959f720f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48ebea30-bdf5-4f43-abbe-ffbeeed10bf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce91e295-b67f-4c25-99fe-bdd487464a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "17cddab2-77e5-4581-b2ec-038e596d5f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5753580b-84ef-4537-bd50-cbaa0af1c7b2",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec10f976-898b-4a89-9029-623b60818278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afe9c920-1aa0-49d1-89fd-0f938aa945a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1fdd9df-52d9-490c-b2f0-54ba2cac3ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ab6c141-aad9-4ad9-8a5d-d82138dc18e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cd061b6-f3f0-4d0a-826b-cd5f493230e0",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f99e416-3a6c-4804-b452-675f10b8e917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "524fd3c9-0c05-4e90-b66c-a5a4a75669a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f54ac5f-8c46-499d-9671-45c38b357193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6a001da-2f07-4b8d-997c-f46c95caf041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aecf1104-3b72-4edf-8a7b-d41539195b7e",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "801cd203-d35e-4ab1-9af2-5ae6a19818d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d72753d7-2df3-458a-bace-e0e8e7dcf217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "392f3961-4a0d-4272-8db8-aa240f8d1173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba835c90-931d-4500-890f-991a7669e610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76fe88af-b923-4228-aab2-329de0fdc339",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "510677a3-6597-4904-9614-304859bbc75d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d08c3de3-369c-45c6-96aa-f5b845651c04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e4e57f7-72b5-4182-b650-226d395ed19d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0b0b9e9-ffe7-4e76-97a5-90dfdebf9aad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad6c1faf-8769-4b8e-b03c-2779bca2c17c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99cc39f8-22cb-46f0-99de-cd46427ecc9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b30a1c0-75b8-41fc-b383-3c8a69c15394"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58264c5a-8953-4607-a1e4-f6586abfbb72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a3c913c-3f71-4e6a-9a36-113e07b813a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "522733d7-89d0-4fda-be3b-07f9d76b56ce",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5a21496-59c1-4d6a-83e3-c583653de130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61736c3f-0621-4898-a084-ac07deb94d24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d3b29a4-10f9-46b2-b811-d98896760033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "0a699384-678a-4110-b5a4-909e371ad381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa9fbf98-ac55-45f2-9e73-898a909f70e0",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5553596c-0388-4506-afea-47c7b8ae163c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5c516bf-f3e0-4b8c-9433-ed44b2515a97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b83d1cde-e425-4402-9d46-1a318f58fee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6df3c56f-7df9-44e2-bcae-31d34c344a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f957781-2fbf-4d19-a1ea-7e6c0ab3bf48",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ded64df-550b-4fa2-b2b0-32797aa23e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1c1d6eb-4d99-4ccf-a4e5-f1096d7fee0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65a34051-8854-4ad6-a337-e2eaaa223796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "25f15302-e86b-4d58-9e31-aedc8884140b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800c6e23-5fd7-441a-bff8-945a54e37501",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c8b47ec-8d10-43d6-b02b-9a5b8719dd03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd03d515-3399-4fdb-a067-c659b329204a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99fe7033-70b6-4704-8b81-455ac1ba56d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b07b7622-4677-4bc7-b8b2-e648018b0c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f812a1a9-9fa2-4469-b711-7e4c2200d943",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c2913be-43ba-4a2e-8011-3f8def77b59e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fad3bf0c-b53c-4a35-a096-5fe3761fc692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97874ef-70cb-45f1-a512-f5e120e268d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe617f00-0386-4da7-b58b-2cb528ca7fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76f430ca-2959-4802-bdc2-7998a72c4ccd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cddf895-5767-4420-acd5-30efaf4bbb44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfa76018-dcfa-4166-a4fc-5b50f9afd40b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1374e94e-0661-48ab-8e00-7d4cb875bc9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b770360-3258-4cc0-8789-05f673bc9ec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d3c86d-e379-4270-9890-2c58febabbe1",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "600ef8c1-e197-4255-9ca5-7cca583fa954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1615f643-6192-474e-b6ba-d7ba7fe08c29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7659e928-a872-4e29-a72a-3d3b5ada90bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b9b779f-bc88-4088-a379-0d31b563e96e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c24700-b263-4ce7-a234-13e592da686b",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6dff109-b676-4ccf-a5b2-7597f86e941a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24e87feb-f1b0-42d0-8132-313851b1fe70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15676c9-e9f1-453d-a0c9-342a93f0929f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f890bacc-1908-454e-a8a7-4d632891ccb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "527ce0e0-e7da-489f-9513-a29413a4def5",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdddeb8d-2e19-426f-aa44-d1685f3fac1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58538055-d81e-447d-b2d5-e54f81fb528e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ee35ff2-7408-467a-9482-e6b45457ba1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e21707e0-1bd5-4b3f-bd09-94ad072106dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a945746a-f053-4b1e-99f7-c136483413fe",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e21b8b-496c-43a6-b468-bed8003a12a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "855f005c-4232-4628-956f-b9d2961d9009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae85de9-3c1e-4186-b833-53b62fc2b9d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4aaefaec-1e69-49c0-bbc5-ab93a3160de2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1351fdf-dd69-45c7-8d7d-b32a9796449e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a9dd08-b342-4597-aa66-95d0b0d41b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41926884-1455-432e-ad4d-904232e8e848"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14b8c369-8590-48a0-b7dd-0d4b81900c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8d52182-d609-469d-b8f9-f55def843784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "345e6474-aa1f-40d5-8d1f-11ec509cc6ef",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37409edb-4907-4e5b-a8fd-9adad0b84532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9b99faf-3aaa-4903-bfdc-fe4e81d22c95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "371d858b-3f1c-48e3-955e-5ee19ce82e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0476997a-4408-4e4d-84ea-2c7d15098e75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f4528ae-91cd-45fa-90e9-222a3b4bb62e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f390ad5e-108b-4ea6-9d22-425fc6c5c153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b0b8c85-9070-4e6f-9528-7760c70bd54f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c25dffc-c8b1-4bdd-88e2-bdd01569c8dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e6d07ca-af9d-4e6e-a4d7-744d1f52d4d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f309bd-d03a-41f1-a161-f1774e5f7b3e",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bfdd09d-1e22-4af0-adef-b9a3efccad77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f9fd049-d84b-49fb-a493-2ae9abaf5ea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeba9d0a-7e68-41ca-9358-2cf2458d444d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d37d58bf-2a83-436b-b702-2f1ffa6312fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a0712e4-0785-4215-bc3d-91a84616a403",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faa5a2dd-f1a0-4ef5-a424-460ef523d3e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "314e85f7-4cd2-4bb4-8a73-a30318cd1bbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "668ed22e-f452-4ed7-870e-c3fbb4aaffb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "52fae370-e22e-47a5-8e89-4fc265230d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc70a2b-996e-4d07-89fd-b639e09d646b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e55d53d-56f1-44d7-ae7b-1de63c089f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad561736-808f-4d90-b4a9-a40aba04c0d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f83f913-9d82-46b4-983b-310e171f35b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a3978fb-1147-4f70-98a0-bb6bd42b664a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04e7825a-87c2-4efd-a89b-a9488b406fae",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ab848f-79aa-4dc3-aaea-a40ec890eef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21c7129d-58a1-44ee-9de8-7bda54dab647"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d066f5e-bcfb-44fe-bdc5-2565250f2f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "33c1bea3-aa6d-41a5-9f52-9b5bee1f91e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d78a716-f85b-4472-a570-15a0893cf38b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40df5d25-ed7d-469d-965e-2ec9ae5c68a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26a0dbc0-4ea8-49c3-b766-f2a6ad7a5127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d22d86c2-b949-45ea-9552-495170960cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "324c82f0-dfca-4f14-8e44-6112142a5e31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd3a6e1-a77a-4a0e-ba84-0790cfe902f6",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ff1142-fa97-43c2-a1fe-66b24bc4c93f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49778a67-a318-4aed-9f19-a82cb1c67d5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586a59d7-e9b8-4b45-af84-a638c657ed65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "01328a73-3f78-4d7a-9507-a5cde355d3e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddf9e8cb-2fff-4fc2-a73c-af0035152d6c",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a879f4dc-014d-449a-b5c0-599375107ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee33d610-bd14-44a5-9d12-c892f0a644c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf31b60a-2433-4a5d-94b3-0bf5b84c304c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "93757fca-fa4d-4feb-82cd-3f4a30c22df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3ffd17f-2a22-400c-8615-d979c1b96aad",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93da0449-f447-4517-8033-4d270a8b48c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32750419-fb05-49d5-8578-68ed3be86c46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "368cc13e-ab10-4816-9a98-8ca8cf836e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f597b35a-6623-4b0e-a507-ce41d6e72185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f3df63c-33bc-46a7-b41a-fc5c887a6b24",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99abbe3d-75ee-47e9-b22b-b38d2d8a4503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c683907-a9d1-4634-ac78-263da8da1e40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2863b5d2-5886-4c01-8180-4d0301ce5948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5a97192-1d96-489d-963c-6a0242ce5260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9813a0dd-13bd-4fc9-afaa-1673437804b7",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e66633-d588-48de-9dee-7abf641c9d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bcf94ab-e43b-4490-9535-ed81d32abe8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdbc2451-cc12-4913-8d7c-06f19e31192a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7429a5e-927f-4890-8f1b-697b89475dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb1e7608-c360-437f-8c25-77529c2a82c8",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efd1362b-479a-4d96-83f7-ecdb13f705f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b163b9a-ddce-4139-a0ee-28db2b33022d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48733adf-9cb9-4fea-94c1-39f4741d3c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "34fe35d9-b70e-4150-9124-7a273627ab7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24beeae-ee8b-41ed-a8b7-cec3108d578f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5777918-adab-4751-b1be-13b8f1328b03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65af0558-a046-4adf-b1f2-306eb8a1a882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db7bd63-f5b7-496f-8864-d4efff6b71d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5d87b70c-ab92-4940-8ae1-326d42f7df69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "431c75d2-3506-4aaa-90d5-1474e7293710",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8cfa406-2334-4d5d-bca1-9d3b21485eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed14a3cf-c825-47fb-9d55-f927490220cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d073abf4-366d-426b-8d89-126c5a8ce143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "abe52c08-284a-47c7-a02f-ea2c628b2e73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c87b57e-5981-4607-91ff-9e63e2eccb1f",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a7c934-310d-41c6-a7aa-290685d78e13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5113d152-9fa9-4d54-b705-10f3742b26dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33776c31-5f3d-4198-adc2-b420bd3b1d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c029b34e-6e49-4486-afb8-5a7b2b55b292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fdc25f0-e895-4528-9d9f-f9c326e7d2c9",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba7f97f-d8e4-41d4-ae7e-7564d342230b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "123a7aca-c2d0-4bb3-aea2-d54e19f3f503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df686f5-9fec-4778-b97d-706aa246f6d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e9a28b3-46e7-431e-8664-7f3001dae9cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1aae26-7a51-479c-929c-37db79a9bab8",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39fea351-7a90-4dd9-a6ec-827c174d9dfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e8351e5-a462-4832-8497-e0bd8f4f8400"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb20018-8b7e-414a-9921-f8dc8149aace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6922a779-5fcc-4cd8-8905-4800b77ee9c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9acd86a1-ec34-48cc-aabd-dc6fd99978cc",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57182fc5-0d04-4015-9025-17b7e8b2f06d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6998306-5579-4558-b614-45c5c6d18af4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74346a80-bbd0-4493-b30e-9e654f1ba525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "93de9bef-b73e-466e-95d9-a85ed0fc3d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c283e4-bba7-4529-9e1b-2ecee4061ba9",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c15cfb66-0c6b-4d69-beb9-21358acac894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9526b2c4-1300-4445-b6a0-27b591dc3b13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c29eb299-fc4a-46c7-906f-59714bf976d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c9654c1-1928-48cd-8434-4f63ab18e324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6271a1ef-03cb-463e-8148-23de99103e7e",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55cc4cff-2374-4788-adf2-f03229c4d5be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b358ea0-4a19-482b-ba6f-4305f217b566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6a4c378-199d-41ce-92b1-e1b58b47de2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b92b1d7-8d5f-493c-a0fa-145d3b42693f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f04743db-cdfb-4697-aee5-0de15cf467dd",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa8e7e2-4e96-4920-9f79-d3841c9b1df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89142618-0c17-4f23-928d-993dca395ef2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412a987a-37d6-4e5f-8e1c-119c34edecc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8e086f2-055d-4f3e-8f20-d2960d067d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4307c6f8-4fb4-438a-8a04-24120e5e2fe0",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8018da92-9689-4a5f-b094-2d8f393d0449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1ac823f-4f44-43d2-b58a-a6955efda14b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02130964-013f-4a11-9628-c406eb4cdfcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "df1a0064-2b48-4efa-b9c6-6f320b29b50b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55ec86f2-a477-4daa-8962-9febb75e76d0",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87241776-c0dd-48a0-b69b-71ef6b312a9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d6f175e-5f20-43e4-8c1f-da29c943952c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82922141-9fb7-4881-98de-6904756dc72e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6bb33a82-1263-45f7-addb-11b454ef8302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1765c7c-451c-42a4-97a8-b79d39e7eb5a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff06e6ae-4ce1-47a7-9de0-38b21f990573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "174fc675-090b-4ce9-8324-7c7c043b97b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a560026d-7c2b-4997-85db-9f12226a8e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc68eea5-b59a-4d61-b39b-9f9f91054859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cbb9a9d-f1ad-475b-9e5c-a54725fd8788",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "200b98f4-66d2-4640-8628-6661885ebd87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0cbd1506-d1fa-4ba4-8f6e-e381b4301877"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b344c1b-aefd-40c9-8cfc-9a1d921e016f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6a506d8-997b-4bc1-9a58-6a6a6df9daee"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7ec0cf70-958d-49ca-8cc9-b8c63c849aaa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a70ccad7-c620-4e64-993d-7c5a4417541f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70e8f4b4-9173-4146-954c-587fba1559a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0957c23f-33a6-4165-b359-25e77bb91d96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c124fe-927d-4330-afa1-76a4305fa752",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "669861dd-fc3c-41f9-84c9-0b3a7b4c8eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51dd594a-53dd-4b6e-b0e9-03d39a3c1735",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f68935e0-46d2-43dd-8fd3-8601d8efb7cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ecbf7e4-6986-495a-bc1a-c1f8119689ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a64daa3d-5861-42c8-8a41-d488680a7ec0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "31c23d64-6f92-4991-b4e6-d1930d72948b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "94821187-1f9e-4db3-b765-0e1a8a848b22",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "717739b7-5654-437b-aa04-ac25457fffc5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c5a30aa9-9b65-464f-8bd1-13143ff3db76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c2a165f-7396-4939-93e8-5f5a0fdb2e5d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7c00d7df-cdb6-43fe-a448-5dd8363c0aa4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ee3d3cfa-f807-4a12-9bb7-2abbca7ca67c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "008882b9-ca97-4863-bfdc-9c5a88f314de",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1882649e-0a52-43bf-a701-23a7397ecfbe"
                }
              }
            ]
          },
          {
            "id": "0bf041ce-8d91-437d-b845-08ab5273fba8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fd3f9440-3267-41e2-b51e-c634589f8f3f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "43e74d20-b5c3-4179-ada4-a0539ab4a582",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2574006f-b8a9-4e3e-82a4-651ae26536a5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8a055fe3-8fe8-49aa-b8ae-1ac8a42ddc5d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3e8f7721-2065-4de8-8bd9-b4e800f02c99"
                    }
                  }
                ]
              },
              {
                "id": "a0c2b3b7-af54-4b1c-8207-0b98252f06b2",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "580de436-d037-4902-b761-0c8eaefb63e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "10b40e8e-8a27-4db5-a6fa-8fcab74dbd40"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "41aa3a87-f645-4892-aeee-5692099c2139",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "426b1eb6-57d7-4ac7-aa3c-f44c5a5545c1"
                    }
                  }
                ]
              },
              {
                "id": "2c8fdbe2-e36d-4d42-bb2f-376c6c82c5fd",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e994653-56da-46dd-bb3e-c30ec5bb97e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "23e689f4-3fb8-4cab-bec2-99527903056a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "649b1ec7-ae67-4ab8-b1bc-aa31ca370f14",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1f7bd016-7759-4f57-a914-62c956b6d3f7"
                    }
                  }
                ]
              },
              {
                "id": "1cdbf939-cf88-4eee-8873-2b5ef127d5a0",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8ac99d5-8326-4187-83dd-e4341fb36362",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d544f04b-f9d2-4f60-b48f-4ff1ae20c062"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e7a0c775-473f-417f-940e-ce2950361581",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "b97826cf-66d0-442d-a95a-9d6370624f62"
                    }
                  }
                ]
              },
              {
                "id": "341017d1-5211-42c9-9171-21ace748ed00",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c19a123-6428-4f0a-9259-a3d7b3f3c7b6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0e333e63-804a-40ae-9361-2d0d8e6816f0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df6ec4df-6fca-4213-a2ff-091853177887",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1455d5dc-59dd-45af-89d3-ded0842a5a0a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "531bfbf2-a239-48b7-9139-7f61a76a934b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "942fcf1e-0052-43a4-a08d-df8bb624a068"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f27656c5-f881-4d20-8cad-a505171ea08b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "41eb02a2-3f23-4840-92b5-f070029ae7ed"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0f037aa6-05f6-466c-83b7-dcea77d1b222",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d1f5dd1a-717c-461e-a3c1-e46d87b98d07"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f970a556-9bdf-42e7-9df3-77cf9d5ae78d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "87c70615-595b-42ae-bbb3-ed1f5716e1ec"
            }
          }
        ]
      },
      {
        "id": "8c051fb4-5fe9-497a-84b0-3dc68825985e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "90c61497-ebd2-44bd-9fa1-de44fa7f756e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "06b60321-ddd6-4e1d-8e81-d46ea777d45a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d1b4e2d7-fba1-42a7-a526-45d78734a318",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2da645f-a16b-43d0-a5d2-a1a71ad0eab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f60e845d-b572-4c2c-bb72-70e6203e48a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de037b08-da41-4b6f-9ac1-815058b9c635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9570151-90ad-473f-865f-611b89408361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24faf886-24fb-4c33-9868-b16d125b7957",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1476a25-41fa-4514-b1aa-5ef26bcfee2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2351d944-4666-4d9b-99f6-e19be260d9f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b6e7fd-0c91-4d0b-9905-6daf2ee07b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "26d87986-3d5f-4d86-9469-790fbcdffced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdbc9da5-42e8-4595-9108-8c688ca3bedf",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc7451e8-d0da-4b88-a02e-d3cee6aebfbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62678b05-d7b2-44a5-bbad-2825d4b2a143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1125f69-7948-4db1-b625-161f87de79d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f2816dc-99c8-486f-82ee-700f4ff9a7d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a94754fb-aa6b-42e2-a4c4-28e26b5c48a9",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1352a45-c3c7-4cbd-aab6-a0673d6329b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aea9a5a-61c3-4ad1-b6bc-39b4bcd9b9f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e03d9f3f-599e-43ea-9c71-c52a45307dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ec3885b-feab-47d3-a0dc-a1930692eb35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "483beeb3-9126-4c5a-ab66-9dc26055b47b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "054b78d6-2350-4dd1-8a1b-ed8ca22b24b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e2a6f30-037c-4156-89d8-4aed02117d97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa96860-7576-449f-9c3a-a970808d7998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4364045e-5d3a-41f7-95aa-185d2dae3b93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eb04dc3-d52e-4bee-9a4c-af1f6c715362",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6377d5fc-ebde-4845-8a89-4845a949af61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d88195ad-c2dd-4e01-87c1-440336d8d1d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad7d8734-cfe0-4273-bc4e-a74eff773f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9903f30-1ff1-41cf-8b1f-9fc94543e1d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30cc3cf5-987a-48fa-823e-20882a12ddb6",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28dc7a77-8d6a-4e60-96e4-13e7872b8481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aced5e2e-95b6-4572-b92d-ad02a882fa18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b7855b0-9195-48d1-b55b-3283a01d656e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf3ccdc8-5c63-4bd3-a010-8101d3ccc262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2364a5a6-102f-4975-890e-6205f9cd8587",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f7a45d-22fd-4268-a88f-6f695b218e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e1dbee2-0445-4f91-ae0e-35d5d00730e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d23d34e-9d0c-47c0-9bfd-f731c639799c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a07ccd76-e5f8-49c6-a51c-006765c09251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c178a441-91b0-43d0-9ccb-95db2ccc220e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dc3d2ec-5804-4004-8ab2-ff8e00417552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b7dc917-27dc-4a05-af74-e6eb1051004c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1559bc03-df72-4890-a8de-fb306b05f2af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "95602a70-f9ec-494c-a65b-ccd9ac3f9cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9777dbd1-c6ff-45a1-8b4e-1ac7adaeb1a6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84a34463-3a34-4a78-92ef-989b8f29affb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "547dbb60-ce50-4cd0-a543-c8f822c56147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce4a3fe9-aac9-499f-a3bc-b6b13b94981c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "091cd913-71d0-4cca-9cbf-40b4192da98b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf347011-7c50-4e83-82ee-c479de65b9e0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca70f04-bfb7-4d66-9aad-9890bb72ab21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62df4a8e-5979-4a63-84dc-8a5861763bd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05038d98-d274-4a30-9000-4b68c57f84a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4bde9825-44fa-448a-8137-21dbe494cd56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14c68764-e429-45df-8bd6-8e1e36e28c04",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "860ee866-9b3d-4512-ab07-24484b63155a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e01b9bf7-a07e-4754-99ab-3bb8e4f2e8d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1942df37-ad75-4e52-83ef-d1b81f69a413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "373208b1-c033-4850-a8cd-dd0eab0262b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25baaf0e-73f1-48b1-804f-89cfdf3498c6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ead7a6-e169-45c8-91d7-86bc58842193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b2aec0d-5219-427e-bf0c-ca6799142247"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ede5f6-4510-4572-bfae-09ecd8c4f1aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a9a1d69-b06e-4772-871f-c1ff2e12664e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f75e566-2203-4940-8e6e-34622d1bf799",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a67fc97e-1063-4331-b0f9-236f85a3baa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bea8de18-2c0d-4878-be00-c4e8ae6ff44b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "454ce59c-c924-4147-92b1-a6ee49a3416d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a78701b-b13f-49ba-b75c-009001967ca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "599c38c5-bf8a-483b-b823-acac8decd763",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "509c7f52-6fb5-4909-941f-20e6d99c4891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a7823d2-9957-472f-9520-e779e8ec77fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d37f359d-e13f-4f4a-81b6-0c16d46e7a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a328046-d09f-472f-8b34-7748c4d2f0da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "963f365a-b777-4f10-ad6e-e217b944bae5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7ec9ecd-bff7-4a66-a658-4197ac7e8efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aafa6da0-7304-47bf-9e21-288d11e08a79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54404100-2b3e-4f9e-9c23-6751ee33709d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6e42951-6a1f-4f22-8bd6-5e819a3d4cc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1de27a36-7636-4178-9d58-392c72e59a79",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa589098-c986-4d76-ae77-089e3e607ed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16aff76a-b2f7-45f5-a0cb-ca46f099cadc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01413c02-cb23-4102-abfb-82f4a634c8a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0e3ac4e-8506-4eaa-952d-30641628629a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42fcc20d-1e80-468d-b2f8-5215d707641f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e84c0cf2-b6f1-418b-b81d-c88207a5b805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4242bd2-1cab-478c-a95c-9f46a8b094b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6354249e-8ef9-4639-a6dc-a9e2bc28b8e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d648ee7-66c1-4818-adf0-21ee004e23e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1ec0bc2-ab24-4afc-a73d-4a418aedabfe",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d001a7-d950-4e37-b748-02aa898d4bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e3c5c32-7be9-4c6d-9fe8-af9876bfcae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e761e57-135d-45c8-985a-bac962f6c8d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d5a3506-ed47-4a26-a61b-6f5a3f4be775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c5e0fb-bcf2-4a25-a66a-1a427193fb83",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "578f6ff8-beca-4021-a6fd-2fdbdd7049e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab31d8a4-c1d8-4f0e-8b36-b01c5d1b70d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f27fd47b-6eb2-4de2-8725-ca83fc0cb35e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "273588fc-64bc-49de-8582-922d2031b42b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3cf6736-e822-4123-8679-60d7559dd3ae",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e337a56-4100-4488-b2be-809a4c56d4a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6c492ec-bef2-45f9-87d1-8e6cea59c5c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "909b0493-ac62-4455-9537-6f02f841b84f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "678f1e28-c3c1-4b88-8a02-74b3e8ab6443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "311327ae-01a8-4bb7-a69a-587b1b1dabdd",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac31b64-49de-48a4-84ce-26ec314f96d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1a76323-7635-4058-82e0-9b26cf973143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d29f566-5c16-4827-8b9f-72b7258e488a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b702dca4-3e57-4d1a-bfe4-4ca7312b89c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a7bf7f9-de34-4201-ac29-b9c2c3707b68",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "819d105d-821d-411a-9e4e-b509c0f95d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7752a210-5bf0-41d2-b4f0-e2e386cce679"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab70def2-f0b6-4747-b03a-908dbdcd26e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bca4dfe-3526-4da1-b83a-d6b763030b37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c57e5c4-e044-4b30-b2d2-b0b91a6861e6",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d58692-e6b9-41fe-b65c-4bff30735e2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70322011-a8a1-4434-bc68-1dd065cc29a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "112309c6-bcb0-48a6-8c96-6bc9afca2031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5e42f28-9415-4fbf-a5c6-e15f3c502df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7557f86c-12e9-4e9b-8bf7-0d1b710d1e39",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b4f480-820c-4e0e-9582-e87faf9b73ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5db82a4c-9b4b-417a-a468-057108f3dbd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9944068c-1185-4ba9-92dc-f492ac42077a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45c7ee97-ba39-47ba-b30c-86a93ad22e69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79530e63-5992-40e0-9901-59247b738e1d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2153fc6b-8b90-46b8-94d3-1424ec8312df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dddd5c64-6763-4d37-b505-57a3b0fb45ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1113593a-ee68-4d5a-b2a4-7c97dbad282d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8745811e-c5e3-4b0a-afab-ac3a3b0260fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "694a5301-7784-4cf2-a325-839b19479a60",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "444284fb-c4b2-40a5-b9d0-0731ab5aca08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "278c6089-8aa2-4e5e-9ebd-2e00c8bd6463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e1cc3c-99ec-4ab3-81e7-d9b234c22b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba7612c7-bfac-4e5c-9966-2e730115ae94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bb6167e-fcae-4dab-80c2-8e45559d7c54",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a0f59e-4b0d-4c76-903d-16450fbac406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85c61a04-ce29-41ee-b5ea-8599f0f1732b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13e5d76b-fb26-47bd-9705-aa1096ff0d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c3cfeb7-23e9-4b00-b041-728c32ea2b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e40f3a-564d-4af8-90de-57406a250a9d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6580091-7c0b-4bc7-9178-b6509e0b9890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ad3b27f-ad16-4894-b3f2-d6a849d7d2ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3962b16f-53f7-410a-9583-dcdf2e8092d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f7682e5-9f74-4759-a1d7-1a6bb8270e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a6211e6-7836-466b-b911-6aba5a1b1d2d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ecb913a-5290-4124-b989-409418e7ae91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c26c1177-b3a1-4c8b-a6fa-64fd9c8c36af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59431cc3-8b46-4fd8-8d0e-aa352c25a6c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5defb7ba-cfb0-4f10-97ee-73dc10899a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c48ba6d-9047-4489-86eb-0e4ae68dd520",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "680414a5-b384-4bdb-bcc2-57e835c99367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e76fc5ce-7c31-448d-9f49-703958bc31a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac8b2a6-7854-44dc-b089-97a2e315e110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0967168c-acf3-4186-9fa6-3d65c5181aa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e6b942-a7d0-4ce5-9d93-6f4ad3a8e8b9",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70e7d63f-2415-49cc-b4a3-68e90f989fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b14ffb69-95ff-4153-8b36-6aa6cba06dbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "743e787a-157b-47ed-bc88-6a6871f5daac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49b5d6a4-04a2-4840-a5a5-e0046cec5882"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bdef9993-8ef5-4c58-a25e-dbc991e69f24",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "991c0302-4bf9-41bf-aaa6-c57bcef1f03b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac83a7b-3f12-4741-8e59-22b16c735965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad25d9cf-be98-4d78-a2ce-1e3e337b0a17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b358fd99-c647-4853-8100-6eec8ebbe103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b91cc20-0f8a-41eb-bc74-1f079468fa56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a541ae-db1b-44e5-83ee-80598982c597",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aaf3559-4004-4c08-bdf1-c34ba19d18cc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "b57dadc9-3b3d-4cdb-830b-5dc444e3859b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e73cf0af-a37c-446a-989d-b2a1ff57c4af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "04278597-d4c9-473d-86eb-454d4fce03b1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f07475d0-e544-4b7b-b5e0-1a12b370ce24",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f15e4f02-6fd1-46c8-8881-b9e5f7b84ad8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "44087b46-debd-4d1b-b94f-915fc0689ae5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e21183b-9f1f-47dd-b4d0-370b52922fed"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "69b368dd-3d49-41a9-b498-e285dcc264a1",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fb2d9f01-cc22-4be1-888a-46b47f48de69"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b7fd653e-8a88-4574-9819-c292c4b10939",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9cfbab9f-8675-4c4b-9619-3917e976fe70"
            }
          }
        ]
      },
      {
        "id": "0c6f62f9-925a-4b46-a46f-3542ff7531d7",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "895db96e-d3d1-4827-9a95-c6ea10aa7b1d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2bf17f2a-80c9-4369-aa79-ac35f5c70336",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "229da47b-5efe-4e38-8ee1-a1deb03bc951",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0410f244-ad52-4afd-be7b-01898a909e3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c2c2f4e-9fbd-44e5-8388-19c0775ad035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c2ab9bc-35b2-4989-987f-3d85b217b245",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60cebe2c-c0be-47e3-891d-3edbedc69be4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65016a6a-f3d0-45f4-bd06-fb9f4e325019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf22193-e97d-4b92-9233-a0712f9d1949",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90252bc4-5dbd-4bfe-9c51-319b2e905507",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f43248e-662d-48e3-9339-bc539a9e7cc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65daeeff-e34b-4673-b2fa-15ca09673997",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a31699d-9b8c-4702-8e88-22fb29bd58b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27a90fc2-cbb4-4c0b-9328-19dff468b877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e4923f-23da-49c6-9689-aba092c1d650",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf172b9-3507-4375-8ae8-bba15bfbb621",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "870a884e-e249-4513-b200-0cb4cc63f231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2fade70-86b0-4854-bfed-6df995440d70",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd83755b-73a0-421b-b61f-48a2570058c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daee7ab0-75da-425d-8bb9-cb154ba1b785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d79584-c981-440c-9d6c-7c4a6e411e8e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ef7345-46d6-44f4-9faf-1b17eb619d0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6a3c983-7866-4efb-bc52-3335ec3b1133"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69261f93-d414-4278-946b-f82ae3d457f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f882fb8b-d62a-4e6f-96ab-296be1b3ae28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ba130c2-2ecf-4a8a-a654-fb4368ce9d7c",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "186b2051-3f86-4724-a211-56b4db9b4c99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f533c6f-78b5-4827-8fbc-1ffd1d46e85a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa8a0313-e2cf-4d24-bd77-f30b4e9c2c54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c08c7dc9-c44b-4fc9-bf32-ac7705cc5cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4ef668a-c729-4cd6-ba0c-e63125736c64",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6184c342-e24f-494e-8b68-010c0c3a36a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c311a06-6634-476d-8576-4b3a621a9332"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "695f0df9-4406-43cd-9ef5-dd9f6f78e82a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2c1cd50-6282-424c-a2ef-9f9dc0ab86e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "888fda37-dbc3-4edd-b05f-8c7059a22689",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e095e1-60dd-4e8d-b5d5-0c21d96c6baa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45ffeb2f-b338-4241-8961-e8f26c325a60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7d3cd1b-be85-4968-90f0-848d0f7e36cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ac2521f-18b9-45bd-8a92-120cab7cf40e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a532bdc-c795-4d62-9dd4-90bbd9e4f3a5",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a6e7b0-2cb5-4541-b7a6-7befafbd9827",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ae67c0f-f200-4267-bb0d-38a66c768565"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce4a84e-4d63-4842-aa95-b911bc4b00cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37bfa59d-07ab-413e-9ddd-f4e049948e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9fa6e9d-4679-46d5-80e0-4f771214fd17",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a8657a-5eb4-40ee-b5cb-0fa1bc7072b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a9fef58-17ac-4bff-af5a-0f4c0a211560"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c5b05f-9980-4eee-b786-d47f393ec0a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b14a223-0514-40e5-8c4a-e39b48e8dfbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e3dda1e-d90b-435a-8caf-58f50c8a179a",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60323dbb-7a79-468b-90e6-d73cc57c6124",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0a3110b-ed40-400b-a628-0ec5b4ddde7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ffb5691-06ff-4f30-a288-e5b2e61fedea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ace76dd-1573-49ad-a157-3e33866b56b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4303206-e5b9-4cdb-9363-46ac1543328b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "023f9a60-d262-427f-be37-3897000dce50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08219ad4-65fb-4001-b3b9-1ec779ac28f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a77738-5c64-419f-b32f-c96ed3bfc309",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "889690c6-9a84-4be5-9da5-d592a3f839ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e10046b-14f8-49cb-b3aa-a477d71ef97b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a0e24e-7bdd-41ee-8ca1-e0dc50696327",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65bbcf19-2b69-4aba-97af-6a13cd472e32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "268732fe-4a1d-4972-9ad7-6e31f0aa5374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a4d32e8-329d-4a51-85e5-b50627d38989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9833f9a0-6688-4717-8860-ab041b4cc8e8",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f47e950-1bc6-44d9-be94-5e35df4c20cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d290441-94e4-42b2-99a2-a3aad927e2c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12e1fdfa-2287-48bb-b67a-8c2d6d356f3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b41061f2-f0bc-4c68-a1fb-fe227bb7096e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "941e4509-3b82-4a02-bf18-151b4cbcd837",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a2fb83f-7c18-41f5-931e-811402ef4c4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3090f34e-257b-47ee-adb0-a40578d26c9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a733c1f6-0826-4b7b-a9e9-7a5b784f930c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "948caf78-ceb3-410b-9e48-395336f42d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f286a41b-b601-4822-841f-13d0e58cd22b",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f461b2c-390f-4d29-9dbb-e1bb1fac963e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed9d0e4d-649e-4c96-a284-d40b1b08ce30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a4d5a2-821e-42ce-8e11-2540805e7770",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1372c25-c079-46ba-87c1-2e8c9dc9b4ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ea33f5e-7662-4e87-a331-96235274a6d3",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d61b6558-76cc-41d9-89ec-8bf601ca1a14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7767b6ae-4f79-43fc-8d15-fce5f421efca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e758eac-1f46-4b9e-a94c-0b1897b4bc22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a821e2fc-c9fe-49b5-bf6d-ccc2384e3548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f8ad08-9312-4fff-9efc-c74833a19206",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc26ffd2-9c2b-4e88-adde-799d12fd24ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c8aaeee-32e5-4e13-816a-1bfcddfde021"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caac736b-dd90-4c04-ad48-f64eb6cfa5c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51326e5e-ec3d-4f88-8a61-3cc1a670b689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45c340dd-1c8f-4933-b23d-6afaf3f90f6e",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d19727d-a747-4d8d-9a66-3e020eeb5352",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "542d1f8c-b354-44c0-83a9-f883c9eb3d45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f90c7906-f056-4ccd-aef6-6b6e30164902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a6e0afd-5fa2-49c7-abf2-01f53285afd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d54fcb26-2b02-4439-91ee-da5574f69775",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c2e3a3-ba5d-4663-b62d-67da8018cf0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a1eec11-3dea-42de-b4e9-0eb945d2e9d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de58c32b-5f94-44ac-998b-ae433adde4f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c6ea982-efd7-4b61-bacd-da16885e3fd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bdd284e-7c98-4f0f-b6d7-c737f3ea445e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f0cc1f4-7f07-44ee-9e72-9b4c1532dd46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ba0b20f-3e35-494f-b54b-31c8a1ebafeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7bd0b27-dc15-4ea5-8d60-fafb3603397c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eaea5d5-7f00-42a3-9c4e-35dc96832d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19da2d05-732e-4dbf-9081-2b16764b0d48",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b1578cc-d111-4d94-b969-398c943892b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "150b8759-bc76-47ed-a3af-98616864ef90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd9bcaf2-9fd0-414e-bdfe-f550564e3f58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4066712c-3993-456e-bbcd-4f20d8839cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6453dabf-e087-445b-9b3c-93e00658f35e",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e3ef1fd-8ba7-4671-9c6a-5a63fb992a98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff9b6a30-d37d-45b0-a440-ef1e6696b6b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d94443-efbc-40e2-870c-cadfede988b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f469125-6095-44db-b609-e14a1208e429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe69b06-fe0e-4140-a968-5b131105728b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c617f261-f5ef-49de-bd70-36f64cb637db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8ecf310-7b74-43c9-934c-b6e9ee71a660"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9573590b-20c1-4aaa-a549-c0782298290b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2702de3c-79bb-4687-a509-4a2c1669335b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a45e78-f0db-47bb-a322-42ec001da994",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03194cd9-49bc-4ca3-a26b-c3ddbb3669e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5def391-8fe9-421e-9bcc-4459629abf9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57d82b37-d0d6-49b5-814a-c3b037686e48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8a45b04-9ad6-42e1-96bc-a537b15a8fd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70cb6a5d-96ab-4d2a-b363-557174038c2f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "655c4886-c855-4179-a723-193b254421f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c371f03-6f53-41c0-a94f-f9b7496f1fa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f40f81d-f8bc-4215-9db5-28eaf32a2013",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3263f63c-fcc6-4143-a449-0d71959ba121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d2484a-e3c2-46e3-af20-0c7114c11216",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df604fa6-ca04-4b0f-ae5c-b460a555b4a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12159fec-520a-4968-9395-276b1519a97a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a8d0895-0f73-4fb4-af14-6129196e3b12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fc9f2ef-d8e7-4d95-acee-66160ab358d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df4804ad-e2bd-4958-9685-b977fc660e55",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e8e735c-9c40-48f8-8778-916fa3931a22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b4a28c2-4e32-494c-980c-e665be2ff1fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7adfc98e-2ccd-4bdb-92bb-f95bb988b07f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "770ac25a-6c25-4c4b-ada3-1619c9cf493c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67812f6d-8c35-4f4d-a071-6d6701ac25e0",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fedae011-1824-4578-98f6-0a91c9450d12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e98c5063-2612-4915-a92f-062420a49e46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb353a2d-335b-4700-88e0-4dfb4dcbbc13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd054673-2230-43c4-b43d-e97d46360ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f0d6da2-5f0a-472a-89cf-cb43fed50fff",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e807d3b1-e54e-476d-849e-0a875789b130",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e7f95b3-9768-4aa7-9678-10a129947233"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d105d95b-04bf-48e0-ba93-50dd30a8cbbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bc420a2-f4ec-4fad-b178-4ebb31d8f016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f695f1e5-cd81-41e9-9cf8-54fe707fc7a8",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e22f745-1abd-4e2b-85df-4ae6ad3d721a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "489a2464-1bfc-430b-8372-e4e4eda842c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0074e6a0-c433-484d-9b23-eb3b50d7070c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "063f97d9-9d3b-443d-936c-ef1f2bc23276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f556007-693a-4622-a2e7-4fd45ce91952",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f84eaa94-ad55-4042-bc9c-c96bf614c872",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "537119a4-efc2-4391-ac82-4321def26b2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d457e03b-d4f5-4f77-add0-91bdff76de7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7ddea8b-c1a5-404b-b727-911381f0fb6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a55ccaa-9364-4f48-8fd4-4a7ab247daae",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8af4e1-6f2d-4f80-9575-cc776b8d8b65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77453dbe-b209-4659-8fc5-d85c92e46914"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46de659a-2c51-4882-93b7-5e1ca5c6d8d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bade296-9f2c-4827-8ffa-bbdfccb22192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6f17666-fb87-431a-bb32-278ba6af633a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a852d39-2627-46d6-affe-dec16a70031a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da8711d2-3ae9-4361-8350-5e2233f6e222"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96177180-450e-4e53-bbbc-39ca655816ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b075266c-6700-4e8c-8c91-fede7b380b20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87474bc4-5c10-4d9f-bceb-0a038bc968b6",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a460aa41-6a7f-41dd-ad9b-7ae39c8476c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a49adaed-5dec-4c44-95b4-748a4e75ad4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f4f7d70-573e-4198-ae26-89752bb74744",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec3728bf-8f39-426d-9a69-a73686173a1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaac1c54-75bf-480f-a4d4-5ce665648e7c",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c0b4ba-c84f-4ef1-9c34-d980635b640d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2067dbed-f83b-4f42-a4ca-00f1374b4dc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eee7e59-9e62-4379-acc0-b073a9276646",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92063969-0aee-4f4c-b853-d5e3e23da4d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c896e697-3410-43d6-80a0-c9f288ddc2c6",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bceb15b9-c1e7-4b9c-8124-52ec0093e956",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b15f6366-155a-4ee9-8621-642f43797b5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf5f0b1-bc40-4285-a326-90a73fec87b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2070e34c-8053-4d83-8fff-fb7722ef04b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "367044cd-bd0e-407a-98f3-13c1980bdd06",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f86aff4-0b91-453c-9e51-96c66f160507",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54266cad-1fd9-41f4-b7b5-6cb27044f12d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abae6876-5d87-4dc2-9ba5-e3c3def21ba2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a79e4c0-a5cd-48c2-a22b-e1a443b2aef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "518f416e-469a-462b-be38-0c8438f16885",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32fa9a46-fc88-44e5-8684-be68632bc634",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e835c8b9-78c8-4a55-a5b5-db88379d24f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b8384e-fa50-42fc-8b7b-8b4485795021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3faf1c68-f481-4492-9dc3-bea814f3f698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e00ef8a7-232a-4027-b3ca-b46d6da1b689",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82985652-6168-493f-b250-6934eaa42eb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7a76176-d854-4da8-b968-ddd8c25276a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc6c30ca-b583-420a-86fe-5c5244a82208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98ea3160-10f7-4aaa-a04a-bceddf05ac73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b02f50d1-cff9-4cb7-875d-c5d97251a9ff",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e554ab6d-bfb4-4340-9ccc-64a548d7e246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbbf5fed-e8b9-4462-b323-ab0fd7a26811"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06140e48-6e97-4b5d-8e8f-438974200e2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec0f3517-3776-4c7a-a8d4-c66dc4a62575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b0cf61-ec6a-4772-a5e3-08e91a7772a1",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97fafb4-1081-4b89-97ee-34e0e00443b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca076904-bd8c-4b59-9c7f-fadd549117f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2118a7d0-146a-4a57-b55d-daf3020316e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5b3258b-65a7-45a8-865e-0a01c021a8f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01bfbba6-8e55-412c-8182-a296629a3d40",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc5497e8-3b64-4203-a728-5a57f4a7fa05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc432f22-0abc-4e2c-ae56-03b03395a23f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1a2b162-3e3a-4f40-8b40-96b3a7c2b15e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f353465-abdb-4f9a-a91f-cd344012cf36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53838f05-f3c7-4c50-bf9d-8d4bd61ed903",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e319df-6b7a-431c-9e2f-9d570652f89a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c252ddd-5526-44c1-b751-87588ecea3ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "493ef8c2-f2aa-4f0b-8425-fc8d3d1dabdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "734f9ae3-0a5c-4ffa-89f5-c9276b665e41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7db9016-fb40-4fe2-943d-d7349f43556f",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa9f8213-f145-4170-ac19-56c2be53a503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db11d91e-79ee-44a9-b123-83325f47c26e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f74bc35-870d-4520-a29a-64036da8e18a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6103f6d5-c1d6-4acf-9d8b-f872b2d7069f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeddfa14-0ab9-4fbb-9311-55c6e0d2c060",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63ce0bf8-2fa1-4e55-8f4e-396ca070d5cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a36892c-6d7f-4d88-a1a3-69d39441d9c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d702cc-a9c8-4831-8d89-3e1253b5c54d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b2e2d24-a9a6-45e9-a085-5168216e8c8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d947f5a5-91d5-4738-84c6-322177e90e1b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d49639-35fe-4e11-89b2-12ec31aff648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cb963ed-9929-4af2-8151-954824d06315"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec92eb1-db06-43b1-ac8a-f9564fb4e2a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3e2e01b-8273-4fdd-9f67-5b416953d7c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94915f00-b004-4fda-a330-8259b9f59fb5",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb603357-37dc-4b03-a973-07d59811c226",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41787f6c-3358-46d6-a8d2-9969b3f47fc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a27be392-aa46-4e02-aa32-cbd4596fe1c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3af5a82-8cc3-44e3-bc72-da86cb3ff7bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee02a275-0a88-4601-a82b-49f5fe05e2e0",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daacd49f-9a5b-4b5e-9ea4-9cc8c7915b7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "503b1ea8-6bf6-4469-b2af-048d33cc417b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bcc7972-27f7-40f3-9387-a7605b66f450",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f4f17e4-aa4c-4caf-bc9d-20330d3ee0c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14bff2fb-613c-4192-a60a-a6ad2bcfebcc",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "281291ae-1bcb-4012-839a-6d8019f6847e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef818e86-b8fc-4246-b803-2dd34a8b6c36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6678c29d-8032-4795-8bd2-762c28c1ecf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e502dd14-fe1b-4975-b2e7-aa9d80682f4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68a181d8-f342-4a0c-8ed5-362bb7ef184f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d14d6ad6-64ce-407f-9222-16866c6541bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a84aac01-e835-49c8-ba54-e7dfb75ec555"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63c3e971-9586-471a-bab9-7b0b6ecc6e96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "470dc641-f996-438b-a1c4-4729f2504586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7129836-56c1-45a4-93a4-2eb143970092",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2179cc1a-c19c-437b-9908-053f64e1d953",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45ccfd2f-0b42-4557-b3a6-6f21dc8d4916"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee421ffe-b2b7-4940-8330-329c55bd1fce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "201033db-0701-4262-8214-14de7dc19b6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4bad497-9b23-4693-a4cd-3d8230397a5a",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a46bf18-c656-4995-9440-f744aed286e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e89a7e2-7a04-41a0-8a71-679d7024ee1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7851dedc-da82-4089-83d0-994634336bb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98af803a-9915-4008-9cf1-c096256a33f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a23437c1-fd21-41fa-a968-909101ddcdc1",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc501ee-9cea-4bdb-bafc-68e489655343",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa40690f-27f5-448e-87e5-5b9f45f646ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc79e782-d860-42dc-ba67-6aacf9b0f5cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "698bbd89-4f78-4121-bee9-cdb66989d15c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aec20755-797e-4c69-bf1b-b2131e3f5af1",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c96974c-5d56-448b-af3a-ee9e3ab3bb65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1210af15-6634-4b3f-b39d-c8cab4e2dba7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "021b08e5-6ba5-4e1d-8331-fb56aa3134ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7c33093-a238-4d8f-8679-58e9f4bb8986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "698f3a7e-0e9d-4cf5-92ff-35b33d3fedd2",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2812431-e21f-4ce0-a31c-02c9bfb35912",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f20dae6b-3038-44f0-b2cf-80cb887b77f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7b83f54-38b4-4268-8539-0b2584671f68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d31819e-30de-4d3a-9db5-bf71b9928e7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17305a9b-32aa-4c72-85d4-834120361431",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b4a953-da0a-4aad-a869-e147f446e24f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edb35d42-55fc-4f92-98c9-784e9196c214"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b07dc953-e4a3-46fa-97eb-d9e9b843dc6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a940d15f-82c3-4c37-a00c-44490312bd73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bacabd8a-0fd2-42f3-80c0-606571d0cc1b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32df2d35-6965-4c34-9ddb-6557e71b6297",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "834f8b9b-a4dd-442c-9206-436e4ed5cb47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "204bf245-8a4a-4e22-985e-4bce84d04689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6142426b-d966-45a0-af96-f6abf1b9d6b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193461ed-be85-4af9-93e1-846977f06951",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9db62db-658e-4f40-b691-5c96af30f9c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46b4a85b-91b0-4182-8b83-d42cd98f0855"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69334ccc-56d5-43d8-9f64-2311131d4142",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2df39d8e-35bc-444e-bdca-65a0dc05a740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e5f0b97-a310-45b8-8298-fedeee02b436",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95353aea-93ae-42c6-878f-10d6fac06752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39fd9603-b456-4550-bb38-3cd1983ef685"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0117fa08-ce1b-4bbf-8fbd-d9e56239a968",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59dd1efb-b864-40b8-91d2-c67edb58668e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba3a34bd-e657-48c3-a2fe-e4769bab5ae3",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ce0dd94-4b48-4d95-b060-ea297e2ebba4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b84bd36c-f9ae-4d0b-ba0e-f003dc95b15a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "347a8747-9eec-4773-b4af-9ff8d3563cfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6471c831-c391-4ada-9fa8-8781d7ec25b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee90373-617a-434c-be11-3bd53df8688d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9413a6a9-21db-45b8-82cf-8df8a50df5eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "238fc958-157c-482a-8428-57226938e631"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e96e50-3820-41c8-8c4e-ab602bf0d856",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b948b67-76c2-4b60-9dc4-5618994c954a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88ac07b5-7bbd-4e8c-a9e3-ab6d7758657c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad075f19-ddb8-4c64-9621-10bb716807e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f707701d-396a-4037-bd72-27656192dd8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89dfc80-ae81-4901-a351-1c0f5c74b8fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ffe5d34-2a1e-4bf9-89a5-865b7c18438a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63a7f90e-5a2c-4c92-82b2-f0402338c74f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e506f34-c42e-4eb8-b4d3-bdb2ee15c96e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3faefa54-05cc-4bd9-b347-59b951f7086a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "456e2902-3637-4a01-8d43-045f696bc169",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d47a856-9477-4976-8626-1f070eac0eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b40c03-7450-4fe2-a858-2e21ae9dcc37",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "016a9f5b-2b54-4210-bc4a-a3b39044180d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e9995f2-259b-4d04-a55c-ec5eb0a871df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "980515c3-0be0-4401-891b-1788b68925aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17ff08ed-53d1-45e7-9d78-b9124af2ef8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "990d7ea7-84e9-4cba-bf21-a26116ad246c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a6c4e70-120b-43ad-99fd-f5bf3fea4a73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f7139c7-2be6-421c-b4d3-b6ac2fa23124"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d55f5d-1fbd-46fd-8325-b408abd78f89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d64161dd-9220-4272-b710-860ed1ad90e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba1c3212-74f0-4d1f-950b-5a5a4cbfc464",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45794f88-295b-41cc-920c-fabeab7995f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "993c33b4-cdae-4dbf-ace3-5baff2a0c43e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2123d710-19d4-4f90-92a7-e912ff3b0550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d494c0f7-c8ca-4a4d-81f9-f03c6014c9a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94a70642-2005-4da7-ab2a-e0b0fdfc568e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e8606d-20c6-4a06-9d17-cb13d8c098e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d745300-ef9f-4a4e-a3e6-e66e84392cf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "415d93fa-bae6-43df-8855-c4fd77d3f2f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e54a4f2e-7539-4378-a944-9e6a2f83b38d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f4e43fe-d5a2-492a-b5c3-dd54f06844d0",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c03e1f60-f37c-470c-ae56-6f18fba7dbe2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "602804d5-072a-4f99-a413-ff358bf19df7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "374dba38-f9d8-473e-8394-e9bf84328c39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eb5405b-30e6-4d81-aebe-3a689bad50d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69231b4b-08fc-4bd6-94ac-2f56950d744a",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da41c5a-ef05-4e88-a8d9-4646cf4df276",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b7ccf61-0cbe-4af1-95f7-3c1e5460823c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d13e3e-e09c-42fd-8a78-91f4cd6c401e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b059a70-221e-4f1c-993d-3567a3164cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae766203-6e7b-4fb1-8f31-f5f9434e6b63",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca4c199d-5a00-4478-a734-7732847bd219",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f19c71ac-5641-4cdc-a433-8297b7eb170c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00e02bc7-f5c0-4ce0-8cfb-9b8d83400853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58f54447-7a26-4237-8e1c-50dcb650e347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ed27d9f-8118-4584-80c6-f2593c10a4e7",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c328dd38-8b6d-45a2-b261-39c61f57ee2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4022922-46d0-4379-8d9a-943603044e0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a483364-a48d-44f3-862b-46f70defdd91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ca6f4cb-18ec-4e27-9e10-17250b5c3d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cb21151-14aa-4905-b283-683838b99930",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9acf6da7-edd7-4217-90c2-b57c55ea8537",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34b1518c-c36e-4963-91c7-50569d9e441a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "521e9520-9cc6-411a-b98b-64df2c842fed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd071a0e-326f-4447-9de1-b20f478d3ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e500648f-1f71-4fec-911b-efcc9a4c1adb",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4143e392-17df-4086-bd6f-c588cdabf022",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e8e1e3e-f4d7-443d-8c1f-24a7bed391c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a2a62e-312d-47ad-b7cc-917343be6538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "085e3da5-882c-42a3-b491-3c464a94c406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d043f42f-5890-4a20-ac5e-474595eb6c3c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf464dc9-bed1-42a3-aaed-fb13e1d75b1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "807ab781-f1c3-41e6-b08f-93dd0aaafa2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "223c3ad0-549d-4381-9c2e-81c496ca9965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96fceea6-c396-4938-af70-29e7de7315e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f21baf4-30aa-4333-ad6e-2f6e54be5168",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb5b8ec-3286-44d5-81b5-e424d114f248",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4ae5f28-b475-403d-8f62-844446b947ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6cc2213-f369-488b-bdb2-5df5ee9bd649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e585115-e7d6-41a9-8652-b44e7e535dc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a68f8ea-46d9-4d93-b733-1a60206ed280",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7154041d-cdaa-4de7-9742-0c7e4ec69058",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "205f9826-8e75-4f7d-9ca5-5c3fbe7d487f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d400f35-92c1-4e50-b795-9db9372cb562",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3beb8d0-83d6-4a68-887d-dd73e2c186e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cbcb2b2-8182-4cb7-a1e7-dc6edeb0e827",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d756369-ec63-41c1-b12d-ed82de3821f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0bb7d7b-9de3-44a7-b245-2a3d74b5ebd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5945d7ac-a258-45de-84b0-006da36f9f49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2898b1e2-1116-4ea4-aff7-f89066e63417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "188e4e0b-5f9a-47ec-b536-01e999a21a1b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "263e7efd-6338-42ee-bb37-60e0ec3f32c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8ed2cf0-1f8a-4f47-bbce-f0b0a5932b5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b3fb5af-e352-4b56-ad88-db648acdb16a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6464ca77-deeb-4a37-bd08-c382d515f9a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d415d66-0c4c-485a-9376-b3287fe63e28",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "644989f1-836d-417c-a64b-ee545f1f95bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf492817-3c08-434d-b6c7-0e9d5883a14d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "967ac4f2-29df-4800-b1c9-566f442b00d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08ed3774-a014-41fa-bf65-b7b601a0efda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaa4fc56-59db-426c-bdcc-cb0d5a8a27ee",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4d4c299-6350-419c-9f93-dc1c8fbe1a33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8cfea9e-f0f6-4fb4-a1d8-7b3c509c339a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "454cce4a-1707-45ac-b07c-9fd75345b7f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ac90200-0ed2-48c6-a2c8-33de524a86ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065b7bc1-8d8a-4201-83ca-52f489991c68",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e7d15c-9922-4b5c-9c6e-41789f75181b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24467fae-7e04-4d86-996c-8e794a6923bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3c8991b-60a2-4a0a-a459-c45820da8858",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c4a9569-15ba-4804-bccb-d8a5620405f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a06bfb0e-d7e6-464e-937c-9b9e127cd76d",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20e9ffdb-2f9f-498c-bf16-f2753be2190b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d839863-3efb-4dba-918e-b094753a3363"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba91d59-12b5-434d-b355-4ba3b45f9c8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22b4d808-550c-4dec-a7d6-4f1b61c738b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0eeb25c-126f-4c57-b446-d282b32ef7f7",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a794629-6aeb-4c71-b617-d280d9d8293a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "142dc6a0-de60-494f-987d-9d9701601fce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f0a007-e35c-493e-a9b1-59bb770cdcab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67970054-ad63-490e-9365-cd3f95101c79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ae5a8c5-1366-4bb8-a32a-1d73700edfdb",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47b5239c-b8ae-4b98-9976-304b0726d2ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c3e9950-d270-4c23-8f49-386e1cbc3ae5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c99d068e-6fdd-445a-86db-bb714a7e68a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dc76c2c-4095-4710-90e7-e69bcb35f153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d3f67ea-2e30-4e51-89a0-0d1c5457286c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4427893-cb53-427d-820d-f9f1ade47d86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dce14efe-f9f5-4757-aa15-06d6be952a71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa67cb4f-89a4-4a83-9a66-3329e04643e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa039dc2-addd-45e0-8d5c-a81e63710703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb8d5e41-238d-4c6e-b870-e963a5d8baeb",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a9db32-9c7d-4c08-9ffd-1cf2b42c5e60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be56d04f-ee10-4ef9-b306-d21df19c3597"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "055bf089-752b-48fc-b73e-2f41c1229496",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10493716-01c6-475d-b628-84cbb0a2df23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b89062-3eba-4f18-a663-1b8b34ddffa4",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5febf88-795a-426a-96ed-3aed6a87009c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecbc1755-c728-492b-ad62-2fe1bd4d31e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15165380-0736-41a1-a840-a36662b013dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a615ed59-a411-4839-a4be-869eb3e36638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb9d990c-a73e-4b77-a995-38ce06ce3e19",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26c2710e-1fb0-4fb7-829f-8d2248dd2fac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54b21191-b075-4071-af0e-b408c8e5e4b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb72622a-73f3-4383-bead-a1a2666dd6d5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6447216c-5f7a-4f38-ae84-656700c3e7c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1866afb1-8b48-435e-b69e-014db6f7d5b0",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2102f90b-6ed4-4e99-a252-8e688de6e442",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e64beeb-fdb9-4516-a9cc-060ebddc6af5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02478dd0-8e91-4730-8f4e-ede039e41d66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1384b4bb-a36b-45db-9af2-f8a53b84966b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36ab33f0-8758-46c0-99d5-0d27076e256d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d0d27e-39af-419b-874c-6a4815a21879",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75c92294-f3d5-4b77-a8b5-bfa28f15e4c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa36f7b-275f-4d95-99ef-8065bcc623fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f37a7d9-3225-4a65-a429-93cb62bde9ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb90596-e19f-4d5b-913a-0395cb21f913",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5645653-447d-46c1-b1b1-dfff16dad676",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "330cd4c2-e284-4732-873f-391513bfacc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76660440-0a56-48b0-abca-b5fc0d2bd5f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43397146-e9f4-4056-91f5-e08bcb447470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebfa0bc5-a0fc-4bec-800a-ca292b7e8367",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d68d806-20f6-4f7a-930e-fa4baf2d74d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62ec23dc-9db6-4076-bf83-464360c5f4dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "089fcf22-1c81-4f5e-9fcd-a864c7326bd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09a081f5-3d96-4c41-999a-c9d66bc2f894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f1fe6d4-1516-48ce-8b0f-260dbdfc3162",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b787b328-ff04-4c60-993d-3330755906a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d7b2614-2c87-40f7-8602-f7e21ba52213"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3917c895-bdcf-460e-bc6c-f54719f225fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f291ec9f-12d9-4c00-98be-e6875c43b752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14ed65c2-275f-498f-a3ad-ad01f353a180",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e742fd8-2279-4de5-8093-cb046fe7f3bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74db8736-4f42-4064-b05e-bbd72fc7af69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be92cf30-2ca9-4f44-b2a4-0012eae34bb3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73bbd26a-3c41-4d06-856a-91e65fd9af3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5429faad-29dc-4df1-99ad-4458c12f9a03",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "268109f1-d0c3-4efb-81c5-8ebd6d314be2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fa24489-1a7c-4abb-a873-74d791c90603"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4b0c6ff-9281-4bb3-99e5-8d6a8952fa18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8770b05c-96c4-4c52-bdf7-6f23bdc24c60"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "289eba61-9994-4014-8b61-959a316b9174",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79cdfa87-421b-45c6-af31-8eae4983d586"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "65f537fc-2e8a-480b-9448-d70181bf9db6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8d16eb69-e6e4-4d34-b9a8-36bdc3949fd6"
                    }
                  }
                ]
              },
              {
                "id": "3dccd6c4-aa95-437d-90f2-64644df4b36f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4d44a817-fd85-4898-8007-cbb7bf36e26d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83139c29-e5bd-4f31-95da-adb3b0b82f74",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "81ede38a-979e-4c69-8949-b5ded8ca4434"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "756f48bc-0c80-4283-a789-52c15510b797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00576d6a-1e79-478f-8cf3-254fe0758b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4500dc37-4294-42ee-ad15-b34f44e5c766",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44c30450-4f50-4d24-aff2-c483c8ed89bc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "cb36f32b-d629-4e7f-b719-70755239ea55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be05865f-5b83-46ab-9b10-067948af7878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "68772d49-2d76-4824-84b2-ef0705e5173b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3fa7d68e-bc80-4a48-b8c2-8d1534446f1f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "85deea37-dbff-4573-bf27-98d6af2b7c18"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0aca1a0-0103-44cd-8fcf-d158d2fbc29f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "07b91246-4d5a-4ebd-81fc-288273a74f45"
                    }
                  }
                ]
              },
              {
                "id": "2f40db0a-d852-4c3c-bf28-1768cac3b71c",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b1c18432-9a2e-417d-a513-72f7ee3e1440",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "979f11e5-d038-436d-9bb9-1e839b06c2b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "8501a127-a100-45fc-8d4d-c222a90ffb1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b19d850-7f4f-4ad0-b148-c4f8d291c39f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa177dfb-cb4a-4df2-981b-a09e8220b4a4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1c80f294-bf90-4ad4-95f4-d5c99dc9e1dc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "42c47198-dac1-4f54-9159-fefabfb738fe",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "336c360e-b089-40a3-8cd9-825598854acb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "05e04dc9-de5d-459f-bd46-84a427034f1b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68624bcf-c33a-4325-b594-2ca0b6267337",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca7dac46-1994-47ef-aab0-3313dec79a4e"
                    }
                  }
                ]
              },
              {
                "id": "b0008afd-4a79-4184-9e7b-c7b8f0f4b1a9",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9f06eb56-ffd2-46bb-9d29-43d74ce98fb4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4da41fe3-0afc-4ad0-8111-efd8e0ae42c4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6750198e-0573-4dbc-bd29-9a750dcbd7ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d0c9502-85c5-4caf-b6e1-3bce86286dcc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d7b7994c-bda4-4392-9f2c-99ddbb54177a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "cf9c23f1-d7fe-4770-82ab-1e21ae793965"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aed03c1f-3017-446b-b189-b0ef7669f479",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "71902b83-31fd-404f-8981-ba0ea0f8f180"
            }
          }
        ]
      },
      {
        "id": "a74831ab-39e3-47b2-b665-48b160b80981",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "38b43870-cce2-44e1-8f9d-9c7e11a80bea",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8a14b12d-b73d-4232-a789-d56d2995087e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a55ac32c-1ac8-4dec-8afa-a1dce124431b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a536c72b-4cb2-4950-ac6a-6bceb24d6e56",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4cde8e5c-c637-411b-9cb0-175a674a760e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f10cf1-e633-4755-b88b-f94034a1c725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d7bf2a4-c07b-4257-aa49-3f2b4c32b770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "114f8669-1b9e-436c-b38a-a23fdc9ce68d",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ce06f69-751c-4ed4-be4f-9704db4109c5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d2faca26-aa9f-4154-a0d5-4daf5d8d9056"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f67da0b-d513-4c67-b554-8f0d373df076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba708a8c-7bc1-464e-b1c2-932eb5a0eb61"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f8e560a-b6b3-4120-8433-cb9a7ca529be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5b9341b-3ff8-4466-9bdf-00775cfa6a16"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8cd795ff-5cc2-44c5-b91c-e50475a8c1a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "64f6427e-b1b3-4de8-85e0-cef993042047"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3425588b-bbe2-4a1c-aabf-e3fe4898fa82",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "cda7b444-00be-4da3-bf3e-18927e90281d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a35a29b3-f133-4125-a28d-53409660f649",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5394ce71-71b2-4371-82ba-3e5300c12de9"
            }
          }
        ]
      },
      {
        "id": "7e3fc6cb-fbdf-48bb-b64a-b45b47f413b0",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "472a7da2-1a17-4675-90d6-aaeef21f66ce",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9b82215a-ba35-46ca-aabe-ce371755dd0e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6d9654a6-6f1a-4244-b2a3-2dade92fd5da",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd380302-fccd-4380-be0b-13d45d6a66d3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bc1f7bc8-2718-4de1-9077-7e6cc3ae37ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cecd2793-f2b3-4c60-bdc6-94544e2cf8ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9c9f6d37-f533-418d-bb6e-b10abe01a67c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "295cbf08-526b-40aa-8933-ef20144d75e9",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "547c0a7c-b344-4963-aeb4-f682c3d39da4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "402ce136-9d7c-4d9a-943d-6c5436cf3c9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af2b8a0-454b-43ba-86b8-97149abd0f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6414e0ef-04af-4d8c-94b2-ca67ebee8586"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91dee85d-e848-4bec-9b8d-c37ae1f83d99",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0500e619-3157-4e43-aac4-ad1e1c550697"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "20dae8a3-9afc-44c9-b6d9-b258450b9a79",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a1af71c8-a727-44a7-91a6-7e9ff747985b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "60ebbe3e-2c7b-4238-af5d-b61ac362c533",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "cd46ca12-5b07-4ca9-9f3f-3f5ea48d1d09"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4f115713-bba2-4f1a-b23d-162ebb5ffe3b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "101cc9a5-2def-418b-9359-bd275a668c0a"
            }
          }
        ]
      },
      {
        "id": "f1390555-5b22-473a-97ec-ccbb5e4eae51",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "c8b2cb71-28ca-4bc8-a2cd-d5925f7425a7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a8c766f2-e183-407b-a82b-befc02020576",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8ab1d236-3865-4b89-bf69-9d8a23873856",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca68f3d-aad8-46d0-988c-78e1b4034011",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9b3e36de-6d86-4e9b-ac0a-0da93fef39ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea3b9320-945c-4d1c-9efc-2e3c995f78bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e3366a7-f0d9-4488-a136-c25c9fbaa19b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5009299c-4742-4f85-ac54-9b3402a85112",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af9ded43-da2f-4eb2-aaec-0c139f04422c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "526102bc-8318-4999-9508-ddd6bb418091"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "526121d0-dbb7-41b2-bc48-4a8eb7397774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d1ed295-6952-411e-b3d3-38bf001a4350"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c80cf15d-470d-46d5-af49-adbf4aae44fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "50d3f727-7af9-4a0b-9f9b-fe8909a6a61e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c17b05b-eac7-4a5c-b3ab-28f4246c59d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5896804f-a297-472b-b258-4af41700cc5d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "de370ae9-54d5-4a38-91f9-939092f0b1d9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "24c0a8a5-7f98-4386-ac3d-c335d90699e0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d810ac0c-af79-4d7f-914a-6d2565252507",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "be3b53d3-690d-4463-aeac-66bf7c52b317"
            }
          }
        ]
      },
      {
        "id": "e281fbbc-fa09-4205-a37e-c97d102bf714",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f86739f6-d76d-4235-b19e-782ad23688a1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "01fa74f4-bed5-4d68-8242-0c68833ab8f2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "2ba67530-85bc-443f-9dd1-4f67daacb9d7",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2611af6b-0f4b-4068-b485-428e81f8a026",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c36a72fd-21e3-4ecf-8ee5-f939ae19debd",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1917,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 515,
        "pending": 0,
        "failed": 46
      },
      "testScripts": {
        "total": 963,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 954,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 305.98850574712657,
      "responseMin": 8,
      "responseMax": 4893,
      "responseSd": 687.3004188622801,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1676649630266,
      "completed": 1676649723642
    },
    "executions": [
      {
        "id": "4fb3afb8-3a3a-4444-9102-c24234c1c1fa",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "89406c28-c6d1-4d11-8416-01d72be95f0b",
          "httpRequestId": "be5591df-aa79-46eb-8efc-bfd8123d038f"
        },
        "item": {
          "id": "4fb3afb8-3a3a-4444-9102-c24234c1c1fa",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "cc49229d-5274-4fa2-b275-c1dbfb1e437f",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 0
        }
      },
      {
        "id": "798f3f5a-27e0-4931-b278-8c5e80f439ae",
        "cursor": {
          "ref": "ba8c72c3-ee56-42e9-bf3a-dab47c0448ad",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6480a927-2dd1-4db4-a4c1-fc29c43230b8"
        },
        "item": {
          "id": "798f3f5a-27e0-4931-b278-8c5e80f439ae",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "cb17c39b-4ea4-47ed-9c95-abe2252e41ef",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "27614d37-50f9-4a45-8f95-c0138c55aa5d",
        "cursor": {
          "ref": "8e78eeee-dbc8-4142-9a39-5ab894f7e45a",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b8c92fac-53b1-4c73-b3b3-dba34c3b9c30"
        },
        "item": {
          "id": "27614d37-50f9-4a45-8f95-c0138c55aa5d",
          "name": "did_json"
        },
        "response": {
          "id": "29833a43-df71-4322-a267-916f35d8562e",
          "status": "OK",
          "code": 200,
          "responseTime": 476,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "720d876f-0735-4ac8-be8a-f42b2e02eab6",
        "cursor": {
          "ref": "6ffaa1b2-d6f1-45ad-994a-7914ca7a7d4f",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "bb518883-6a4b-437b-9aae-8c4d3a7bff06"
        },
        "item": {
          "id": "720d876f-0735-4ac8-be8a-f42b2e02eab6",
          "name": "did:invalid"
        },
        "response": {
          "id": "bcb16087-3d3d-433f-806d-ed95a3bda9f7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1227,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "720d876f-0735-4ac8-be8a-f42b2e02eab6",
        "cursor": {
          "ref": "6ffaa1b2-d6f1-45ad-994a-7914ca7a7d4f",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "bb518883-6a4b-437b-9aae-8c4d3a7bff06"
        },
        "item": {
          "id": "720d876f-0735-4ac8-be8a-f42b2e02eab6",
          "name": "did:invalid"
        },
        "response": {
          "id": "bcb16087-3d3d-433f-806d-ed95a3bda9f7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1227,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "262c348c-d55e-468d-a363-9df4f64d98c5",
        "cursor": {
          "ref": "de47eb1e-6cda-4420-a9d0-e76a519bdd0c",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "294a5a5a-dc9a-4401-9dc7-b6cca4fc60e0"
        },
        "item": {
          "id": "262c348c-d55e-468d-a363-9df4f64d98c5",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e5d9e92e-418e-4aba-9d17-187ade34ac7f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 61,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36509343-be66-402b-b3b4-983ff98f43bf",
        "cursor": {
          "ref": "a3d20dac-0cdc-46fa-8ac7-1b3720d3c6d7",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "84a0760f-3759-4a51-be8d-c69d8a545bb8"
        },
        "item": {
          "id": "36509343-be66-402b-b3b4-983ff98f43bf",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "4d41304c-4411-4a80-a5ef-9c02c799a07f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 62,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d9fc091-b83f-473e-9ac6-7a84fca45fbe",
        "cursor": {
          "ref": "f067d0a4-8c80-40a3-90a1-c43b2a3d3702",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0a280d27-07ac-46c4-86c8-fffe17ce4709"
        },
        "item": {
          "id": "4d9fc091-b83f-473e-9ac6-7a84fca45fbe",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "da56dade-45e0-4c45-b301-57afb771a919",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "5b8fb592-c214-4afe-8f41-e325bd78ed30",
        "cursor": {
          "ref": "4f6eca82-82e1-48d8-8096-572075e08c05",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ca7b9ab3-b898-4a6b-99a7-419b2a432bfc"
        },
        "item": {
          "id": "5b8fb592-c214-4afe-8f41-e325bd78ed30",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3316fb5f-7ec5-454a-8d3c-a9c9178680f6",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "5b8fb592-c214-4afe-8f41-e325bd78ed30",
        "cursor": {
          "ref": "4f6eca82-82e1-48d8-8096-572075e08c05",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ca7b9ab3-b898-4a6b-99a7-419b2a432bfc"
        },
        "item": {
          "id": "5b8fb592-c214-4afe-8f41-e325bd78ed30",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3316fb5f-7ec5-454a-8d3c-a9c9178680f6",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "0fab825e-6a57-416d-9b25-36785df75c98",
        "cursor": {
          "ref": "cc21198e-2e71-4f70-9d2c-426a03b155cf",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6dd1192b-0412-4824-97bb-06204269a2f5"
        },
        "item": {
          "id": "0fab825e-6a57-416d-9b25-36785df75c98",
          "name": "identifiers"
        },
        "response": {
          "id": "c9691271-154a-4433-b3d4-94856cc64321",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52ee224f-c95a-47be-82a0-ebb9c54e0e4a",
        "cursor": {
          "ref": "3d318dec-b7d3-4b9a-acdb-e2d73b963edb",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "eba84aca-3569-4bc5-843e-b59490c7754e"
        },
        "item": {
          "id": "52ee224f-c95a-47be-82a0-ebb9c54e0e4a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0079477c-bee7-4fff-9542-006d054578bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52ee224f-c95a-47be-82a0-ebb9c54e0e4a",
        "cursor": {
          "ref": "3d318dec-b7d3-4b9a-acdb-e2d73b963edb",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "eba84aca-3569-4bc5-843e-b59490c7754e"
        },
        "item": {
          "id": "52ee224f-c95a-47be-82a0-ebb9c54e0e4a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0079477c-bee7-4fff-9542-006d054578bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d413c6d6-bc65-4128-b273-a0ff90b2521f",
        "cursor": {
          "ref": "806cd4ae-9369-4e8e-8944-ba489239e9b8",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d3f5519e-12ca-440e-b8ec-b18ae4183ba7"
        },
        "item": {
          "id": "d413c6d6-bc65-4128-b273-a0ff90b2521f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "317004c0-c896-4e53-8aba-7792dfce3cf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fde7cb06-ea43-4bf0-bdb9-f64993f98bdc",
        "cursor": {
          "ref": "b2dff02f-cadc-4dc8-a13c-4ffe7b60bd60",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5cd70f3b-dbef-48f2-bc2b-61138c021e10"
        },
        "item": {
          "id": "fde7cb06-ea43-4bf0-bdb9-f64993f98bdc",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "79a6e638-dec1-416d-9b21-49cedc6334af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "463d75a0-ef58-4362-88d4-d6935e99aa8f",
        "cursor": {
          "ref": "715f227e-b05c-403a-9f76-10e96ca04c0f",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3479c19d-d5da-43b2-8573-ae07e76407be"
        },
        "item": {
          "id": "463d75a0-ef58-4362-88d4-d6935e99aa8f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "cf8601dc-6b4b-47d0-b9f5-ad6b686bb658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f1115bf-52b7-478f-ad5a-f78d7f5d041e",
        "cursor": {
          "ref": "c56a8a11-6d53-4084-a99e-c44349902532",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "495c5ada-72f9-4b14-954f-41496d80f003"
        },
        "item": {
          "id": "6f1115bf-52b7-478f-ad5a-f78d7f5d041e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "9fcde646-8c5b-4d17-84a7-17b759fcabe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7eab785-286c-4fa3-90ac-27d9ae175ce6",
        "cursor": {
          "ref": "acde2bff-81e1-4d4f-ab32-91613f2f5c2c",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "7ff0eca5-a653-41d6-9e69-0643e8be2cf1"
        },
        "item": {
          "id": "b7eab785-286c-4fa3-90ac-27d9ae175ce6",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "91680882-fc9f-4d31-814e-b722e38d7434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "810de0ed-4445-4637-8267-a53fa1a4aca3",
        "cursor": {
          "ref": "6d30a487-cd3a-4b26-83bd-661a9b097889",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6545c4c3-28a4-4632-a37a-22996a8e71b1"
        },
        "item": {
          "id": "810de0ed-4445-4637-8267-a53fa1a4aca3",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e4c1c1f5-8ad4-4337-8bf2-4bce99bb8f2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f58ae03f-fc3e-45a6-9465-2e56da4ef880",
        "cursor": {
          "ref": "c562d95d-c108-4a32-b3b4-2167f25d5134",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5e30cb41-a824-49e4-9879-19a6c49c9f1d"
        },
        "item": {
          "id": "f58ae03f-fc3e-45a6-9465-2e56da4ef880",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "bd36e646-62ba-4529-a88f-84062de6ed1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65648ce7-f3d9-4c4f-9604-baab60d75b29",
        "cursor": {
          "ref": "9b12d681-f8c1-4248-acb5-d1fa08fb8d8f",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a20cc14c-e0f4-472a-9755-fbd0b86723c3"
        },
        "item": {
          "id": "65648ce7-f3d9-4c4f-9604-baab60d75b29",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "16fa5cc4-338e-40c3-b893-7ec1513d4f3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f646a77a-84a4-4e5d-a5c4-8da301fe941a",
        "cursor": {
          "ref": "6150fa2c-61dc-4dc4-a174-ec5c9256e9d0",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e1882dd7-34b0-436a-a130-69c3ef6097e6"
        },
        "item": {
          "id": "f646a77a-84a4-4e5d-a5c4-8da301fe941a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "7fbb9e3d-af1e-486e-94bb-34fb527e2130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fa6a0ff-d6e5-4c46-8b7e-8ef9222c22e1",
        "cursor": {
          "ref": "d796844a-b5c8-401c-8f47-6ff7f0adae3d",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "5f9993d8-8f6d-43c0-8782-601ae460e53d"
        },
        "item": {
          "id": "5fa6a0ff-d6e5-4c46-8b7e-8ef9222c22e1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b6ba9bb3-d0c9-469a-bc88-a4c28c9b6e8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd8c1036-44de-4600-91dd-fc101192f98b",
        "cursor": {
          "ref": "2403c3c9-1348-4f46-b8ab-a81055b1fd89",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "7a6f6a73-0a62-415c-b22b-919a5104256b"
        },
        "item": {
          "id": "fd8c1036-44de-4600-91dd-fc101192f98b",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "6899f5bd-6802-49ad-9676-e700461e3dbb",
          "status": "Created",
          "code": 201,
          "responseTime": 755,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "9d9d6286-b5de-43cb-8b16-56e52dab73f3",
        "cursor": {
          "ref": "1d1a4dde-1771-43e5-adfe-368dacd20058",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "fa449125-6405-4edc-9aa8-475d4b63ee32"
        },
        "item": {
          "id": "9d9d6286-b5de-43cb-8b16-56e52dab73f3",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "3fe30f02-c4e9-4fd2-8f17-0be69a45a655",
          "status": "Created",
          "code": 201,
          "responseTime": 4893,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "e0757996-0fa0-4172-b89f-91bbd3834b9c",
        "cursor": {
          "ref": "3beb528a-bce6-4608-b119-25aceeb58e83",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "8e00beb6-e7e7-40ac-af92-ff3a7b8c28a8"
        },
        "item": {
          "id": "e0757996-0fa0-4172-b89f-91bbd3834b9c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "24641c48-b195-46c6-8ff0-473c4ac245ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b849a6f3-d9f8-4915-a169-996f17072a4b",
        "cursor": {
          "ref": "c7e4b338-f092-4474-8e6d-a7ee345acba3",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "5a45583f-7a95-45ba-ade1-c1ee5806e739"
        },
        "item": {
          "id": "b849a6f3-d9f8-4915-a169-996f17072a4b",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "1b15e191-09ac-423f-8960-26b1a99964f9",
          "status": "Created",
          "code": 201,
          "responseTime": 3106,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "4b3a8f17-232c-48c7-a8e5-4d2bef25a74c",
        "cursor": {
          "ref": "855e0bff-5a90-49eb-b651-0692121e1875",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "60794ba5-7656-455d-94de-114022185394"
        },
        "item": {
          "id": "4b3a8f17-232c-48c7-a8e5-4d2bef25a74c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b913a7cc-10f5-4346-8bd1-d2725472be48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17162d51-6f4c-44c5-9927-77419bd7baee",
        "cursor": {
          "ref": "e316483b-1e1a-4c53-9099-c6dc05fc9517",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7439eca6-b8c1-4c30-b11f-6926e009b883"
        },
        "item": {
          "id": "17162d51-6f4c-44c5-9927-77419bd7baee",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "17febac8-7ae2-45ef-964d-ac6fe433ada9",
          "status": "Created",
          "code": 201,
          "responseTime": 2708,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "1c8a3c98-9735-4b7e-96d4-51f6685cddd9",
        "cursor": {
          "ref": "4d1ca155-08c4-46db-a35a-50bf4be7a466",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2faa2bf3-f3a9-45c7-a15b-2abb7c0cd915"
        },
        "item": {
          "id": "1c8a3c98-9735-4b7e-96d4-51f6685cddd9",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c1a0d1c6-f415-4292-9e1f-0565d565833a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b05c2d7-960d-4345-b0d7-e6c181c4179d",
        "cursor": {
          "ref": "073068b5-dd7e-49bb-9a56-5191e5178119",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "3f91d771-058d-4d3e-bb79-bce91a915c68"
        },
        "item": {
          "id": "8b05c2d7-960d-4345-b0d7-e6c181c4179d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "48a79f59-4073-4068-93af-09a40f8942bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55ab3b43-4969-45e2-ba6d-11741d448e81",
        "cursor": {
          "ref": "fa44199a-9bee-46ab-b53b-b6a9272b41d9",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "fde761b8-bf58-48b7-91db-d6d659beede9"
        },
        "item": {
          "id": "55ab3b43-4969-45e2-ba6d-11741d448e81",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "e020dccc-f67c-499f-9ff1-7a844b631551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b3516d7-02f5-48e6-a5fb-01e6b8b3e7ca",
        "cursor": {
          "ref": "7ad70470-0bac-4e3e-a035-2a2ce8673191",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "157f6af4-5560-45c4-acf6-dac8ee806da3"
        },
        "item": {
          "id": "9b3516d7-02f5-48e6-a5fb-01e6b8b3e7ca",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "7bf09643-b001-4afc-8f89-6c43bd6a2149",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d636fa2-ffd5-448b-8695-b7127bad7cb4",
        "cursor": {
          "ref": "5c88aa66-cfcb-4596-a2e7-673e301b41cf",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "66477a4f-fca3-45b3-83e7-21988de4f333"
        },
        "item": {
          "id": "4d636fa2-ffd5-448b-8695-b7127bad7cb4",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "7395c3c9-208c-4a2a-9313-55e880304490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b7fce43-5099-43b1-bec6-96f49fd752da",
        "cursor": {
          "ref": "24ee9bc7-4d4a-4857-82bb-edfac4d37fa1",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4f5f46bb-724a-42d5-9181-21a81da18662"
        },
        "item": {
          "id": "7b7fce43-5099-43b1-bec6-96f49fd752da",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "9473477b-5d76-4730-a6b3-33a774e50087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a71f7a66-5751-41a7-9098-73bc6d43db08",
        "cursor": {
          "ref": "8e70e8ff-acfd-4501-9eef-b76233919e41",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f3bcec7d-7512-4b1e-b05c-9ab965230b75"
        },
        "item": {
          "id": "a71f7a66-5751-41a7-9098-73bc6d43db08",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a10f5531-d6f1-430e-b29d-a75432c1f46f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c597384a-882b-4034-8e8f-c0969a93486b",
        "cursor": {
          "ref": "98baf828-6dc2-4e9a-a44e-90f7efa59745",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "0746181e-26a1-497c-b966-85e7b79fcb3e"
        },
        "item": {
          "id": "c597384a-882b-4034-8e8f-c0969a93486b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "8463a4a6-9ced-4c23-b3c5-2c37ee1f3fe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c1d448-96d6-4651-bf1c-3db79b7a9aec",
        "cursor": {
          "ref": "1ee0cbdd-2ec1-451e-bd39-1ab1722e1782",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "975d5c77-92f1-4f0a-a71e-298dcd25ee2e"
        },
        "item": {
          "id": "30c1d448-96d6-4651-bf1c-3db79b7a9aec",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "11e375d8-8bc8-406d-aa46-784e8c8728b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bc63a95-b056-43d5-abb5-801a635ba9d1",
        "cursor": {
          "ref": "96039d63-9150-47c7-bab4-42dda2626d75",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "943b41eb-d811-417c-a8d1-2a0dcc78fa54"
        },
        "item": {
          "id": "8bc63a95-b056-43d5-abb5-801a635ba9d1",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "83ce898d-5aeb-4e53-8656-801c970beb5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce35bee-50be-4641-9857-15fe9c12343c",
        "cursor": {
          "ref": "fbf49a5e-c902-4b62-84ea-8fe0e8b69764",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f4aa9030-7488-4c12-989d-43e7e21150ae"
        },
        "item": {
          "id": "fce35bee-50be-4641-9857-15fe9c12343c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "28389922-dcdd-474b-b6e0-d20f83882155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb243fa-9323-470c-93b4-d2e0190353ad",
        "cursor": {
          "ref": "8daa2856-5ad9-4900-8d95-cce300b446ff",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "67dbdda8-617f-4940-a5d0-37180cc3e0d0"
        },
        "item": {
          "id": "ccb243fa-9323-470c-93b4-d2e0190353ad",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2d8d2320-01ed-41c8-917a-be1579fcab79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5892bf9-ddb6-4b19-94dd-b92efd77baa6",
        "cursor": {
          "ref": "a388a77b-cc88-4349-b282-96ff2c05154c",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c3d826c1-2bbe-4651-b905-d8dfee35ad2f"
        },
        "item": {
          "id": "a5892bf9-ddb6-4b19-94dd-b92efd77baa6",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "769e9790-a413-4f36-9347-b9aef806971a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29dd74d2-d552-4472-8cd8-54cb5b7c7958",
        "cursor": {
          "ref": "94b4e39b-00b1-48f8-a0f8-6ec2770c0633",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "f8aae9f8-c1c3-4884-bcc1-cf73522ddea1"
        },
        "item": {
          "id": "29dd74d2-d552-4472-8cd8-54cb5b7c7958",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "0d954bec-cbb0-4ff4-ba52-555dbfe13e94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6941971d-1be6-4490-b01f-96b66b54ee1a",
        "cursor": {
          "ref": "9309ece9-c110-417a-809d-f22667b93892",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "9885f5e2-9083-49a0-a1d5-4af65ea27c87"
        },
        "item": {
          "id": "6941971d-1be6-4490-b01f-96b66b54ee1a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "0568721b-3cab-4f8a-8cc2-0f668727ec44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd9876ff-ebab-45ec-98da-1c1a45471490",
        "cursor": {
          "ref": "5be71ebc-7795-4936-a1b9-9430154068f1",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "71f648b2-bb24-45bf-8c6a-ce3aba4865c3"
        },
        "item": {
          "id": "fd9876ff-ebab-45ec-98da-1c1a45471490",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "48d13c6c-7143-4721-ae96-e0465d931e2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7503c95-ced9-437d-a95e-4212705ee7c3",
        "cursor": {
          "ref": "326e87a2-0bd4-4d22-9abf-24fcaf3fac41",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "20ffb429-76b1-48ce-9963-b0b1d9847b6d"
        },
        "item": {
          "id": "f7503c95-ced9-437d-a95e-4212705ee7c3",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "74690441-6e86-4de8-a751-08051c8aa947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49b053ef-0003-4818-8eaf-a407b6ad8c43",
        "cursor": {
          "ref": "7b503e77-5753-4422-8685-0237d9799a86",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "bda4a17b-d88f-4301-8bac-eeec146a898b"
        },
        "item": {
          "id": "49b053ef-0003-4818-8eaf-a407b6ad8c43",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "7dfb072b-acab-410a-aed8-c40e82477382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a71444a0-a123-4478-a77c-f2f97b8a8ef9",
        "cursor": {
          "ref": "cde7aeb6-803c-4abf-bc07-0bd3ac1d15e2",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f01d2e01-e1b9-434c-b527-dd0cfe58d9f0"
        },
        "item": {
          "id": "a71444a0-a123-4478-a77c-f2f97b8a8ef9",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "c10478e1-ac28-44fd-ba44-6a7b56741b3e",
          "status": "Created",
          "code": 201,
          "responseTime": 2512,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "f092f102-88d8-4538-a147-e8510332351f",
        "cursor": {
          "ref": "b102f689-4bf1-4f1e-9f5a-2b8885296185",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "72393ff0-e52c-475d-b07b-2dc1e88878fe"
        },
        "item": {
          "id": "f092f102-88d8-4538-a147-e8510332351f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "fbfe6f74-6e9a-4daf-b5b2-173cbe768a77",
          "status": "Created",
          "code": 201,
          "responseTime": 2575,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "44b4bc0a-c432-4225-bacf-1170818275ff",
        "cursor": {
          "ref": "d55d3fe6-49a6-45ba-b346-82bacbfe157e",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "72bce920-c161-47c5-8527-fc5c9664c7b6"
        },
        "item": {
          "id": "44b4bc0a-c432-4225-bacf-1170818275ff",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "ebd4721b-f3f2-4449-bbfd-ae6ef138a386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12d595b0-67c1-48cd-9b30-31703d23e65c",
        "cursor": {
          "ref": "43be0613-ca42-46af-a36f-f6550be6989d",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2816c32b-2d5b-4105-8244-bab3d312275d"
        },
        "item": {
          "id": "12d595b0-67c1-48cd-9b30-31703d23e65c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "aa7b0298-7e71-4837-858c-f1199355b43d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ad5a310-2822-4396-97a7-639ed0d771a1",
        "cursor": {
          "ref": "85451552-3c07-429a-8ef6-d93cd0735c6c",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4c2f5b2d-07f3-43f2-bf25-3ce7074c9378"
        },
        "item": {
          "id": "8ad5a310-2822-4396-97a7-639ed0d771a1",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f5294b29-2eda-45ed-9f37-753b5554b5cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35704c1e-554d-438a-9f22-9a784ba01ddd",
        "cursor": {
          "ref": "c51352b3-dd56-4092-bd28-a7c0d6d263f1",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "efc94a4b-daba-41f3-975c-ef1f84e06bcb"
        },
        "item": {
          "id": "35704c1e-554d-438a-9f22-9a784ba01ddd",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "8f435e9d-ff54-48e1-a904-4c81e4486c5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fac29a3e-562b-48d2-ba9c-5fb4e26abe4e",
        "cursor": {
          "ref": "50431dc6-5670-46ca-b0c0-5753f690e5a6",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "77a98671-6205-4586-ab67-ecd39f7a7df3"
        },
        "item": {
          "id": "fac29a3e-562b-48d2-ba9c-5fb4e26abe4e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "97bc1e0f-c18a-4f49-82e8-c879259c447c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d405d1-eb42-4f89-a83c-95fe6245e7f6",
        "cursor": {
          "ref": "c26668ea-218b-4651-89e8-95d4414bed44",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "81e7aa43-6d9e-426b-ab4f-90c15151b373"
        },
        "item": {
          "id": "c9d405d1-eb42-4f89-a83c-95fe6245e7f6",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "443ac21f-cbbe-4e17-8544-061d92d25edc",
          "status": "Created",
          "code": 201,
          "responseTime": 4300,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "7bcb8890-955e-42e0-9e6b-33009a12bf58",
        "cursor": {
          "ref": "7e29bb39-7db7-48d6-abba-4a482efb736a",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "681e9f1b-a601-44d6-b07c-4934582b42ad"
        },
        "item": {
          "id": "7bcb8890-955e-42e0-9e6b-33009a12bf58",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "8de75e0a-02ea-4f4c-961d-5a188dfeeb35",
          "status": "Created",
          "code": 201,
          "responseTime": 3949,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "f8237d64-daf2-4b91-980a-7a644640edad",
        "cursor": {
          "ref": "b7f68024-387c-4e9f-9919-50b14a27bdcd",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b0f4479d-f3bd-4bc5-9c75-a69dbacb9403"
        },
        "item": {
          "id": "f8237d64-daf2-4b91-980a-7a644640edad",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "edfbcb33-6826-4f2d-9047-1cea338cc6bd",
          "status": "Created",
          "code": 201,
          "responseTime": 2591,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "595cd77e-f1bd-4197-8954-d373b9e4a6d4",
        "cursor": {
          "ref": "bf1b832f-0878-484f-9109-adc2fdcd217b",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "4be43187-fb53-48ca-bb0b-6478b21ee9e0"
        },
        "item": {
          "id": "595cd77e-f1bd-4197-8954-d373b9e4a6d4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "af08edb4-c104-437f-b743-000076dcd5eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 164,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f63ec7e-17e7-45e2-8b3d-1199028d05dd",
        "cursor": {
          "ref": "38abf23d-e3f2-4a0f-8b72-f0c42915cc30",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "40133e02-5dc8-4037-bc1d-444f58f05d8e"
        },
        "item": {
          "id": "0f63ec7e-17e7-45e2-8b3d-1199028d05dd",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "f78e8846-85df-4c76-8bff-b3f211c77db2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5de25178-fa60-411f-9f64-deec625beb6e",
        "cursor": {
          "ref": "4bce5670-1dc4-45c3-b34b-5233ff15f12a",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6b2211c3-29ce-49eb-b593-bbb653869dca"
        },
        "item": {
          "id": "5de25178-fa60-411f-9f64-deec625beb6e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4979e8a3-f21a-471a-bb5f-bd4b3a87c5d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0317f6cf-1d74-4b24-af02-5581e12cfe07",
        "cursor": {
          "ref": "62b3a233-a0d3-4d0b-9e0a-2f394f493b52",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e539afad-cb4e-47d8-9936-d3e380fe2359"
        },
        "item": {
          "id": "0317f6cf-1d74-4b24-af02-5581e12cfe07",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "bc678057-fb85-4abf-b728-4890659b71f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8560dafd-f2be-4250-8fa5-511ae989f9da",
        "cursor": {
          "ref": "51b1c461-500a-4f8f-bdf9-8e7caba6c2ac",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d3fe19e3-a045-4dce-ab50-00a768086370"
        },
        "item": {
          "id": "8560dafd-f2be-4250-8fa5-511ae989f9da",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "47e844b8-4a71-4d03-8083-d3216ff0f06e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d07c9369-2014-44fe-a169-0c207777cda6",
        "cursor": {
          "ref": "384e4fe2-a8a0-4769-8919-69d837e8c905",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "8e9dc2e1-f6a5-4844-a858-a1d3f96d2b5c"
        },
        "item": {
          "id": "d07c9369-2014-44fe-a169-0c207777cda6",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "43bc4b65-a8f3-4ff0-8c99-c6130dfc02d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5753580b-84ef-4537-bd50-cbaa0af1c7b2",
        "cursor": {
          "ref": "d609dc2a-963b-453c-b522-7b013b146095",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7d991722-52dd-4866-9e24-a9acddbf04ca"
        },
        "item": {
          "id": "5753580b-84ef-4537-bd50-cbaa0af1c7b2",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "980a4a99-ad2d-43aa-8b4a-c2c8efc09011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cd061b6-f3f0-4d0a-826b-cd5f493230e0",
        "cursor": {
          "ref": "4e68380a-3d10-4a75-a697-885132c3ed79",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "4ea6047e-3f65-483f-b322-2d6079199ddb"
        },
        "item": {
          "id": "8cd061b6-f3f0-4d0a-826b-cd5f493230e0",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "700fcceb-c401-4cc6-a55b-a678a399b904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aecf1104-3b72-4edf-8a7b-d41539195b7e",
        "cursor": {
          "ref": "9e814d78-8c2d-475b-93bb-9dda441dcd28",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "23f13793-d76a-43db-887c-0f89dfed97d4"
        },
        "item": {
          "id": "aecf1104-3b72-4edf-8a7b-d41539195b7e",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "2b10f060-69c9-4d1d-b20e-1cabaa14d0f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76fe88af-b923-4228-aab2-329de0fdc339",
        "cursor": {
          "ref": "97d16842-38e5-4094-9c3e-a2419df4aba9",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "4e70d99a-5b93-49a7-8a3f-13958c30fcc9"
        },
        "item": {
          "id": "76fe88af-b923-4228-aab2-329de0fdc339",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "7d534c6e-bd54-4732-9651-dd4bae90149e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad6c1faf-8769-4b8e-b03c-2779bca2c17c",
        "cursor": {
          "ref": "f81aec2f-92f6-480f-8d4b-4f0c7c58a7f8",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "861a78b5-defe-436a-9212-adc945bff1dc"
        },
        "item": {
          "id": "ad6c1faf-8769-4b8e-b03c-2779bca2c17c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b2b4d048-755f-48be-bf4d-fc9175b017f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "522733d7-89d0-4fda-be3b-07f9d76b56ce",
        "cursor": {
          "ref": "7d8b1db2-6744-455d-a4e2-e3c0cbbc8158",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "4ca9207b-d2b0-405d-aa0c-4f923838494c"
        },
        "item": {
          "id": "522733d7-89d0-4fda-be3b-07f9d76b56ce",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "cf73ea07-76ad-4788-b485-da8280e7190b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa9fbf98-ac55-45f2-9e73-898a909f70e0",
        "cursor": {
          "ref": "732600c1-af3d-42aa-9a59-5d2a682b1ebd",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e5902987-104f-4dc8-aa6e-ca2feb22fe64"
        },
        "item": {
          "id": "fa9fbf98-ac55-45f2-9e73-898a909f70e0",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0ee6ae7e-c489-4cf5-bae8-c213d824c3ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f957781-2fbf-4d19-a1ea-7e6c0ab3bf48",
        "cursor": {
          "ref": "81941b93-7d5f-4f2f-bc80-ee5b4ef4ebb4",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "339690ee-39c6-4219-a11a-b04aeace708b"
        },
        "item": {
          "id": "8f957781-2fbf-4d19-a1ea-7e6c0ab3bf48",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "7a94b725-379a-420f-85ad-98c854d8de73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800c6e23-5fd7-441a-bff8-945a54e37501",
        "cursor": {
          "ref": "be9a56f7-457a-46f7-81a9-76b55384ae8b",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "50da568f-1f09-456b-ad0b-c366cf12a004"
        },
        "item": {
          "id": "800c6e23-5fd7-441a-bff8-945a54e37501",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "40381e86-9f56-4bc1-a513-ae843489d5c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 148,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f812a1a9-9fa2-4469-b711-7e4c2200d943",
        "cursor": {
          "ref": "ebcd0123-21d3-4b17-8485-af54a4eb97d5",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "8d2c8780-2779-485a-8e33-94f9fe0d552a"
        },
        "item": {
          "id": "f812a1a9-9fa2-4469-b711-7e4c2200d943",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "99fd93dd-572c-4ddf-9ede-ee12b1cc92ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76f430ca-2959-4802-bdc2-7998a72c4ccd",
        "cursor": {
          "ref": "5023f0c3-4a4a-46ab-8a0d-cea6955830f7",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7007a16a-4ea4-4de1-985b-e5c34e0a24ef"
        },
        "item": {
          "id": "76f430ca-2959-4802-bdc2-7998a72c4ccd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "78e53afd-da5b-4b26-9943-264562b69373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 169,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d3c86d-e379-4270-9890-2c58febabbe1",
        "cursor": {
          "ref": "33a3c6e2-679b-45d6-a741-d01ad2d9dfdd",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "703a6656-751a-4d53-b323-950c66896a5f"
        },
        "item": {
          "id": "26d3c86d-e379-4270-9890-2c58febabbe1",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "df18a28f-7125-4602-964a-42588b3f1771",
          "status": "Created",
          "code": 201,
          "responseTime": 2149,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "a0c24700-b263-4ce7-a234-13e592da686b",
        "cursor": {
          "ref": "c3b6346b-170c-42e1-8afe-872a0ada565f",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5e5cb882-46ec-4241-ad28-de1f8c28eacb"
        },
        "item": {
          "id": "a0c24700-b263-4ce7-a234-13e592da686b",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "6c050e05-9890-4d60-b586-e342052f90d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 277,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "527ce0e0-e7da-489f-9513-a29413a4def5",
        "cursor": {
          "ref": "4077e2c7-7501-449b-94fb-e5ddc3b7c6e0",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "280a5854-07b5-4a6f-99a3-65820026f4aa"
        },
        "item": {
          "id": "527ce0e0-e7da-489f-9513-a29413a4def5",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "5818b674-4175-4461-b7df-d2bc5e56c77b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a945746a-f053-4b1e-99f7-c136483413fe",
        "cursor": {
          "ref": "d993489b-a5d5-4571-9e14-a9f7941256d5",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "743fd3bc-e9f2-4180-a573-1020f701941c"
        },
        "item": {
          "id": "a945746a-f053-4b1e-99f7-c136483413fe",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "94816ed5-7bcf-4953-aad5-b9851dc8a32f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1351fdf-dd69-45c7-8d7d-b32a9796449e",
        "cursor": {
          "ref": "64e2d6dc-4e87-4a7d-b3d0-428013d661ac",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "8c79fce6-2ef0-46fc-8c85-534be263b2cf"
        },
        "item": {
          "id": "c1351fdf-dd69-45c7-8d7d-b32a9796449e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "62cbe73b-982c-46e8-a27c-22214c39c4fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "345e6474-aa1f-40d5-8d1f-11ec509cc6ef",
        "cursor": {
          "ref": "390b8062-5d8a-490e-98f8-85287b67f2e8",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "00e50012-f53f-494b-84db-a71b69f66dff"
        },
        "item": {
          "id": "345e6474-aa1f-40d5-8d1f-11ec509cc6ef",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c2639be2-c3a1-4cac-8f3b-9485349a2e97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f4528ae-91cd-45fa-90e9-222a3b4bb62e",
        "cursor": {
          "ref": "29d42868-e6ed-404b-b215-05e0cd50c126",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "39c969e3-a553-4af0-aa9a-0b3b359f9e54"
        },
        "item": {
          "id": "0f4528ae-91cd-45fa-90e9-222a3b4bb62e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "42774fb5-786e-4173-837b-703272f6fd6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54f309bd-d03a-41f1-a161-f1774e5f7b3e",
        "cursor": {
          "ref": "29e19055-7876-4c92-892d-ad339fd5f0eb",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "53e9105f-c226-4a46-9039-db0fcd355a89"
        },
        "item": {
          "id": "54f309bd-d03a-41f1-a161-f1774e5f7b3e",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e2bc4b09-99fb-4b54-8460-38b5f64e0514",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a0712e4-0785-4215-bc3d-91a84616a403",
        "cursor": {
          "ref": "1bb748c7-def4-4faa-b9c1-eab1b4a5e2ab",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "20ef9d4e-0c46-4af8-8714-686ea0bb5a06"
        },
        "item": {
          "id": "4a0712e4-0785-4215-bc3d-91a84616a403",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3d4eb189-8eb4-456a-bd2b-4e1a9da0fa6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc70a2b-996e-4d07-89fd-b639e09d646b",
        "cursor": {
          "ref": "06ea4ed6-e991-4f75-af43-872e9fc38149",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "06d54e14-068b-4180-aef8-14d831cb15bb"
        },
        "item": {
          "id": "bcc70a2b-996e-4d07-89fd-b639e09d646b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "d70c3fca-d5ac-4e54-a58b-36c988cd2dea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04e7825a-87c2-4efd-a89b-a9488b406fae",
        "cursor": {
          "ref": "87380f8f-0874-4666-9ee4-a3224fe4edce",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "7b8ab0fa-f64c-412a-9469-7eb0efd6289b"
        },
        "item": {
          "id": "04e7825a-87c2-4efd-a89b-a9488b406fae",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "38322a13-5103-4d0c-8a44-4017992bfb58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d78a716-f85b-4472-a570-15a0893cf38b",
        "cursor": {
          "ref": "c796aa81-23a4-45dd-a27e-4185612d83e8",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0c1930ca-7491-4e7b-a45e-67b520231810"
        },
        "item": {
          "id": "2d78a716-f85b-4472-a570-15a0893cf38b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "63371598-0864-4fba-9c26-12aa64fa81ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd3a6e1-a77a-4a0e-ba84-0790cfe902f6",
        "cursor": {
          "ref": "d597d791-1d7b-44da-abae-150c9a4b022e",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "acfaf6e7-7484-4b6a-a494-354d13d6bc9b"
        },
        "item": {
          "id": "bdd3a6e1-a77a-4a0e-ba84-0790cfe902f6",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "bf43a944-50ef-4b90-a45d-c0a30a6f3eeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddf9e8cb-2fff-4fc2-a73c-af0035152d6c",
        "cursor": {
          "ref": "92ed63b9-d862-48b2-ba97-ab1d4257fe30",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "77d89d91-53e4-4757-aa30-866d6b0ab8c9"
        },
        "item": {
          "id": "ddf9e8cb-2fff-4fc2-a73c-af0035152d6c",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f87301ac-ae01-435c-abe9-db1d47ca4341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3ffd17f-2a22-400c-8615-d979c1b96aad",
        "cursor": {
          "ref": "9acc8737-451d-4052-87da-88e1c43e6e0c",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "88a9ac15-994c-4e08-910f-af1aa6a64bd2"
        },
        "item": {
          "id": "c3ffd17f-2a22-400c-8615-d979c1b96aad",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "31a3f066-ca2d-447f-8af7-9336d2a8f76f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f3df63c-33bc-46a7-b41a-fc5c887a6b24",
        "cursor": {
          "ref": "d9511d9d-197b-4051-b135-4d725652cecb",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d045f309-b1d9-4671-8a89-7d9f68c8be13"
        },
        "item": {
          "id": "5f3df63c-33bc-46a7-b41a-fc5c887a6b24",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "8130a24c-5934-442f-a6de-0e4a4118350f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 184,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9813a0dd-13bd-4fc9-afaa-1673437804b7",
        "cursor": {
          "ref": "e46aefef-1d08-497c-b7ce-f793ff1e181b",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8be2618b-f178-4a21-bcb2-3210d51f4f97"
        },
        "item": {
          "id": "9813a0dd-13bd-4fc9-afaa-1673437804b7",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "99520982-4aa6-4d99-b216-089ff369d415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 340,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb1e7608-c360-437f-8c25-77529c2a82c8",
        "cursor": {
          "ref": "4c05f29a-6008-4912-8bf8-a6a3378ee0e7",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "279bbaed-91af-44c2-8db7-11ac92753931"
        },
        "item": {
          "id": "eb1e7608-c360-437f-8c25-77529c2a82c8",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "866ef134-e56c-4b15-be62-f8aa777e93bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24beeae-ee8b-41ed-a8b7-cec3108d578f",
        "cursor": {
          "ref": "becc9e00-04b5-41b5-8dae-11207e759b19",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "0d215a60-6ca2-49cc-882b-f8c1208ddd30"
        },
        "item": {
          "id": "d24beeae-ee8b-41ed-a8b7-cec3108d578f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "026e11f5-3a47-48bf-8ec6-4ae8c28784e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "431c75d2-3506-4aaa-90d5-1474e7293710",
        "cursor": {
          "ref": "905e0166-625a-4813-8d53-ee5cbb5ea78a",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "6fe10ab0-7c25-4906-b11e-4daae1cac7e2"
        },
        "item": {
          "id": "431c75d2-3506-4aaa-90d5-1474e7293710",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "3dd37047-604c-4fb7-83b6-b44dd2f82412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 352,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c87b57e-5981-4607-91ff-9e63e2eccb1f",
        "cursor": {
          "ref": "7ee1feb6-bca1-41e6-98dd-d85046507234",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "874e2de7-d4ed-49d4-b340-96e26aff0451"
        },
        "item": {
          "id": "4c87b57e-5981-4607-91ff-9e63e2eccb1f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "0ef96407-ca15-4ed0-bed3-1236c6109e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 408,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fdc25f0-e895-4528-9d9f-f9c326e7d2c9",
        "cursor": {
          "ref": "48e1a987-c42a-496b-9401-f85d454d7b64",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f22c07d4-aeab-4f29-84fc-f3ec67613b43"
        },
        "item": {
          "id": "3fdc25f0-e895-4528-9d9f-f9c326e7d2c9",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b0ea26fa-a555-43e5-b36b-bf943fbe294b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 421,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd1aae26-7a51-479c-929c-37db79a9bab8",
        "cursor": {
          "ref": "f16e9b59-434f-4400-bf5e-6aa28bda810f",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "7998482f-66db-43a6-a915-409a5e9d518f"
        },
        "item": {
          "id": "bd1aae26-7a51-479c-929c-37db79a9bab8",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "094ce294-1bec-4610-afaa-f4dbb38e99ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 372,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9acd86a1-ec34-48cc-aabd-dc6fd99978cc",
        "cursor": {
          "ref": "dbd6bc7a-8401-486b-8a00-b1154dd97d4b",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "0bace94e-9054-4ad6-876c-81a3dbf896c0"
        },
        "item": {
          "id": "9acd86a1-ec34-48cc-aabd-dc6fd99978cc",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "7e3dc0f6-0667-4f05-871f-79a8faa742ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 564,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62c283e4-bba7-4529-9e1b-2ecee4061ba9",
        "cursor": {
          "ref": "0172f43e-a339-43ad-9d91-c364fd43c99d",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e6a2d133-4062-4793-ad84-e58de37cb911"
        },
        "item": {
          "id": "62c283e4-bba7-4529-9e1b-2ecee4061ba9",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "b08be556-a707-460d-bf6a-ede2eaa69148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 953,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6271a1ef-03cb-463e-8148-23de99103e7e",
        "cursor": {
          "ref": "c76254b1-a40a-4b56-8d11-ce0629bd8926",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d75322fb-9e44-4246-a9ef-2b50699abc0d"
        },
        "item": {
          "id": "6271a1ef-03cb-463e-8148-23de99103e7e",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "138e56d0-eab6-4ee9-9fee-623e000367a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 785,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f04743db-cdfb-4697-aee5-0de15cf467dd",
        "cursor": {
          "ref": "39b930ee-bf25-4d0f-a5b3-9e07074cebec",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "3bffbb37-4b67-4ddd-a281-682df290541c"
        },
        "item": {
          "id": "f04743db-cdfb-4697-aee5-0de15cf467dd",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "2c188755-32b9-4bdf-87d2-09431973a33b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 523,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4307c6f8-4fb4-438a-8a04-24120e5e2fe0",
        "cursor": {
          "ref": "29cc6a90-5b73-4ec4-ac3c-e5bed30b0752",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "13a1543d-01e2-4e7d-a37b-e962c36fe556"
        },
        "item": {
          "id": "4307c6f8-4fb4-438a-8a04-24120e5e2fe0",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a19a528c-39e4-4219-80ca-a326666273bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 539,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55ec86f2-a477-4daa-8962-9febb75e76d0",
        "cursor": {
          "ref": "a1bc71d9-483e-4a3c-9a94-a4f485198e67",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "43059512-7986-45c2-84b3-622ffc9c5070"
        },
        "item": {
          "id": "55ec86f2-a477-4daa-8962-9febb75e76d0",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "74751bd0-04fc-4293-9ffa-75311bbdeac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 566,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1765c7c-451c-42a4-97a8-b79d39e7eb5a",
        "cursor": {
          "ref": "5d1c51e6-79a4-4c0e-9414-9d81f2329607",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "5da919db-28ed-40ae-a5fa-e6fa010cfa67"
        },
        "item": {
          "id": "e1765c7c-451c-42a4-97a8-b79d39e7eb5a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5a8ee8f1-98ac-4a83-bb92-b52445fc39a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 580,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cbb9a9d-f1ad-475b-9e5c-a54725fd8788",
        "cursor": {
          "ref": "d241b6cc-1e87-4aa7-ab18-876bb766a3a1",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "0031c88f-1c9a-41b2-915f-4741d054f35f"
        },
        "item": {
          "id": "6cbb9a9d-f1ad-475b-9e5c-a54725fd8788",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f37e0376-d902-41da-91ef-2522191e697e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1226,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a70ccad7-c620-4e64-993d-7c5a4417541f",
        "cursor": {
          "ref": "f5654807-3063-40d4-ba54-257adae9bd0e",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0a9938da-91a0-49cf-8e83-9a3baae06672"
        },
        "item": {
          "id": "a70ccad7-c620-4e64-993d-7c5a4417541f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ecb28e1c-b914-436e-abd3-6d8afbed89a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 372,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "51dd594a-53dd-4b6e-b0e9-03d39a3c1735",
        "cursor": {
          "ref": "0a8c6408-5844-42ac-b0bc-1215a28352a1",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a8243446-a93b-4a18-8a99-b1bd39a32667"
        },
        "item": {
          "id": "51dd594a-53dd-4b6e-b0e9-03d39a3c1735",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "18b27ea7-025a-4764-bd72-805d06984881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 516,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "fd3f9440-3267-41e2-b51e-c634589f8f3f",
        "cursor": {
          "ref": "5fe5284c-01d3-4780-bc9c-eda38bbc612e",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e5d34237-5f45-4209-ab45-4c279736a0d7"
        },
        "item": {
          "id": "fd3f9440-3267-41e2-b51e-c634589f8f3f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b353af0e-fb7c-4ac1-a650-fd1d8682b548",
          "status": "Created",
          "code": 201,
          "responseTime": 2153,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c2b3b7-af54-4b1c-8207-0b98252f06b2",
        "cursor": {
          "ref": "6933077a-4fb4-4597-af7c-cd9add69e151",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "fe608c2d-f748-467d-8974-52de61cde8af"
        },
        "item": {
          "id": "a0c2b3b7-af54-4b1c-8207-0b98252f06b2",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "7da19923-64ef-4bb7-8d14-d35859a720f1",
          "status": "Created",
          "code": 201,
          "responseTime": 2288,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c8fdbe2-e36d-4d42-bb2f-376c6c82c5fd",
        "cursor": {
          "ref": "46ebcd3a-03f5-46e5-b892-da94a1127a8a",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e0aa26fe-e186-4c49-bb35-1a90683193f2"
        },
        "item": {
          "id": "2c8fdbe2-e36d-4d42-bb2f-376c6c82c5fd",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "0c6c61ef-cfba-4370-9015-218c8fdb3187",
          "status": "Created",
          "code": 201,
          "responseTime": 2257,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cdbf939-cf88-4eee-8873-2b5ef127d5a0",
        "cursor": {
          "ref": "f910d744-9192-4652-8f8f-86116652833d",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "bdeef0ed-7123-476d-a373-a90bfeda09f6"
        },
        "item": {
          "id": "1cdbf939-cf88-4eee-8873-2b5ef127d5a0",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ffedcee3-7c77-4cb9-823d-4e2e6b106bc0",
          "status": "Created",
          "code": 201,
          "responseTime": 2284,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-02-17T16:01:31Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-02-17T16:01:31Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "341017d1-5211-42c9-9171-21ace748ed00",
        "cursor": {
          "ref": "2a01fe8c-37c1-4818-b1b5-9e1a9c1e1cab",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "790cd8f0-fdff-47d6-8829-f97c104068df"
        },
        "item": {
          "id": "341017d1-5211-42c9-9171-21ace748ed00",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1da0814f-7923-4844-b07d-f8cc35a245b5",
          "status": "Created",
          "code": 201,
          "responseTime": 2255,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1b4e2d7-fba1-42a7-a526-45d78734a318",
        "cursor": {
          "ref": "07b89b43-51af-4c4c-b020-6e25a81a640e",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "add62c33-3057-463c-8758-5d07ed1103b7"
        },
        "item": {
          "id": "d1b4e2d7-fba1-42a7-a526-45d78734a318",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6d091798-435c-4a09-a7bf-de01c99f3a1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1b4e2d7-fba1-42a7-a526-45d78734a318",
        "cursor": {
          "ref": "07b89b43-51af-4c4c-b020-6e25a81a640e",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "add62c33-3057-463c-8758-5d07ed1103b7"
        },
        "item": {
          "id": "d1b4e2d7-fba1-42a7-a526-45d78734a318",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6d091798-435c-4a09-a7bf-de01c99f3a1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24faf886-24fb-4c33-9868-b16d125b7957",
        "cursor": {
          "ref": "41ada9d0-3c8b-41a7-9030-ece09e474456",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "364da1ef-cdca-4725-8f98-73f169a781b8"
        },
        "item": {
          "id": "24faf886-24fb-4c33-9868-b16d125b7957",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "06cff8e1-a7ed-45c7-b73f-7c388f144bab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdbc9da5-42e8-4595-9108-8c688ca3bedf",
        "cursor": {
          "ref": "eaf870ad-fb57-4fe4-900f-6dfd8613b7a1",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "994f01b4-0442-426c-bd09-431ff2e46caa"
        },
        "item": {
          "id": "cdbc9da5-42e8-4595-9108-8c688ca3bedf",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "204251e4-d6c6-4e12-9d0d-8d4baa81d356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a94754fb-aa6b-42e2-a4c4-28e26b5c48a9",
        "cursor": {
          "ref": "d608551c-11f9-48fd-8698-28ec5a96c54b",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "22052b28-04e3-4821-990e-53b93e2b660e"
        },
        "item": {
          "id": "a94754fb-aa6b-42e2-a4c4-28e26b5c48a9",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ab0df271-bbf7-4c4f-99ff-8cb1650ee75f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "483beeb3-9126-4c5a-ab66-9dc26055b47b",
        "cursor": {
          "ref": "08e913c6-6a33-48d6-9d27-00bf9d9462aa",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "e053790f-102d-4ca6-93cf-d56dc869c964"
        },
        "item": {
          "id": "483beeb3-9126-4c5a-ab66-9dc26055b47b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3fa7a8e3-7a41-4453-8bb8-ad15f224c536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eb04dc3-d52e-4bee-9a4c-af1f6c715362",
        "cursor": {
          "ref": "4ae52891-3fe9-48a3-8476-4ccc8a7d68a1",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "959a97b9-5b4e-4fed-a346-5de23de3343b"
        },
        "item": {
          "id": "2eb04dc3-d52e-4bee-9a4c-af1f6c715362",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "482abaed-b410-4982-aeb9-25b11e212c1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 166,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30cc3cf5-987a-48fa-823e-20882a12ddb6",
        "cursor": {
          "ref": "cdb1a1a7-e579-459a-b5bb-93c9a8d1eb73",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "09b94a85-2d30-4288-95c9-96d0368d7c34"
        },
        "item": {
          "id": "30cc3cf5-987a-48fa-823e-20882a12ddb6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d0d42c88-053e-4c95-a2f2-316b45cfc808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2364a5a6-102f-4975-890e-6205f9cd8587",
        "cursor": {
          "ref": "3a05aebc-c12a-49f1-89d5-08a3377e29df",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "3b53f97f-36c7-4f68-b468-7db3a940c869"
        },
        "item": {
          "id": "2364a5a6-102f-4975-890e-6205f9cd8587",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0c54b55f-bef4-456f-9a1b-83924f2098d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c178a441-91b0-43d0-9ccb-95db2ccc220e",
        "cursor": {
          "ref": "d96f989a-7e06-4d30-8d11-eaa8655ff18b",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "eef131f5-947b-47f0-8e74-d25a07aad649"
        },
        "item": {
          "id": "c178a441-91b0-43d0-9ccb-95db2ccc220e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "194ac50e-5c79-424c-aec3-c33c44c5f6e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9777dbd1-c6ff-45a1-8b4e-1ac7adaeb1a6",
        "cursor": {
          "ref": "2f25b07b-6c28-4451-9228-a73400fd163e",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "126aa698-5e53-4b93-a345-b6d9a4796b57"
        },
        "item": {
          "id": "9777dbd1-c6ff-45a1-8b4e-1ac7adaeb1a6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "74bd6dde-da83-471e-91db-760278e32c17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf347011-7c50-4e83-82ee-c479de65b9e0",
        "cursor": {
          "ref": "3d77669d-9669-4f2a-a227-ff9cd76dd1c4",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "fbb6af19-ffaf-40c9-a160-51c1e9c65125"
        },
        "item": {
          "id": "cf347011-7c50-4e83-82ee-c479de65b9e0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f7f0f7aa-fc97-4d29-b1a2-a2c3db0bd12f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14c68764-e429-45df-8bd6-8e1e36e28c04",
        "cursor": {
          "ref": "85ed604d-0309-4f7b-a0d9-c34f5a5f9f6b",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c8e48ac2-af55-4f62-ae6d-2bab7c1f45df"
        },
        "item": {
          "id": "14c68764-e429-45df-8bd6-8e1e36e28c04",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c0b56079-4109-464b-93ca-0b389fde954f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25baaf0e-73f1-48b1-804f-89cfdf3498c6",
        "cursor": {
          "ref": "91427c45-388b-4ec4-8728-a553863143ba",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "dad74688-60b0-4274-b931-629a6d382185"
        },
        "item": {
          "id": "25baaf0e-73f1-48b1-804f-89cfdf3498c6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1d39ed4e-1e10-4be4-9559-fec48948299b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f75e566-2203-4940-8e6e-34622d1bf799",
        "cursor": {
          "ref": "26219fdd-3540-4a35-a8f4-14d0b6df24a3",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "fb0df3de-e48d-47e3-8034-4439278a5e0c"
        },
        "item": {
          "id": "4f75e566-2203-4940-8e6e-34622d1bf799",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9cf7ab46-025f-46b0-8760-688a2c2bfb83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599c38c5-bf8a-483b-b823-acac8decd763",
        "cursor": {
          "ref": "563b73e5-15f3-495f-a415-882f9e103611",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6079e013-11c2-4f07-9695-7fd3f5de1b90"
        },
        "item": {
          "id": "599c38c5-bf8a-483b-b823-acac8decd763",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "707cf8b1-70b9-43a4-960b-32861b5ae0b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "963f365a-b777-4f10-ad6e-e217b944bae5",
        "cursor": {
          "ref": "fb438cf0-cd38-4837-93a3-b713f62b3499",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "5c65add5-6205-429f-a650-79249423b204"
        },
        "item": {
          "id": "963f365a-b777-4f10-ad6e-e217b944bae5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c5271a1b-fbd5-4a83-8932-a1b4b81bc883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1de27a36-7636-4178-9d58-392c72e59a79",
        "cursor": {
          "ref": "ac2374ea-65ed-4029-a4e2-88f4c3e78a38",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "03c21773-ebb2-41bc-b25f-9f86334ade31"
        },
        "item": {
          "id": "1de27a36-7636-4178-9d58-392c72e59a79",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "96ea64da-1532-47ab-933c-c538d9e53ec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42fcc20d-1e80-468d-b2f8-5215d707641f",
        "cursor": {
          "ref": "d3c8b388-b4c7-4856-a44c-10e2cce1f17c",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "006e86fc-e825-4413-bc49-93ec95e6eb71"
        },
        "item": {
          "id": "42fcc20d-1e80-468d-b2f8-5215d707641f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b4aac844-960a-468d-ae93-045a00207ce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1ec0bc2-ab24-4afc-a73d-4a418aedabfe",
        "cursor": {
          "ref": "92074e2f-2d95-40a5-bb91-ec705d4c0963",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "fb4ddec8-c3e7-42fd-a494-a1bb41eccac8"
        },
        "item": {
          "id": "b1ec0bc2-ab24-4afc-a73d-4a418aedabfe",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "566f4051-cd68-4b86-8cf3-bc2fc0f8cf3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9c5e0fb-bcf2-4a25-a66a-1a427193fb83",
        "cursor": {
          "ref": "7e5d5e65-fac3-4700-84b9-fbbca592e8a7",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "ab4552d9-4d3c-4864-906f-cd164daa38ed"
        },
        "item": {
          "id": "f9c5e0fb-bcf2-4a25-a66a-1a427193fb83",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "308bfc68-2aff-4472-8288-d1689cafe5bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3cf6736-e822-4123-8679-60d7559dd3ae",
        "cursor": {
          "ref": "f92a7bfe-ca16-4158-965c-6d8f9d82568d",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "39dbec17-70e7-40c6-bae0-af6f1a2f902c"
        },
        "item": {
          "id": "d3cf6736-e822-4123-8679-60d7559dd3ae",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "bae8625b-1b45-4da9-8dd1-6ff13f2f8f74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "311327ae-01a8-4bb7-a69a-587b1b1dabdd",
        "cursor": {
          "ref": "631aebba-7c59-4e26-877f-305288c9e23a",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a48897aa-852a-470f-a858-fdf3f229bd35"
        },
        "item": {
          "id": "311327ae-01a8-4bb7-a69a-587b1b1dabdd",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "26b5c290-7866-4ed2-9996-56061622d7a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a7bf7f9-de34-4201-ac29-b9c2c3707b68",
        "cursor": {
          "ref": "6c01d130-bf70-47b8-8c73-26b15b252b37",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "64a7e487-6023-4126-82ee-42360be7506e"
        },
        "item": {
          "id": "2a7bf7f9-de34-4201-ac29-b9c2c3707b68",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d1eca57c-a04a-4145-b381-e8954b4e5791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c57e5c4-e044-4b30-b2d2-b0b91a6861e6",
        "cursor": {
          "ref": "a895283f-1d8b-4d8e-8ead-8b123ea2ef7f",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "54689843-48e4-498b-afe5-bbcfeb80d7d3"
        },
        "item": {
          "id": "9c57e5c4-e044-4b30-b2d2-b0b91a6861e6",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6cc514d8-6b5b-4b30-975e-21488547119a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7557f86c-12e9-4e9b-8bf7-0d1b710d1e39",
        "cursor": {
          "ref": "a88e67f5-0cf5-4200-88ec-da92eff90f30",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "5ddb8026-761a-4c95-9d4a-54a70fa74b05"
        },
        "item": {
          "id": "7557f86c-12e9-4e9b-8bf7-0d1b710d1e39",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d7e88abf-300f-42bb-9797-a3bc7871bc3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79530e63-5992-40e0-9901-59247b738e1d",
        "cursor": {
          "ref": "196b214f-6f0c-4aca-939c-7fefb4b110f6",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4330b630-0e3c-455e-8ee4-08ecf9b1e5f9"
        },
        "item": {
          "id": "79530e63-5992-40e0-9901-59247b738e1d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2cc858ab-fc2b-4e0a-b477-856b19a25370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "694a5301-7784-4cf2-a325-839b19479a60",
        "cursor": {
          "ref": "9da6d5bb-b223-499c-8eec-c69e4d54e62f",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a27826c8-381b-4102-ad1b-869f360bc35c"
        },
        "item": {
          "id": "694a5301-7784-4cf2-a325-839b19479a60",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c6ab40b9-284c-455d-a05d-47f1b8a77fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bb6167e-fcae-4dab-80c2-8e45559d7c54",
        "cursor": {
          "ref": "0784ff36-0284-452c-826d-7afab043ca9f",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "0c509cc4-3e92-472e-9386-bf9a19b9e09a"
        },
        "item": {
          "id": "1bb6167e-fcae-4dab-80c2-8e45559d7c54",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "98af9a23-8138-47d7-b042-dd24ca5fe65e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e40f3a-564d-4af8-90de-57406a250a9d",
        "cursor": {
          "ref": "51ba4237-9bb3-471b-8ea8-08e71e18a5f7",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "dddfe4e3-e730-4e95-9db7-6e1ba90099bc"
        },
        "item": {
          "id": "c3e40f3a-564d-4af8-90de-57406a250a9d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b7e51306-248f-412f-a644-239038a77619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a6211e6-7836-466b-b911-6aba5a1b1d2d",
        "cursor": {
          "ref": "e3e6e47c-06da-4ee4-8d7b-b55fa5e2eb63",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "8007e9e5-a8dd-4826-8ffd-3c177bb68c6f"
        },
        "item": {
          "id": "8a6211e6-7836-466b-b911-6aba5a1b1d2d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2be6e10c-97ec-41c4-b4ee-0f29f858f9cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c48ba6d-9047-4489-86eb-0e4ae68dd520",
        "cursor": {
          "ref": "1f66a1ae-fba8-408e-859b-53b985bddb0d",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "947f3e7d-7527-40fe-ab15-1c2aca66113c"
        },
        "item": {
          "id": "9c48ba6d-9047-4489-86eb-0e4ae68dd520",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "209868fd-7ccf-4a26-9178-fca5f09e4b13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e6b942-a7d0-4ce5-9d93-6f4ad3a8e8b9",
        "cursor": {
          "ref": "e166500f-fd96-45d1-b5cc-14733b53db0a",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "4431aef0-4788-4854-81d2-dee086bfe74a"
        },
        "item": {
          "id": "66e6b942-a7d0-4ce5-9d93-6f4ad3a8e8b9",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "9e10a525-8e74-47c7-9fce-4c658ac29fd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "991c0302-4bf9-41bf-aaa6-c57bcef1f03b",
        "cursor": {
          "ref": "9dc83fc2-fb50-456e-83da-24a5078b2d0a",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "e2d00929-9078-44ae-beec-1c74e2758a8b"
        },
        "item": {
          "id": "991c0302-4bf9-41bf-aaa6-c57bcef1f03b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6e7d82f4-6b40-4903-8592-3e24d443cf01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "23a541ae-db1b-44e5-83ee-80598982c597",
        "cursor": {
          "ref": "d299b356-fbaf-4374-a1f3-d48f13ff2ba9",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b019bd89-2bdd-4968-8645-f3e83f7e5bcb"
        },
        "item": {
          "id": "23a541ae-db1b-44e5-83ee-80598982c597",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "613e3031-ec8c-4294-8150-6f389b5a1dbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "229da47b-5efe-4e38-8ee1-a1deb03bc951",
        "cursor": {
          "ref": "a14a8710-f76b-46d3-a914-5d13f0930104",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "dcabcb0d-08dd-4021-9f11-9273bfaa1ba7"
        },
        "item": {
          "id": "229da47b-5efe-4e38-8ee1-a1deb03bc951",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2a325b6f-9336-4281-83eb-564bc688bbc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "229da47b-5efe-4e38-8ee1-a1deb03bc951",
        "cursor": {
          "ref": "a14a8710-f76b-46d3-a914-5d13f0930104",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "dcabcb0d-08dd-4021-9f11-9273bfaa1ba7"
        },
        "item": {
          "id": "229da47b-5efe-4e38-8ee1-a1deb03bc951",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2a325b6f-9336-4281-83eb-564bc688bbc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c2ab9bc-35b2-4989-987f-3d85b217b245",
        "cursor": {
          "ref": "b82923be-4e5d-4543-a0d9-f48954c57872",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c2c7e5a1-c12d-4069-9986-d813f7cc76c2"
        },
        "item": {
          "id": "9c2ab9bc-35b2-4989-987f-3d85b217b245",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "536f965a-b27f-474c-9ddc-97693ca6fd39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf22193-e97d-4b92-9233-a0712f9d1949",
        "cursor": {
          "ref": "7705c48d-b1a4-4cd9-b6c3-8eab02196660",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "5439f3a7-198a-4a0b-bcb7-99573fa75acb"
        },
        "item": {
          "id": "2bf22193-e97d-4b92-9233-a0712f9d1949",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ad8127f1-b635-47f4-9928-921ed3ef7394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65daeeff-e34b-4673-b2fa-15ca09673997",
        "cursor": {
          "ref": "89374f3c-7336-4576-acd8-01c0294341fe",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "681cd597-cea7-4dc4-8552-711c2576283b"
        },
        "item": {
          "id": "65daeeff-e34b-4673-b2fa-15ca09673997",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "1e86fb43-9435-4ab0-b633-90a238712ca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e4923f-23da-49c6-9689-aba092c1d650",
        "cursor": {
          "ref": "43655f84-b2bf-4ff8-98c7-26a5ecf8a37d",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "c48c4f1b-c683-4d34-b5c9-ee2a0911bc49"
        },
        "item": {
          "id": "27e4923f-23da-49c6-9689-aba092c1d650",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6ca43560-4c98-4aa1-bd8d-97789cdb7f6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 169,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2fade70-86b0-4854-bfed-6df995440d70",
        "cursor": {
          "ref": "b0db0ab3-c165-4d93-9329-8f0a38f95c00",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "fad2b4ff-ee22-4934-857f-27df5ead1337"
        },
        "item": {
          "id": "a2fade70-86b0-4854-bfed-6df995440d70",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "5c4e7def-fee8-46a1-9f02-f2b34b067346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d79584-c981-440c-9d6c-7c4a6e411e8e",
        "cursor": {
          "ref": "c646fdeb-7afc-41f4-809b-f95f476bbcb6",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "0ab95289-433b-4bb8-8e38-6c0b572f3b67"
        },
        "item": {
          "id": "62d79584-c981-440c-9d6c-7c4a6e411e8e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "2d8ef4a3-28b9-4cca-8db3-0c1c406b75c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ba130c2-2ecf-4a8a-a654-fb4368ce9d7c",
        "cursor": {
          "ref": "3a0ddeb3-73b6-488d-9f34-edf96db22b5a",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "335945d1-3ff0-4b3c-9929-ec3c70f4adec"
        },
        "item": {
          "id": "9ba130c2-2ecf-4a8a-a654-fb4368ce9d7c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "fc56594d-cff4-41ec-ba6f-bf0ba0716da4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4ef668a-c729-4cd6-ba0c-e63125736c64",
        "cursor": {
          "ref": "5b9a594a-a31d-41b3-ad15-f5b72db05f70",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d7ffd403-2c8e-4bce-a2b0-40a25e7f7592"
        },
        "item": {
          "id": "b4ef668a-c729-4cd6-ba0c-e63125736c64",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "949f962e-58f5-40b2-88d3-3414ec6ff79e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 431,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "888fda37-dbc3-4edd-b05f-8c7059a22689",
        "cursor": {
          "ref": "020af505-f063-478b-a991-861c212543c7",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "98c08e30-a940-4f57-b76a-9c9fc9293ee0"
        },
        "item": {
          "id": "888fda37-dbc3-4edd-b05f-8c7059a22689",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f01abb16-b11b-4ac1-9fb8-a2d98f1febc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a532bdc-c795-4d62-9dd4-90bbd9e4f3a5",
        "cursor": {
          "ref": "b020f8b8-4b07-4e37-826e-07a47bba8db0",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f3396ce6-d2a3-4d92-b486-bccd370825c3"
        },
        "item": {
          "id": "7a532bdc-c795-4d62-9dd4-90bbd9e4f3a5",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f01b5ec5-6fdc-4be0-97b8-7a76ac506221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9fa6e9d-4679-46d5-80e0-4f771214fd17",
        "cursor": {
          "ref": "ef536e4f-10a3-4a9d-9fe9-d5959ac7345a",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "62ada43e-4d92-435c-b30c-73abc1348e2c"
        },
        "item": {
          "id": "c9fa6e9d-4679-46d5-80e0-4f771214fd17",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f4a50f69-9ef0-48d8-b714-0d420e0c4a1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e3dda1e-d90b-435a-8caf-58f50c8a179a",
        "cursor": {
          "ref": "27d67b95-fe26-41b5-b43d-d81629dc0260",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "559b1264-9892-4b71-9659-7845c1b3ee1b"
        },
        "item": {
          "id": "3e3dda1e-d90b-435a-8caf-58f50c8a179a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ecb40b1c-37fb-450a-b6e0-660f331b0bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4303206-e5b9-4cdb-9363-46ac1543328b",
        "cursor": {
          "ref": "dd8624f9-d48b-47a1-958c-44f7ce96cbb4",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "0ffe8a23-3b95-464d-8e12-39d30b892f2f"
        },
        "item": {
          "id": "c4303206-e5b9-4cdb-9363-46ac1543328b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "545246b1-8186-4d18-901e-6f831451bd97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e10046b-14f8-49cb-b3aa-a477d71ef97b",
        "cursor": {
          "ref": "93f5f722-e485-4c5f-8536-5d1ebb8b217a",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "83b97957-babe-4d8c-86a3-7d878fe8fed6"
        },
        "item": {
          "id": "7e10046b-14f8-49cb-b3aa-a477d71ef97b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "be278a22-481f-448e-b523-50a6707dcd36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9833f9a0-6688-4717-8860-ab041b4cc8e8",
        "cursor": {
          "ref": "ec0be637-9f47-49d6-bb10-5dbe93fae63c",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "14f15cb9-efbd-4e29-ab52-b2dcb4ff737b"
        },
        "item": {
          "id": "9833f9a0-6688-4717-8860-ab041b4cc8e8",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "cec42cf1-5c44-420e-ae49-36a1c515fae4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "941e4509-3b82-4a02-bf18-151b4cbcd837",
        "cursor": {
          "ref": "3292ce7d-fd65-4dc5-97ad-c9fa26253eb5",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "11e176ee-0d49-4fc8-ab95-62458e8f4f36"
        },
        "item": {
          "id": "941e4509-3b82-4a02-bf18-151b4cbcd837",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e3a03d87-0926-4ea1-8374-50f00ee79ff1",
          "status": "OK",
          "code": 200,
          "responseTime": 312,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "f286a41b-b601-4822-841f-13d0e58cd22b",
        "cursor": {
          "ref": "2c331457-eedb-444f-899b-93bd9c59fef9",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "9cafbd31-1b52-45e9-a281-e21c7a6684e7"
        },
        "item": {
          "id": "f286a41b-b601-4822-841f-13d0e58cd22b",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "31f573c7-4a89-45f9-be7d-9f3d93983700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ea33f5e-7662-4e87-a331-96235274a6d3",
        "cursor": {
          "ref": "87c9a15f-1f2e-4bc0-bf4c-724e420c82ae",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "9fee7b45-9321-4baf-95ed-2b78dc9de72d"
        },
        "item": {
          "id": "1ea33f5e-7662-4e87-a331-96235274a6d3",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8ab1da52-fae9-44f8-9e10-8ae81f4d9de9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 295,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f8ad08-9312-4fff-9efc-c74833a19206",
        "cursor": {
          "ref": "822e87bf-d6f2-46d9-84bd-0b59ba84d767",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a8dd1599-1d12-4b8c-be44-fd15e50cb051"
        },
        "item": {
          "id": "28f8ad08-9312-4fff-9efc-c74833a19206",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "8e919d35-347b-4071-9fb7-6b0800d293e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45c340dd-1c8f-4933-b23d-6afaf3f90f6e",
        "cursor": {
          "ref": "db842d14-ba55-4d26-9f1b-1b33ac973f96",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d3e89b59-a346-48be-914d-655ed4310d74"
        },
        "item": {
          "id": "45c340dd-1c8f-4933-b23d-6afaf3f90f6e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1c2cda0d-3840-4f8a-b9da-5b00e8237ab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 168,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d54fcb26-2b02-4439-91ee-da5574f69775",
        "cursor": {
          "ref": "b196cc46-50bb-4415-b393-16cbbbdf033e",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0e8c8136-3f9f-4cfa-b4ef-8eb43adc8efb"
        },
        "item": {
          "id": "d54fcb26-2b02-4439-91ee-da5574f69775",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "cdd0bced-a140-480d-9593-7f3d752ed98e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 207,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bdd284e-7c98-4f0f-b6d7-c737f3ea445e",
        "cursor": {
          "ref": "e9501de1-ba32-490c-a5dd-8515d9c7a0e1",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "58edc7f1-3ca5-4d0a-9e8c-6bed9cef38cd"
        },
        "item": {
          "id": "9bdd284e-7c98-4f0f-b6d7-c737f3ea445e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "24b386f3-18e9-456b-b0a3-5b68f372315b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 157,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19da2d05-732e-4dbf-9081-2b16764b0d48",
        "cursor": {
          "ref": "676ee300-c83e-441a-9495-f7e724ca3328",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "01e3984b-32b2-4753-bb16-8f7fd4fde2f5"
        },
        "item": {
          "id": "19da2d05-732e-4dbf-9081-2b16764b0d48",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "ddaa9c2a-ba5b-4038-8317-842937c59f34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6453dabf-e087-445b-9b3c-93e00658f35e",
        "cursor": {
          "ref": "08d5527a-550f-44a2-8235-33be8837ca65",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "563cc798-72ab-44cf-9eb2-5df19061a9d5"
        },
        "item": {
          "id": "6453dabf-e087-445b-9b3c-93e00658f35e",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f7d372b7-ca7e-481c-84a3-dac26f2d14f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe69b06-fe0e-4140-a968-5b131105728b",
        "cursor": {
          "ref": "b07b8651-ba6f-4c12-8f63-c2fc616d0f22",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ed31d41a-e863-4259-964e-2ee3f5c3c29d"
        },
        "item": {
          "id": "bbe69b06-fe0e-4140-a968-5b131105728b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "0c75313c-0515-477c-ba16-c00811d03608",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4a45e78-f0db-47bb-a322-42ec001da994",
        "cursor": {
          "ref": "6cf83fe6-27f3-44ed-a36f-48879586b5a0",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6f87323c-fe09-4c0b-987c-93caf48575b1"
        },
        "item": {
          "id": "c4a45e78-f0db-47bb-a322-42ec001da994",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "cedaff33-64ac-4cd3-b01a-8ff6f51efcde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70cb6a5d-96ab-4d2a-b363-557174038c2f",
        "cursor": {
          "ref": "b8039e0b-e83a-4f3f-9ebc-85bae9102841",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "68a38f60-fda4-43eb-9773-f9e8894faa73"
        },
        "item": {
          "id": "70cb6a5d-96ab-4d2a-b363-557174038c2f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "88397c9a-2897-4bca-a235-b0f66e306efb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d2484a-e3c2-46e3-af20-0c7114c11216",
        "cursor": {
          "ref": "c4249cc1-af1c-4c61-97e9-fba2fb1b91ff",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d9537be4-12bd-432a-9f65-4a3e241b14c3"
        },
        "item": {
          "id": "c9d2484a-e3c2-46e3-af20-0c7114c11216",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "2d09bf06-c44f-4f88-a1e3-1e125dd3c91c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df4804ad-e2bd-4958-9685-b977fc660e55",
        "cursor": {
          "ref": "7b4f5dd0-e626-42cd-89fa-d71accf05e8f",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "11650d7c-ecb4-4587-8d46-b81f0f9112e7"
        },
        "item": {
          "id": "df4804ad-e2bd-4958-9685-b977fc660e55",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "7d74d25b-1220-43c9-b9ee-6a4d76ede6ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67812f6d-8c35-4f4d-a071-6d6701ac25e0",
        "cursor": {
          "ref": "2ba417c2-3ee1-4939-bab8-677dbb37af0a",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "68c7429c-f853-4922-8cae-cc66b6f3d7aa"
        },
        "item": {
          "id": "67812f6d-8c35-4f4d-a071-6d6701ac25e0",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "6eaf475e-26e6-47e6-bdbe-0379b61e57f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f0d6da2-5f0a-472a-89cf-cb43fed50fff",
        "cursor": {
          "ref": "8136e44e-2940-4d79-9b32-123ce025247c",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "04fd7e30-3023-4d4c-9075-8c541788af69"
        },
        "item": {
          "id": "7f0d6da2-5f0a-472a-89cf-cb43fed50fff",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "8915a0d6-9577-48c9-963f-67566361d551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f695f1e5-cd81-41e9-9cf8-54fe707fc7a8",
        "cursor": {
          "ref": "02ad3f25-1f46-4eb4-9a1e-6cc3ba6f1a7f",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "ed06050b-b8fc-4513-bdc4-abd66573f3d2"
        },
        "item": {
          "id": "f695f1e5-cd81-41e9-9cf8-54fe707fc7a8",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "140500bd-a9b3-4660-8447-8bd2d5386bba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f556007-693a-4622-a2e7-4fd45ce91952",
        "cursor": {
          "ref": "5ddc2071-03f5-4199-8694-fd2d2fc29d55",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "5f36ab35-d23e-464c-a141-704ad55a446e"
        },
        "item": {
          "id": "7f556007-693a-4622-a2e7-4fd45ce91952",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "2a3e1bc4-35db-4615-b1ad-2f050c0a03ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a55ccaa-9364-4f48-8fd4-4a7ab247daae",
        "cursor": {
          "ref": "3d236ec7-734b-4799-862e-02d2ba2eef14",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "53e86d9e-0fbf-4ba5-9390-6bbc5e0e0fea"
        },
        "item": {
          "id": "2a55ccaa-9364-4f48-8fd4-4a7ab247daae",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "076326ec-b822-4649-a6eb-14f8efd03a01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6f17666-fb87-431a-bb32-278ba6af633a",
        "cursor": {
          "ref": "0bd84157-7c2f-42b1-ba9e-171f06340cd3",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "442d11dc-c32c-4dd8-a9f0-ef27461cc18a"
        },
        "item": {
          "id": "e6f17666-fb87-431a-bb32-278ba6af633a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f9308230-4d52-4db8-851d-6128e4dd5286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87474bc4-5c10-4d9f-bceb-0a038bc968b6",
        "cursor": {
          "ref": "61965e75-ce0f-481a-9929-f6ba61b832c4",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "65189006-ff15-4db0-a223-1bb897a82370"
        },
        "item": {
          "id": "87474bc4-5c10-4d9f-bceb-0a038bc968b6",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "58650cd3-5909-4253-899c-fa216522a8ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaac1c54-75bf-480f-a4d4-5ce665648e7c",
        "cursor": {
          "ref": "8c2da318-4494-4ee2-969b-07a75145122e",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "827f2a29-59c6-4ecb-a222-d25fc4c9f367"
        },
        "item": {
          "id": "aaac1c54-75bf-480f-a4d4-5ce665648e7c",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "e1bdf75d-d67e-444c-be52-ab8b7e79a7bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c896e697-3410-43d6-80a0-c9f288ddc2c6",
        "cursor": {
          "ref": "0a4d6736-6c51-46d5-abcf-9e5168724415",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "26e7a181-5e35-478b-8822-2a0282581feb"
        },
        "item": {
          "id": "c896e697-3410-43d6-80a0-c9f288ddc2c6",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "17c09e48-27a8-4a68-82a7-43ce2a90315b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "367044cd-bd0e-407a-98f3-13c1980bdd06",
        "cursor": {
          "ref": "3e52a919-bfad-480e-b5f3-b02de84b2a95",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "3da24a3c-84fa-458d-bac1-0b172185add0"
        },
        "item": {
          "id": "367044cd-bd0e-407a-98f3-13c1980bdd06",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "fc10f862-c87d-4eb4-a8b7-3fc9ea119ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "518f416e-469a-462b-be38-0c8438f16885",
        "cursor": {
          "ref": "92598661-abab-4704-9feb-a57cf4e05805",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "56cba2a7-44a9-4d9f-951e-fc29e9fe8e0e"
        },
        "item": {
          "id": "518f416e-469a-462b-be38-0c8438f16885",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "1e3a4dd0-467f-4b09-9825-183ba58686ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e00ef8a7-232a-4027-b3ca-b46d6da1b689",
        "cursor": {
          "ref": "6eb44144-6035-4f55-be8a-96a0c1dadf80",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e68ee87a-f5df-448e-99a5-c8d9e8049cfb"
        },
        "item": {
          "id": "e00ef8a7-232a-4027-b3ca-b46d6da1b689",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "8937265e-ed10-47e7-b2cb-03977d886ffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b02f50d1-cff9-4cb7-875d-c5d97251a9ff",
        "cursor": {
          "ref": "6955f9ee-3cb4-4578-ab15-d6d61291a47f",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c08d75cc-1f83-467e-a66a-329143f85c8d"
        },
        "item": {
          "id": "b02f50d1-cff9-4cb7-875d-c5d97251a9ff",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "0d10064c-1b00-4579-95ce-e09d14a9380c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 169,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94b0cf61-ec6a-4772-a5e3-08e91a7772a1",
        "cursor": {
          "ref": "31c080c9-6ca6-442e-88dd-a50b812fea7e",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b06ee778-7755-4c42-9a7c-e46afbf203fb"
        },
        "item": {
          "id": "94b0cf61-ec6a-4772-a5e3-08e91a7772a1",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "211be6e8-b578-47bc-881b-87626470e7d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01bfbba6-8e55-412c-8182-a296629a3d40",
        "cursor": {
          "ref": "f056c39c-2a67-4aaa-a0b0-4ddc387051a6",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a31e3877-2a1e-4b3e-9441-29e34acb5b6f"
        },
        "item": {
          "id": "01bfbba6-8e55-412c-8182-a296629a3d40",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "90d07d1a-3ec0-4165-9944-30d9a1f268de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53838f05-f3c7-4c50-bf9d-8d4bd61ed903",
        "cursor": {
          "ref": "747008fb-c680-4aea-94a0-9798a2cf3873",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "13cbe896-5388-4522-b60a-6840f3478c14"
        },
        "item": {
          "id": "53838f05-f3c7-4c50-bf9d-8d4bd61ed903",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d6704518-8779-4b33-aee1-d47c098731dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7db9016-fb40-4fe2-943d-d7349f43556f",
        "cursor": {
          "ref": "9cc242eb-0755-45be-a4a5-94e366143883",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "76775bee-4eea-4fb0-8814-f0cf8a489110"
        },
        "item": {
          "id": "f7db9016-fb40-4fe2-943d-d7349f43556f",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "6f79f05e-e6c1-4e8b-ad7d-74b4a05934c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeddfa14-0ab9-4fbb-9311-55c6e0d2c060",
        "cursor": {
          "ref": "2d17bf23-4839-4f8d-a7e5-30592af992ae",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "85c628b9-5977-4f1f-97c0-c4d7f108b1d9"
        },
        "item": {
          "id": "eeddfa14-0ab9-4fbb-9311-55c6e0d2c060",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "fee12489-e000-4a8b-90ca-a643b4b68953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d947f5a5-91d5-4738-84c6-322177e90e1b",
        "cursor": {
          "ref": "389ddb69-f40a-4373-8c95-9f6449ee8cbc",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "6b0f88e4-0feb-4509-977f-06a8603b20f8"
        },
        "item": {
          "id": "d947f5a5-91d5-4738-84c6-322177e90e1b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "42d5a5f0-8d6c-4156-9842-dbeadf72fa70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94915f00-b004-4fda-a330-8259b9f59fb5",
        "cursor": {
          "ref": "ec8b7209-e5d3-476d-8ba9-ff8ab4d2b8ab",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "37537fa6-5840-4932-9469-deb42f3ef577"
        },
        "item": {
          "id": "94915f00-b004-4fda-a330-8259b9f59fb5",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "51982d35-2d41-4cf2-ab27-2c48f9027f24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee02a275-0a88-4601-a82b-49f5fe05e2e0",
        "cursor": {
          "ref": "f80da29e-dd2d-4cb1-bdc2-215fd3f9388b",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8bfc188f-355d-44ce-a97e-9a3112e761d8"
        },
        "item": {
          "id": "ee02a275-0a88-4601-a82b-49f5fe05e2e0",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "e1dd399b-93c7-43c5-be04-bb78d504f2a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14bff2fb-613c-4192-a60a-a6ad2bcfebcc",
        "cursor": {
          "ref": "ab088943-e00e-467a-b591-28e3668ba22e",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e28e616f-9d37-4224-8ef2-1384a099142c"
        },
        "item": {
          "id": "14bff2fb-613c-4192-a60a-a6ad2bcfebcc",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c990a018-dff6-4057-a3e3-bba9fddef3f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68a181d8-f342-4a0c-8ed5-362bb7ef184f",
        "cursor": {
          "ref": "bf7b9557-e434-43b9-a92e-f9227509917c",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "9dbfbea0-74d4-4428-906b-ce768548aadd"
        },
        "item": {
          "id": "68a181d8-f342-4a0c-8ed5-362bb7ef184f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "5f4940d0-f644-4200-8a0a-0076f3583218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 327,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7129836-56c1-45a4-93a4-2eb143970092",
        "cursor": {
          "ref": "5b80eae4-661b-440c-831e-7c67116c2bec",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "cb53a40b-5017-4603-a29c-e09ef80f3a72"
        },
        "item": {
          "id": "f7129836-56c1-45a4-93a4-2eb143970092",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "8f4ad2c9-4e31-4529-ba4b-db79cf705257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4bad497-9b23-4693-a4cd-3d8230397a5a",
        "cursor": {
          "ref": "e7ec76dd-9626-4195-be8c-04042c3d85af",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "523cd0c2-ebbb-40cb-86ae-37c7db906134"
        },
        "item": {
          "id": "a4bad497-9b23-4693-a4cd-3d8230397a5a",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1b12fbd5-7250-4811-a886-d6b6e74e1e75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a23437c1-fd21-41fa-a968-909101ddcdc1",
        "cursor": {
          "ref": "129d9e38-6a84-4929-a812-d54266500200",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "db1c048c-bb9e-45db-90cf-e42bcbdfab20"
        },
        "item": {
          "id": "a23437c1-fd21-41fa-a968-909101ddcdc1",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "0114fea9-614e-41a4-9db7-dd39e1b38640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 157,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aec20755-797e-4c69-bf1b-b2131e3f5af1",
        "cursor": {
          "ref": "e8f3704a-71ef-4d8f-b16c-25f47690d314",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "28ad4b7c-48af-41d4-9d9d-924a7dbb8bd2"
        },
        "item": {
          "id": "aec20755-797e-4c69-bf1b-b2131e3f5af1",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a123eac1-3800-4bc9-8df5-5a751ec135df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "698f3a7e-0e9d-4cf5-92ff-35b33d3fedd2",
        "cursor": {
          "ref": "8f4448b2-2da9-4838-875c-8999a54e73be",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "4a331361-45cd-4656-b9c7-424daa697ea9"
        },
        "item": {
          "id": "698f3a7e-0e9d-4cf5-92ff-35b33d3fedd2",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a25bf50a-24c4-4447-b4ee-89d7b4818aa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17305a9b-32aa-4c72-85d4-834120361431",
        "cursor": {
          "ref": "2b2882e6-70e4-456b-9608-040648e74e8e",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "60b76606-483a-4e32-9876-4ed8d8c148b6"
        },
        "item": {
          "id": "17305a9b-32aa-4c72-85d4-834120361431",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "c026cfc0-1de0-4acc-936f-cebd6b98397e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bacabd8a-0fd2-42f3-80c0-606571d0cc1b",
        "cursor": {
          "ref": "e940e68f-cef7-48b2-baa6-f3076a401a2a",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b80df9ab-e769-4509-b76e-c0cb429aa7e4"
        },
        "item": {
          "id": "bacabd8a-0fd2-42f3-80c0-606571d0cc1b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "35eb0709-1cf8-4f27-a8a7-fed723a1b107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "193461ed-be85-4af9-93e1-846977f06951",
        "cursor": {
          "ref": "16c6a543-ec31-4a95-b5f6-2a8d3572aaae",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7ad5deb7-4d8c-4637-a900-d396e2847b02"
        },
        "item": {
          "id": "193461ed-be85-4af9-93e1-846977f06951",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "7e3e00d6-4bfa-473e-a46d-a0fd25f20deb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e5f0b97-a310-45b8-8298-fedeee02b436",
        "cursor": {
          "ref": "5ebb699d-2088-4ddf-b818-a15a284d54df",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "36819b5e-55cb-4e9a-900f-dd6c314ee494"
        },
        "item": {
          "id": "4e5f0b97-a310-45b8-8298-fedeee02b436",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "2b5d8341-0f78-4927-ac99-3b739a52f6f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba3a34bd-e657-48c3-a2fe-e4769bab5ae3",
        "cursor": {
          "ref": "feb05557-de7f-4704-9148-07493f1ccb8c",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "329c546c-318d-42be-a9d2-1f47463b657f"
        },
        "item": {
          "id": "ba3a34bd-e657-48c3-a2fe-e4769bab5ae3",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "4b0b4844-0026-43cb-b324-0834455513df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee90373-617a-434c-be11-3bd53df8688d",
        "cursor": {
          "ref": "85523dd9-1bc9-42db-98c9-3cfac9ddb2cf",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "21b8ae97-cc93-41d9-aaef-03f65b94623e"
        },
        "item": {
          "id": "6ee90373-617a-434c-be11-3bd53df8688d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e61c5986-f4e1-4d39-bf1f-96b4a4cbb100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88ac07b5-7bbd-4e8c-a9e3-ab6d7758657c",
        "cursor": {
          "ref": "3be3dd22-2ef3-4315-93ff-f3091bcd231e",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6fc80522-9862-4172-bb25-7ec8d4fe72f3"
        },
        "item": {
          "id": "88ac07b5-7bbd-4e8c-a9e3-ab6d7758657c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7aab1b74-becd-4063-a41c-b26d6d6198f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63a7f90e-5a2c-4c92-82b2-f0402338c74f",
        "cursor": {
          "ref": "9de0598b-b71f-4ed5-b879-e78251a2dcb7",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "c3bbcd17-feec-4606-b1bb-59dd339a5813"
        },
        "item": {
          "id": "63a7f90e-5a2c-4c92-82b2-f0402338c74f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a84e55a8-2969-4012-80ee-613604fe4138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b40c03-7450-4fe2-a858-2e21ae9dcc37",
        "cursor": {
          "ref": "5053a140-56d3-42d4-8105-343332c149b5",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7366d2e6-cf2b-4138-bc3c-25c28c8d980a"
        },
        "item": {
          "id": "c3b40c03-7450-4fe2-a858-2e21ae9dcc37",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7a7f6a58-cca2-4249-babf-05e812144c39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "990d7ea7-84e9-4cba-bf21-a26116ad246c",
        "cursor": {
          "ref": "de12f99d-3d4e-485b-9f4e-02906f50a550",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "63e3c546-7eb8-4ac2-b968-6859d4e5fa88"
        },
        "item": {
          "id": "990d7ea7-84e9-4cba-bf21-a26116ad246c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e4d8cb4e-aced-4885-a41c-04c2b22d5caf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 155,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba1c3212-74f0-4d1f-950b-5a5a4cbfc464",
        "cursor": {
          "ref": "5098689f-a58f-4617-b417-1dcbcab22472",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "64deeb86-4466-4362-ab54-bd7575e787d0"
        },
        "item": {
          "id": "ba1c3212-74f0-4d1f-950b-5a5a4cbfc464",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ddebc273-63f4-4d6c-b070-b32f46fe21ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94a70642-2005-4da7-ab2a-e0b0fdfc568e",
        "cursor": {
          "ref": "79d70918-2483-4a66-9682-c049cdd1106f",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ad506fb5-e188-4a31-b3a6-eeaf69a73f58"
        },
        "item": {
          "id": "94a70642-2005-4da7-ab2a-e0b0fdfc568e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7bd5352c-255b-4000-8346-2e0a5eda6848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f4e43fe-d5a2-492a-b5c3-dd54f06844d0",
        "cursor": {
          "ref": "bc7e5f02-011a-461d-a4b5-440504571dda",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7decad3d-be70-4fde-bf74-20e9fc77768f"
        },
        "item": {
          "id": "2f4e43fe-d5a2-492a-b5c3-dd54f06844d0",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "3a476801-8750-44d9-9a97-9d3d1f60a241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69231b4b-08fc-4bd6-94ac-2f56950d744a",
        "cursor": {
          "ref": "b9b3cb77-2bd2-4037-ba57-7d3d769dc763",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "7e70b1df-b714-4b55-80b7-f4fa82eca04c"
        },
        "item": {
          "id": "69231b4b-08fc-4bd6-94ac-2f56950d744a",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "18928bc2-9392-4c62-9e57-dbc469c73232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae766203-6e7b-4fb1-8f31-f5f9434e6b63",
        "cursor": {
          "ref": "42ee8f3f-3e47-4a3a-8703-0df3af22ba5c",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f131cfe9-bb79-4a8f-b2c1-ca277c5f5794"
        },
        "item": {
          "id": "ae766203-6e7b-4fb1-8f31-f5f9434e6b63",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "3229e256-ae71-400f-a0cc-c9720f4f9fbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ed27d9f-8118-4584-80c6-f2593c10a4e7",
        "cursor": {
          "ref": "684d9140-2312-4852-9ed1-8b3380586df0",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "38b3e717-c861-4f07-8070-cad1955103af"
        },
        "item": {
          "id": "4ed27d9f-8118-4584-80c6-f2593c10a4e7",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d241e12a-530e-4d95-9c53-072e61e5abb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 170,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cb21151-14aa-4905-b283-683838b99930",
        "cursor": {
          "ref": "8aa0836e-e5bd-4040-b202-9565f82d253e",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "8929221b-ed97-4121-8c9f-3ee889107646"
        },
        "item": {
          "id": "5cb21151-14aa-4905-b283-683838b99930",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "2ba8185f-4b75-48d3-a2a9-e3d600584721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e500648f-1f71-4fec-911b-efcc9a4c1adb",
        "cursor": {
          "ref": "7626c803-80c3-4258-b3af-212dabecbfac",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "855f8c27-c83e-4138-aa74-8961fb047829"
        },
        "item": {
          "id": "e500648f-1f71-4fec-911b-efcc9a4c1adb",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "1b20c783-0dc2-4283-86df-de08e0034ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d043f42f-5890-4a20-ac5e-474595eb6c3c",
        "cursor": {
          "ref": "264274e1-de06-44c5-8ccc-e866b40c4bb2",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "03e8c33d-653f-4e39-8f89-d52c2c73ad40"
        },
        "item": {
          "id": "d043f42f-5890-4a20-ac5e-474595eb6c3c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e76b3bcb-1c5f-491f-a440-39480b6f37aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f21baf4-30aa-4333-ad6e-2f6e54be5168",
        "cursor": {
          "ref": "cf159850-9a6e-4cfb-8930-40cf2e177760",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "60556544-4d1d-4d56-8896-da7b186745a4"
        },
        "item": {
          "id": "9f21baf4-30aa-4333-ad6e-2f6e54be5168",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "624cce54-b61f-4a2e-bff1-a3cc066677a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a68f8ea-46d9-4d93-b733-1a60206ed280",
        "cursor": {
          "ref": "9b6908b5-4730-49e5-b353-0177df7b72cd",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f065b973-7a3b-447b-a9b8-c24f82082658"
        },
        "item": {
          "id": "9a68f8ea-46d9-4d93-b733-1a60206ed280",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "6246f548-08db-4a20-bad4-48ec389b2bdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cbcb2b2-8182-4cb7-a1e7-dc6edeb0e827",
        "cursor": {
          "ref": "76b033a8-e28b-4117-b920-87e58b7074f8",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "e430a444-9b93-4f8e-b61e-1f11c1674554"
        },
        "item": {
          "id": "7cbcb2b2-8182-4cb7-a1e7-dc6edeb0e827",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "678b5dda-7865-488b-bc61-cd35be2e315f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "188e4e0b-5f9a-47ec-b536-01e999a21a1b",
        "cursor": {
          "ref": "9e80f22c-267a-493b-9fb5-9bc909f0a85b",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "6a5b5026-2c05-4a8c-8485-2a409d582e25"
        },
        "item": {
          "id": "188e4e0b-5f9a-47ec-b536-01e999a21a1b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "cfac1757-5757-46ca-8177-6342c5c18a6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d415d66-0c4c-485a-9376-b3287fe63e28",
        "cursor": {
          "ref": "b7d245ee-3a58-43f1-bebb-a73877a7cdde",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e7e263c8-68e1-4499-b346-e77ff2f1180b"
        },
        "item": {
          "id": "1d415d66-0c4c-485a-9376-b3287fe63e28",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "67f055ea-0f52-4b97-97d0-8a2ab93a4158",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaa4fc56-59db-426c-bdcc-cb0d5a8a27ee",
        "cursor": {
          "ref": "00ea1af7-5b6b-40ec-aaa8-a817852c1078",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e53bcf5b-12bf-4307-920a-0743bb2bac26"
        },
        "item": {
          "id": "aaa4fc56-59db-426c-bdcc-cb0d5a8a27ee",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "27fe9a22-8aff-4ee4-a944-8a01fee74957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065b7bc1-8d8a-4201-83ca-52f489991c68",
        "cursor": {
          "ref": "db0f961a-3963-4f46-b4dd-741c40244d88",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "21342c75-a355-484f-b6ce-03cfa32707ee"
        },
        "item": {
          "id": "065b7bc1-8d8a-4201-83ca-52f489991c68",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c93f7ad7-fb81-43f1-9256-2515a10d1bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a06bfb0e-d7e6-464e-937c-9b9e127cd76d",
        "cursor": {
          "ref": "088fd16c-b1de-46ec-ab27-debfdbf795be",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "60a623b7-7631-45da-a9f8-0611cdd20493"
        },
        "item": {
          "id": "a06bfb0e-d7e6-464e-937c-9b9e127cd76d",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "970c0569-0509-4fdc-8343-fe1f824f4d4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0eeb25c-126f-4c57-b446-d282b32ef7f7",
        "cursor": {
          "ref": "10acf417-a742-470d-87af-13975817a778",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b0d76a7d-877b-429b-8e0e-2110e54bd669"
        },
        "item": {
          "id": "b0eeb25c-126f-4c57-b446-d282b32ef7f7",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "af3a18cf-4219-4d3f-8cb4-1a9343caf216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ae5a8c5-1366-4bb8-a32a-1d73700edfdb",
        "cursor": {
          "ref": "11cff6e0-b1a6-4b95-8a42-4ad497c07af2",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "735a14a3-5d20-4345-bfce-059d13e4c05c"
        },
        "item": {
          "id": "0ae5a8c5-1366-4bb8-a32a-1d73700edfdb",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "45547d59-2ab8-4e55-b12d-079c3a2611d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d3f67ea-2e30-4e51-89a0-0d1c5457286c",
        "cursor": {
          "ref": "59c22a58-8de5-4f0f-bad3-320ffda243bc",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "8e185086-bae3-4c1e-952c-2145f0130af4"
        },
        "item": {
          "id": "5d3f67ea-2e30-4e51-89a0-0d1c5457286c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "94da7d8c-28d9-4323-b843-42e46c06f037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb8d5e41-238d-4c6e-b870-e963a5d8baeb",
        "cursor": {
          "ref": "e6e33452-2f08-4e72-91cb-0da3b3ef81f7",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d86b7295-5c68-493b-96c5-696d50c85686"
        },
        "item": {
          "id": "fb8d5e41-238d-4c6e-b870-e963a5d8baeb",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b7e9d6c7-7e05-49dd-aac9-a74ff11b02c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59b89062-3eba-4f18-a663-1b8b34ddffa4",
        "cursor": {
          "ref": "791f80b6-eb85-4ff4-a37b-cbb84d7df15a",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "fb7fa398-963b-45f9-bee3-739edc4c4f8f"
        },
        "item": {
          "id": "59b89062-3eba-4f18-a663-1b8b34ddffa4",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "4065f44f-6073-4f75-88c5-f868b53cd8ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb9d990c-a73e-4b77-a995-38ce06ce3e19",
        "cursor": {
          "ref": "b64c0487-4714-4c5a-bdaa-7552b4a2bdf5",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "610d2e60-a7b9-462c-af1d-d53d21cdd5ff"
        },
        "item": {
          "id": "bb9d990c-a73e-4b77-a995-38ce06ce3e19",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "4339fe1e-0b72-4d45-947c-c11da0aa0abd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1866afb1-8b48-435e-b69e-014db6f7d5b0",
        "cursor": {
          "ref": "65552640-20b9-4aef-bf8b-d617084b98be",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "69c14439-71d4-451d-b018-2ca5d242f6e7"
        },
        "item": {
          "id": "1866afb1-8b48-435e-b69e-014db6f7d5b0",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "23fda203-0c38-49a2-8e6d-49062495059e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36ab33f0-8758-46c0-99d5-0d27076e256d",
        "cursor": {
          "ref": "7e11234c-8eec-4c9a-970c-ffbca2a19a38",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "23313369-aa4c-415f-82a8-0975bdb4849d"
        },
        "item": {
          "id": "36ab33f0-8758-46c0-99d5-0d27076e256d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "46faecda-1b2c-407e-b807-4c4292ba7bb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb90596-e19f-4d5b-913a-0395cb21f913",
        "cursor": {
          "ref": "2da9cc0c-6ab3-4658-a502-0e707b27dc75",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "a5e15461-ea4f-4c20-95aa-39bb8289812c"
        },
        "item": {
          "id": "fdb90596-e19f-4d5b-913a-0395cb21f913",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a23372a5-9341-4e42-972e-55999f7fde35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebfa0bc5-a0fc-4bec-800a-ca292b7e8367",
        "cursor": {
          "ref": "e7400309-d796-42ab-8c51-531e525a1520",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "74dfa7a6-34a8-4b02-8bd7-432fe918446b"
        },
        "item": {
          "id": "ebfa0bc5-a0fc-4bec-800a-ca292b7e8367",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "fb6eea92-6ed2-461d-92c6-f1ab6327e8ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f1fe6d4-1516-48ce-8b0f-260dbdfc3162",
        "cursor": {
          "ref": "f8cd975b-06b6-445a-8dbe-218e4597d723",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ec6d4b19-b6ce-434a-81d3-4e24a5dada7e"
        },
        "item": {
          "id": "4f1fe6d4-1516-48ce-8b0f-260dbdfc3162",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b9f9df90-715e-49f3-b352-d3fae5c564c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ed65c2-275f-498f-a3ad-ad01f353a180",
        "cursor": {
          "ref": "cf253c6d-4492-48cf-a476-ffa281c449e7",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "0cf2f7c4-1258-41e7-9c94-15490712ff03"
        },
        "item": {
          "id": "14ed65c2-275f-498f-a3ad-ad01f353a180",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "58aa8325-73ab-4ddb-9c1f-5c07499dcbe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5429faad-29dc-4df1-99ad-4458c12f9a03",
        "cursor": {
          "ref": "7a507877-58bb-4602-88a1-c6e6f56c3936",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "73c2bafb-f939-4044-b05d-95fbf046c5db"
        },
        "item": {
          "id": "5429faad-29dc-4df1-99ad-4458c12f9a03",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "badb4d81-5b3c-406b-9b90-936abe95a34b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d44a817-fd85-4898-8007-cbb7bf36e26d",
        "cursor": {
          "ref": "3972616d-2b1f-4942-8630-c1eaeda5237f",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "0a3cf7a4-6255-4227-be04-516b0dac05f8"
        },
        "item": {
          "id": "4d44a817-fd85-4898-8007-cbb7bf36e26d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1f54aed6-828e-4a17-ab1d-3fd4c54be825",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "4500dc37-4294-42ee-ad15-b34f44e5c766",
        "cursor": {
          "ref": "f7ab9c6c-8478-4395-b87d-25ed032b917a",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "36b95b03-e768-4cdb-99de-1769ddd605bc"
        },
        "item": {
          "id": "4500dc37-4294-42ee-ad15-b34f44e5c766",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "13d3369c-8631-4a91-85e9-8dca9f698bf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "b1c18432-9a2e-417d-a513-72f7ee3e1440",
        "cursor": {
          "ref": "c98f3a62-3046-4fa3-871e-a196643b41e9",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a60391b6-7565-4701-922e-734a9f19aca6"
        },
        "item": {
          "id": "b1c18432-9a2e-417d-a513-72f7ee3e1440",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "b41ea79a-0c9f-49d4-ad0f-56cbdcc8c6f3",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "42c47198-dac1-4f54-9159-fefabfb738fe",
        "cursor": {
          "ref": "fd70ea3e-5445-4ea7-8873-8a6c659dd1c3",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "d7ead79a-2157-4e65-a6a0-2851a85c622a"
        },
        "item": {
          "id": "42c47198-dac1-4f54-9159-fefabfb738fe",
          "name": "credentials_verify"
        },
        "response": {
          "id": "dd0feea9-e1ce-40ad-8ccb-4335f2dccb8b",
          "status": "OK",
          "code": 200,
          "responseTime": 2308,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0008afd-4a79-4184-9e7b-c7b8f0f4b1a9",
        "cursor": {
          "ref": "486e0b36-9a9f-4a71-beb8-79716934885d",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "31dc08f5-ff51-4888-a816-2afa17d1daf9"
        },
        "item": {
          "id": "b0008afd-4a79-4184-9e7b-c7b8f0f4b1a9",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "71730fbe-cee1-4b1f-8e6c-533f5b588bdd",
          "status": "OK",
          "code": 200,
          "responseTime": 2241,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a55ac32c-1ac8-4dec-8afa-a1dce124431b",
        "cursor": {
          "ref": "5be87382-fb86-4e80-9df9-3d8c94eff9d1",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "893415dd-d503-4df4-9536-abbb9acfa4a0"
        },
        "item": {
          "id": "a55ac32c-1ac8-4dec-8afa-a1dce124431b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f7dffc8e-244c-45f5-a8c5-36ccafac00dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "a55ac32c-1ac8-4dec-8afa-a1dce124431b",
        "cursor": {
          "ref": "5be87382-fb86-4e80-9df9-3d8c94eff9d1",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "893415dd-d503-4df4-9536-abbb9acfa4a0"
        },
        "item": {
          "id": "a55ac32c-1ac8-4dec-8afa-a1dce124431b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f7dffc8e-244c-45f5-a8c5-36ccafac00dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "a55ac32c-1ac8-4dec-8afa-a1dce124431b",
        "cursor": {
          "ref": "5be87382-fb86-4e80-9df9-3d8c94eff9d1",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "893415dd-d503-4df4-9536-abbb9acfa4a0"
        },
        "item": {
          "id": "a55ac32c-1ac8-4dec-8afa-a1dce124431b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f7dffc8e-244c-45f5-a8c5-36ccafac00dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "114f8669-1b9e-436c-b38a-a23fdc9ce68d",
        "cursor": {
          "ref": "70fc9042-d5a5-4c6b-bc46-7671c9254648",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "47eb31a1-534f-4ce2-b012-e6ec4a72078f"
        },
        "item": {
          "id": "114f8669-1b9e-436c-b38a-a23fdc9ce68d",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "f4eef76a-bf47-4c62-9055-6845ebdfa503",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "6d9654a6-6f1a-4244-b2a3-2dade92fd5da",
        "cursor": {
          "ref": "aa37b157-8965-46e6-ad8f-2f450d1c5261",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "a0c5ee60-0986-4395-b9c2-1e707e507bfe"
        },
        "item": {
          "id": "6d9654a6-6f1a-4244-b2a3-2dade92fd5da",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "1fa9115a-7c3b-41de-b01c-b4c2708403aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "6d9654a6-6f1a-4244-b2a3-2dade92fd5da",
        "cursor": {
          "ref": "aa37b157-8965-46e6-ad8f-2f450d1c5261",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "a0c5ee60-0986-4395-b9c2-1e707e507bfe"
        },
        "item": {
          "id": "6d9654a6-6f1a-4244-b2a3-2dade92fd5da",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "1fa9115a-7c3b-41de-b01c-b4c2708403aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "295cbf08-526b-40aa-8933-ef20144d75e9",
        "cursor": {
          "ref": "fcd45c8f-4a2d-4621-b357-8c61c607e8db",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e01272fc-4dd3-4be7-b68d-aa906376986f"
        },
        "item": {
          "id": "295cbf08-526b-40aa-8933-ef20144d75e9",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "483bb643-e26e-42d5-9e42-8abbd7996cae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 141,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "8ab1d236-3865-4b89-bf69-9d8a23873856",
        "cursor": {
          "ref": "229b6bd6-68ad-4e73-b6d9-f041bd768a6f",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e4447598-b1f4-4d04-8e94-875d4029c7db"
        },
        "item": {
          "id": "8ab1d236-3865-4b89-bf69-9d8a23873856",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "75686076-9c7e-4fbb-863b-9cac04e598d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "8ab1d236-3865-4b89-bf69-9d8a23873856",
        "cursor": {
          "ref": "229b6bd6-68ad-4e73-b6d9-f041bd768a6f",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e4447598-b1f4-4d04-8e94-875d4029c7db"
        },
        "item": {
          "id": "8ab1d236-3865-4b89-bf69-9d8a23873856",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "75686076-9c7e-4fbb-863b-9cac04e598d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "5009299c-4742-4f85-ac54-9b3402a85112",
        "cursor": {
          "ref": "6e50622c-c629-47d3-87ce-deddece9ff45",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "ad948b7c-ee0d-486d-87ee-027d166f2f13"
        },
        "item": {
          "id": "5009299c-4742-4f85-ac54-9b3402a85112",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "216dcd46-1ef6-40ad-bae6-8de6764df46d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 103,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}