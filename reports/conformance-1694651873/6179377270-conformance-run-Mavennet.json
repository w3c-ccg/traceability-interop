{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "510399dd-430e-4753-82b4-ce0605d01996",
        "name": "Clear Cache",
        "item": [
          {
            "id": "375957c0-7187-4b8a-99a8-e4cdb8f1176e",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b954e440-5087-4fd3-8b10-e0334c49db55",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "26dff6ec-ce03-41d8-841b-f1d1d53274cc"
                }
              }
            ]
          },
          {
            "id": "52ba1673-f4cc-41a0-850b-99a5e44eb8e6",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bc762bfa-b1d8-4a82-94d9-8a1964a8cb82",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a69015de-c7a1-4881-b789-41216a6c75ea"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "a319626a-9b09-421c-a1f0-88d57a722d90",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "3f2d93c5-02cb-4ece-979e-a5b0b7e84a9f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e7b60866-3f7d-44ea-9ce3-9ce6e38e4df4",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3e765da-2802-41f4-9bb5-49f681cfaca8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4e49eb7d-0133-44c9-969f-86e0e5b5fa3d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d91c873a-3c43-4ac5-86d7-35c6b0e2a095",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9a9b0483-7a36-41de-851a-ed7e91fc183a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "85449a61-7171-4fc1-9b3e-ca08100bf150",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1fe55089-8bf3-492f-8a13-4a5b853606c8"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ba297950-53e2-4f22-abf5-92a123e96212",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "e497f5ea-0887-4964-96a0-813b6493e7de"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "48e4ec05-b655-4dcb-a287-7495c17d2c8f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fe5515ce-5e71-4056-99bb-f5282c29a0f1"
            }
          }
        ]
      },
      {
        "id": "ada945cd-a0a6-49f5-a02a-9384b1e8c7df",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "a4375eb1-8b1e-4aee-b26f-fb08443c24f6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8371c516-a632-4acc-a1bd-aee9f05b8b5d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "19c92fed-dc8a-4636-8a02-afee199be321",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cabe0fbb-6a08-4788-b9a8-6f340beee607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "961a6005-4505-4376-8d56-b9a612933dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "868a3f86-7ec8-4bee-835a-82cefb76dfd3",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ffd1e8d-c2dd-46aa-96bb-9ded5cc10249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fa4f1c91-26ea-4d18-b32b-3382e8b595e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "552cd2bc-f898-4373-a1ec-a18950186928",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d2c66e1-33d1-42bf-b98b-733d285fefbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0706cfc3-0a95-46ab-ac9f-8523edcb03d7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f488d852-31aa-4873-8609-b5ece53cd783",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5c511b23-db46-4da1-acde-2586aa50b89e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "053c1d36-3267-4049-9be8-d03b8dc0f518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "abe8dfbb-33f4-4e9e-a0aa-d2bc7d908e69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a97a91a-60ed-4724-8899-d62f9a71275c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7105b5cd-6322-4615-a882-ff132befed1b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a6f4f643-e0bf-4842-82ee-a12894f91627",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d5bd82c7-3793-483b-88ff-a4224be22924",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c177b380-2b6b-439e-993b-b161854e5a53",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "521cf92e-22a3-45c3-b6b0-a81ca472ae31"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4ce2a769-bcee-4b93-8817-7b9e36a2c1c7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "5912e660-db51-4e65-9108-e5e4cd5b1f94"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "53d223d9-4f50-4d1f-966e-ad8a9ed2fdde",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6b801830-4627-4f52-8876-e4a98af4e649"
            }
          }
        ]
      },
      {
        "id": "749fd904-c30b-491c-91ef-9111e44831cf",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "c502c24a-0449-45a0-b6a5-f637a1bbe348",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e2fcdef0-a1e3-4942-8374-92ccd467338a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "1fbe8319-6b22-4c4b-8fac-e351def1d0f2",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "215a88ed-d5a5-4b84-beb0-418beb4a45df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "877c4ca2-5c54-4702-8be6-6fee3bf0ffbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006f179d-b804-409f-805f-28374c3c87c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d15956f0-3fc1-4488-864f-b4b1948adfd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a955d4cf-b03b-403d-af19-1d3cf570371f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ee43af9-cd23-4637-9d8f-419fa151a228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b90f0a1-fce1-4c25-bd9d-194aa40f1958"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c588188-7775-40fa-9ca4-9781e4922160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95a07a86-7beb-4856-b8d6-55eb134bdd2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d7b000-c76d-4b2d-958c-af1665bf4314",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d0983a-138c-4f50-85fa-61a7c8e5d051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23268d8c-aba0-4d3e-851d-2fe7299625eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "874773de-fc2d-4b86-b1e2-36d81164199e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5eebc0f-deec-44e1-b458-8a116d19e152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3fd6141-30c5-4be7-ad79-5591e149495c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b73d3852-470d-49fa-a175-742ee0a16db9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cafe0a5-0f65-4eed-b8a9-00326a8ffd80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b173a1a-879b-4165-984d-1ea40d39fd8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10ecada7-2148-4585-83fb-27986ce8decf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac9bbc0-2b6e-4046-926e-bdf68870d212",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a536ba7d-f91a-4e7d-a98e-7bf1546270c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f954e1b6-db70-4fbf-8930-4b064e9187bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e85273-6a13-4f90-b190-ea7e2a658e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f99eefc-5210-4a6a-bdcb-dbad51581e29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f8a95b-c607-4f85-8b40-e751e2e25cef",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2798f4fe-d0b4-4422-b4a8-5e5cb9bc2935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ac1c986-71a0-49e0-a40e-744d9cdab7fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea980375-92f9-40ea-8b95-3cd6beec61f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "670063e8-442a-4eb6-92ed-f93590081adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6fe79f0-2ff3-4af3-a65a-4fd704424e46",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "768a5e9a-6860-4967-b554-e05136ddeda4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85d5ceed-c282-4a86-aa6a-73776d76a4d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4793a49-156d-484c-bc04-f531ae0a4e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c67164c8-76a4-49a0-85d9-5449b2019331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa878c4c-f395-4e82-a1db-99d5b71ed9f7",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4cab347-d207-4113-8e4f-0eede5304297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85be6fb1-d063-459b-8c7d-d39c16f2c7c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dec778e7-9b2d-4291-bfe5-5b39ef7c60bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9bb80a15-88e6-4efd-a81e-fe3d7e83cbdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d83cfde3-9d2e-484a-ad1d-a093be7aa04f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ceb356-ee0b-4df9-aa5e-6be21d1ce0a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6e66fae-142b-4c98-b13e-a1e4765615dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5439e91-78e2-4266-b7d7-3ea2504c9721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "326da196-230d-4fa1-b1c9-5df4fe1a6775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b3165c5-a20d-48d6-acb5-78510779b5bf",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae482b9-fce9-463b-a18e-d2f44fdcf4bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5728fd7a-4654-4cec-9cd1-3b3f3749abbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cf7c9d7-7435-4060-8617-57c07e9c62f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00a98c76-4934-4f23-86eb-feeb954f1f3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c2959ce-b79b-400d-a393-db74528f35ef",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e502f8c9-1a20-4ce4-9ea3-8beda8852129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81255585-9f5e-4987-9dd5-2b9b26f49884"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee69e58-3572-427f-8427-0b1a6f9647af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4fa35940-fb10-4c52-aaa0-c9f6b789b396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc0a1303-30d3-4f94-bc8a-dafe3b21130b",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb2d9a5-191f-4a76-a0cf-3cb4407eedfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4a3e210-9ebe-44f3-b6d1-31290442892c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e05da591-c029-4cac-a2db-240d571bef5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b550ea6a-876c-41be-9275-1a889063a68a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03da394c-8301-42a8-a714-0763e877f20a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8e85c5-ea2c-43d9-ba0b-9fbdad8c7c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d53d7fcb-214b-45d7-a3be-45d813c34f94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd5aead-73bc-4715-bb0e-ae5c357f5229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ddae3ad3-940c-49f4-82bd-5e753319055b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3535f46e-25df-4d0c-b40a-b9ca8bd12e1b",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e47ada8-4b5b-49d8-8a04-f34c2665dadd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7395e1db-40e1-4144-83f7-4fd99f21a35b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "051ba4a9-5a8a-4464-9ed8-b189d425a003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2be68e5e-ed3c-415b-ab28-600d608202d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31c20ff9-25f0-48f8-b5f3-55cf846d045b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9026504-f6fc-4237-82d2-6d7adb6b60e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5bcd65c-8e7d-4ed2-b9ef-96c3b0783dc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6281d56a-f62d-4941-aa2d-b20d9588bef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5574445-dcf4-4157-a44e-eb9c08255ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d70a5ffa-3450-4660-9350-e0728bf03ec0",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e34f4b42-7c5d-4bba-8aee-06d912d425fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f9d22cf-fc6e-4c18-a4a7-9072b0022830"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e594c7-934c-499a-9fe8-fe62a9298424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c58af1ff-8bac-4305-adfd-4a224b9960a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "498c6f7c-1da3-4bea-b0d2-d0738243df3a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5891c6e-4cbb-4080-b74c-41e230baf53f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a944314b-361e-441b-a2df-a73fa2d3057d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b61731-7198-437c-b03b-bc5913b3db16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a8fa84ea-7f6d-4f88-96d2-ab15b85efc66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b3ba14-b3df-4f57-a07c-31116bbef531",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "914bdfbe-ec7d-4f35-8288-68b655664ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ab6212b-514d-4af9-8ca7-d64ac9c04d57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59189bf7-ecd2-4e4c-93b6-6f761d3e0dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec30feaa-d816-4827-bec3-4d583d498c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f7bcaf-29fc-4c5b-b1cf-fda0eb630647",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2903b0bb-8f29-4018-9f28-5ac4565574c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccd4199b-fd69-4db6-93e8-bceebe39c982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "851cb325-efd8-4529-8744-0567fb799dc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7ca2451-0e58-47ad-8f66-675346ea8f3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1a68fc-c22c-44de-b786-993ed93734bf",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b53aef45-3812-4544-99c0-0d557f08e1b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf8a93a7-4206-4321-9367-dc84c2638ade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5544a50-1799-4686-820e-3da8d02706a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "be9f6be5-ee89-4444-b9f2-1ddb0429f361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b2fcd04-25f5-4465-a3f3-95c2e0d78649",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "192559c6-19ec-44d9-9677-111fc2faaea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31557403-2c92-4620-a888-dfa5d4ae376c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b379b569-d680-4d8a-9589-8d2f224a481d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c0310c4-14bc-4aa7-a1e9-7d2fd8517659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb9cf0a1-09c0-41d1-bcea-e4607696672d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fc08bff-e70d-4864-8736-946524fce213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79ba8bb9-5f0e-4093-9dda-426c212b4b52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20dd92b9-bd28-4818-a803-770c00e70049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "56e83a46-3717-4f18-8c79-1b61f823521a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f5abe4-c349-4fed-b7c8-271c6b202627",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da27f3fc-2102-4a72-8371-2fa6cc099ce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9d45f3c-59e6-4b1d-a2d5-b7cea3838e36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "704ac7fd-5909-4f86-ad7a-bf349532469b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f113b7a9-303a-421b-8416-9d2d400eb9c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8744cad-e6d0-405e-9b82-1c7e9a1a3954",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69be2ccc-f74c-43a1-b771-b6b8f3d85390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77a353b0-de89-4487-8cb5-bea02070c32f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abd3a83d-829b-4189-9d85-6a893fd6f52d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "37340daf-87ae-458b-9a55-184a709f1aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a92843a-20dc-4b53-b720-6072aa713599",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b30c340d-1519-4c7a-a401-05feaec3b0c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4785f9d-4916-462e-b5be-8864d7b3035c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e209b622-bc80-4439-9412-8698e46aa02c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "221d0db5-6968-47d6-961f-beb8d5e686f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e485cc9-2f04-449a-b8ff-e7f6b9864a23",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca4f8e0-98b4-4106-90d8-382f357bfb1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fccfe2d-e7af-4dd0-a412-05a4c54e472a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8f06e1-2e29-4822-a6c1-6ec18ee0c6cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "183f713a-f065-4107-b28d-0033a07e7486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae88edb7-d23d-4d55-a147-69dd1b6fabaa",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f195be6e-5a62-421b-a31e-8c9b2f842e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a24e8bd6-761f-4012-abe1-a84eea640f8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b41b2d46-8ddc-4e41-8798-f5f808304069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0ab346d-7ba9-4d7a-b271-2b4d39d887a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "081eef8b-c838-4c97-bd73-f02894cbcbec",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c313cc8-3155-4b64-9ca8-eb220d91b90b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f687b35-df4e-46a2-948a-3cbdb00fd2ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f34c382f-d5d1-4d7b-907c-16b46a47a4a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "644dcee0-9685-4115-8e1a-7895fe2517be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a74e42b-ad07-4922-935e-f3d38d95a1c5",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01147e84-8f1f-45b7-8aec-34f1c933a187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b25c70f-19fe-47dc-b160-11a4b4319370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d9a12ce-f8ea-40aa-8f8d-0fd85445c1ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2600addb-888f-4f0d-b607-94983b820943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f51a48eb-0dbf-4866-a0e1-db6933f807e7",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a340276-49cc-47a3-9dad-8ac53b2358ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cbd5bf7-2cee-47b3-8b85-35284f80fb7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e4b2544-33dd-466c-8d53-c9ae722f4daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "771e8a32-b9d9-4c53-bb8e-943a71e16dc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "580d2d5b-4b55-4add-be61-207631659f03",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4806b75b-ed13-46ac-a727-8f31b55ace55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef376459-77c5-4327-b789-13348ac1625b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60aaf24e-cac2-4a7f-92da-3918bf9bc25a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab3787a7-3ced-4717-a7d0-db809775b977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a5fcb83-ec01-4284-8937-c8daa40b96d0",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b7d2642-154a-4090-b6c5-010d023a034c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aca420e8-7f70-4ce8-ba97-66e3351fdff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70be07d1-0ebe-4e91-9a2b-8981c1a69c54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "129ecf65-2f68-4e73-a0b6-699608420a9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55199988-55bf-4fb6-85f8-8feaa4aa3d9b",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a68491de-36ef-4155-831f-29bc61bb730e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e780fc5-0e18-4bfe-b57d-56ad2edbff6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cafefb74-56e4-4927-ae8d-8559593e1e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2e92406-cc08-4e72-9809-5de66be26f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba825ae9-3988-4b50-8196-8209e3a8c2da",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c49cbc-8eb7-4744-ae4a-1a873f6d9a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26942172-4e1f-441a-a382-cb16b2fc7405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "904e2079-e3a8-4306-81bd-3cc659bd045d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "87b7de39-fc9f-4446-ac46-ae9569358e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73cc5f61-7eba-4229-96c6-7bd7974cbc7c",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adab22f0-934f-47ae-ad45-0b72de19eca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b60dfcae-1ce1-4fb3-b437-d9708e9ad56f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06958cc9-74a2-4bd5-8452-794ef9dd1ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "b068030a-cc3b-4dcd-b142-cb2693c67d15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b728075-e14f-45c3-88ea-5f349febaa79",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a647a0e-0b2d-4b3b-8814-ac8454830fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b16863a2-3779-4777-9a84-7886e3c5ad6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20f9deee-9aff-424a-b76e-f590a83f8fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "368644e9-618c-4350-babf-78e0b4163677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6517c48-afa4-4370-80b6-c60633e83a62",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1afbff69-d28b-4a94-bb82-c78dc2849402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecfb374c-ef65-459b-b1e0-18919c3834c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d56444-6f36-4ebe-85c0-27f72281c91c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f18b642-c92d-404f-a4a7-c353b55a132c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb296fcb-0287-447c-a572-0e0150339b62",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10dfe7a0-df52-4957-85dc-94446fd173f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e44da99-777f-49a8-911b-d685b18eeab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dc7fbe0-5d47-409d-9223-e435841719fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2dfe6e9-baa5-4b69-bfc0-26a243bda62b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d5d876-a8b7-4061-86b9-9f3a9553aa60",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae00824b-db1d-402b-bcf5-24018800826f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b83a825-17ee-4c30-903b-372c8a419864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9fd1950-d28f-489c-83d3-445756e36ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b41576fb-9b95-4586-b40c-d2d0b33956a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de7a3ea2-0b1f-43d0-a472-e236e5032834",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42889dee-2856-40c6-b1e7-700534215826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "098fd030-44d4-4186-96ed-110e8346b419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3bfc33c-e0c3-46f5-a099-45bddc7d15a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd6563b2-b0ac-40d8-9242-fc19a68d53fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce3434d-e5f5-41f5-a1e7-79ca6d160490",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5274879f-4605-4a79-9809-5f342a905972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1c5a308-e3f0-40ee-87d9-682cf009f2e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f64f128d-6598-4fe5-b8c8-a0a8405aa10d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "29112856-4b5d-44df-8f6b-e3b5f020529e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edfbb7e2-5148-49e4-af9d-695678bcf6b7",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "326f9199-0786-47f6-a1b2-38470c6b4758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f5215ac-6a17-4c5c-9f75-2d1aed4bc9f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd80f065-70c3-4ecd-8987-1cbc0812a853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "9b4b9627-6a75-41e4-aa17-0670ac5113a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86c51014-c67a-4d53-98a9-3a725fe10819",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f43f4beb-92e8-4bbd-bbe2-c18cea627742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f4450f8-8145-42fc-bcfe-572e2649b2b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "126a0b1a-3cf2-4a0a-a745-5d23f8bf3976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d86d24df-b226-4de7-a174-2816bdbda53b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a2d81e-75fc-44a4-aab2-2aab74e656cd",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd473ad3-9f9f-4cfb-821a-cee831b3b883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38a0e4c6-6643-4784-a805-789b2a1e266e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "235fef7e-e971-454d-8aec-5443824c05b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d29d6576-04f1-492a-9bb8-a2ad1c9e60b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd5a82ef-675b-4fce-97d8-6144071c97ac",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5158d92c-b073-4974-a897-f3290aef7068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93f1d7f3-c1ae-4734-af2c-3767e53e5434"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a7b7b8-f755-409b-9b40-62c0f0d251a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a8b6c18-9922-4e47-8a32-a2dcceb2c748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3573ea70-0e20-485c-b5ff-cd878e3799fd",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fade48da-b2c1-487b-92c9-01eba19c24f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea3b0fac-1e47-4f70-9e54-b891b46d3057"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d98baef-26c9-4d02-ada5-a41f2801be38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "409c37a6-7a4e-47bd-9fd7-5d04098b7b00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caca7e75-8c8a-4493-b9ee-37c1072fb8a0",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ef781b-e94d-4825-8e6a-a7d650e2f1be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1133772-cc1d-4158-bdc7-e7398ab32d41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a1dd26-d8cc-4f86-9144-1f08cfebfd25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f88ca04-cb00-4509-85cd-420dd73ae2d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bef3aae-5ed6-40a3-92f9-1cfa9f2fde8e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51926290-3963-4cea-b8be-fe1cbbe1a125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c025acfd-05e9-47ae-b7fc-3ce4b14bf726"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b01ca1be-27f5-4fb8-abfd-54f121757ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "52aee314-e54b-4ac4-988a-f0fa20f35c1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d6bd6c-c088-4e1e-b57b-19ebbaf35419",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "895a9024-2f55-4cb8-a0ae-37526b92546e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6a97d90-eb78-4146-8a95-aef08fae9268"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db69417c-aaad-4afa-b2c4-bd437b193f79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0538c52a-78ba-4550-9b8b-a452cf388321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "333ac341-111f-4855-8638-b2ad3c0c107d",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e627d5a1-f2ba-43d6-8f34-97b70f0aaa04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "561e6c08-90ac-4c0d-8328-59ada57c50d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b1b07e-ba78-4fbd-8c95-97f9c4acbf35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d40315c3-c259-44cd-b0c1-aeafa69d25bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf1852a4-e766-4278-8e0a-f0b11ba59327",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa441fe-c787-485e-ab76-84a6a79690b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "519e3dcb-8282-4b1f-a568-b47c6a42eecb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c13a8714-0ad2-4c91-a0b9-894dc1c2ec92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c565b3d-39cc-4c3b-b8f1-b68cb95e6f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfaeb281-3fe1-46f2-91a5-d22a86fafea0",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3c7a9a-b508-4685-96c1-4f6c447713d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2921857-287d-4f4c-9652-dfef8f169aa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a92057e1-dfa9-45e3-be5b-86a480ffe21b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a376d92-28f8-43a9-af56-20eefaa276b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9d06d94-092b-483b-a28b-fe2f06c752d2",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3418c3f-ed83-409d-8710-938ac1e5191b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edad87c7-414b-41d6-b2d2-e21139541836"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc77f0f5-f8d8-4aa3-b453-ad3a0349f92b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b70afeaf-b0b5-495e-b225-4e03d840ee06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd9699a-8636-481d-9289-12b51e47f311",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a20067-47cc-4b60-b4d4-8e0c0c9d11af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9642c4e3-4d92-4dda-b775-e6846e25eff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0b5326-7e1c-430c-b14e-c1eedb41066f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "452b04dd-c353-4c8f-be75-b0c1f5ed1df4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf1944a0-da7f-4357-8263-0da5703a4e19",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e46acba9-38c5-49af-8040-c122bf97774e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6055af23-25e5-44fa-a8cd-701d59893697"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e8a6d9-22cc-4237-9c2a-5fd6c555df24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bd76fd2-1f3c-4ec5-9441-e42e1ceb921d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5839c19e-4594-4da7-8e54-dc6c33ec1f85",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e9cdc1f-1553-4be7-a404-b88bea79b9c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d67be0f-0297-49c5-a74c-3f21d439bfcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca9adea3-eaee-4b7d-8892-8ad0392881f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "4bf8f2a9-fd28-4ae2-932e-289a4757c02e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d813c70f-22ae-479b-bbe6-8a9cdd33ae7a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef6922be-a0c9-43fd-a95f-b001a68ae70d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc143767-e7bd-46f4-ae42-3477ee8ae216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f79dee9e-34d8-497d-be1d-d1db31479b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "534c109c-fe9c-466c-b15c-d72c8a30eff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0480e950-07eb-42da-813f-994c430ed2bb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2199922-ccdd-43b3-8e95-2edf9e98dddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "834bc6d6-4ad9-4e6c-8f60-27db01af78a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fea1270-33ab-4870-ab52-ffd690dd9756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "195ddc57-8969-4035-954b-ed3a2ec823ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e42a3e2e-6d89-4023-a2a1-1e8ea55eff87",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e07f1e-7cdf-45b0-98ac-51f75beb5d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df230572-f65d-4125-bc87-cb089fbd413b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85470a71-fc5f-4d19-8171-ce171631faac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7005ec7-8a85-4f9f-9c2d-3ea592f45c27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1160ae27-6b02-4c8f-8a7a-6a96c95fcfda",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2beb609-92de-4743-a231-b7b69188cf65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78647d53-fa25-40d4-92ad-deabd76f41d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92226fb3-95d6-48b1-b1ac-db449bf44bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cbd45bca-1fc0-42d7-983b-72a2970c1a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbf5885f-af08-4b99-b1bc-8bef509a9636",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b124ecd7-a37a-4868-9fd3-eacd41e0d1d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35affd83-7eb8-4dbd-95a9-703583603762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47e0f2f5-c843-4bb3-a63d-6046efea4427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a07badcd-9ca1-4984-b419-751a0f34eca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ff786f-7b72-4f90-99fc-bcbe3939570f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d99ae0-edb2-4097-b7c2-6e22bc9fbc9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b5a5379-3921-423f-9be0-04af3fa6cbba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91f672dc-41c7-4bfe-9287-d826ecb37965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a525054-1a7e-43e2-bcfa-fd1a47db5581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c179d38-0be3-405c-ae5c-c68ca9a0ecf0",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1459bf97-c4e4-48e1-938f-f39baab6f514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a295f66a-7e19-47f4-a869-8cb78b879fee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4d88edf-2dc4-4d55-937d-b1ff88b24885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0485f1e8-98c2-4e83-890b-411031d03bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7921ceb4-2178-4f2f-844a-7ba8bfcd9239",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "901109da-b8f3-48e5-bb44-8f9e100a5735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6f6427e-21e3-4ee7-a1c4-952bcea57def"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b51c9b0-eb85-4878-bb94-f6edffaa314d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "057a9ddc-1594-4a64-a5eb-c0331944dd7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f7d9421-4e55-4236-93b0-1b6105777246",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ea775ca-6ff5-4c43-a11e-ec23334353d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "231f8191-38ae-4546-b38c-3d20d3a9b3dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab194f53-5700-412d-b13d-de1985de28a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "61975b78-a027-4d5d-9f3c-ebc8fd130e2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef402d14-9cbc-4f8f-9aff-1f65d71151a7",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e4d83c3-4042-4251-a617-c3c1db31e0e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a774f907-ddd5-4875-8bda-9df96c4775ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d929e964-c9c8-452c-bab9-487168cb15b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "104579cc-4dfc-4f1d-8c5d-7d73596cc9dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da04e2ec-6128-4e44-903a-979f743e834f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "042377a4-f2bd-4b22-af81-574d0af82fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a27cb34b-3664-4b15-8437-77031f5e00cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7806e4d4-e99a-4134-a64d-3c86a1d3bc0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2402f0c6-4665-4063-b76a-15121b75f971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f8598e9-66b2-432c-bc08-14d0e2a9e020",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3007c18-6843-4429-a27c-5d7f0b41747e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98074660-d2cb-4469-a514-c7b2fd040bfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0507103-9374-44eb-a6ed-223c41b10949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b3e213f-1380-42c2-be4a-2fd1f7a150e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83b608c6-b60d-4bd2-954b-dd31d61c1aba",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e26c46be-5404-4486-8000-467f3cd7a3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec5f600d-1c21-467a-97ba-aec6748fc3e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "272e789b-ce6b-4de4-9e43-5d66123bb9c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd48793f-ffa3-43d4-ae34-8e302b46b8cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f12a5733-53ca-4777-ac44-35c836bfecad",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ade1d13-94f0-476f-81ce-c4a867b9c0a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e24eaf19-4afe-40a8-a9de-beb654af8ab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b57bda94-a237-4d06-b4a8-352885253826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d510d93-fc23-44d5-aa6b-5ebad1358cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7bceb17-3769-43a8-887a-5dce06b4142d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c84bcc63-3a9c-4992-9af3-ee887d5aa8b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1b4d328-cee5-4860-8459-c70c0307584c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6ea8234-4cd6-4689-b0ba-c4fc7235d067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4562205c-4047-4e78-9c8c-e717a7333571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef2b2bb4-acfc-4c27-9043-aa8aaa55485a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a90a29a0-8a69-4fd4-9c73-a15e5982e19c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c1c37eb-7828-4827-9ab7-0fdacb03214e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "070c222a-a3ea-43f0-b688-6908a40cabb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "57f59087-38e0-4618-aaa0-4cb35be94963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98d46acc-79d1-453d-8d04-314ab89da288",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d26db386-1fa6-4cbe-a6ba-32d46d716a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f728caf-40b3-4580-b299-a02f99e6ea72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7335efd0-c670-4760-b097-5243eb16d494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9bfd0c2f-90b6-4419-befb-14eaa058ddd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9600c26a-e941-4710-812a-04d4b786ef02",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89e1d7b-ac84-48b7-bfff-87efaf4c73dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc5e860e-fa22-4dc0-9597-42f7b8b353a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "137f8e11-47d8-4a66-b810-9dcedabaa60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "97752ec7-7447-498f-ae6f-481701a4e626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cf039a0-4c3f-4e59-8257-2459a009fe7b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1319af4b-8bc9-40f7-8ab4-3e47a3d3101c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9c12222-8196-47a0-9c36-cf583fd04324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a317d9a-0de9-4ebd-815e-4ecdd90efdb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b999844-0a90-43a6-b446-e8bb9311b8c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba3d6c1-1751-4a00-83b3-6d8a52a6fb03",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f27286c-5101-4db6-be80-b74c0a226b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60978a78-a8f5-40c8-880c-cfae66379b45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f851b14-3c44-43b1-a40f-9a8656bbbb8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ad7912f-a08b-4f1d-b995-c5bd1511416e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60da4bd6-0345-4dfd-9ad8-54157c5fdde9",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f02a3351-e7cd-4e03-b5d3-c4ffd1cab233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "013e8f4a-e348-41e0-a2f3-2cb1d487404a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bde6a16-7c3f-4983-bf4a-4ac6dd2e7905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7be663d-570f-4e97-b8e4-914c92aea3fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba67f97-561d-4621-917a-a85bf20ea00f",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d1c0ad-fd22-4ce3-a828-cabc20212f32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a3ae0d8-264a-4c2d-a18c-281ed0d9179c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bebdde35-fb5f-4610-8f2c-4cca62884d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9147f0a3-3480-4154-a6b3-5cd0c416c117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96181c7c-9f10-4f7a-923d-086b5d33e65e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22688c03-c6fd-4add-a84a-c8598d39f7e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa921951-a763-40e1-970c-32e2936ebeaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "812d53c1-27dd-4221-a64d-edcb1af618a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3260447e-334d-4a55-b1f2-f610c3d52354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea205c5d-9c7e-454b-9a7e-25d4535440a7",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b688e46-fb4c-4264-8420-a55f9132e26d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43db6305-9e90-4477-b7b3-cb1fefccba3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca0fc94c-0511-4455-b708-60902a6e9d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "36f82ec6-76af-4349-a196-326d2c811efb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc3bc47-f626-42c4-94d0-6742444b978b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea07402-38cf-4a3f-b308-f5a78baf4e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ca76b2c-d4d9-45f9-9114-d04358412d59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47837e08-84c2-4d98-a2c9-a4578396f4b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2488010f-34c7-4a3d-8f62-beed04c7a245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d4a9a8d-7486-4d50-a76f-1586b36b1e57",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "645f06f0-a140-4905-9343-12b70d52ff21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7209a9d9-ddcf-4cb5-a23b-e00b89512b6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9274f838-086e-4c14-ae42-b466554fecf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bb7d45e-13ed-46f4-a4a1-8a62e320186a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c65599c0-e590-4687-b643-2cc29eef377f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba867cc5-7ab6-45b5-9bef-1a67fd08d47b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aca9ab47-695b-4e0d-8b4d-823543fb7d87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b3f48c8-9229-436c-acee-c68a16da53a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8481cfc-e5f9-4e3c-8998-425c4ea8c1e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb149c80-62da-4716-a56f-e6f7c3bae4ec",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef7c845-076b-4110-99cd-41fc7408ae68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dc34315-6a80-41c0-aad2-72d2386a9553"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87737721-ac40-46cb-90c4-b483f7a245ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a4d82e8-4f02-4778-ae27-18c292463b0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d8168f-1a83-489d-8418-b35a524590ab",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d903c6-5737-4aa8-8e84-de7b0fea1ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "450c5c75-7676-4248-abde-5aeaafd43d5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d0ee052-58f4-4758-a779-00890d231679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "beed0525-8454-47d0-a3b9-10bdadf21076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e23dc1d5-4eff-4e1f-a383-d13b29a7bf0d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76f12dc7-5575-40cc-bdac-3513a6d6e659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15574b2b-bde1-44c4-bbd2-d9049908d3cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f31af42-cff3-4e9d-a2a8-35e90509120d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc390f02-f8ff-4c70-bcbc-65dffd66bd7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cf7d46b-66ba-4318-ac91-ed985e55fc60",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf52846-b950-4673-8d96-a7a0eb371be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b4844e2-e2e1-4078-993a-4354b0e71a37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b749fd9-4ead-4756-b865-502a616303f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ee6ea6f-403f-471e-9df0-74dcf2dd400a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b01a1771-029a-4256-b8d2-a720e5d75e66",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09b4eb57-7a19-4994-8f2f-1ab751931b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "190f7b4f-0d31-46ae-8b52-e4290ac72501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "240a2628-7e77-47ef-bb1b-942060125ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "38e79f9a-052d-45ad-960d-5b72d656a90e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7bc457d-5ba6-41b1-a597-90474215fcbb",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f7da03-cda9-4aaf-809b-447d3660948e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "531c2f6d-3ad9-4082-8b21-663c5696ddf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cd21452-9381-4df0-8b8e-09cde1167510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "203f2c3e-00e0-4fcc-ba79-d71f77f42374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5affad45-f730-49ab-887b-434f18981aca",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d4ba687-e51c-4078-89fd-ce2f4c86675e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81c40d35-cee0-4ce3-8c75-1cd4f5ff5053"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a3b6e79-e5db-4930-99e8-373c1dc91d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a83a53dd-1167-45fd-a5c0-2648f760cda9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d8d5167-5082-4e46-8a62-8dedc9d25f7c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb89b5dc-406e-4735-8687-50f8f08a8299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab67a70b-2a91-4b93-aabe-8662722f1b1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72e45c8a-8e43-4ea1-a815-c5bde87d7fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2b4385a1-2eb5-4cf4-898f-e129c69555b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "822c463d-7d61-41d5-a91d-022182aa4763",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37822573-f0b6-4fd7-aea0-702703e468ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "389009d6-c824-4c57-9b73-9c7d4b873af8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca91f6ca-cbb8-40c0-a91d-5de32fb25f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "81f8cd0c-dc6d-4021-8756-c41ae9be060e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "362d71d6-2909-4e64-b03f-a759b95d97c8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dd2d821b-6ad5-4f4d-8bbd-5ea50bf0ddc3",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b1391b5-b2bd-4c1a-beef-ef09cb431ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d664ac8e-3a78-41fa-8850-a6f548eecd66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b9b43af-714c-443c-a14e-c891450a45df",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "60da501c-ad29-4211-afa1-848993ad24d8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "28e1a61f-ebdd-4fd7-8569-fe02747fade6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab6a38df-5b99-4d35-8abd-eda5a465db54"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a12e219-73a1-4906-b28d-4bda8cc9b441",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a2ce19b-225b-47ab-8844-adf1752f9603"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "220a50ae-5bca-4546-ba40-e453e925a595",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "862a5bfa-53f5-4e87-8bf0-fed742be48f7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "02e4522b-1b3b-4704-8362-5c0893d89db9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2206ac5f-e333-4486-89e7-319210b4d580"
                }
              }
            ]
          },
          {
            "id": "243eb23a-9568-4f35-9892-ae4b1d553592",
            "name": "Positive Testing",
            "item": [
              {
                "id": "31851b5e-6bb6-4631-8ece-cb4aecf25368",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "558f22d4-0c58-4e06-b4e2-2fbe1a0c7cf1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d6ccf8b0-afaa-44d8-9cf9-8d65df7b6d6f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92834a9b-3b64-44dd-b728-d230edfa1396",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fa149892-6a0b-477c-bcff-ef8638dea091"
                    }
                  }
                ]
              },
              {
                "id": "b63ba479-8568-4cf8-a19f-445bf0ffc2c1",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e6b72ce-86fd-4191-b055-29504dc3f0d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bc455e0c-2ee8-41d4-8ea8-7df4fc121afb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "66ba5bd9-f822-424d-9ce1-6e05341511fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e5962967-a776-4e40-a559-2dc66d94d746"
                    }
                  }
                ]
              },
              {
                "id": "5f14cd54-1b95-4821-919e-03a824cf0223",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "96f10db0-b784-4b2e-a157-fc541bcd0194",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e36ff3dd-2dcc-486d-ac64-ccab29f3b5c0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bca2a0ca-4dd5-4747-88ac-fa054964c094",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9a4b88cc-9390-4ba9-aec7-379ac554df66"
                    }
                  }
                ]
              },
              {
                "id": "c716bc4e-d8f9-43af-a0c5-6b7db1d6548e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "195b33a5-074b-4462-ab4a-0e8b67c2c7b9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "17fb3c96-ed3f-4488-bce4-614eb72bf8f2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c1a937a-c35f-4262-8767-7d271cc2353e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "67bdc872-4cac-4777-a7b6-c7396e00964d"
                    }
                  }
                ]
              },
              {
                "id": "1ccb92a2-d1ac-44c7-b6c8-e1acae3229d1",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "12429df4-5113-430f-989f-426c138d573b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fc2e6ab9-aa23-4c53-afa0-259f8e01af0c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5da1d80a-1311-4b8a-ac0c-c75d495751b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e5ca856f-db06-4fff-8db7-44c9b9c7cfb0"
                    }
                  }
                ]
              },
              {
                "id": "ea3001d2-9117-447c-9364-254d08c41b87",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b70e9bbe-ec1b-4c04-b0d4-80c312bc64c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "041feb56-2377-4f28-8806-c6097a80cd65"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1237330d-040b-4fd6-8e43-767bf3132203",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "73d13e86-a993-497c-adbf-3e98dc62fa56"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eff714cd-5610-4e5c-bdf5-682f02531600",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "13fd9259-7c27-4680-aac1-760308fddb80"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2a4ad30e-0731-4cc3-8a15-43f71b1a5469",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2c172381-f0fa-428a-82cf-e1cce26fd2d9"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aa566f10-696a-4c73-94a1-f8b987f51ca1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a9e4f58a-00ff-4fef-b2a0-57f682c2e002"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8c2f4add-ed99-4db9-8515-8b0cc6545a0f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d52e7939-f683-4e64-b56a-01fd0403192c"
            }
          }
        ]
      },
      {
        "id": "62d75ec3-2229-4199-b031-14e4b2afbf48",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "753e692f-e55e-4cc8-b4cd-bf97b227a392",
            "name": "Negative Testing",
            "item": [
              {
                "id": "287ba2ac-0b9a-43e6-aabe-2fbafce88721",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9f6845b6-279c-4100-9afa-0a7d635320b8",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ec7425-81bd-4a64-ab50-e35754ea829c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "562aec6d-44b3-4e18-83fb-966eaafda570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90ed79c-e29c-4b88-afcf-e1a3d2331889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "51848e1f-1604-4de1-8df5-e184e481a1a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e838005-d07f-4a7a-a2db-a44117209dff",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f46af73-cce3-45cb-8659-71a9fc4452da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d75bc88d-2f84-4ce7-9290-55920f534bc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31b8b197-1c1e-4456-9393-2adb0e45a7cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ed63941-e2fc-4731-94c2-362bb1a852b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47374b19-5f78-47e3-9db1-e3408fb2f455",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8af033c2-3d11-44e3-8ce3-8f93bb23ed9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e55e1ea7-c667-41c2-a3fa-998f995b789d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e06872b-28d6-41eb-a2e0-c3f4bdc18493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a119c92f-9b69-47ea-bf6b-a6eb892a0e33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ee3f49-eea2-48cc-85c4-7f453cb9b850",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "491fd960-4a9f-422f-a3f7-c5d8e00015a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55bfc703-f873-4e97-9c22-a5dc83751742"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad7a73a3-3b37-494e-9296-3f1ae4d333d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "55d96664-f8e3-49b3-9baa-c7d1cd90f3d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df81b993-6fcf-4dc9-ab73-8047a74a3e3b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d4a18b8-8dba-4e7c-827b-1ce449736992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f4863b6-e99a-48e5-bb90-52f95b1af33e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69de3bd0-e04d-496e-ac64-d59bccb3a82d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a12b0e0-512e-495b-b2fa-7b415c203f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc11cbf-b6fa-4d7b-8589-520b69a659af",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed569e6-a474-4e81-ab62-862a051e3829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c92e5b64-4a07-4828-a118-895732df6647"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf79c5d-1b40-4bd8-9d94-dd7ad5c0d10b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f37908b1-ea1e-4d7c-9b3f-3af8aa2f9bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bfb1540-f380-4db0-8447-49d6ffbe1135",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59562e58-63b8-45dd-8060-656ef06836db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be6c453a-7879-4e7d-9b6c-925e294de692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02deead1-ad07-4f89-a425-f214b760e55e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "941c1b9e-9c9b-4fe9-894a-60c90f6721e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa8b7217-19a5-40a3-bd5c-5d2b3698b62a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a71f913-0fb3-4ee1-822a-61e4645648d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cfcd908-f607-4e99-8793-cea70f051c2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6622458-af2f-46dc-aa1a-51fbe6990dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "39c0b541-0bdd-4545-8e81-a7df60dacf3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f77c92b7-35f4-4ad2-8c35-0fc765657b53",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b75c977-58bf-42bf-90f5-3144dc794bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e119ffb-44c1-4dd4-a5ac-a57682d5b262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61160b5e-01d4-4dc5-ada0-f1252dac7c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "962f0b48-a82c-40a9-98aa-fb2e7df80a63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "559479a8-8b72-4cd8-8c88-849b9f9bdfdc",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e80299-77c5-44a3-b8e7-272e95bbe9ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f33252e8-a3d5-4b38-9742-b733db77dce2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4521e9bb-d758-4ae8-a88f-916419e4d227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0aab41c-9884-4ec2-a7fe-2abfbbec6da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6578dd1-e6a7-4f31-a215-89262ba28908",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92eece87-5337-44fd-bf21-171ffba3bc02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b5eccb4-6c25-483f-b303-515a115f8a65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12e1a5e2-7aac-4ddd-93c8-3200e8a95283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ee2da2a3-f17d-4645-aadf-742a32926a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "987d8daf-2fad-41f6-bdd2-eb2158cc96a8",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c57e5a39-6d72-4ffa-a78b-740184edd9d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "309aa7fd-58ee-4da3-bbde-fda4f6995b49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63a59a0-ca26-4050-89c9-700d528517ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "579aa177-f946-4d04-9960-ea234f3c88f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7a331d-8396-41f1-b5fd-d4081bc0f7ab",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a5585a-7679-4756-98f6-92105a0a6425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31845572-f315-4725-96b0-63ae107a1cba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "117e815b-4acb-4c9b-ae6e-57dad67bdd87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "446f3f59-3385-4437-ba5e-c501b4a2aaf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5667463-f5bc-4db7-8a8b-c0082347810a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a998cb5-77df-4194-bee0-43463677f59d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94a6eade-50c6-4fac-9b84-4c6b8d706835"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "364a6983-ece0-48ae-9f21-3b521ede4420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "735caf99-266a-43fc-a87f-edffaf1533c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a477a7a8-0388-499e-ae08-95f82dfc724e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c568f8a6-bec2-46ef-804e-91af2061dcb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8085ee08-45d9-441a-ac7c-bb9dfc7e9de2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4c876d4-d768-4525-9e48-7864d65fad7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c1cf1c2-6803-497a-bd3c-e100a5e43ddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83375cd5-8231-4919-9753-83ea9067b5f6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb5e2259-33ea-4ba2-a6ff-8d028387ea83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7349d64-f55e-476b-bbdc-21541302c1a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e6dfd3-4fc7-4e94-9c0e-c3aeb2d6b9c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "70e21bac-4326-4cc6-9142-3c436856836e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e9501ce-f375-40c1-86ca-684b5b4ae103",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05eeece4-cb6b-45fc-922c-ae7414cbc457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1397ea3-9dd5-4b2a-a1b4-ee7aa40fe42a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ab81d6a-971d-41cc-8170-62273012c746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "54d2a632-c6d7-4167-8d84-5ee0f40972ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d82d78a4-ae52-448d-952d-4f72a3862518",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62e74f86-34f5-4fce-84f3-ecb54e1747e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a73d0a55-42c5-4eec-9ba5-677a3167cf81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3156053-f824-4f17-9d54-9c6c3e4529d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f642802-2f6f-48e8-a0f7-de57e5c1c930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9962e42-643c-4cc1-8002-20b328fcf292",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae2d37da-0b97-4507-9d0c-4df2ed8b3358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e3fda05-de0a-445a-a34d-8e4d2a64e6d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f56ce04-b124-44a4-818a-810723c16e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bb1b1d3-13a4-4b52-a086-84b28b64fecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f434ab20-79cc-4d56-8381-3f7b10ffe265",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a9fd22c-72ed-4dd3-a439-472aa49c1447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3328f52d-9157-43f4-912c-241b421c970d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8f04d93-b2ad-496c-813d-e2a803929b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3057a52-f910-4028-8b32-124677b04114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78df21fd-d1a7-4b4c-867f-5cc23a643b30",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c157741-59ca-4308-917c-5a68e180c1ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74f754ce-f0cd-47c6-89ba-6de95c82d15f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "704d78b1-9ff1-410e-91ec-fbe020c9fa38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e54ee88-871f-41eb-883b-4a80815fc815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c42a551-2eb5-4465-bc2e-c0f19ed8819d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f5d345a-3e3d-419b-ac8b-8ef4b28cf9e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b35484a-07a5-4583-a4cc-ecb1c48e5741"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c8a4c5e-d1ee-48f4-bf37-e02819b1e9ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d20087f-7831-4e0f-a6bc-299dee08db8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b987818-3f3e-4538-bf62-ee0588978fb2",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da18286b-d95a-4fac-a593-2abf7768ffbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01a9e836-f665-4e30-a4cd-8ccd87a3cbc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4799ae2-dbd8-4b66-b6a3-091be8deea43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "970954da-6c65-444d-9ad3-92fa13674c96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc720bb-3e52-4db7-a90c-a6adecbe4aa4",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ebc81e4-0cb8-436a-926d-418b5a63c486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4065b33-a3d7-44fe-af61-41d6ee0ff7e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91ca61f4-f3d8-401a-8e7a-4597a72c2125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25117521-3be7-4279-a9e7-31faa9d9b4c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4cf4b90-a057-4810-aaa0-9997a2fef9ce",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6a6c1ce-4829-4916-be6a-5dff7fecc4bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51c99342-d43c-46df-8075-c7327db5b637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85625db-aa48-4bd4-be24-15d8b36e916f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4cf7a4c-50e7-41fe-a72b-714a6c708e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa95ecb-6ccb-4f93-8a22-6b06268bca4a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d20c922-287d-4902-b97a-92f7b250af24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc6f4464-77c7-4ba8-9ba0-a9722fc42c4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddb03035-f4df-4dd3-a5ec-a24ef6a7d570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "657b7c1c-5126-4917-a694-048a35619ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "078e2f2f-c6fc-4052-8f4c-becf2b9eb8d1",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf11b5b-20e9-4421-ad05-0aeab36c6ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0a56d9d-b74e-433c-88ac-f94ebab9d61b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c06ec93-6263-44a7-ae73-131a5669af87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51f50632-0a5f-4b0f-8a63-6285b79082ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "542b3f0e-3f85-4c25-b011-5fc327076164",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "902b5891-0678-4427-a50e-5051f40d3d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ae912e8-5018-4e43-a31a-ba1e46325c7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc9649ab-2467-414a-a135-a1667391cc52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "301c1150-4a90-4f35-b699-71af8e4263d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c81e939-f258-49d6-9ad6-93832c2add67",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "670bade7-c056-484f-adf7-a22a4e5bd56b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da8cd067-ee7c-42f4-8506-eb27ef86871f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be15761-3977-492b-97a1-5698c1347852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d6f4eb1-85b2-4560-a2e4-6fa718e06a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfcc662d-54c7-4d5a-82d5-63f249fec94b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81bdc997-048f-4729-a1b6-0460310c65fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6053f393-4422-4269-b4a3-65180ad6d1ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4ab6742-1aab-4095-b2df-05495543ac1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "237561e9-2126-4238-9c9a-733dd5f1d614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35775dde-db83-488b-84a7-98d89ea91057",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a962522-9ed4-4694-9bfb-76aee66f6877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ef10f2a-ad05-4c10-96b7-5d447a46c23d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab42747e-659a-4d38-8399-8090a808bed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fb93e7f-a296-4fdc-b2af-6313da3c9ccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54e29b96-5339-41f2-94ba-bd29f5a68418",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a87cf9c7-e901-43a4-b1d4-7278a3cb383c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccde8f0a-e255-434d-8502-74982a64b638"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11b2cab-da6e-418a-9436-e6ff227ff806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db0a1244-78ae-4f1c-88b8-6bc0fcbf0189"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "40dd8d9e-9ae1-4eaf-abc5-7816569e27ae",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bb8168a8-d591-40e2-a8fb-f58c2931788a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "210cf146-ca2e-4b22-80e6-9e3d865799be",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "4c47be60-22ef-4d22-bd03-5f84cb57d682"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61abceeb-92df-4d1b-be94-bc4b5d5daedb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "53c34ac9-34a8-42f0-94e1-a1c3c20c408d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "00ed9a93-98f2-45bd-bc18-cba3c6f13557",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56e9aa31-6c82-48b9-87e8-cff6b6b6778c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4df04ec0-4882-4329-9044-2e168e258171",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cd879b2f-adec-4c4a-860e-5154d219c1f7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ab414fbb-a7d0-428d-8ddc-3ad804b8af28",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5a1d25e0-dc2b-44e4-88f8-4ae7bb251198"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "11938cef-0f77-4451-96d9-702bc77a3bb2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0ce8df31-13d4-42dc-a126-ec745f0c40cb"
            }
          }
        ]
      },
      {
        "id": "d818ea86-e626-4522-ad20-b9529941f650",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "47240d31-f22d-47cd-9e90-d5cac5e4de4a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4b8e45fd-34f4-416d-abc8-ac03306265d4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ef8db5dc-8703-4afe-a27d-85d3885b1aae",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4311357b-48c5-4e75-9410-734edb6da092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "808f18b2-3f27-4bd8-bcfd-5b0e1c5e28b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f97b7767-c901-4dca-bf9e-931d949740dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2923de33-8b75-4b42-8527-a6cda18ffc44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4da73560-eddf-4e72-8bbc-804c8aa38014",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "323e310b-3fc1-4c58-a585-84e21b77e57d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bf13396-7751-4fdc-b573-12b85259a1e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1228da2-ae86-4cae-9ffb-247fad756c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cacc9e15-6c15-47b5-ba51-7a001e9de902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c28c9a0-2cf7-4c8b-a885-69fd194ebd0c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "476d88bb-d060-4a22-b17f-38d54b982976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8507a7c-5a23-4c56-aca9-febb0564ad39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a2fd123-8c90-4f23-a7e9-d806fc5829cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a032088-8974-4df3-aacc-fbc82cc70e20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b3bb56-6ece-4fd1-a9e0-5b9faa8c2157",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b93afc15-fc53-474a-910f-61a6e2d2eb6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f51b5e4b-2b99-49c5-9723-418e1111f75a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a414965f-0292-4450-a248-7af7169d81e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e25df7c1-ca45-4d1a-acf3-5f5e98c6cf04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c9f0788-6158-4fa4-8c7d-e2e5a7005922",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27d695a0-ccce-470d-80ae-c0f1e1547855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39f2838a-45cc-46fd-83b2-01f97a3f8ddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f212e283-5c85-4e81-a169-4e41a3892d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3526faf-c1c8-476f-b56f-b68a75214bb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85450b74-0965-4670-bea4-2f066675ebe3",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9927a55c-c4ea-4185-a8b5-d432d9df48f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b95174e6-c446-450c-9b23-d3952fb4c29a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd99c719-5793-4c35-b7e1-e8e2781dd2c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "04d0751a-cadc-437b-842d-80c50235cb79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc630a9f-3e14-4890-b7a3-712a08bbe43d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f99d6373-4b66-44e2-ae85-deb12c6bd27c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7b3e5ad-eeaf-48a3-9cab-96c879d13c44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed311c7c-5de8-4d52-b1be-885a7d900090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "93489eb7-e985-4dea-bd99-968107083a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "414c92ae-3e89-4179-a609-2019c72615ad",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7d60f1d-c4d5-4926-b17f-f122354bbf9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab29f046-9b5f-4a5c-8af6-790238447cae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df09b876-f5b5-48ce-a55c-03756f829aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "18752c04-f6d0-40ad-ab8b-664edc64e878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a77a2e0-d798-4193-939a-a2c901905ec9",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a687b6bd-6b6e-4426-a35c-8408ffadf59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e3cfcce-133b-4814-9464-07af1cc2c867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a0b4c6e-7856-49a1-9450-52cf5b0d238a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba740b74-cb05-408c-8655-9b00850702af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a4a10a9-2228-4a09-be24-c492bec28ff0",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e362b4e-a097-47bc-8196-cbe48f050ac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "655d7d7b-4381-48b5-8bf6-55fa2813e81a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf9b8f3-1cc7-4445-a9a4-0dca4e491233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fc61b10-5597-4ee5-b9e1-19825476bb78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b63b17-a059-49ca-86ab-4e3222ca1716",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a00a8f5-a823-444f-b543-3a02335da1a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be82a66a-e965-4c06-8d1a-ce84eaf445cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96496f80-f433-45db-9a77-59522dd24abe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d1d82e3c-44d8-4c64-a5c4-8a1d53f58dd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c7b5957-b49a-441a-b26f-04be0f6fd37d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b55c7e9b-36f4-435d-a1c4-51b03d29f836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1fc7a26-7f8c-4175-9f0f-049a67dffe29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e0e3370-e4a9-43b1-ad32-e6c9a71d96a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fe207add-7884-4359-ace4-fcca0fe29ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6185ed07-a306-46b1-be21-bbe1bbb0c51d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d5e7d54-b9d8-42b9-afef-a33d60ddb39c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0465bace-971a-483b-960b-95231b3a5fe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3053e78-7566-4584-9911-3f27c4ffa9eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c00aa7e-ab61-4253-9ad3-0a2bada09703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3abe0d3-982c-43dd-b0f9-550b71977c5e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26392b9b-82ac-4304-8b35-4eb13bdab469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "973f4e49-6cc5-46e3-95c9-d46a4691f974"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f8d4e1-59ed-47fc-a90a-29b30dbcc9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d363304-6e7c-4e58-99ab-656603199ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad83cb86-029b-467f-b486-06e63c02aed1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c74b4f-e2ab-4496-a32a-ccb5e4a12e07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5237c077-74db-4423-bb5a-97a455f71c2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6059745c-fa06-4efa-b22f-f7d4cf33eb86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "04022189-e854-4d51-bf27-02203cf43c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc12e63c-245b-4712-ab5e-10381f99e9bb",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "099522d8-7df7-494e-b132-a5b6d70b5a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4dc52e2-5ec0-4335-a7f4-20b31180f61c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee2ca407-26ed-4400-8a96-bc6fbd8d8395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c265b28-03be-4371-ac06-8244bbe4712a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6f7b18d-9083-423c-a7c2-f86eb26274f9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a63e52-cb4b-48ff-9c14-8875d6be3408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deed15fe-ff81-41fb-b899-52e1dc08c464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c07ad9a0-459b-4177-8981-febbade070fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e3a2814-a9b6-456c-9230-03676671c36a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "240a449e-cbf1-4f04-bf14-5da3cbee36cd",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6e9b0a3-328b-40a1-b79e-fe82cfd8dae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b5034ce-6d75-4e8c-ba51-7c87ae5ee55c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "471a4785-13c2-478b-b227-849554924e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a95eab1c-a488-40c4-963d-271308a5b3cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7bcb124-f66d-4a8b-a685-9bfe9540e95d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c42d8707-1422-4cf7-977a-ebb69792a9fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24809fcb-5981-4027-ab44-e825de47f715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b78964b9-ab17-4ead-a2f8-c228dce47b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "758bec8f-2c51-4af7-9d09-a94563e90846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a0e64eb-dbf5-45ce-8149-675834853b8e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac31971-9c5f-481c-bfdd-04511f8e2535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f42b21b1-e365-41ba-942c-538b1dfcb0e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6462606-f9e2-4643-a293-1f656251061a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a189570-47fe-444f-8aa2-2b937ad281a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21a4fd3a-d9cd-456c-a064-ffa4422a2991",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa9343e-4dd3-45cc-99c0-660dc8d6b281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37db3f88-150c-458f-b8e6-cd7ac0ba536b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edcd9433-6dd3-4636-a144-8c8a171c861d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "adca6f6f-3129-453b-b1c1-83774dd26bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "435742db-39f4-4229-a042-df42229a08ed",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e960b2-6b0e-4168-a1ae-d1859616aa1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "674ce1c7-3002-4ca4-a659-7f56fa780629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a21488a1-38ea-466a-bf93-eea1810a04cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fc23835-1f22-49be-bb35-5bd0d1ee4cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a285400-4015-42fa-b441-28ac7bcf267d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a774f8c-c473-4c81-86bd-a0df1d8d9def",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95ab7386-2430-41c2-b8e2-f1b4c7020e86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49529556-350b-4904-89b7-06d4ad65ef67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28b12a52-6d1c-40b1-974a-0b0319e25bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbb9a710-c7a0-4c86-8178-037dc60fb813",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63ebfa75-3e58-4c71-b448-7d545582a30d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfd5d4ae-52c3-41a8-a658-21a74538b890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c1ba474-a11f-4b8e-81a0-7cc4bf6c9e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22d58a98-96e3-4c72-bf81-00a497306e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b215ac4b-fc0f-4605-9d36-231ba3eba4ff",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d3180ea-be36-42c6-b6e1-d1f127f5f9bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "815daaa7-a222-441a-bd94-3bd09974d579"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed361b53-da58-49b7-8a77-0b7bbd761c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ee138df-d9c2-4785-9df8-6a4b130c3b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "453a1be7-4e5a-4b3c-a798-64fd4951a707",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f360d5aa-7bab-45e8-a873-bef3ec806a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8371b642-5c63-46bb-b5a5-cbbc44017685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85fc808-8643-40e3-b82e-78933c3ab173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "177d2b72-da9d-4477-8a80-eaf93c7b305e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a58c4a4-c53f-487e-b6b1-3a9769b8d5a3",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b58059-bb31-4db1-bddb-8a48113a0a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b087d87-8d33-488e-8433-ef13aac5d3d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03daca3f-9368-4778-bc00-ae1f861b0c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fa4f896-160b-4de5-af4e-df652d7642a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d980cd9-ec0d-44bf-8a38-934fa5172011",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29dbe54b-4719-4fc8-93c2-e30172171d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ff743b2-8351-4587-80c6-8b497325b816"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e4507e4-2189-42ef-b87a-580b2941d867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e58abeb-8a20-4df4-a056-bcbc9ea9438b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd7bc53a-5102-4db0-baf8-b7e5e5a360c1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c58d44-6489-4532-9c50-8bd7c3bdee81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4a81317-d357-4e3c-b6b9-0d824fe5de5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bf0e592-a6a0-4af1-b059-fc2e2a609c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d39f8ebc-c4b1-46c9-a8d1-79a53f8f9052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06583d17-f33a-41cd-9bf7-dabe7310ef0d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e62e1a73-5df3-4a44-8d9c-3fef56bef702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05da3573-37fc-46d4-87be-1172508c5283"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3d70f33-88fe-4c98-ac98-3c44ca8b59cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d984aaa6-e04d-46c4-bc91-8aded2fddefc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c0d06f-e525-4b9e-9ac9-7af77ac965fd",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aef56da-a9d9-4f02-a23d-714eeee8556e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93066d04-f460-4c01-a9f4-8643361599d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afd80f1d-a673-4e68-977c-58a3568e8ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f34429ec-0caa-4744-bc5e-bec2274c528d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2655708-8346-4ca1-a671-44b1b5d4397e",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "228548c8-401d-437a-8a58-e91fe4455c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd9d8f17-932c-4189-ac09-156967a90dbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "832b06c6-08ad-4b1d-8829-10db679d84a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e6109d5-21fb-46b1-8411-1c866c63522c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbf8ff95-a72f-4d4e-9fba-033fa9e13b68",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9928d4ce-ac31-46f1-a516-fa234e192dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80cb96f4-7ca2-47a7-aa5c-e75e02ce4f51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef4541b-2289-4148-a09e-0ec8bc7f3062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e7a08ba-cd34-42ae-9d1b-b1d303bea97c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22080756-da27-4569-bb19-43236565c382",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc5cfa20-5d10-4190-9015-c016d1d3f2fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaece4fa-bde4-423b-9565-0d4939818a4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d6365e-bb96-4fb6-89b5-c8494ccb0417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbc747c3-46ca-4c54-a8e5-4a5d85bf179a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d39f0001-cfd3-4620-8ceb-65119e6c0fa5",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe74f0d-5e74-41cf-858d-b77e5ff2215a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29d43f94-6743-4cea-83f6-4c1ab40557ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fae911c-14fb-47b5-bc83-3d8167c16218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3854dfc2-c5d6-4511-bbeb-e3a9f2796d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e1f3758-ba06-4f20-9b96-81d88802f356",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0443103b-f7df-4ebc-9ff3-582268073e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15e99c15-6849-46a3-a6f6-641b45058f8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82b4fb69-5064-4658-9876-d6693bc490be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32228b9d-a85b-4633-8247-66dad5920fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "802ed483-e459-4899-a877-42721bf1b055",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e7c50a0-d5d1-4aa6-92b4-9fc6824b889d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f2ebd5b-aade-42a7-800c-cca34734f930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa8bf21-a273-496d-8971-8d8714b4abf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74fd26cb-ab8a-49eb-9df0-ff7415bd34ad"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "26477354-e86d-49c1-ba13-87243aabadc0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "75c7fa4b-6a41-48f8-9b0b-ef4fd3f2f260",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b81e746e-34c5-4145-84bf-f5012cc2c501",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e272c2b7-e253-4dd8-9732-b309fc704548"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a310856c-cbec-49f8-b374-ba5e19f3c0aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43717bb5-f080-4b17-bdc2-bd2629eb031b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b39c93d-d940-4518-84c1-298261b95248",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11c339c7-de1b-4371-9c70-797277044bbc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a31f6b81-fdf8-4b47-bdf2-c3d3abf3d3b1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "097811b4-b9a8-4d06-bbe4-74e7718840d3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a1a6a04-cac4-485c-b51f-29e04c4c602f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "50db9bcc-4820-48aa-b78d-7fd8b2a8242d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ebf26086-7110-4fc9-ae2d-d4ac8509933b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "581e0c63-be9b-425e-890a-746fe0dd0c8e"
            }
          }
        ]
      },
      {
        "id": "247f243e-051e-4749-9a47-1a4398f9c75d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ab6a4f72-942b-4719-990f-73ddbc4790a5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f7fddf85-6b79-47d9-a76e-0832709a4ee1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4c65116d-bf29-4732-9105-8e9bd5c0d638",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93441ed1-30e3-4b33-a536-1d2958f59bfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e3d8eb4-9875-48a0-aee8-1a1358ee0172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d576b1af-56de-4d2c-9dee-7c297ec05d01",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04327214-267e-4f0f-95f6-f35acfce8499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99a45609-3cc4-48e7-ac61-45dbdcbacb45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bba2408-3ead-4b35-9abe-0d4b3df487aa",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc77c59c-9bdb-498e-9988-e220a5d616a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f07289c7-77d4-44b4-ac87-89662a14ed83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "151570c2-3d3a-43a4-8531-ccb7de49d7bd",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fc2d26b-67a6-40fe-b784-de236a6ea706",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "123fd765-cb0d-4aa7-9d4a-d7431a5a3d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc13d2ae-7911-488b-86f3-d4fb674945c2",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea799ba6-e05f-42ae-b555-0dfcb49529a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80ad83a3-0ae6-412f-b5ee-612cc538046e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d44f1f91-bd96-4c03-a8bd-4ced799dfc02",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3823c3-3112-4ad9-b1be-e0ec63287a7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a751be45-2b89-467e-9d02-1b416d6aa1bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f2188d3-2e97-4929-9fc1-6b2f3090dd90",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e893af40-24ee-4b8f-9b1c-46dda2b393ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "994f7903-29b7-4a86-bf7a-bf7d447c6e26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6bcae5b-03a0-47d2-b066-cf58ebe11f2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1729f569-847a-440b-a45f-6f7fda5b3875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68090ecb-824d-4fea-920e-64d1e7c57b92",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "706b7efb-60a9-4973-b438-31d4c935011b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbb80573-82f4-4292-a30a-8864fa62e83f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e86f8c3-27f9-4183-a170-479c735e8ffc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d36ddc9b-872d-40fc-9cc8-9f65ed8f16a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b315199-7576-4b0c-9fc4-f868dbf96fc5",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "691a6bc1-4827-4bec-b551-632ecfb980c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbd5be52-5c8e-4f03-89ca-c0fa77d3391e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "314f6330-9bf9-4c63-80ab-c3204f180e7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a8325dc-f561-46c3-993b-163885b17c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba1286e-3318-4b8e-88d7-721bcb0dc240",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd681028-a833-44b4-b827-9fc0ddf9e4e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1086d520-7d64-4e24-a71a-578be76c4b77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8253b468-9c5d-4de2-8f32-0f95c6aca6e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8f5f433-5f56-4cc6-9411-836b0d0c6360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac6b550d-ca42-42d3-ac29-8ec103ca6888",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b598c1d4-58c8-4508-b6fd-0274ce654ffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c3f07b3-a2ee-499f-9afd-00efc7758c14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "857810fe-935e-4d7b-b852-0ccb2e33223e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e35a8dd2-57f0-49ec-abaa-3be2b74ddaab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e0b7326-8410-4770-94dc-67832dda9b7a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4db2f77b-c7cd-48f8-9b3a-4f59bc47975e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a2f898b-44fa-40f5-b248-c972300faa07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a0ba90-d522-49c0-aa09-541ab44cbc6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9d15b0f-1113-446b-856e-7fdb9f43376b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ecc679c-574e-4bcb-ba07-afa64e0da9d7",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886411f4-5115-4d3a-b938-237c4a09f920",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4d6e847-85bb-479d-aa16-953f186db27a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78aaba88-72cc-46cd-bb48-2bfb7ebae260",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "021de629-f82d-45f2-a014-85df874d41cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe91d813-7b93-4f2e-aac3-6bc3f55be63e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "390915fe-a8b3-4844-a1a2-6e85bb3434a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d673536-6402-474d-8261-0561073699e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "174e2261-89ed-4e45-95a0-0454c9ee1fe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be7116f1-863d-41ed-b4ac-c75714772add"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e09ea49-1446-44f0-8471-668c689feb8b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ea11ae-811f-41e4-81aa-e21d42d8100c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60b67bf6-4ca9-4c69-820e-20a7e960e37b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a97f90-cfcb-45fa-b25e-37b1b5351c1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e58b9fd-33f7-45c4-8a70-e5734d8121aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a1c785-e01d-4993-96fa-191a68e9ac9e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce0365e3-fa1c-4e03-9600-890dddc442cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14e4fc19-28ec-47bd-8fba-447f39d7011f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b9f7309-4b88-48ee-a889-322352c97158",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec2470e7-4528-4591-b4d2-ce0b5a40a901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51a7f60f-9cd3-44f9-b61a-181f09decc53",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec8780b-4213-4a52-9082-17d67b9a1ef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b08c5620-6201-4627-a3a0-af70381bab67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f7c8601-4805-40f0-9b54-fcae02607a64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ad6e586-206a-44e2-aa08-b4946ab9cd5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7ba93b8-92dc-4b4a-9d55-2e8428b0020c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18b235a-139f-47f6-b1ba-bc4ad2145ea9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "088f9be2-3c23-4cb7-8f9d-254df0f834ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e0de1b-83c3-494f-b1c7-feca77c79863",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b12ec021-389c-4456-bf07-2a2bdd659f29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7814ca43-1d8e-48b5-bb35-170cc7929230",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f88dc64-7df7-42ea-be07-ccda038f9a21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "923d67bb-9e74-498b-a7cc-65b313bf0846"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c80b1a1-729a-4fde-b9a9-e39980fd4699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1a129c5-4d9d-43a4-bc39-e4d1679ab3bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5416fed-ebc1-4ae2-887a-508f4f08fcba",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e3022e7-dc72-4b31-9026-e0fd388fed62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7088916-7658-4eb8-817e-f0a45b8496d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86601957-8be2-4b3b-a56f-59a91878afc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cc3a73b-5b30-4b2a-a696-687daf7f2971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c2cdf3-3020-47e7-a8f1-43f18b2a6145",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05325011-6761-4364-b5dd-7f2a1162cfca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce9010d6-1a7d-4b42-8edc-19e491fbd3af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d58cdea7-087b-49e0-89ea-93118d848d69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13f2b438-a170-4232-a7cb-3cd09023fe77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d07a30d-64f2-4504-a5ee-31020f4ab9a2",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41999481-15df-4c64-90e9-175d44e375a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9feb40ba-f386-4015-9b0a-33d9e3308521"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cb815e0-cd1f-45df-b959-d0e1b1e33fea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31e99d59-2016-4dc7-a6df-84a5ea1a8111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "346112ab-c6fb-4e5d-ac50-d9e1b574f630",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f096d647-f751-4023-96c9-3f591f50b6cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3feabede-e3e0-4ea9-8d29-79af2c32c74d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3fd8cb9-c991-41fd-b880-2e67a50f681c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "124d7ac2-baa3-4b44-860e-66736f3af4df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fbdd09d-4a19-4d4b-80de-344509080652",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "233e706a-cf91-4eb3-ae09-6f283abbea2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94413ffb-977e-4272-a7af-9665735cccbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34d43e21-007b-4302-acac-6a3249beb386",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f70a6d4-1ee8-4808-97d6-a489df799bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1da3113-da57-40c6-8461-d0cc63d59a81",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abffda07-8cc1-4df5-95c9-e5a94d10a618",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5b3f16a-2ba0-4eed-9797-9f07630bb8c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2644609c-e380-4fc2-b415-756c5290c620",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd71a088-b4f9-47d8-839c-bd5d40993708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b415c9e8-bc63-4ede-af28-043f26e954f6",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc87478-c045-43e8-92a4-e17ae41e6919",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f60b945f-e266-4b55-9752-d7949a82a529"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86b68fa1-3f99-4e25-b69c-c9e2603c6085",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e944a73-1553-49cc-a73e-caf101ad34da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13a62ab4-a0d4-4678-93bf-77f50638e549",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "764269fe-d030-48d2-bce4-ded6286eb67b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f336676d-4681-4eaf-bdd9-87f4321f9021"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03be7a2-92dd-41eb-bd6b-e4a2e0522107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1e3449f-3499-4b6f-b92c-6d290f3e334f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4293c9a3-113c-4c39-80d3-219132606aff",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ea236f-5c87-4701-8d0f-ba818833944c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aea61c3-d875-44ef-a9fa-f4a8910e7846"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8effd970-e77f-411d-8ec5-8db02dd75433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74e773e5-1b60-44c4-a53f-9848db336c77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc89f82f-047d-4bb7-b2d5-b9dfc871b8c0",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aced9e7-4549-4f51-bfda-e0630547ef91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffc84597-1a0a-47a5-925b-1ec4d232d838"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ecbf22f-e10b-4f06-8879-54c490dca9f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b54cb902-dc56-4176-863f-4e0bbd7d55f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e0db209-72bb-4202-864d-f9534312e3aa",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f87f7ac3-ce2a-44da-ba26-579b05007505",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f56c950e-0ba8-4cbe-9ed8-d1f0baea2517"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b4daea-9132-459a-b911-d346fdffd3a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9be1d477-a9f5-47f5-a8a4-9e1b0fae987d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da4dbb16-f6c7-4fa0-b812-524437ac0da3",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51900ab0-0f4f-4541-8a0b-e0f83be11ef6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f304e724-a8c4-4f21-a9f9-33630f464db1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "239c0fdd-ec3d-47b4-a644-cc5628c96b0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92a55713-5850-4ecd-993c-45e7c7253681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "116d7b43-a01b-49c5-848e-cc0672ea114e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2073bc16-b589-4aa0-ad74-9f5db7fd3d61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f3ad89e-b4cd-4605-95ea-66aa984151a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "545a3f43-8fdf-410a-a282-af0d048e0811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d9f5083-fbcc-436e-a904-454754598d55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aaff639-2f43-49e3-9972-f8e08ac211d0",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "730c9874-05e0-403a-b48a-f2033a0e8dd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5de129a-4cd1-4a5e-8287-b5d485023dc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "763847ab-a504-4f5e-8972-34e922e8ea23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b0cf1db-57ed-4b7a-98b0-7d15bff11119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0958c0c-cc04-4750-aac6-450bffc77196",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b8d4e2-efcf-4c08-b7bc-fbd31482b3a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff4517e7-acee-4372-96b4-2c03302d7e7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "048bffd6-13ab-4bbf-9642-3be8f1d9be4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6a4190e-952c-4e9b-b265-a573f25436e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edb71797-f82a-4ff0-a158-d1682a09aff0",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d046d4-3be5-45c2-96c4-0b1fc2710666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4f8dd91-6bd6-461f-b7f7-e2b870f6efac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d33e12e-5e49-4068-bd08-417f12e79218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23445768-89d9-4c6e-af72-72307bc1c7f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b5b69f9-f4ef-43d1-bafa-8cadca749459",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dfaba2f-42e2-4795-97f8-09685f95b191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75b58d4c-4b9c-4166-bacd-6f12ae133a25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a224d8ef-ab1d-4d93-8d5b-b65d86f0c3bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4baeb03-d2f3-4189-b0bc-3b4d2fb80021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32c1da74-644e-46c0-9ba1-edad70930d82",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "503d5cf0-d936-4437-a0b0-3f0f1f70eb44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "260b4e92-1303-4623-97a6-acda3be3b47b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a14fc7ed-e387-4bfd-b163-d98ecf09ba39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f527ed4d-14d0-4d9b-a3df-7b2c3fff4060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d55eaaed-6306-4649-b1fe-e46f62e376ad",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72d19597-624f-4112-b0e5-c8965e486636",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef4402b5-c5b7-4041-a6be-faae88f35840"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9efddaad-2a4b-491d-81e6-d81110ebf50e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63093446-ba83-46f5-bc71-11055aafe70d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ed86ef8-8999-4023-afd5-2ab7143b536b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41333662-7c6d-42c6-bd4d-775812e331b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27717f4c-f00b-4b9f-8e2e-f3080deb5a2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d24ce735-d117-4257-a974-938122622ee1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4fd8340-573b-473d-9692-9a7abfd6034e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a88e8276-7b1c-4195-9a71-a7d54e1c1fdd",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd73fb5-0e23-440c-82e1-59b42b444560",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8db751d-1819-43d5-9207-82eb7e3cd1bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c4230c-cfbf-4d06-a8e7-bf5cc39ee9b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c2fe46f-9828-468f-aa82-22050c603eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a793057-a2b2-4124-8d9b-39c8f6231073",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9449c399-8de6-402a-ab4c-4646fb9cfa23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d802955-6eeb-4290-b60b-e47f66c6c8c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f920d0-75be-4a3d-b380-005ff76ade94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91ae3306-3ba7-4b7a-931b-8715511b5f0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a965c151-fbd4-464c-9948-95556e66299d",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "375ac47f-2399-42af-ab4e-780ad6e13a1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86b44f22-b9db-4827-a4ab-88a1ad49c439"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e2f401-76f3-460e-8ca2-9b91e376b4c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "634e0b2d-7939-4e40-9261-cba4730c86f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa4574f-75d7-4aa4-a981-110dedc739bc",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d8e828-201e-4e42-a53b-b2d3bebd06e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0550ecd-4f46-41c5-b2ce-86dabaacea1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35432e13-8a4a-48da-afcf-aa721103c8d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "833be798-783a-4c3f-983f-9a3cdeae62fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41e40a53-abad-4ea8-a4a0-865f480c6dff",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1938fa54-09eb-4708-9ac5-043f00403f00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2fb6b34-3325-4523-b46a-ab8646950cfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff19bce-bf53-488e-9eec-f4660dcd90d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5a824ca-d14d-4d86-a2ec-04751ef831e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b33a12f-c4ef-4c38-85e0-043fbd5ff743",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a2ac587-8427-4100-9e16-d149e54820d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9edf6bab-e8ac-4092-a10b-33305c665bce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "026aecd0-a3df-4c31-b1e5-5b8f2710c364",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3608407-aa4a-4442-a71a-a32815e44f90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce68f73b-233d-4766-bef3-b16e48f90f35",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67588cf-73c9-4771-8105-0a4372d3704e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac690889-f0f1-496e-8568-662341e34021"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f30d48-c53b-4d19-9f06-0ee0cd579b7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10c64891-ec28-46e0-a8f1-92452e7333bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d870caf2-682f-4f11-a7f2-e576ca245bcc",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8143241-ad5b-49d3-9271-56d32e2bccc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "748642df-0b6a-492f-8e00-19045b00902c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86270849-7201-45fb-9ada-d07c99ee97f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "853d9d37-7dab-4b9d-afa3-9c173eeaab90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36ee4809-8a6c-47a5-87a2-d7d82865f263",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17289ddf-c69f-42b9-b868-55681c59dea4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5589ec1f-7c27-4c2f-af56-e2b733505912"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6fe66b4-4932-4ab6-a673-f9bd8128e961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8c40a45-a945-467e-9df1-6a97382dc2ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f635dbcc-d317-429d-8d14-820970251091",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6240ce02-312f-4473-82e1-8a9015a50caa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ee04044-0148-47d0-ad7e-94aff8dd6ae3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8324870-fc01-460e-b3ea-4343f844662a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e43a1247-aaec-4a6e-bdc1-784cc49a8a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14f98e7b-058d-4efd-90b3-d36a26191108",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f328d7-fc87-4fa2-aff9-c3741d80debc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e008804d-2b51-4b90-a729-21ed21e2deb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c312549f-54fb-4c7e-82aa-a6cfbacdb7c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "845d253d-b860-4d15-bff0-41a3080d4326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb3f0091-2e71-4aad-8412-c85e00a38677",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "135f9fcc-efcc-4311-a8aa-fc09c5d277c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c925362-1b35-4c7b-907c-4a515228a48c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ec2b06-f5a3-400e-94a0-01bf7fd526dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69b51f19-93e8-488d-88d1-25c3c9138ba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f1108c-15be-4d4f-8443-775c16a53f82",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd20b48-5667-4f28-9c10-861958c3c706",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "830d8e37-bacf-4d3b-bfc4-f3c7d122a055"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af8fc352-badb-4e07-9b9e-f85f27f46380",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b03a56c7-a9b1-47c2-bff3-e296093879bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b03cb6b-91a4-451f-a7e3-a1fc1f3288f8",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a818271-ba16-4588-aa3d-f40eda9e3669",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed0fb3f5-c902-4cac-831c-749679f12861"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf8356b0-3267-406b-8d41-831ceaf0be77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "628275eb-f251-4a48-a407-7c54f7c4c5b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e2da07e-0031-4bc0-bf25-ad702a7ef120",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38f25bdc-c300-427b-962a-9836aa3d4ef2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3d82702-e066-4f42-accb-92d5ca46192e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d63360-c473-4ef8-9218-f3d62003a058",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68b8e0f0-c3bd-42c7-993f-56dd1b5512fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3286d578-c97d-48df-8805-e69c852fa5c0",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17201cac-3df0-4855-a0db-5fa54481e7e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82c310f5-281c-4b61-b209-128b966d6697"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4e14028-9bcf-44af-8bc6-bbbff1c90a2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddc0a988-3655-48bd-896f-919bb7fbbe86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c608c0b-a970-4e86-8d60-a5a45904ad9d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f1d7572-d3a1-42df-9213-812ce09bd1af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f45c2bdb-3d3b-4c3c-8458-0069665244b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee4b1d28-4593-4a03-8f70-40b131e9dd9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abd7af80-8280-4d65-8ca8-19b3d498fe3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1242a546-924c-4176-a71a-d7874597c358",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae1031fe-c60a-4d45-854f-44ca8c9f1a23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3f5cd48-dc2d-40e9-a532-40a8e6322a60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "552fbee3-9550-4726-bd50-6e19fe088488",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99ee725b-529d-48e0-80cb-ca2af26e369e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f84b11-265a-4d24-ab5c-b6857c5c4fda",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84003fa8-20e9-4900-af7f-ecc7cb702872",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "854dd9a5-eea8-4a5a-85a7-3ba6ff198ca4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f137da90-3ecc-4207-af69-134c06e7ed6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99da2752-ce15-4fc2-af7b-76c76722c422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba25e146-2cbd-457d-af8f-d8767280c60c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e74fa8-3a5b-4363-9073-3b816c4a650f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02aea9b9-6404-4421-bbd7-c7b79ac31052"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "788ce022-e055-4bd2-9332-e94e98a8395b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08c27ada-aabf-4cf4-ab0d-b57c5e447ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86ba5fb4-dc62-45d8-8490-cacb26219a0e",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d21db7c-024e-47ee-ab19-da90e1b7b971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69089d41-c92a-4095-9be9-fc004c66b79d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a884d43d-aa0e-4249-8572-7d666fad532d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b62ab5e0-066c-4ce1-a3e8-4391d064bfc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf2b628-8c4f-4d4c-92a3-5dae4e269309",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c12ef78f-5bf8-4523-8e2b-89d0c5a5d21a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bdff073-3289-4487-8463-5820053b457c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85799319-3503-4a5e-a5c6-35c4b5cd0303",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7606d439-5f3d-48af-b508-14d0fd9bc7e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4864d595-dd8c-4973-bf4f-a3a96ea6403e",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2a60d79-07f2-4cc5-86a7-8cd7ca736f5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e459c77d-a88e-4c9d-ba5a-69af29d4862e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5feb151c-5d64-4f90-9738-d81d579d2209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "029b876c-7308-4ef2-adf7-79c9f997008a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26dbab4f-2209-49ff-af4e-15c64e6f8ac2",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "630d3d0a-4c4b-44a6-aff1-4d2754ae739e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b31d2c38-5e0d-4902-879a-1b0913372351"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0ec3682-b1b2-4375-bcfe-b5d21e0d3640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41a5b5bf-9d0c-4591-896c-c6dbdf8f9ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab1bfdc7-4c87-431a-aabd-d84adff665fe",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5094f840-17ab-40a9-8de6-1e6a544fac0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "587a2cd3-6b25-4159-b136-6d6a1937b591"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c0ef7e-ddfb-4a5b-a58d-9764ceef3110",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ebc1ec5-6c39-4c1e-a787-29b49b68dc20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b4c5e7e-f4de-470d-92f4-bd369ffdfac2",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1eb3575-fed5-45c8-bc5e-a4b76f57c9e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db03fdc8-4301-487b-a220-ddea54895662"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dab2084-191a-4be8-99e7-34bcb2577113",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5abc98b5-46fe-4a41-96a0-9b19270d4c77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e25bca5e-7e5e-4085-92e4-cb42eb2840d1",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bb0a9fd-8af2-43a9-9f46-e5b96cbc2357",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f71bad96-d758-42f8-babf-fc7ff0e27ce8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39dd4c1f-0f96-4985-a875-af2157ae0c00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "896cff59-49ad-4454-a9ea-d16b38fcdb7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2da82ca-657b-41b2-9621-019a9b40b1bd",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf96bce7-1b9b-4c28-9b27-e8bd2a659291",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc20f012-2c3d-420f-98e2-0c5c83b97f95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c11dd2-bd8f-47d8-8c0f-85e0ebf9eda9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf777c98-9efc-40b2-a8ab-dede210525d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37534187-3470-4058-9938-80099b63e83a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315948f8-0064-4771-bb7b-9cda79876e04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9bd4c9c-0d55-451f-8135-b22066995e18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c941f4b-4da6-4909-bd58-427265e224a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a4d697a-f535-40c7-b345-e2db8becc117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e69f23d-aca9-42ae-82c0-23fa5b9a5284",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45b0f456-20d7-4f3b-8cc5-9e2023f9a223",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3b999ac-9046-4eb3-be7d-83c21e917fab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55176dc1-bc35-4818-b24a-10e6725358e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41c35536-5eb7-4a26-ac17-90af702252ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dd781f4-3196-4260-9fd7-77cebee338cf",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb7f5ac2-985b-47d2-93d6-752a123507bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af90c8e2-21ca-4951-bcff-f3f62cf86e0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d309870-b124-4d38-b146-1d66dd9a17ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49985f3f-53a0-4984-af32-7d11a53d0e1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b344de46-c1e4-4ee0-b8c4-1e1482b292de",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b15a38d8-9ea0-417d-967d-38802570cc52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cffb4b7-6ae0-4f2c-84ad-f6994ad51980"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a5370d5-6c11-4208-aba7-d4d774bfa391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f10aaf91-8e14-4cbe-814b-6da4491a71b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a34f392-66ac-4101-8fa6-62e70db05a2f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69bfb241-99f7-4ab3-bcb2-888b211c594e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdc90a63-6b1e-4a22-abcf-85b3ac4a9eb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3e6920-f340-4278-96e1-50e654acf9d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "780d4e2c-2b93-4bf0-a5f0-c8c4fb27e56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8656d9a-ab25-4f96-992b-f5013b84b29d",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e226fcaf-584d-46fd-ba22-946e4db5b91d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "480ab740-cd59-47fd-99bb-54339135463b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd677166-b18d-4dd6-9445-5085d8a46857",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "013a9349-5c2c-4f8a-95a1-bfc2b3f11680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d3d446-fac8-4c6f-a039-f5c302c2182e",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92891040-96f3-4f96-88c0-bd2fd3f7ae46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "783248d7-19b2-44c4-89cd-6fabd62062d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a7658d2-8051-4a04-9d64-56dd31287c5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "180f5d71-7023-451f-b3cf-8bbadf9f1693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "951b7886-2d7c-418c-bbaa-26ab7097547b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a22e200-d974-40e5-8307-51a6e46d7445",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a0b79f9-4dbb-4c81-8037-d9c395eef65b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a94a610-2e11-4522-b67f-c085702cfd2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53c355fa-c415-442a-a55c-9e20faacb42d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b4d395-9486-427c-b77f-33dd887cdacc",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f4fac4b-9b77-48cc-8b30-dadb2a34fd6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f1923d6-5ec0-414a-bf1d-0549045816e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b39310-3ed7-4bf2-9c5a-1242928e17c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f11a2144-5681-4281-9032-bf6353fc3e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d10b15a4-d6ec-4eb5-8577-a4c4cf238e9e",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "149eec35-b41c-4c87-885c-3164a0fc2701",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2ae217e-3399-436c-8d2a-986ad9cf0ee5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7800276b-641e-4dfb-a642-7eaaa84ac47c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b874eeee-b474-4b5f-8f19-2fdb2fe6a39a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da6ed26d-82e4-4c29-8603-55a8d6732c20",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "038373df-df8e-44e8-a284-d958c3d3ed84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8216c4a-bbae-4aaa-80a9-b8f4b13c3d32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b04e200e-0d3a-44ad-b419-f9c7f41a01e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9ad7b74-d9ff-4833-b737-ee6cbde29065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85e248e2-8ef0-4a5d-9b91-46d8d917b903",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e64ef42-fc47-4c4a-90a3-00bd7de17f4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c537090-97dd-4742-b348-02a1244c5141"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1536a721-a4cd-4f29-bf18-b0873bb86599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bc14b3d-b555-4b91-8a5a-94b9092287a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f1310ef-9b21-4b0b-81a4-2e0cd355ec22",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b4697cc-efe7-4c90-937c-bd4357c274ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfd13fcc-6357-4846-842b-be7d7127e09b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d17bec-3c01-4ec1-a328-0f84eae73e24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd27ac91-ce28-41e5-a8c9-cf2085d6976a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "233e8221-37c8-4886-9606-2c633f9fa153",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199c133a-9768-4013-bd6f-d8e2adcacc79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d047780e-4529-4a36-89e6-b30747b7911e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "564845e1-22ec-4e8b-8ac9-3dd50be81b39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4ccb975-0303-4885-9258-318051281b93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b94172d9-6be1-4d01-ac26-3191fd0cf019",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a088c9ae-e70b-4028-8368-8b0511310409",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a80b9a3e-6c2c-4b7e-ac5b-146fabdd7202"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff439da2-5ac5-4643-9c39-4d1adfb6ccf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f201027-ad1d-44f6-a8f9-62584c3fb0ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c54826-089e-4831-8a57-9e45383c4363",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e70a1e05-d31c-4175-a606-71fc55b6c4d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b4ab391-a944-41bf-8f0e-d7508828eed4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92878196-32f8-4375-b48f-b600ac585b75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "720ea33c-9be3-4352-ab34-dfc90d3286d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0581fc60-f7fd-4885-ad40-f02c9fe3aa91",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ccfc228-fcda-4fda-91d3-d12628a09daf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5061cdc-2962-44f4-8b32-f719a8294f52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59850231-f915-4180-ab6c-0dd7805cfb28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56aa9137-27e8-4fc1-8f2b-697987b8e036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8506d25f-08ee-4349-9d87-71aeb68a1058",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84036b04-2d4d-4753-aa0c-4e6c61d9511f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9646a9c1-5d7a-41a6-bba9-8469ca889e24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c64f602a-ee7d-4335-9708-c38c43c26214",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "366a6043-b1a0-49e4-b501-7054ebc09ec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af57772b-684b-4c88-94e5-b6e69225c072",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e4adf8-0fc6-47e4-b757-5d5f15a59732",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d12ccdbd-e4d2-4755-acdf-0bebb01cc6f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c07c5c26-e7a5-45d0-91bb-b9380d9b7e5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f73cf1c-7371-4199-a603-f0ff89be3632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d5c74c6-1cf1-4da3-9baf-11340d0b1495",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b2ec46-b527-4a20-b997-64c57d8a625f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa394d9d-8b34-40e8-8b79-9e6e937666c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce9ac82a-08b8-4fa3-a8ea-4a3b0fbd6057",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a321207a-bed0-4ae6-8d03-5099c6c5b065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3da3e429-beff-4701-9f96-db1bdef9fe75",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1cb102-3593-4645-899d-e4915012c3be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e069adf-7c47-4932-9547-ef872c428d58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2802e97a-4ebf-416b-b9ce-d8d0a8451a43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c9bf85b-80f2-4ac4-8f61-758a4d2a1c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b08bd8-5108-4981-8d19-8287031cc649",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1881683-6102-49f0-a8aa-bb7081dd2a0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "850cddde-b54e-4a74-bf59-b49327b89112"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14411936-0578-4e08-a4d2-e58bffb5e4c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3624f99-ff12-43ce-8083-ed0d6d1cb68a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34e78e7c-afe1-4c7c-bfa0-65216190745e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da348b0b-98bd-4ac1-a895-777f93ff1812",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edf3f49a-90d3-4532-975f-37865868849b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b0708fe-9340-4fb3-9fca-3a5d79d11da2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98d3e375-51f7-447d-bbbb-3ae751f22c26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf567f4c-e46d-4e00-a30a-2cb8cd5c2c29",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fc60a7f-7c83-4c99-b78d-c349491533ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2fbfc28-4821-45e3-9a17-7f0be34d6165"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c66d0d-3fb0-4a7b-aec3-95a83376b85a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8e29cb7-9b52-4a4d-a1c2-d03d484afc02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aac26dd-ab08-41f5-a7f7-3382880a02f1",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85fe6799-ead9-4f8b-a865-06052a0019cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d40f1c3-e5d8-479f-bf58-4b598a2de4a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "818df5a5-d192-4619-9d1e-3f5708baf3fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bffffef-1d72-4e57-9598-23231d6d8007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f913287-4df3-446b-bf29-104cc7afd2c8",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd8806d8-afa4-481c-9cd5-99205c86de43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1227755b-4424-45fd-9c43-af5e454ecc78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f1026b0-e4c2-45f7-816b-2f7bf74271aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff32f312-9b81-4f93-970f-11120a9ccfbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f588c686-899d-423f-b117-95cceb37913c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b72a1c-b0b1-4aa8-b54c-6e15f1580d6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6f873f1-9dd7-40c5-9117-eb52828c74b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3500cd01-b57d-4ebd-a89c-e437b0c70d0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f24207f-209d-406f-bcab-419e65eca297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa168b73-18b4-469b-97da-83ef3c288f6c",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cbc979f-81d2-4e9c-a0e1-70f9c6e29fbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d87a6cfe-4ad7-4d05-8415-d773a8cdf632"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7919b34-ac89-431a-80ee-c0c6a2e8e97c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7dcbd5d-b5a3-4f4c-a210-d048c8f21dcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "273a9fc9-34ad-4f24-8ac4-c4371a225bd3",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda12da4-63eb-4950-bdab-54dbf5c3d005",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30433297-82cd-41c8-a160-520a697a7485"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94cb8201-8cec-4a4d-a35b-7b2672571879",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b1c229d-7545-42e6-aaff-dce7723f32c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b08c06-442b-4b23-a142-ff32c17c9833",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9fdc53d-6ce6-4a55-b317-9159180689f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b13664b6-ff3d-4517-9aa2-8925e5acc3d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e5e41d4-a6d9-4710-b515-0a00d380c393",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fbe2cd8-fc4f-4560-89db-689d502aeb20"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "20edafef-cfa7-4684-91c0-80482e0b7832",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56912630-69b1-4fe0-a998-04b7d3255d9e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "34d0bbee-96e0-41bd-a77e-73048688e98d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d63778b2-b0e4-414b-99f9-3a16861306b7"
                    }
                  }
                ]
              },
              {
                "id": "19945b96-5f65-4adf-8ec1-df5e0cfb9a2e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9efd6806-6ae4-4086-9a1c-507ee0b69875",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f04bfeb3-2bfa-44c6-9cfb-10fcba8af8d3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7313313c-21c5-4de0-b1c4-93bade6111bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ef6928-32b0-4f02-903a-3436260cf9e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3516a392-0816-4c39-8e30-b3185fcc6253"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc6af7f0-c842-47f4-a077-0fffd753f539",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0dc400c5-22f9-4156-8992-34f0a274c12f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bcbb5d07-daf9-4d2f-a2e5-792824fcbac7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "abfd68a1-729a-4ad6-9fed-fe7149eefda3"
                    }
                  }
                ]
              },
              {
                "id": "f44e695b-2a2c-44e4-baf4-ed7243023f65",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "3ffbe699-d3c0-4781-8a66-d09683c9d2cd",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "320c4c44-0a83-486b-a882-784c8ea370e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d73894fb-57bd-43bb-8b55-27fc656f15aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "142cb1e0-a291-44cf-8c78-a0dd99f4af36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05410d2b-24f5-457c-9883-b4839b73886f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c86e0ae0-f1ba-4380-840e-810765660fe1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1e6cb36b-bfcf-491f-8617-750d8c9fde23",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "27a292af-a3d6-4a6f-8238-d9df57741ce0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e9724787-d83e-4543-a452-98fbe53fdb87"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb800333-48db-4a5d-83a2-0faf8a54296b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c0f64aa-8a25-4540-8385-524418c14cd0"
                    }
                  }
                ]
              },
              {
                "id": "20658348-bfc9-4538-a021-31d91cfe84c6",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2a32f2f-45b2-44d5-87e4-6bec5265015f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cbad66fc-896d-4855-a78a-8e49a169823d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c094db3f-212c-4e16-8867-7e8c207827ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af11e584-1bc1-495e-bbce-d1e996600930"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e10998f9-072c-4e74-920f-11d8e07bc742",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "063b6556-6ad9-441c-9994-779a4ab41608"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fa080b1f-63b8-4742-9eb9-4b049aba8923",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b157ebdc-73e9-4ccc-87be-a7dc6335f8cd"
            }
          }
        ]
      },
      {
        "id": "993d22a1-2c6c-4dc4-a3a8-4498c78e87c1",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0604e0cc-afa9-4b01-932b-af9f8eef0d9d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ee96255b-639e-4e46-bfbd-9b4d7dd3f1bc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "99b99423-d724-459f-a299-f1bb8a4290fa",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ce94d7a-5496-4a64-b438-980fe95b25c7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d54f9a7a-e434-4b0c-8992-a0d937dd0782"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f412d7b6-86f3-4899-acbb-1a195b623a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "71662b81-670a-443a-8fd0-e9d39dc3f804"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57fe9e62-4760-48c6-8e4f-793672293ae9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "80a73a03-42b0-464a-84d9-f8783e74b4ad"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e701d74d-8758-46fc-a495-044af0d5c465",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53fc78d5-e74b-4a9b-aa87-262ae6760f20"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "265bf42c-e6cd-4aab-aef6-092e7cd1d112",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0cd3c39f-321e-4daf-b5de-ef391574e771"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4692655d-f616-49d5-af3d-2c3b41f21b71",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3f79197e-898b-4cf5-98d8-97bada21a2cf"
            }
          }
        ]
      },
      {
        "id": "fcccf1ba-e846-49a8-9c9c-fff9b94f819b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ffb4f7be-1c0e-4704-af93-e2c577fc6107",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f6f3e97d-5f87-4bd3-8527-811b24a84654",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1f57f0fb-d295-4047-b3f1-0242b992181b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e43ed90f-7cf8-4198-a417-1e927d375dd5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "280696e6-4919-4821-bfe1-25e97701a2da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c06fe1-d68e-4cd5-89b6-69a8cdaa9fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d533185-f814-4e12-9415-90113bdd8ed4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6bcd2c52-9bda-45b9-b98f-4814febb8b4f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5afd248-c81f-4fcc-8780-7ad71b075ad0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6e96088-b07c-45d9-9de4-8eea8d8b97eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "38dcb800-6239-4df8-8b71-f8e2b53008b3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5f5a4e03-d7e3-4951-9e62-5c23954851cd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b46e551e-15e8-4b49-a2ba-d321fae9023c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4256c7fa-2951-40f9-a95b-e08bb2d8fdeb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "79f1da8c-17b7-4453-bb0e-b1ce1bd2c02b"
            }
          }
        ]
      },
      {
        "id": "46e31748-0bdc-4e93-b9ab-fa9a5c7c12e5",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "63f67efb-5e2a-4536-9f44-0fc7596f76cd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2b13134e-b51e-40ba-913c-e552cdadc0df",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c9bebf18-5209-4b67-9f0d-4bb469e1d47a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ce3381f-7f68-40b4-9143-8854a5bd849a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41384c44-f009-46e4-a464-fb10ebd1044a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acd82b5a-3e35-4305-a76c-fc88ba08f4ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0eca3223-56f5-4236-b539-5a49f6cacc07"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e7875803-2180-452c-a426-2399e6efdcab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "840426e4-6663-4cca-8e29-1ff67fcf6bdd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7e34bbf-052c-445a-af69-7e36cb5bd2a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0be44574-83e3-4479-b036-c3e1e693aec8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4fbe6cee-54d1-4127-8620-6d3fbef9e174",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3be20363-1393-45fb-8941-d67fd285171a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "50d2b4ce-6200-4c23-9036-5dfd412266cf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b99b652d-17eb-4250-b37d-5b380eea4f8d"
            }
          }
        ]
      },
      {
        "id": "399e69f3-f51d-4d67-929f-32b7f2574ddc",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ee01252a-df82-4a51-a7f0-32154671ee80",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a0b70e0a-7d97-4114-a259-7c85df81afe4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "7426495c-c469-47cf-b97f-e15d2f18a104",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5f70c838-75a2-4d94-8d73-853f35be0604",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "75f44bc9-30a3-4e33-ae76-6efb84918b5f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 182.24295774647888,
      "responseMin": 8,
      "responseMax": 2130,
      "responseSd": 333.11664325546235,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1694651581481,
      "completed": 1694651649265
    },
    "executions": [
      {
        "id": "375957c0-7187-4b8a-99a8-e4cdb8f1176e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2d28cc9c-b5ce-486a-87b5-6f3cc4349417",
          "httpRequestId": "025f1863-4028-426c-b89d-ff3826181fb2"
        },
        "item": {
          "id": "375957c0-7187-4b8a-99a8-e4cdb8f1176e",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "41adac01-cd10-4144-9b2a-5b4337ea1ab8",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 0
        }
      },
      {
        "id": "52ba1673-f4cc-41a0-850b-99a5e44eb8e6",
        "cursor": {
          "ref": "70554c1b-2613-47b6-bb2e-05486aa59ae8",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f4bc260b-dc25-4e5a-937c-a6f043dabaff"
        },
        "item": {
          "id": "52ba1673-f4cc-41a0-850b-99a5e44eb8e6",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "50b48834-965d-4516-9df9-c0fc37170a62",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "e7b60866-3f7d-44ea-9ce3-9ce6e38e4df4",
        "cursor": {
          "ref": "97a21115-f801-4d85-ad54-4c39505462df",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "49e589b2-1dd0-4db4-b6d5-2b306617ac74"
        },
        "item": {
          "id": "e7b60866-3f7d-44ea-9ce3-9ce6e38e4df4",
          "name": "did_json"
        },
        "response": {
          "id": "deb89615-fba0-4fd8-8752-fc0e5ad88075",
          "status": "OK",
          "code": 200,
          "responseTime": 380,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19c92fed-dc8a-4636-8a02-afee199be321",
        "cursor": {
          "ref": "ad5f4e7a-9564-410e-b863-e7c6bdfad2fb",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b88eeb0a-35e7-4104-909f-2452fff3ceb5"
        },
        "item": {
          "id": "19c92fed-dc8a-4636-8a02-afee199be321",
          "name": "did:invalid"
        },
        "response": {
          "id": "1d9a7ebc-7df1-47bd-aff4-2f581b087f01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19c92fed-dc8a-4636-8a02-afee199be321",
        "cursor": {
          "ref": "ad5f4e7a-9564-410e-b863-e7c6bdfad2fb",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b88eeb0a-35e7-4104-909f-2452fff3ceb5"
        },
        "item": {
          "id": "19c92fed-dc8a-4636-8a02-afee199be321",
          "name": "did:invalid"
        },
        "response": {
          "id": "1d9a7ebc-7df1-47bd-aff4-2f581b087f01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "868a3f86-7ec8-4bee-835a-82cefb76dfd3",
        "cursor": {
          "ref": "25be77cf-b491-46bd-8e07-44b658d4d53c",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "dc84b549-c57e-45ac-b035-f557b9a6f70d"
        },
        "item": {
          "id": "868a3f86-7ec8-4bee-835a-82cefb76dfd3",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "53383724-bce3-4d11-9fa9-7080d48bc6fc",
          "status": "Not Found",
          "code": 404,
          "responseTime": 152,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "552cd2bc-f898-4373-a1ec-a18950186928",
        "cursor": {
          "ref": "3fa52f39-ec97-47e8-b50b-a84e03c32474",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "75b9f469-887f-485b-8bbc-cd1ddb5cf434"
        },
        "item": {
          "id": "552cd2bc-f898-4373-a1ec-a18950186928",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "3731f666-d6de-4819-98a2-73cfaccbd0fa",
          "status": "Not Found",
          "code": 404,
          "responseTime": 107,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c511b23-db46-4da1-acde-2586aa50b89e",
        "cursor": {
          "ref": "1fd21421-6f5e-4008-a608-22cea6cb978b",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4969da3f-944f-4386-818a-a0b2c1d0aa3e"
        },
        "item": {
          "id": "5c511b23-db46-4da1-acde-2586aa50b89e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e9991bf0-4f64-499d-bbec-7295472c0fdc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5bd82c7-3793-483b-88ff-a4224be22924",
        "cursor": {
          "ref": "85ebbfc5-2b73-4fa5-bfaf-1aad92f5f91f",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "27e4261b-faf3-423a-af24-c98ab3970d38"
        },
        "item": {
          "id": "d5bd82c7-3793-483b-88ff-a4224be22924",
          "name": "identifiers"
        },
        "response": {
          "id": "54dc2623-71f0-40c6-8ef8-1b5dba189992",
          "status": "OK",
          "code": 200,
          "responseTime": 165,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fbe8319-6b22-4c4b-8fac-e351def1d0f2",
        "cursor": {
          "ref": "0434275f-72ef-4f9a-b501-7ac82f81eb46",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "de485328-90e4-4c68-991a-afc0dccf6c91"
        },
        "item": {
          "id": "1fbe8319-6b22-4c4b-8fac-e351def1d0f2",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f050f024-6de6-4ee0-934c-826faeda56ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a955d4cf-b03b-403d-af19-1d3cf570371f",
        "cursor": {
          "ref": "6db1056d-89a3-4117-a9e6-e25607f28a2b",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "935cbfa6-c361-423a-a469-9c667c80aae6"
        },
        "item": {
          "id": "a955d4cf-b03b-403d-af19-1d3cf570371f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9ed49789-aa2a-46f9-8474-f9eed06139ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33d7b000-c76d-4b2d-958c-af1665bf4314",
        "cursor": {
          "ref": "d649c362-7e76-4b7c-9546-3fc243acbb02",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8f56a140-8f78-4556-bf8c-3d5dd2090e65"
        },
        "item": {
          "id": "33d7b000-c76d-4b2d-958c-af1665bf4314",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "9d7c8953-105b-4ee9-8fb2-94312d97130c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3fd6141-30c5-4be7-ad79-5591e149495c",
        "cursor": {
          "ref": "1cb5a65d-fa17-4acd-8fbb-bf73352dd944",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e981b89d-13e5-4177-81bb-8961091d360c"
        },
        "item": {
          "id": "e3fd6141-30c5-4be7-ad79-5591e149495c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "6eb4d964-0f97-470b-812c-3716779bed57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eac9bbc0-2b6e-4046-926e-bdf68870d212",
        "cursor": {
          "ref": "1aaac9a7-c8ae-4e0a-bc39-db0d7363ac0e",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "23677f92-67fb-4b9a-841c-ee584f4d93e6"
        },
        "item": {
          "id": "eac9bbc0-2b6e-4046-926e-bdf68870d212",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "21012d09-2541-4e87-827d-9de61dc946ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0f8a95b-c607-4f85-8b40-e751e2e25cef",
        "cursor": {
          "ref": "e21b5c80-8174-44d3-a3c3-2d421c2a43a0",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "91f4b7ed-134b-4fc0-b09d-2d6a0370b519"
        },
        "item": {
          "id": "e0f8a95b-c607-4f85-8b40-e751e2e25cef",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "002dbb1a-e035-4f71-afa0-2bbd5929ba58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6fe79f0-2ff3-4af3-a65a-4fd704424e46",
        "cursor": {
          "ref": "a22e0403-107b-4697-b486-d025c305fd40",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "7bc98ba6-b663-46c5-af97-c49abaaa8dc2"
        },
        "item": {
          "id": "b6fe79f0-2ff3-4af3-a65a-4fd704424e46",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "b24e5177-e330-42fc-8618-0ed38e288cfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa878c4c-f395-4e82-a1db-99d5b71ed9f7",
        "cursor": {
          "ref": "7d0a5125-fe23-4873-bb36-3bb5ee68d307",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3a02e7f1-a8c3-4455-81da-91ab3a281e61"
        },
        "item": {
          "id": "aa878c4c-f395-4e82-a1db-99d5b71ed9f7",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4f34150d-23c8-4930-950f-b4d7b212c558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d83cfde3-9d2e-484a-ad1d-a093be7aa04f",
        "cursor": {
          "ref": "048d7470-84f5-4c2f-a14d-1539c9a422dd",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "95e6a07c-8d04-4b0a-95d3-5c05d46f35bd"
        },
        "item": {
          "id": "d83cfde3-9d2e-484a-ad1d-a093be7aa04f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "1486b351-bcb8-4624-ab0b-6f7d21441925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b3165c5-a20d-48d6-acb5-78510779b5bf",
        "cursor": {
          "ref": "88f378af-21c3-43f7-b269-2ef5c8df61d1",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ac077b9d-96a6-49fe-9e1e-5a18bac39a82"
        },
        "item": {
          "id": "6b3165c5-a20d-48d6-acb5-78510779b5bf",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e4dd38da-25ce-4a9c-885d-acd6c0007996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c2959ce-b79b-400d-a393-db74528f35ef",
        "cursor": {
          "ref": "74d60563-796d-4772-b82d-19b7bd1c7e82",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "411cea61-e43d-40de-a91a-603269b86ec8"
        },
        "item": {
          "id": "6c2959ce-b79b-400d-a393-db74528f35ef",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "81a3621e-5527-42a0-a8da-bffd97483827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc0a1303-30d3-4f94-bc8a-dafe3b21130b",
        "cursor": {
          "ref": "8a6fdd28-2043-49b9-9c79-449e41d27159",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "2cb55861-09df-4489-9b96-5cca476aa798"
        },
        "item": {
          "id": "bc0a1303-30d3-4f94-bc8a-dafe3b21130b",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "0eb9e264-0dfb-4146-9a6a-c733dca08516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03da394c-8301-42a8-a714-0763e877f20a",
        "cursor": {
          "ref": "4e2b4b6b-0a1b-4bf6-99f5-2b121d8ed732",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d7da0ea1-e395-46d9-bcf0-23d31ef1f920"
        },
        "item": {
          "id": "03da394c-8301-42a8-a714-0763e877f20a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "aa3fb5a7-8047-445c-b3a3-7faf224998ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3535f46e-25df-4d0c-b40a-b9ca8bd12e1b",
        "cursor": {
          "ref": "74f79c8e-8e60-4598-97df-0506d18df948",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "195fad4d-6c6e-4e9a-9269-959772d66275"
        },
        "item": {
          "id": "3535f46e-25df-4d0c-b40a-b9ca8bd12e1b",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "804f15b4-448d-4958-838c-7ad8a2158712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c20ff9-25f0-48f8-b5f3-55cf846d045b",
        "cursor": {
          "ref": "f786b9c9-f965-4be9-8d77-d270c9ca84eb",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a6c7b7ec-05b8-4669-8429-c882ea07362c"
        },
        "item": {
          "id": "31c20ff9-25f0-48f8-b5f3-55cf846d045b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "00038f41-60d6-4166-8dcd-248d87e44a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d70a5ffa-3450-4660-9350-e0728bf03ec0",
        "cursor": {
          "ref": "85e70b28-9174-4c46-a34d-0143bc82d0a5",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f4d3d621-0edd-44a2-9872-5a57cb8f1af7"
        },
        "item": {
          "id": "d70a5ffa-3450-4660-9350-e0728bf03ec0",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "59dceeb9-cb83-4016-ad17-a69d8087565b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "498c6f7c-1da3-4bea-b0d2-d0738243df3a",
        "cursor": {
          "ref": "e00c6e3e-730a-4489-b2c0-9c976409b242",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "012b938d-6b8a-4ea6-b7df-7c05921d2bd0"
        },
        "item": {
          "id": "498c6f7c-1da3-4bea-b0d2-d0738243df3a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "18fbc7f1-f5d6-46a4-84a7-24e81e8ced7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5b3ba14-b3df-4f57-a07c-31116bbef531",
        "cursor": {
          "ref": "11a97060-829d-419d-ab86-f7bf3e8b1914",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "8844164e-1839-43a3-9953-0b7c732ffada"
        },
        "item": {
          "id": "f5b3ba14-b3df-4f57-a07c-31116bbef531",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b12a6402-5201-4d20-b871-d5d6325b2242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0f7bcaf-29fc-4c5b-b1cf-fda0eb630647",
        "cursor": {
          "ref": "8a0fc8e5-8848-41ca-b759-d5bee9544fb2",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9a4324e3-6cd7-45ad-af1b-15a47becfdf6"
        },
        "item": {
          "id": "b0f7bcaf-29fc-4c5b-b1cf-fda0eb630647",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "33f7d2ed-7ce1-4deb-9073-325494fe8209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc1a68fc-c22c-44de-b786-993ed93734bf",
        "cursor": {
          "ref": "c249f1cd-dd25-4949-8bb0-119fa8f1fe4e",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "932d3877-7bda-4adc-a758-ce1aa7bacc90"
        },
        "item": {
          "id": "bc1a68fc-c22c-44de-b786-993ed93734bf",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "d4d4b7d9-1176-4b51-b84e-708ff3c02574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b2fcd04-25f5-4465-a3f3-95c2e0d78649",
        "cursor": {
          "ref": "bc91c9c9-010f-4441-bc27-8d550ee730f6",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a4b36a50-7a23-4363-b52e-7e78432e396c"
        },
        "item": {
          "id": "8b2fcd04-25f5-4465-a3f3-95c2e0d78649",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e82a2fcc-c318-4947-9a10-4c046be58f77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb9cf0a1-09c0-41d1-bcea-e4607696672d",
        "cursor": {
          "ref": "6f8d3499-03f2-42d6-8fe6-f8514c8d0547",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "766f867b-7b3e-4a0d-9877-f3833a8cf9f5"
        },
        "item": {
          "id": "eb9cf0a1-09c0-41d1-bcea-e4607696672d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "bc4a68d7-f17a-4ac6-b22f-301d83b25b21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31f5abe4-c349-4fed-b7c8-271c6b202627",
        "cursor": {
          "ref": "e5e60f93-90be-4b20-a280-e043b7204cf5",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "e739523e-a3da-4e0b-9fb7-3580ccd6ab25"
        },
        "item": {
          "id": "31f5abe4-c349-4fed-b7c8-271c6b202627",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "67e83cec-0224-4b7e-9790-8c79c3fa0932",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8744cad-e6d0-405e-9b82-1c7e9a1a3954",
        "cursor": {
          "ref": "552782df-c59f-4408-9e01-d635e46388f0",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ee58f603-02e2-4537-a1b7-4b082e341db5"
        },
        "item": {
          "id": "e8744cad-e6d0-405e-9b82-1c7e9a1a3954",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "757eb1fc-ff4d-4613-9922-e999b2a0a956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a92843a-20dc-4b53-b720-6072aa713599",
        "cursor": {
          "ref": "c7d10219-0778-43da-b879-855ec8d1abee",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1b6c62f4-e95e-458c-9ab0-9ce44c36de5e"
        },
        "item": {
          "id": "0a92843a-20dc-4b53-b720-6072aa713599",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "afb0803e-af6a-4f3a-8485-ed70f6c1c3ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e485cc9-2f04-449a-b8ff-e7f6b9864a23",
        "cursor": {
          "ref": "28d96960-8ce4-497d-9902-b945f47724ca",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "63a3d93f-a99d-4156-bbe5-b2544268c2f1"
        },
        "item": {
          "id": "5e485cc9-2f04-449a-b8ff-e7f6b9864a23",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "8ac7cae6-205c-45bb-8766-2084a436a222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae88edb7-d23d-4d55-a147-69dd1b6fabaa",
        "cursor": {
          "ref": "791e93a1-d79e-49c4-8e17-3602f1948957",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b37be469-657f-446f-9f92-6e64af784b0c"
        },
        "item": {
          "id": "ae88edb7-d23d-4d55-a147-69dd1b6fabaa",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "561e80fb-7461-48bb-9b21-18da723e0c26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "081eef8b-c838-4c97-bd73-f02894cbcbec",
        "cursor": {
          "ref": "8a02aaf6-b510-4d8b-acc9-e53bb388885f",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "04e3d102-fa02-42d1-bc66-71d32df9ada5"
        },
        "item": {
          "id": "081eef8b-c838-4c97-bd73-f02894cbcbec",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b7e58d10-df35-4341-9dae-3656b84ce54f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a74e42b-ad07-4922-935e-f3d38d95a1c5",
        "cursor": {
          "ref": "986eaab7-1265-46f8-ac71-dbab49a3548b",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a28cd711-3d6d-423d-9782-5033196dda96"
        },
        "item": {
          "id": "2a74e42b-ad07-4922-935e-f3d38d95a1c5",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "057eacd1-ac8a-4a46-b555-2a2661c84492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f51a48eb-0dbf-4866-a0e1-db6933f807e7",
        "cursor": {
          "ref": "e3c6e784-571f-4f4b-8d49-36092d37f01e",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "01dc38c3-7936-4186-b5cf-513c917f9865"
        },
        "item": {
          "id": "f51a48eb-0dbf-4866-a0e1-db6933f807e7",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "64932e2b-9442-498b-a1fa-73ce6be5772e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "580d2d5b-4b55-4add-be61-207631659f03",
        "cursor": {
          "ref": "fd55599a-0de5-46ff-b885-4759e03bf9e2",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1e97327c-22df-4a56-93ee-04f62108b741"
        },
        "item": {
          "id": "580d2d5b-4b55-4add-be61-207631659f03",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "4d8428ce-1650-43ee-9d5f-b4b933621f1b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "5a5fcb83-ec01-4284-8937-c8daa40b96d0",
        "cursor": {
          "ref": "ddb71017-f51c-44d7-8a5a-41c3941cb196",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "54dae9c7-896e-46f5-b455-a912c342e5cf"
        },
        "item": {
          "id": "5a5fcb83-ec01-4284-8937-c8daa40b96d0",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "735c9bbb-b28d-41b0-9d4a-1d5df3e4d8ea",
          "status": "Created",
          "code": 201,
          "responseTime": 2130,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "55199988-55bf-4fb6-85f8-8feaa4aa3d9b",
        "cursor": {
          "ref": "70b6c5f8-5078-47b1-8f7e-067105f31bee",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2fd1bcf0-7b4e-406d-84ca-6d0512cc9b37"
        },
        "item": {
          "id": "55199988-55bf-4fb6-85f8-8feaa4aa3d9b",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "5c232b07-bb94-4894-af67-c03a952ffa54",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "ba825ae9-3988-4b50-8196-8209e3a8c2da",
        "cursor": {
          "ref": "71e503d5-22b3-4f3a-8a38-05f750e2e6ed",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "449e47f6-7f88-472e-857a-4dab302f6738"
        },
        "item": {
          "id": "ba825ae9-3988-4b50-8196-8209e3a8c2da",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "06779889-b447-4946-8ba9-3523847a050b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73cc5f61-7eba-4229-96c6-7bd7974cbc7c",
        "cursor": {
          "ref": "17e1c4cc-e7aa-4ff0-94aa-11e6effdb9eb",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "66b779df-46ec-4796-aba7-bed3305f4714"
        },
        "item": {
          "id": "73cc5f61-7eba-4229-96c6-7bd7974cbc7c",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "f200d0e5-5d5d-4c6e-bac9-39b7ec99b1bd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "5b728075-e14f-45c3-88ea-5f349febaa79",
        "cursor": {
          "ref": "26c8ecb0-98aa-49ce-b904-00534f5ef9bf",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "66860c6e-514d-48b4-ab53-3f3fbb0b4080"
        },
        "item": {
          "id": "5b728075-e14f-45c3-88ea-5f349febaa79",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c41b4b57-2d6b-4605-a06a-7a127027c842",
          "status": "Created",
          "code": 201,
          "responseTime": 1566,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "b6517c48-afa4-4370-80b6-c60633e83a62",
        "cursor": {
          "ref": "eba3b301-cae9-45e7-b3df-6e650f92be49",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "4738ef26-0a07-4fd1-9481-a2d3bdba3a2a"
        },
        "item": {
          "id": "b6517c48-afa4-4370-80b6-c60633e83a62",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "2d180cd9-1884-452d-afac-b2a7be9919b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "cb296fcb-0287-447c-a572-0e0150339b62",
        "cursor": {
          "ref": "dfce7eb0-11a6-4acf-a9cc-635679eff60b",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "53baaaec-fabd-4d7c-a0e7-85a6296d82ed"
        },
        "item": {
          "id": "cb296fcb-0287-447c-a572-0e0150339b62",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "bd0af1c9-035f-49f8-9cac-84156e25d15a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1272,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "45d5d876-a8b7-4061-86b9-9f3a9553aa60",
        "cursor": {
          "ref": "12076830-a8e1-43a1-b586-47b08f595f69",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d33e436a-92fb-4fb3-9e7b-8b6b661c73f2"
        },
        "item": {
          "id": "45d5d876-a8b7-4061-86b9-9f3a9553aa60",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "93090918-4150-47b4-86bd-312f3d182a7b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 91,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "de7a3ea2-0b1f-43d0-a472-e236e5032834",
        "cursor": {
          "ref": "7f9fe9b4-2282-4502-b32c-57a5739ba2d0",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "192b3bc6-d507-4470-ac3d-160302152f12"
        },
        "item": {
          "id": "de7a3ea2-0b1f-43d0-a472-e236e5032834",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e91a240b-0032-491c-8910-a963ac1cfc72",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "7ce3434d-e5f5-41f5-a1e7-79ca6d160490",
        "cursor": {
          "ref": "d3560004-a142-4ad5-94af-10b618527a16",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "9cd70413-4c60-44e8-9344-9152e46f99e5"
        },
        "item": {
          "id": "7ce3434d-e5f5-41f5-a1e7-79ca6d160490",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b0edd748-484f-4ad3-a88c-7accdd9b7eaa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "edfbb7e2-5148-49e4-af9d-695678bcf6b7",
        "cursor": {
          "ref": "977aa154-f023-45ff-a335-4fbb3f76c208",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7af7b158-02f7-4856-a727-e7a7eef41414"
        },
        "item": {
          "id": "edfbb7e2-5148-49e4-af9d-695678bcf6b7",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "42fed78d-b376-4330-b30c-4019fc5eb643",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 91,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "86c51014-c67a-4d53-98a9-3a725fe10819",
        "cursor": {
          "ref": "aa1632ee-8704-4531-9fff-247c50e52275",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "7a1eeff4-0ec6-4a33-aac3-dd61f77fe2ca"
        },
        "item": {
          "id": "86c51014-c67a-4d53-98a9-3a725fe10819",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "84030084-2786-421d-a16e-d5512a68829d",
          "status": "Created",
          "code": 201,
          "responseTime": 1480,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "54a2d81e-75fc-44a4-aab2-2aab74e656cd",
        "cursor": {
          "ref": "3a2a333a-9858-4c11-90de-b858c649b1ac",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ee838eeb-ee50-4afa-abcc-35ab04886368"
        },
        "item": {
          "id": "54a2d81e-75fc-44a4-aab2-2aab74e656cd",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6e000d20-059b-4235-b055-684b681f6b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd5a82ef-675b-4fce-97d8-6144071c97ac",
        "cursor": {
          "ref": "fde75f9a-9332-45fc-acd2-fff971f9312c",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "6f63c249-032f-4854-b831-a6e4153b86cc"
        },
        "item": {
          "id": "fd5a82ef-675b-4fce-97d8-6144071c97ac",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e8acdbd2-d80d-4e7f-b642-2c1ef8d1c33f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3573ea70-0e20-485c-b5ff-cd878e3799fd",
        "cursor": {
          "ref": "4a790287-9da7-444f-9052-024f34f953a5",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c08c8c04-e71a-4cf7-9537-49103ce602db"
        },
        "item": {
          "id": "3573ea70-0e20-485c-b5ff-cd878e3799fd",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "86a260d5-e3e7-487a-afe5-966718990841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caca7e75-8c8a-4493-b9ee-37c1072fb8a0",
        "cursor": {
          "ref": "b5ba0859-3d3b-4b27-aa29-73a96d777655",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "25ed3c16-6258-45dd-bfb8-5299b417f6b5"
        },
        "item": {
          "id": "caca7e75-8c8a-4493-b9ee-37c1072fb8a0",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "bc3470c6-55cb-4685-a61d-aa8edd7a6845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bef3aae-5ed6-40a3-92f9-1cfa9f2fde8e",
        "cursor": {
          "ref": "1616a349-ccac-4281-82e0-7b2d1f467f6f",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f312596e-b452-44c0-b8ae-a6f8bdaf7315"
        },
        "item": {
          "id": "6bef3aae-5ed6-40a3-92f9-1cfa9f2fde8e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5c26a47f-d42a-470c-ab57-645cf6cc7ef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d6bd6c-c088-4e1e-b57b-19ebbaf35419",
        "cursor": {
          "ref": "a785695f-20cd-472a-bcab-a90f65280a23",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c7813fe2-b194-4078-9cd3-8c9eb4820af9"
        },
        "item": {
          "id": "c9d6bd6c-c088-4e1e-b57b-19ebbaf35419",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "9fa83df9-abb4-45d9-a8ce-e05366c30de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "333ac341-111f-4855-8638-b2ad3c0c107d",
        "cursor": {
          "ref": "44440044-eb65-468b-9472-75b09e487482",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "dfb74669-c6ce-4c79-a939-03d92d5e07b6"
        },
        "item": {
          "id": "333ac341-111f-4855-8638-b2ad3c0c107d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "555a9a4a-5b3f-4f19-93b0-c3cba7e5bcba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf1852a4-e766-4278-8e0a-f0b11ba59327",
        "cursor": {
          "ref": "e12c411d-4197-49b9-ba8b-5b728f18c816",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6193d185-fecf-4db8-b61a-f9d0a1e9ca8f"
        },
        "item": {
          "id": "cf1852a4-e766-4278-8e0a-f0b11ba59327",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "298c7358-909c-4828-83cb-4387e54c7e28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfaeb281-3fe1-46f2-91a5-d22a86fafea0",
        "cursor": {
          "ref": "efd1203e-f173-4161-9523-475627cf90bc",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "fbb4b8e7-c013-4ae6-907a-34ac2e1c4702"
        },
        "item": {
          "id": "dfaeb281-3fe1-46f2-91a5-d22a86fafea0",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "338be57f-ee67-4b1e-8ecc-df91bd0db2a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9d06d94-092b-483b-a28b-fe2f06c752d2",
        "cursor": {
          "ref": "f82ecdc7-de6b-4c2b-897d-0f6a0efd9371",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5478529b-6ffd-4ac8-ad4d-3bd5dd61c3a2"
        },
        "item": {
          "id": "e9d06d94-092b-483b-a28b-fe2f06c752d2",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e224eaed-37cb-411d-9beb-1efc8b4b16a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd9699a-8636-481d-9289-12b51e47f311",
        "cursor": {
          "ref": "e54b2f78-9fa7-447c-bcdb-f0723f49c102",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "62c8b762-5d7d-428c-90f1-5298f0420cbd"
        },
        "item": {
          "id": "dfd9699a-8636-481d-9289-12b51e47f311",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "278b954b-ec2b-4eee-9097-13dc71ee9cfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf1944a0-da7f-4357-8263-0da5703a4e19",
        "cursor": {
          "ref": "675f342c-302b-4cf7-8c0f-4e72e561f454",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "efa8b568-9399-4176-9ad3-e54dd9a9f3e9"
        },
        "item": {
          "id": "cf1944a0-da7f-4357-8263-0da5703a4e19",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "19b4fdc1-448d-4e36-a004-40c172fe2039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5839c19e-4594-4da7-8e54-dc6c33ec1f85",
        "cursor": {
          "ref": "107fcb5c-3b1f-48ab-bbbb-7e2d761bdcb6",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "65bda41c-9abe-4962-845f-e0347909a4c7"
        },
        "item": {
          "id": "5839c19e-4594-4da7-8e54-dc6c33ec1f85",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "986a4436-0c41-48db-9198-c8ef8ce89eb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d813c70f-22ae-479b-bbe6-8a9cdd33ae7a",
        "cursor": {
          "ref": "d9f468e6-efae-445c-befa-a7681b57ea57",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "233c30ed-7f50-4f2a-895e-69099b2f9c90"
        },
        "item": {
          "id": "d813c70f-22ae-479b-bbe6-8a9cdd33ae7a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "69af331f-04df-442d-a296-bf82098723fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1214,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "0480e950-07eb-42da-813f-994c430ed2bb",
        "cursor": {
          "ref": "9c01023c-3600-48cf-ac30-53fbfadbfa23",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d8076b24-b975-43db-b1bd-30459f6a46c3"
        },
        "item": {
          "id": "0480e950-07eb-42da-813f-994c430ed2bb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b17223fd-536a-453d-89b4-7a15841dab69",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1207,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "e42a3e2e-6d89-4023-a2a1-1e8ea55eff87",
        "cursor": {
          "ref": "22221fd9-7cf6-471f-9416-6c4df42ab18f",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "94c79595-1922-4120-9cd9-f23c451e62b1"
        },
        "item": {
          "id": "e42a3e2e-6d89-4023-a2a1-1e8ea55eff87",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "69862677-a9bb-4649-91af-d9cd4089629a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "1160ae27-6b02-4c8f-8a7a-6a96c95fcfda",
        "cursor": {
          "ref": "403c33cc-5f01-4e7b-b9a7-83838e335e50",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "8acedaf2-dc94-4441-812f-b6fb6c95cad3"
        },
        "item": {
          "id": "1160ae27-6b02-4c8f-8a7a-6a96c95fcfda",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "3e786004-74be-4a4a-85fe-572b416c03ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1237,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "fbf5885f-af08-4b99-b1bc-8bef509a9636",
        "cursor": {
          "ref": "cd183e92-12bc-49d7-b042-ae45bcfcbb62",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "e2777990-1297-4727-ac8c-f416e30e215d"
        },
        "item": {
          "id": "fbf5885f-af08-4b99-b1bc-8bef509a9636",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "9ecbf363-a6b0-4ad3-9b27-a7ef66cecd48",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 103,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "83ff786f-7b72-4f90-99fc-bcbe3939570f",
        "cursor": {
          "ref": "71df8da4-c572-46d5-91cd-a728159642a4",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "504d94f5-21c8-49c9-aae7-74ff422e6a77"
        },
        "item": {
          "id": "83ff786f-7b72-4f90-99fc-bcbe3939570f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "4a31368d-dcc5-40f4-9bb8-4057aaaa27cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c179d38-0be3-405c-ae5c-c68ca9a0ecf0",
        "cursor": {
          "ref": "77161540-a944-415c-83b9-f4aaaf586042",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "9d4d7280-1864-4f5e-aaea-dd4389d0a09e"
        },
        "item": {
          "id": "1c179d38-0be3-405c-ae5c-c68ca9a0ecf0",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "733007f5-41fc-45ab-b6ef-8edb38cd5d4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7921ceb4-2178-4f2f-844a-7ba8bfcd9239",
        "cursor": {
          "ref": "dbd778dd-9c66-4eb9-905d-b042b19aaa45",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a0eb2266-62bd-483d-b198-93c4e685459b"
        },
        "item": {
          "id": "7921ceb4-2178-4f2f-844a-7ba8bfcd9239",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "e944de97-260f-4048-a0db-31ce7890e345",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f7d9421-4e55-4236-93b0-1b6105777246",
        "cursor": {
          "ref": "03210d74-0a79-48ae-b84c-e2e9bb72ce44",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "73ac54a5-764d-4626-9a92-44916498d5b5"
        },
        "item": {
          "id": "0f7d9421-4e55-4236-93b0-1b6105777246",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "04a0b3d8-3f56-41a6-b83c-fda21d293b72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef402d14-9cbc-4f8f-9aff-1f65d71151a7",
        "cursor": {
          "ref": "d4aaadb6-9e62-4570-b2d6-8d5bf1b8b871",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e81e1535-bf8a-4c6a-9f15-ef6711ce0c57"
        },
        "item": {
          "id": "ef402d14-9cbc-4f8f-9aff-1f65d71151a7",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "182f16f6-c447-4b6c-aa25-94b092af985b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da04e2ec-6128-4e44-903a-979f743e834f",
        "cursor": {
          "ref": "9f097d66-b21d-48f8-a8e3-ef983bd0e6a3",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "954f9a74-c1a4-4033-b0d8-e016db485528"
        },
        "item": {
          "id": "da04e2ec-6128-4e44-903a-979f743e834f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "0ec34755-0c58-458a-ba3a-cc60d2313ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f8598e9-66b2-432c-bc08-14d0e2a9e020",
        "cursor": {
          "ref": "c0252309-cd6a-46c9-b5ae-1624c7f23178",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "bdd9916b-b254-46e4-96aa-06aef1b9bd85"
        },
        "item": {
          "id": "0f8598e9-66b2-432c-bc08-14d0e2a9e020",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b4751709-1514-4792-9bd4-9f0d022fe7a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83b608c6-b60d-4bd2-954b-dd31d61c1aba",
        "cursor": {
          "ref": "81cd24f3-e218-4922-a904-639bf4f56411",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "6c13d98d-5435-4fee-b708-68b8b4b0bf23"
        },
        "item": {
          "id": "83b608c6-b60d-4bd2-954b-dd31d61c1aba",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "637af731-4436-4614-9bc6-10465399dcb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f12a5733-53ca-4777-ac44-35c836bfecad",
        "cursor": {
          "ref": "312e9d54-7e3a-49eb-bb35-fdd2e3dbd437",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "014a6e7b-33f1-4dc0-98c2-fb9a4de4a192"
        },
        "item": {
          "id": "f12a5733-53ca-4777-ac44-35c836bfecad",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "1992a88d-30a1-4b4a-babb-0bfe53ad2711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7bceb17-3769-43a8-887a-5dce06b4142d",
        "cursor": {
          "ref": "e2b35647-de89-4604-b525-f114aec8411e",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d743740f-f3d0-4359-80ef-42a0ee5e352f"
        },
        "item": {
          "id": "d7bceb17-3769-43a8-887a-5dce06b4142d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "8d1d32e3-3f10-41db-8045-1ce1f5282939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef2b2bb4-acfc-4c27-9043-aa8aaa55485a",
        "cursor": {
          "ref": "6ea4ec8a-c729-442a-bde2-fd8da7dd2e63",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "277f90b1-4b75-4f10-bcf4-417c3cb4204b"
        },
        "item": {
          "id": "ef2b2bb4-acfc-4c27-9043-aa8aaa55485a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "63a17070-61b3-4009-b9ef-3945aa5c24cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98d46acc-79d1-453d-8d04-314ab89da288",
        "cursor": {
          "ref": "00b0f45d-fbf2-43aa-899f-5f65a5bf87d9",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "0e6b27a9-2a39-4f39-9543-b3484aaee265"
        },
        "item": {
          "id": "98d46acc-79d1-453d-8d04-314ab89da288",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "0d8e2ed8-e90e-4ac0-998b-e700a30db6d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9600c26a-e941-4710-812a-04d4b786ef02",
        "cursor": {
          "ref": "3a5176ca-d51b-4ec2-91d3-749f28c1d25c",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "45121f79-71a0-4b0e-95ce-a0456c3922a5"
        },
        "item": {
          "id": "9600c26a-e941-4710-812a-04d4b786ef02",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "657edc0b-5327-4377-b13d-1f9a6df6b83c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cf039a0-4c3f-4e59-8257-2459a009fe7b",
        "cursor": {
          "ref": "68b996c0-7da4-4dd9-a198-6089c25f762a",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c0f47a2a-2d75-4427-84f3-26f7a1b62e19"
        },
        "item": {
          "id": "0cf039a0-4c3f-4e59-8257-2459a009fe7b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "16fb392c-05cb-4ba2-9036-b9a2a4e43ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ba3d6c1-1751-4a00-83b3-6d8a52a6fb03",
        "cursor": {
          "ref": "0d8e797d-5063-4ffc-ad24-1f5fb0f6053c",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8e4f248c-4cc5-44a4-bc67-3d20fc3eb42f"
        },
        "item": {
          "id": "5ba3d6c1-1751-4a00-83b3-6d8a52a6fb03",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "245b4fa5-de10-4cee-9224-98ed4a6e1c30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60da4bd6-0345-4dfd-9ad8-54157c5fdde9",
        "cursor": {
          "ref": "7c006626-d5a8-42c0-b686-f9b0ec01ecde",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ddba83c5-9d46-481c-8b17-0c193855e20c"
        },
        "item": {
          "id": "60da4bd6-0345-4dfd-9ad8-54157c5fdde9",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c13a4549-0bf1-40c6-b55b-8377e3fe8bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ba67f97-561d-4621-917a-a85bf20ea00f",
        "cursor": {
          "ref": "2484e771-7632-49df-b7f9-fd7cb055e52b",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "e3b1b2e5-de6a-4e69-a699-b7c261b81d6f"
        },
        "item": {
          "id": "5ba67f97-561d-4621-917a-a85bf20ea00f",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c3fe7ca1-6329-4704-8ca2-088c1fbd4427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96181c7c-9f10-4f7a-923d-086b5d33e65e",
        "cursor": {
          "ref": "f0e802a1-9a0e-4714-9ae5-5106d573e7a7",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "cb6bcade-fcdd-4714-b7ba-043edd2aedd4"
        },
        "item": {
          "id": "96181c7c-9f10-4f7a-923d-086b5d33e65e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "13d43bc8-53bf-4f62-9a67-c1a1be1a6766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea205c5d-9c7e-454b-9a7e-25d4535440a7",
        "cursor": {
          "ref": "eb2422c2-59a8-4b18-9080-784e1c4d48ff",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "efeee3bb-a658-422d-a7ea-de029fda71c4"
        },
        "item": {
          "id": "ea205c5d-9c7e-454b-9a7e-25d4535440a7",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "8bf88312-0ef8-4c45-8f4e-ce1abd936056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc3bc47-f626-42c4-94d0-6742444b978b",
        "cursor": {
          "ref": "71a82579-c55f-4ae9-aca4-0b287716ef14",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "09e99744-8ac9-4a47-b785-c2cfd8a6496a"
        },
        "item": {
          "id": "3bc3bc47-f626-42c4-94d0-6742444b978b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "9a9a7fa2-dfec-4e19-a742-d3152c2d3de6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d4a9a8d-7486-4d50-a76f-1586b36b1e57",
        "cursor": {
          "ref": "3ab80816-29ae-4854-aec7-042c7637d8d2",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "09022e04-cc36-4033-ba76-d43dc6613f1b"
        },
        "item": {
          "id": "3d4a9a8d-7486-4d50-a76f-1586b36b1e57",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d1e5b0c2-121d-4213-8ffc-a07f8fe050ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c65599c0-e590-4687-b643-2cc29eef377f",
        "cursor": {
          "ref": "2de77c1d-8a29-432d-ad52-91c2053aed06",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ffd7f36c-fefb-4706-9d5d-e5673e25a35d"
        },
        "item": {
          "id": "c65599c0-e590-4687-b643-2cc29eef377f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "359205c2-71c2-48b0-b89a-578552bda4e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb149c80-62da-4716-a56f-e6f7c3bae4ec",
        "cursor": {
          "ref": "1289dfb8-6f66-4b82-b49c-661fce82ae92",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "8a25c869-4aad-433c-85e8-292930c3a55c"
        },
        "item": {
          "id": "cb149c80-62da-4716-a56f-e6f7c3bae4ec",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "bae33280-6272-4338-a0c6-278b8c3457e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d8168f-1a83-489d-8418-b35a524590ab",
        "cursor": {
          "ref": "e924cc18-e4c2-462a-a086-9dcd6db8d0d4",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "2f52c9f0-1a69-4a68-93dc-bb6575fd8bdb"
        },
        "item": {
          "id": "26d8168f-1a83-489d-8418-b35a524590ab",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "31f43c37-7779-4186-a461-b529fd7a407a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e23dc1d5-4eff-4e1f-a383-d13b29a7bf0d",
        "cursor": {
          "ref": "fcc0f0a4-9a39-45ae-8615-e9ba89441978",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "2818cd44-0c7d-4af7-aa6c-d63192304950"
        },
        "item": {
          "id": "e23dc1d5-4eff-4e1f-a383-d13b29a7bf0d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ff7e63d4-7edb-4236-9312-eb2dd4a1bad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cf7d46b-66ba-4318-ac91-ed985e55fc60",
        "cursor": {
          "ref": "6b51d6a3-35ac-4195-9940-ef88d1e8c2a6",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "b7eac3ae-3c29-469c-8b12-9f0a56f86d15"
        },
        "item": {
          "id": "1cf7d46b-66ba-4318-ac91-ed985e55fc60",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "70c9a6aa-eda0-4657-a1ba-b3ee6d7b41b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b01a1771-029a-4256-b8d2-a720e5d75e66",
        "cursor": {
          "ref": "0fabf978-920c-49f6-98e7-225629f115e0",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "da8ad674-7d7b-4443-95fa-16ae83466373"
        },
        "item": {
          "id": "b01a1771-029a-4256-b8d2-a720e5d75e66",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b87a79f7-e203-4d35-97b7-2f3de78a7cab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7bc457d-5ba6-41b1-a597-90474215fcbb",
        "cursor": {
          "ref": "9e852211-d381-41d9-956b-64512644ef32",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "61569123-5902-4c81-9296-2756678f1ba5"
        },
        "item": {
          "id": "a7bc457d-5ba6-41b1-a597-90474215fcbb",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "0b675474-862e-45d3-8475-3c653cb10601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5affad45-f730-49ab-887b-434f18981aca",
        "cursor": {
          "ref": "b6063b8f-b6bf-40ac-8a5d-3420994eed62",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "aca79846-1a22-4313-bb10-6e9bb7bfdda6"
        },
        "item": {
          "id": "5affad45-f730-49ab-887b-434f18981aca",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "9b2660c2-de44-4bd5-93ea-70ad6ada9169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d8d5167-5082-4e46-8a62-8dedc9d25f7c",
        "cursor": {
          "ref": "575402e3-f5c7-470f-88c2-7d198a4487bc",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "05d83f87-7fb2-4988-a156-5220085a2182"
        },
        "item": {
          "id": "1d8d5167-5082-4e46-8a62-8dedc9d25f7c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a3204d8e-4b65-42f0-af2d-d8c407c20782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "822c463d-7d61-41d5-a91d-022182aa4763",
        "cursor": {
          "ref": "cce181e1-12d4-4004-b03e-0ca0535e4290",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "4821fd2a-ab03-4bce-a46d-7de8e12df988"
        },
        "item": {
          "id": "822c463d-7d61-41d5-a91d-022182aa4763",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "93f0316a-6685-45e9-a4cc-05f6df918f19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd2d821b-6ad5-4f4d-8bbd-5ea50bf0ddc3",
        "cursor": {
          "ref": "2928b8e3-a526-40d8-94f6-fa94a769f271",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "6283ba0c-d9a4-474b-89f3-6157d3cf74ef"
        },
        "item": {
          "id": "dd2d821b-6ad5-4f4d-8bbd-5ea50bf0ddc3",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a4f1ab3a-b43c-479b-8ef2-813fb35c52bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31851b5e-6bb6-4631-8ece-cb4aecf25368",
        "cursor": {
          "ref": "89b03b2b-2fed-4031-b819-7467b6046ac4",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f6c7fec7-fb68-405e-bb49-f47d4f44e9a4"
        },
        "item": {
          "id": "31851b5e-6bb6-4631-8ece-cb4aecf25368",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c9ccac75-8899-4aaa-ad4d-ad3ec6245a86",
          "status": "Created",
          "code": 201,
          "responseTime": 1609,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "b63ba479-8568-4cf8-a19f-445bf0ffc2c1",
        "cursor": {
          "ref": "8fece74c-e3f4-49ed-889a-5b0bdff97a6b",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "cda64396-c3de-4708-8739-43b04f570226"
        },
        "item": {
          "id": "b63ba479-8568-4cf8-a19f-445bf0ffc2c1",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "bdd9bbf1-edb5-439a-bd94-f41653aa09bf",
          "status": "Created",
          "code": 201,
          "responseTime": 1470,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f14cd54-1b95-4821-919e-03a824cf0223",
        "cursor": {
          "ref": "7e056d71-eb8f-4c76-b550-99147575599e",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "3c0401c3-7e34-4ef4-b6d5-95233bdb648c"
        },
        "item": {
          "id": "5f14cd54-1b95-4821-919e-03a824cf0223",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "6830e6ee-e8f2-4e46-baff-7ba5d79ea65a",
          "status": "Created",
          "code": 201,
          "responseTime": 1501,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c716bc4e-d8f9-43af-a0c5-6b7db1d6548e",
        "cursor": {
          "ref": "e784a56b-a855-4530-b3fc-d229b5416e1e",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "03943eb6-3f0b-4997-ae1e-c7b6b07be442"
        },
        "item": {
          "id": "c716bc4e-d8f9-43af-a0c5-6b7db1d6548e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "68bb32a3-55c7-4e21-815a-f8031a8258cf",
          "status": "Created",
          "code": 201,
          "responseTime": 1426,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ccb92a2-d1ac-44c7-b6c8-e1acae3229d1",
        "cursor": {
          "ref": "be266798-0734-4962-8e76-38a6c9488e8e",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c625c8bf-d0ec-4306-9dda-db2110b0e974"
        },
        "item": {
          "id": "1ccb92a2-d1ac-44c7-b6c8-e1acae3229d1",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ec4e140f-db8f-4556-b23e-5581c72928ae",
          "status": "Created",
          "code": 201,
          "responseTime": 1450,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea3001d2-9117-447c-9364-254d08c41b87",
        "cursor": {
          "ref": "c59ab544-ae53-427e-b5a2-321723cc6c42",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7a12af28-787b-430a-bc41-9620e5d2aaf7"
        },
        "item": {
          "id": "ea3001d2-9117-447c-9364-254d08c41b87",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "8c3e8d3e-1725-44e4-b7b7-e2bed309de1f",
          "status": "Created",
          "code": 201,
          "responseTime": 1591,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f6845b6-279c-4100-9afa-0a7d635320b8",
        "cursor": {
          "ref": "f3496339-9f13-4620-981a-f4165e77242b",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "43fc3014-20fa-4ce0-9507-1a33def3d7a3"
        },
        "item": {
          "id": "9f6845b6-279c-4100-9afa-0a7d635320b8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "641913b0-1e5e-4f35-8d55-859243116cce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e838005-d07f-4a7a-a2db-a44117209dff",
        "cursor": {
          "ref": "1618880d-1148-4127-b275-972574e41d2a",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "d67cbc30-f28f-414c-a232-f8c21913dee0"
        },
        "item": {
          "id": "7e838005-d07f-4a7a-a2db-a44117209dff",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "9e6df37e-4a9b-4787-9b03-de13dc231365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47374b19-5f78-47e3-9db1-e3408fb2f455",
        "cursor": {
          "ref": "4c2bd5fd-eb99-4198-9030-5f254fe9af54",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "8aa94d02-2097-4645-8768-8c472180173c"
        },
        "item": {
          "id": "47374b19-5f78-47e3-9db1-e3408fb2f455",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d07306b6-d18c-40d6-a1ca-9378a8af0d04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81ee3f49-eea2-48cc-85c4-7f453cb9b850",
        "cursor": {
          "ref": "c78c6a62-8afb-4539-a63e-3919de627cd4",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c82e9ae0-cf41-4cb6-ac4c-fe5cda3c3ff5"
        },
        "item": {
          "id": "81ee3f49-eea2-48cc-85c4-7f453cb9b850",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "40bb7f9a-9f5c-4bbc-a77c-1c01a4ee2013",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df81b993-6fcf-4dc9-ab73-8047a74a3e3b",
        "cursor": {
          "ref": "95623a27-d8f4-4205-be31-fd4615db6080",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ae01fab8-b647-46ca-b9c2-562010f68f3b"
        },
        "item": {
          "id": "df81b993-6fcf-4dc9-ab73-8047a74a3e3b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f095d142-d46c-4653-8ac0-b9e378d032b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc11cbf-b6fa-4d7b-8589-520b69a659af",
        "cursor": {
          "ref": "737b1f93-5912-4409-8d32-74c4405efa8f",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7f9d6782-0bf5-4211-9c36-bb53e8be50d0"
        },
        "item": {
          "id": "bdc11cbf-b6fa-4d7b-8589-520b69a659af",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "dc73dfe4-fa30-4535-9428-3fb7d1ef71e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bfb1540-f380-4db0-8447-49d6ffbe1135",
        "cursor": {
          "ref": "b1371688-ac85-4c1f-afb1-eb8db6531bc0",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f1f65ed1-7827-4474-9a5d-1d7b2a1c7971"
        },
        "item": {
          "id": "2bfb1540-f380-4db0-8447-49d6ffbe1135",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1ee89608-58d0-4eac-91df-8fe492f9f4cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa8b7217-19a5-40a3-bd5c-5d2b3698b62a",
        "cursor": {
          "ref": "9366706a-b874-447e-b44e-7768cb47773c",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "aabe2279-c33e-4d14-8c69-0b592de33ea5"
        },
        "item": {
          "id": "aa8b7217-19a5-40a3-bd5c-5d2b3698b62a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "01806834-f754-4a29-a018-34ac3887a8fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f77c92b7-35f4-4ad2-8c35-0fc765657b53",
        "cursor": {
          "ref": "f03419f3-29d1-4dae-b6ba-e7f0f047b56e",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "5d86a579-c6d3-4a8a-abfd-9e4dc6902701"
        },
        "item": {
          "id": "f77c92b7-35f4-4ad2-8c35-0fc765657b53",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7f1cb5d8-da76-421e-bad8-3f074a0756e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "559479a8-8b72-4cd8-8c88-849b9f9bdfdc",
        "cursor": {
          "ref": "c2dd04b5-f36e-47ea-96d0-d84e5a7db356",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "acc926b2-a517-404f-bb4f-8c60f14ca8f9"
        },
        "item": {
          "id": "559479a8-8b72-4cd8-8c88-849b9f9bdfdc",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "de052afa-5819-4d40-924b-4bd06160bb9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6578dd1-e6a7-4f31-a215-89262ba28908",
        "cursor": {
          "ref": "f08fd20e-2745-4bc5-bff0-569b8b778c30",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "5a570e7d-9d61-4ac5-a1ec-2e50288162b9"
        },
        "item": {
          "id": "d6578dd1-e6a7-4f31-a215-89262ba28908",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "837bdac3-9101-4c65-aa54-85c961339940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "987d8daf-2fad-41f6-bdd2-eb2158cc96a8",
        "cursor": {
          "ref": "7691078c-3bd7-45e2-ae47-1cf59e2ddaa9",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ac797b15-a5df-475a-8d31-5ab1bfe8e322"
        },
        "item": {
          "id": "987d8daf-2fad-41f6-bdd2-eb2158cc96a8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f12b6371-f204-4709-936e-9352ad0e9e53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b7a331d-8396-41f1-b5fd-d4081bc0f7ab",
        "cursor": {
          "ref": "bb766e2c-9c8c-4d2c-9b17-28ce34e7c2d7",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ffabbcc8-8402-43e6-9a1c-53207d0a7368"
        },
        "item": {
          "id": "7b7a331d-8396-41f1-b5fd-d4081bc0f7ab",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ec189deb-7a43-421f-a861-281728ce43cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5667463-f5bc-4db7-8a8b-c0082347810a",
        "cursor": {
          "ref": "b3e60f8f-1266-4d70-8640-8ce9b99782e0",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f6340360-7347-42e8-a6fe-d66b42691e24"
        },
        "item": {
          "id": "c5667463-f5bc-4db7-8a8b-c0082347810a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9d777855-6c88-4799-875d-0ff58ff8c768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a477a7a8-0388-499e-ae08-95f82dfc724e",
        "cursor": {
          "ref": "f67a5b26-0418-4bed-9b50-1c4c6f4215fd",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "6a950a0d-2ea6-45f5-8a8b-07baffb35bd8"
        },
        "item": {
          "id": "a477a7a8-0388-499e-ae08-95f82dfc724e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1759037c-6cec-4fba-8596-6c21945635f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83375cd5-8231-4919-9753-83ea9067b5f6",
        "cursor": {
          "ref": "291b1765-f4bc-4330-874f-c81289f2a30f",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b671b069-4cf5-4fba-aa39-ecc51c82b9e3"
        },
        "item": {
          "id": "83375cd5-8231-4919-9753-83ea9067b5f6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a84f83c1-5aa0-46da-88ed-ece44b5304b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e9501ce-f375-40c1-86ca-684b5b4ae103",
        "cursor": {
          "ref": "432626f4-cd0c-4d12-ba63-8e617dfd3371",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "864d6c69-ad34-4a25-9140-98147039e9b9"
        },
        "item": {
          "id": "7e9501ce-f375-40c1-86ca-684b5b4ae103",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "17224eba-51d6-49d9-9789-66e0e787f722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d82d78a4-ae52-448d-952d-4f72a3862518",
        "cursor": {
          "ref": "b83c33d3-99b2-451f-8268-b17b00d02f68",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "636c2c00-5174-4b4c-baaa-0c585038e108"
        },
        "item": {
          "id": "d82d78a4-ae52-448d-952d-4f72a3862518",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2b1c6279-bab5-413a-acc5-294512821714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9962e42-643c-4cc1-8002-20b328fcf292",
        "cursor": {
          "ref": "5ce21103-91b0-4e69-bdbc-db4c25fe29f4",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "6166dc80-233c-4289-833b-7ab77c2f765b"
        },
        "item": {
          "id": "c9962e42-643c-4cc1-8002-20b328fcf292",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "bfbbd0bf-4519-45c3-9af3-31514749648b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f434ab20-79cc-4d56-8381-3f7b10ffe265",
        "cursor": {
          "ref": "21463448-3f90-4bc8-82d9-e233f0681432",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8cff724b-1a47-465a-b39d-bc8af3e53869"
        },
        "item": {
          "id": "f434ab20-79cc-4d56-8381-3f7b10ffe265",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "931e68e2-13df-495e-a9d9-bd6024904b37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78df21fd-d1a7-4b4c-867f-5cc23a643b30",
        "cursor": {
          "ref": "db470219-80cf-4867-858a-24afe771c5d7",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "3e72c219-0eb3-4263-adbd-2feea1566ceb"
        },
        "item": {
          "id": "78df21fd-d1a7-4b4c-867f-5cc23a643b30",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "45d9efeb-64f1-47bc-820c-44ba9794ef59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c42a551-2eb5-4465-bc2e-c0f19ed8819d",
        "cursor": {
          "ref": "0be084bb-5de3-4e85-b2d6-0ef52fa74dad",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6eddb136-e7b8-499c-8dc4-af7f229ab89b"
        },
        "item": {
          "id": "4c42a551-2eb5-4465-bc2e-c0f19ed8819d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6ec2d5ff-2315-41d4-8882-5cabf31892e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b987818-3f3e-4538-bf62-ee0588978fb2",
        "cursor": {
          "ref": "9ca6e7d2-9b79-4c92-b66e-803ad5d94d2c",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "1793dc87-5826-4193-a286-0a8701924edd"
        },
        "item": {
          "id": "2b987818-3f3e-4538-bf62-ee0588978fb2",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "1e067a89-31e2-4b01-ab0b-a853794f238d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bc720bb-3e52-4db7-a90c-a6adecbe4aa4",
        "cursor": {
          "ref": "95eb9d5d-6423-4e01-b217-f8c751aad40c",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "4c4e471f-8038-4060-9362-423396f0f4a1"
        },
        "item": {
          "id": "7bc720bb-3e52-4db7-a90c-a6adecbe4aa4",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c117f016-e616-47f8-9330-6c675485858a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4cf4b90-a057-4810-aaa0-9997a2fef9ce",
        "cursor": {
          "ref": "68f521ef-57ec-4e23-8a08-fcc55ed1050b",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "82af54a9-9de0-4ee2-b4f5-8c14e37c13de"
        },
        "item": {
          "id": "b4cf4b90-a057-4810-aaa0-9997a2fef9ce",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "fa13730b-d15a-49a3-ba96-9367f0d3c275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa95ecb-6ccb-4f93-8a22-6b06268bca4a",
        "cursor": {
          "ref": "10c94d11-ddca-4db6-81b8-9c9810f662c1",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d8f7b8b4-f019-4024-aaf5-8195d36b4c03"
        },
        "item": {
          "id": "efa95ecb-6ccb-4f93-8a22-6b06268bca4a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "576d899a-5963-4378-b042-5a1db2a75523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "078e2f2f-c6fc-4052-8f4c-becf2b9eb8d1",
        "cursor": {
          "ref": "fb8b593d-2e77-44c8-807c-7d89565012d6",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "aaf0515f-3fc0-4b84-af1d-e47caa5ed83e"
        },
        "item": {
          "id": "078e2f2f-c6fc-4052-8f4c-becf2b9eb8d1",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ed334ca9-1c0e-4da8-9f00-5e2efcda653a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "542b3f0e-3f85-4c25-b011-5fc327076164",
        "cursor": {
          "ref": "c771cd1b-0b69-4491-bc31-04bfad04b057",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c769a35c-03b8-4e6c-a41e-66c866615264"
        },
        "item": {
          "id": "542b3f0e-3f85-4c25-b011-5fc327076164",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0c78ec6e-2701-48cf-acfe-df4552f842bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c81e939-f258-49d6-9ad6-93832c2add67",
        "cursor": {
          "ref": "25c07bb8-271f-4145-ac33-5df920e22397",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "c9cee273-a5b4-44d9-832d-4faae8ed7ef7"
        },
        "item": {
          "id": "5c81e939-f258-49d6-9ad6-93832c2add67",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7422dbf2-2cf9-447b-a40d-317fbcd44206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfcc662d-54c7-4d5a-82d5-63f249fec94b",
        "cursor": {
          "ref": "2c108eed-80ad-4be6-a639-6b97039edf19",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "33e4e406-31a2-490c-a23d-db0c10bd9d58"
        },
        "item": {
          "id": "bfcc662d-54c7-4d5a-82d5-63f249fec94b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "32955506-ac38-4596-b402-f7404c702075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35775dde-db83-488b-84a7-98d89ea91057",
        "cursor": {
          "ref": "9c4226d5-162b-4035-8e42-fae12521e0e0",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "7b402ebc-909a-4278-b959-4bdc4c19ce61"
        },
        "item": {
          "id": "35775dde-db83-488b-84a7-98d89ea91057",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "986b3494-55eb-4626-a2c2-64c0a4521338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e29b96-5339-41f2-94ba-bd29f5a68418",
        "cursor": {
          "ref": "2aff77ac-204c-4339-b0cb-f827848c71d8",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "9b5bf622-ff60-4686-8962-993e86c37a6e"
        },
        "item": {
          "id": "54e29b96-5339-41f2-94ba-bd29f5a68418",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "49f02b5a-b543-4b3d-81b6-0757b61a9712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb8168a8-d591-40e2-a8fb-f58c2931788a",
        "cursor": {
          "ref": "2f565329-731c-4a95-9ee4-34e59b4370a1",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "c84ec696-64a7-42e4-a4d8-e7c7c564af5c"
        },
        "item": {
          "id": "bb8168a8-d591-40e2-a8fb-f58c2931788a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "27f924de-4b22-4b53-b3b7-7f5532d58578",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef8db5dc-8703-4afe-a27d-85d3885b1aae",
        "cursor": {
          "ref": "d6b6d64c-9e39-4f91-b7f1-34a1cb0f2c4c",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b75a485c-d8fc-4cfd-aded-bd168dc8c379"
        },
        "item": {
          "id": "ef8db5dc-8703-4afe-a27d-85d3885b1aae",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2d097746-d71f-4201-a4c7-5a016cb7259d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4da73560-eddf-4e72-8bbc-804c8aa38014",
        "cursor": {
          "ref": "e207e724-b8b6-4468-b71e-845ba87e462a",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6bf31172-5df9-4afe-b3bc-48d5c1f02822"
        },
        "item": {
          "id": "4da73560-eddf-4e72-8bbc-804c8aa38014",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a9b99627-4b00-4fbe-9b0e-b0fc7ad04576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c28c9a0-2cf7-4c8b-a885-69fd194ebd0c",
        "cursor": {
          "ref": "53952c9a-60e9-4dfd-bbbc-382c4fff15c7",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ec8dc06f-f9ae-4543-89ff-fe9a123d0d63"
        },
        "item": {
          "id": "1c28c9a0-2cf7-4c8b-a885-69fd194ebd0c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "53714246-f1a8-4a15-aeac-9fe1e1ae47bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b3bb56-6ece-4fd1-a9e0-5b9faa8c2157",
        "cursor": {
          "ref": "1c60f7b0-fa18-4f58-98be-c24b9fbfbb4d",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "decd1970-b05f-4810-a57f-c14dfb40d57f"
        },
        "item": {
          "id": "d2b3bb56-6ece-4fd1-a9e0-5b9faa8c2157",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "60f2a22d-1d71-4766-a997-96e2f9fd1556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c9f0788-6158-4fa4-8c7d-e2e5a7005922",
        "cursor": {
          "ref": "ba503a66-fa60-465f-9df9-0ad0fed76f9c",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "60170aa7-d29b-4a4c-a413-6846207479e4"
        },
        "item": {
          "id": "2c9f0788-6158-4fa4-8c7d-e2e5a7005922",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "79b2ec8a-1e68-4b6f-af1d-574c524cad9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85450b74-0965-4670-bea4-2f066675ebe3",
        "cursor": {
          "ref": "d56dfc3e-f3c9-456b-a269-a1acd30a0f6e",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "ee8e0137-8c83-4cf9-aeb4-7ad4530ea7b7"
        },
        "item": {
          "id": "85450b74-0965-4670-bea4-2f066675ebe3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0fffe613-5474-46c3-8a0d-23dd7af08b4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc630a9f-3e14-4890-b7a3-712a08bbe43d",
        "cursor": {
          "ref": "e7c0ceef-6220-4c08-bb7c-a512e3d9118a",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "8bb7ba32-9de8-4e23-95d3-d954b810a5cd"
        },
        "item": {
          "id": "fc630a9f-3e14-4890-b7a3-712a08bbe43d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "528542bc-fa75-4a43-a9e5-27206f91cb0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "414c92ae-3e89-4179-a609-2019c72615ad",
        "cursor": {
          "ref": "1ce29154-fae0-4a96-a192-091e7e109dd0",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "85ea5fad-6008-49f1-a5de-f61b4282ed0b"
        },
        "item": {
          "id": "414c92ae-3e89-4179-a609-2019c72615ad",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "19a95e4e-35f4-43be-ba6e-d2a649308436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a77a2e0-d798-4193-939a-a2c901905ec9",
        "cursor": {
          "ref": "b2d57ae1-0e91-418f-a079-ba403e301978",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2247f4d3-3a1e-41e9-a2ef-812fced4ed3a"
        },
        "item": {
          "id": "3a77a2e0-d798-4193-939a-a2c901905ec9",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c10d1104-979b-4cb2-aeea-da579e80a341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a4a10a9-2228-4a09-be24-c492bec28ff0",
        "cursor": {
          "ref": "c4cf70b0-3912-4303-a47d-01f4f92532cd",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b021c6a7-7ebe-45d0-8dba-47f6504f8bfd"
        },
        "item": {
          "id": "5a4a10a9-2228-4a09-be24-c492bec28ff0",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c4bcafd2-67a3-4fcf-a2c1-8e1e41d55505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10b63b17-a059-49ca-86ab-4e3222ca1716",
        "cursor": {
          "ref": "95507ab7-84b3-44bc-be28-b8da673b92e1",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "82490274-d0d1-4689-9f4e-b693e37bcbbe"
        },
        "item": {
          "id": "10b63b17-a059-49ca-86ab-4e3222ca1716",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1f18c80e-b0f2-4e91-9760-80001768b047",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c7b5957-b49a-441a-b26f-04be0f6fd37d",
        "cursor": {
          "ref": "bfe05dbc-4897-4046-b468-5740901ee3b7",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a9249a3b-409c-4bd8-9572-b64d2f144c49"
        },
        "item": {
          "id": "2c7b5957-b49a-441a-b26f-04be0f6fd37d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ad0b155d-0c8c-4691-962b-fbbb91ebe0ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6185ed07-a306-46b1-be21-bbe1bbb0c51d",
        "cursor": {
          "ref": "f0279f17-8e1b-4935-8a55-c550e2b965ed",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b9a5e522-3f4d-4653-8d99-d8129eb5e0ea"
        },
        "item": {
          "id": "6185ed07-a306-46b1-be21-bbe1bbb0c51d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5e5ebce2-4ba3-429f-9fd5-be3460f06cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3abe0d3-982c-43dd-b0f9-550b71977c5e",
        "cursor": {
          "ref": "3bdffdca-37df-4ea0-a8ad-ca89d6e794eb",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "2a5182ec-0c89-4e11-989b-b79c220084d8"
        },
        "item": {
          "id": "e3abe0d3-982c-43dd-b0f9-550b71977c5e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0326d9c7-d1bd-43de-adc8-2f15b42c3fbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad83cb86-029b-467f-b486-06e63c02aed1",
        "cursor": {
          "ref": "e56fcb25-260d-4439-91dc-98f834255249",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "fae4d4b6-08f5-4c91-896b-de5663e906e6"
        },
        "item": {
          "id": "ad83cb86-029b-467f-b486-06e63c02aed1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ccc3b2c2-e9c3-4f4b-b364-70d17f529af9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc12e63c-245b-4712-ab5e-10381f99e9bb",
        "cursor": {
          "ref": "6bc45631-c677-4e86-81b8-4589c80222a9",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "32c6212a-151d-45a7-b03d-5794b74d7c90"
        },
        "item": {
          "id": "cc12e63c-245b-4712-ab5e-10381f99e9bb",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e5f96313-b054-4bfa-b46b-52f38e07c2df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6f7b18d-9083-423c-a7c2-f86eb26274f9",
        "cursor": {
          "ref": "797c2738-be05-45e6-be4f-f917c9c7e79d",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "967b3363-ddfc-45e6-9883-b3a14bbd261d"
        },
        "item": {
          "id": "f6f7b18d-9083-423c-a7c2-f86eb26274f9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "37bc5939-0024-4485-8479-e92c4f5facd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "240a449e-cbf1-4f04-bf14-5da3cbee36cd",
        "cursor": {
          "ref": "b7e1dd70-2f78-4cd9-ab98-50d816985409",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "e5dd1888-1b09-44d6-87c9-da38201ff998"
        },
        "item": {
          "id": "240a449e-cbf1-4f04-bf14-5da3cbee36cd",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "602b3fb7-f2d1-4148-8dc8-bd35128552e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7bcb124-f66d-4a8b-a685-9bfe9540e95d",
        "cursor": {
          "ref": "ac656104-6e60-49b3-9987-99edd360505f",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "0875fb84-1024-4140-a080-05a67b729b9a"
        },
        "item": {
          "id": "b7bcb124-f66d-4a8b-a685-9bfe9540e95d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "365bbead-2dd3-42e9-9f2c-c8a3968263a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a0e64eb-dbf5-45ce-8149-675834853b8e",
        "cursor": {
          "ref": "d04aebcc-a760-4406-ad4b-541dcca19419",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "90942f14-2be0-4234-a3a0-c2e481634e1c"
        },
        "item": {
          "id": "9a0e64eb-dbf5-45ce-8149-675834853b8e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b3bd3f10-361e-407d-b205-c98c905cc9c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21a4fd3a-d9cd-456c-a064-ffa4422a2991",
        "cursor": {
          "ref": "e49aaf2a-2687-472e-a1ec-5c1db4674c43",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "0944a05f-d93d-46e6-9c38-08b72907c3f8"
        },
        "item": {
          "id": "21a4fd3a-d9cd-456c-a064-ffa4422a2991",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "61c11fda-bd2c-42d4-ad66-a032f3cbfdd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "435742db-39f4-4229-a042-df42229a08ed",
        "cursor": {
          "ref": "e6ff752b-5021-4582-b2f5-0993e8cfb3f7",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "2b9c7b9b-b55b-402c-bf89-4b8b1dbaf8a5"
        },
        "item": {
          "id": "435742db-39f4-4229-a042-df42229a08ed",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "435e015a-c8e0-4088-8d81-cc42dcc76d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a285400-4015-42fa-b441-28ac7bcf267d",
        "cursor": {
          "ref": "ef8ac6f5-2e2d-455d-aa16-df2fe98d83b6",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "b7c9b7a8-a1c8-4e17-b5ec-83b7bdcb96cd"
        },
        "item": {
          "id": "7a285400-4015-42fa-b441-28ac7bcf267d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "0967c1dd-cf06-4a9f-8a6b-5b59b98a52b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbb9a710-c7a0-4c86-8178-037dc60fb813",
        "cursor": {
          "ref": "69a87860-6378-4484-a9d1-4ffc6919bb77",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "991be0c9-7bc1-4e8b-b261-4666ea8ca232"
        },
        "item": {
          "id": "bbb9a710-c7a0-4c86-8178-037dc60fb813",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7f8b97e1-7886-4535-b152-8f7bc805fe7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b215ac4b-fc0f-4605-9d36-231ba3eba4ff",
        "cursor": {
          "ref": "71c868e0-cb2a-4f00-add2-2e47150d748a",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b346eb6d-1718-4b87-852d-91b9fa17a195"
        },
        "item": {
          "id": "b215ac4b-fc0f-4605-9d36-231ba3eba4ff",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "4d3eca72-b064-459b-a273-762e19443021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "453a1be7-4e5a-4b3c-a798-64fd4951a707",
        "cursor": {
          "ref": "48bf9871-38a8-41a5-8481-9178df5702e0",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "3f5f4325-92fa-4007-b42b-34619725385c"
        },
        "item": {
          "id": "453a1be7-4e5a-4b3c-a798-64fd4951a707",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c7807b3b-b07b-46af-8501-2916c2a0b217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a58c4a4-c53f-487e-b6b1-3a9769b8d5a3",
        "cursor": {
          "ref": "2ea717c1-572c-4216-adb6-49903bfb3744",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "473a6cc2-43f6-4591-92aa-0040ead04bd1"
        },
        "item": {
          "id": "6a58c4a4-c53f-487e-b6b1-3a9769b8d5a3",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "85cab4f1-5f33-4979-aadd-57985f945024",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d980cd9-ec0d-44bf-8a38-934fa5172011",
        "cursor": {
          "ref": "8f47f24f-31a3-417b-9ec4-e40f340d25c4",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "24c73c97-54a2-48cf-8bab-ca47ca227b5c"
        },
        "item": {
          "id": "5d980cd9-ec0d-44bf-8a38-934fa5172011",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b2f8c493-1abf-431e-87fa-9a33db7d5440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd7bc53a-5102-4db0-baf8-b7e5e5a360c1",
        "cursor": {
          "ref": "7d9de5b0-a8f5-4f65-a195-db8dd4b838a4",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "df4673dc-c280-40ee-a5ed-62795701e16c"
        },
        "item": {
          "id": "dd7bc53a-5102-4db0-baf8-b7e5e5a360c1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a9f4227c-29da-464c-a099-a660748d3092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06583d17-f33a-41cd-9bf7-dabe7310ef0d",
        "cursor": {
          "ref": "0a5cdf85-3fe1-4d60-80aa-3f5f75598b5f",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c3049169-5ef0-4384-93d9-90e021b80923"
        },
        "item": {
          "id": "06583d17-f33a-41cd-9bf7-dabe7310ef0d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "954904cd-6213-44cc-b5c4-ea34061e37b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c0d06f-e525-4b9e-9ac9-7af77ac965fd",
        "cursor": {
          "ref": "f2933ac2-67f2-4c65-88d9-f6f688b9cfa3",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "cdc8a6b8-afa7-4345-b5dc-895d35e2f084"
        },
        "item": {
          "id": "d6c0d06f-e525-4b9e-9ac9-7af77ac965fd",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a1fc8764-9730-46e8-b473-0705bd8e4e94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2655708-8346-4ca1-a671-44b1b5d4397e",
        "cursor": {
          "ref": "fa4cfe17-0cb3-4729-bb5a-b22b60b1c4b8",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "3b9660d0-39b2-4471-b613-1f115a1615ba"
        },
        "item": {
          "id": "e2655708-8346-4ca1-a671-44b1b5d4397e",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "3f4538eb-3118-4b51-86ae-c4e1674af0b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbf8ff95-a72f-4d4e-9fba-033fa9e13b68",
        "cursor": {
          "ref": "62c9727a-7812-4766-92d5-65fa785f621b",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "0d7d1bc3-671c-45e0-9127-665ebf342325"
        },
        "item": {
          "id": "dbf8ff95-a72f-4d4e-9fba-033fa9e13b68",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "93343daa-d491-4651-abea-fac56dac4f35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22080756-da27-4569-bb19-43236565c382",
        "cursor": {
          "ref": "3f1e4744-6dba-4d98-bf00-0558a79f1af4",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "62c6192f-b83f-402e-ad85-aae411072ea7"
        },
        "item": {
          "id": "22080756-da27-4569-bb19-43236565c382",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "c3b3c82f-095d-41e5-8e95-52c852d8395b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d39f0001-cfd3-4620-8ceb-65119e6c0fa5",
        "cursor": {
          "ref": "043a6599-9818-4279-b0ec-0fe8312a9dee",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "22e5dbcf-f0ac-48d7-9622-20bbfe392336"
        },
        "item": {
          "id": "d39f0001-cfd3-4620-8ceb-65119e6c0fa5",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "8f668669-6a01-4221-b3f1-be22568efbfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e1f3758-ba06-4f20-9b96-81d88802f356",
        "cursor": {
          "ref": "a9530d6c-7c88-4bd4-8e38-9875f9a7960f",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "ad3cb320-05e6-43c8-9eb5-64e1f909ae5e"
        },
        "item": {
          "id": "2e1f3758-ba06-4f20-9b96-81d88802f356",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "d90e69a7-825a-49ba-8b3b-8eaf82682794",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "802ed483-e459-4899-a877-42721bf1b055",
        "cursor": {
          "ref": "328d8f1f-0def-4abd-8d0e-7eea799c39fa",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c2e858da-4042-4219-b363-21b5bec980dd"
        },
        "item": {
          "id": "802ed483-e459-4899-a877-42721bf1b055",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "bda74de0-bd3b-41c4-abd6-4e2aff8954d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75c7fa4b-6a41-48f8-9b0b-ef4fd3f2f260",
        "cursor": {
          "ref": "a5c10f91-b46d-4162-8800-d7ef2a1ab736",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4a385871-915c-45e9-9b75-502a8dd37fa3"
        },
        "item": {
          "id": "75c7fa4b-6a41-48f8-9b0b-ef4fd3f2f260",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f827256f-22ad-4725-b6fb-f390b9333263",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c65116d-bf29-4732-9105-8e9bd5c0d638",
        "cursor": {
          "ref": "e241cab2-ae2d-41fb-85c3-e4100b6e8113",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "05910791-3116-400e-8bde-de2a62087e07"
        },
        "item": {
          "id": "4c65116d-bf29-4732-9105-8e9bd5c0d638",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b68a5a09-245d-4265-9659-bffe4c71cdd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d576b1af-56de-4d2c-9dee-7c297ec05d01",
        "cursor": {
          "ref": "a9245f22-f0b3-40d2-b8b2-bdce4fe3308a",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "92368dd6-a9d0-43b6-9323-613415bad0c1"
        },
        "item": {
          "id": "d576b1af-56de-4d2c-9dee-7c297ec05d01",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "61733250-6dc3-40ad-95ee-2857d6d83bc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bba2408-3ead-4b35-9abe-0d4b3df487aa",
        "cursor": {
          "ref": "02f688ce-10ec-42b7-be3c-06f3c5a7397f",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "bca7574d-9e1b-42e8-8480-bf7a9affd750"
        },
        "item": {
          "id": "0bba2408-3ead-4b35-9abe-0d4b3df487aa",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "06a80284-0ba3-44b0-b94b-9e45b35cb834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "151570c2-3d3a-43a4-8531-ccb7de49d7bd",
        "cursor": {
          "ref": "72eb99a5-af82-44ac-b7f2-a057f78f3dd4",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "7110be63-47ca-4496-a0ec-8315d49707f7"
        },
        "item": {
          "id": "151570c2-3d3a-43a4-8531-ccb7de49d7bd",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "d3c2b57a-3ebd-49a9-8bc2-9de7b72fa690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc13d2ae-7911-488b-86f3-d4fb674945c2",
        "cursor": {
          "ref": "7c84936b-a241-4ad2-bcc0-f1186d81e4ec",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ea0ca726-c45e-4473-9682-b13f2a59c12a"
        },
        "item": {
          "id": "dc13d2ae-7911-488b-86f3-d4fb674945c2",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "7bb508b0-a745-475f-ae99-decc68a246bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d44f1f91-bd96-4c03-a8bd-4ced799dfc02",
        "cursor": {
          "ref": "4370c37a-9d9e-446b-93ce-f4bf5072e27b",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "0aeafa19-44ae-4c67-8022-5b2048d949da"
        },
        "item": {
          "id": "d44f1f91-bd96-4c03-a8bd-4ced799dfc02",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "1bd41ba4-a3b2-4bd9-9a4a-e857dbac2dce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 103,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "6f2188d3-2e97-4929-9fc1-6b2f3090dd90",
        "cursor": {
          "ref": "dada4e2b-539c-4010-82c6-f3520cad1f61",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "74e3ceaf-280a-421d-b2cd-251701f62800"
        },
        "item": {
          "id": "6f2188d3-2e97-4929-9fc1-6b2f3090dd90",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c7051a09-e527-4ace-ba9d-85da1d15a2e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68090ecb-824d-4fea-920e-64d1e7c57b92",
        "cursor": {
          "ref": "7901f0de-ea33-4b5b-95f1-01a938b1f957",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "55874960-27d8-422f-a722-79bf2206cc85"
        },
        "item": {
          "id": "68090ecb-824d-4fea-920e-64d1e7c57b92",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "c7aeab34-0130-4288-9615-338c25a40675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b315199-7576-4b0c-9fc4-f868dbf96fc5",
        "cursor": {
          "ref": "6cb10447-29ca-4acd-b277-7085079a98f0",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "1a034f34-b2b0-4538-8d7b-810f3cf0f942"
        },
        "item": {
          "id": "6b315199-7576-4b0c-9fc4-f868dbf96fc5",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "cf4f34f7-fa98-4c9b-ba92-c506ec2d7dbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dba1286e-3318-4b8e-88d7-721bcb0dc240",
        "cursor": {
          "ref": "464464c8-3a81-4d8f-b603-a0b3b551ed4f",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "bf85b9f9-a057-4aeb-8554-29c45c25eb4a"
        },
        "item": {
          "id": "dba1286e-3318-4b8e-88d7-721bcb0dc240",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "b8ee9cfd-3568-4b10-bd4d-0cfc858b3555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac6b550d-ca42-42d3-ac29-8ec103ca6888",
        "cursor": {
          "ref": "ea5833ec-c757-439b-8f6d-b3ae7d0ccf74",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "03d955a2-95ca-458f-858f-1c563fffca1a"
        },
        "item": {
          "id": "ac6b550d-ca42-42d3-ac29-8ec103ca6888",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "1e52999c-523d-4d77-9eaa-fe82c35f484b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e0b7326-8410-4770-94dc-67832dda9b7a",
        "cursor": {
          "ref": "905cb6f9-5ce9-408e-b1ac-b279ddd80c27",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "07ab3ce5-5b06-47c9-b176-983d8886900c"
        },
        "item": {
          "id": "8e0b7326-8410-4770-94dc-67832dda9b7a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "d5e2cbfa-6b6a-4765-b8be-e5c797a21fd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ecc679c-574e-4bcb-ba07-afa64e0da9d7",
        "cursor": {
          "ref": "b9dfe72e-5f12-41cd-9350-c6625cd1db0b",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "0f2083e4-5e52-44a1-873f-6a497fcbd0d4"
        },
        "item": {
          "id": "2ecc679c-574e-4bcb-ba07-afa64e0da9d7",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "1ba5c4a8-84e3-4ca9-8d02-4f91122f203c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe91d813-7b93-4f2e-aac3-6bc3f55be63e",
        "cursor": {
          "ref": "2548fc17-0522-467e-b25e-9e560191fd08",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "27400fe5-0fec-4e0d-a1f6-a5eb4d1c6316"
        },
        "item": {
          "id": "fe91d813-7b93-4f2e-aac3-6bc3f55be63e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "ddc56dde-1bf3-4366-b8f6-769079925d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e09ea49-1446-44f0-8471-668c689feb8b",
        "cursor": {
          "ref": "7d019d21-bf9c-4241-9adf-3ca2292c9c96",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "23a018bf-48e1-4afb-a10b-2cf205e76f62"
        },
        "item": {
          "id": "1e09ea49-1446-44f0-8471-668c689feb8b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a962f255-1332-4641-bf73-4452557d6213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72a1c785-e01d-4993-96fa-191a68e9ac9e",
        "cursor": {
          "ref": "09b2b392-ff84-4d84-b08d-ca1ceb62ef90",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "ab774e45-77ff-4a13-a37f-2e727d1d5a6e"
        },
        "item": {
          "id": "72a1c785-e01d-4993-96fa-191a68e9ac9e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7692cd2d-a372-4f0f-9845-e907a167baf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51a7f60f-9cd3-44f9-b61a-181f09decc53",
        "cursor": {
          "ref": "8f9871e3-d10f-4a71-93a4-3f004828275f",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "34e6f31d-39b9-4eb4-9331-d6ca1800fc98"
        },
        "item": {
          "id": "51a7f60f-9cd3-44f9-b61a-181f09decc53",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "ebbe61d2-c6ae-42c8-b36f-2520833d807b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7ba93b8-92dc-4b4a-9d55-2e8428b0020c",
        "cursor": {
          "ref": "38208600-b379-4596-af6d-19158491ca4c",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "5b019759-0d03-4b99-a539-8f8aa19f2d77"
        },
        "item": {
          "id": "d7ba93b8-92dc-4b4a-9d55-2e8428b0020c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "bd1e9280-e79f-4c3a-80e1-ed807b5fbc37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7814ca43-1d8e-48b5-bb35-170cc7929230",
        "cursor": {
          "ref": "56ae32b9-f101-4a83-abd4-2611279634b3",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f4b1d8eb-09ba-4594-adc6-22e8b04d2b72"
        },
        "item": {
          "id": "7814ca43-1d8e-48b5-bb35-170cc7929230",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "42266f87-2106-4cac-b001-cb5b1d6a9d38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5416fed-ebc1-4ae2-887a-508f4f08fcba",
        "cursor": {
          "ref": "f29ba4c0-a345-438f-bcef-2277e6ca0290",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a1ba9fa2-d890-4b59-aaa6-d5d17baecd86"
        },
        "item": {
          "id": "f5416fed-ebc1-4ae2-887a-508f4f08fcba",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4586e162-d340-4cd1-8c4d-295c413d089c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c2cdf3-3020-47e7-a8f1-43f18b2a6145",
        "cursor": {
          "ref": "00113035-f1cc-41eb-8121-8062e703831f",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "a4121c05-d728-4042-b3f2-64cfe27a72ce"
        },
        "item": {
          "id": "d6c2cdf3-3020-47e7-a8f1-43f18b2a6145",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "24fcf453-aafb-4bad-84e0-f2a011bb0f6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d07a30d-64f2-4504-a5ee-31020f4ab9a2",
        "cursor": {
          "ref": "8c3eea93-0a75-49ea-b287-069f6a918b62",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ca63f75b-fa19-4b59-9ade-7682d0072f32"
        },
        "item": {
          "id": "1d07a30d-64f2-4504-a5ee-31020f4ab9a2",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "748960c4-0a00-4455-a7e5-ff5bc654faee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346112ab-c6fb-4e5d-ac50-d9e1b574f630",
        "cursor": {
          "ref": "0eb6ad40-f2b4-4120-a675-cf1b0242d5ed",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e92e8ba1-1dc5-4d92-a2c4-042da1e83f71"
        },
        "item": {
          "id": "346112ab-c6fb-4e5d-ac50-d9e1b574f630",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c12ef4d8-17f0-49a5-a5ea-5da8aa7a4253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fbdd09d-4a19-4d4b-80de-344509080652",
        "cursor": {
          "ref": "215a2269-ca17-486f-86f1-50c7170bc218",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "0207e070-22ee-494e-baf2-dd91a06a4a12"
        },
        "item": {
          "id": "3fbdd09d-4a19-4d4b-80de-344509080652",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d82f799d-9c39-4560-a4e9-06a8b474286a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1da3113-da57-40c6-8461-d0cc63d59a81",
        "cursor": {
          "ref": "9db33f2c-cee2-4663-a43b-2e0c1e3923d0",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ac8ab381-5a5c-48d4-8a70-9475aa330aa7"
        },
        "item": {
          "id": "c1da3113-da57-40c6-8461-d0cc63d59a81",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "9bfaff7c-5d5a-4732-93ad-d01f45bca27f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b415c9e8-bc63-4ede-af28-043f26e954f6",
        "cursor": {
          "ref": "6f4f4f31-9ead-48d9-ba4d-bc65ea26b870",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "8fc6d8e2-6dc9-4cb0-9766-1f02113836a8"
        },
        "item": {
          "id": "b415c9e8-bc63-4ede-af28-043f26e954f6",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "488cd21e-66e6-4134-88bc-a931631a307f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13a62ab4-a0d4-4678-93bf-77f50638e549",
        "cursor": {
          "ref": "9df36725-8f33-4647-8980-8285e23facdb",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "7ba9058b-c201-4392-a09d-faf63819dcef"
        },
        "item": {
          "id": "13a62ab4-a0d4-4678-93bf-77f50638e549",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "1ebcf892-2c28-4505-be6e-c14d3779575f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4293c9a3-113c-4c39-80d3-219132606aff",
        "cursor": {
          "ref": "d04068b2-6b46-4057-bd4f-f5f8625bdf33",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "03f0f3d4-5654-4348-beb8-f74755deffd8"
        },
        "item": {
          "id": "4293c9a3-113c-4c39-80d3-219132606aff",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b3584b3e-87db-4ebb-a1b6-833bee1f51b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc89f82f-047d-4bb7-b2d5-b9dfc871b8c0",
        "cursor": {
          "ref": "fd78318e-f2b5-4673-80b8-99190be29650",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e03f0933-f43a-4cf0-9488-a6db76a8738c"
        },
        "item": {
          "id": "bc89f82f-047d-4bb7-b2d5-b9dfc871b8c0",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "04f7f567-f2ad-4003-9a81-0cd5a72cd90b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e0db209-72bb-4202-864d-f9534312e3aa",
        "cursor": {
          "ref": "9b8ffaa8-8863-4ace-907c-4b67b3fe84f2",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "89e7f8cb-5ef9-4a46-a204-1f5db759bcac"
        },
        "item": {
          "id": "1e0db209-72bb-4202-864d-f9534312e3aa",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "586c3837-1ce2-48af-beba-9f821693ef20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da4dbb16-f6c7-4fa0-b812-524437ac0da3",
        "cursor": {
          "ref": "5b22ece3-3cc6-40c0-aded-0325e4313520",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "cd9077a8-366a-482e-9b72-0d5098d101b4"
        },
        "item": {
          "id": "da4dbb16-f6c7-4fa0-b812-524437ac0da3",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "0615b3d2-7430-4180-9223-14c1429683c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "116d7b43-a01b-49c5-848e-cc0672ea114e",
        "cursor": {
          "ref": "f01c4da0-8979-44bb-8a7f-41d800a07c41",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a3532f35-307b-4f4b-b131-48f6f34d17bc"
        },
        "item": {
          "id": "116d7b43-a01b-49c5-848e-cc0672ea114e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "2c1fb97c-c31d-4705-8773-16f4c23a9627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aaff639-2f43-49e3-9972-f8e08ac211d0",
        "cursor": {
          "ref": "a9681ca4-dd4d-483b-95e9-4554f7c1221f",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3ef1c217-2bbb-4a6b-852b-cbdfa7bb093b"
        },
        "item": {
          "id": "2aaff639-2f43-49e3-9972-f8e08ac211d0",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "8462f8fc-9c6f-4fb2-97cf-c1b21c6f824a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0958c0c-cc04-4750-aac6-450bffc77196",
        "cursor": {
          "ref": "f1aef116-3515-43c4-8965-715c654748a5",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b75d86af-18ae-48fb-b02b-cb4e9a53a4c5"
        },
        "item": {
          "id": "e0958c0c-cc04-4750-aac6-450bffc77196",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c886b5e3-566f-4da2-9e30-90db7c4ac0bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edb71797-f82a-4ff0-a158-d1682a09aff0",
        "cursor": {
          "ref": "ae200b09-5cf3-4a85-ac15-7a2022b48f00",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f2f76d3f-04bb-48a3-b3d7-f385411321c1"
        },
        "item": {
          "id": "edb71797-f82a-4ff0-a158-d1682a09aff0",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "77f32be9-d241-41f1-b67d-17d97124bdde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b5b69f9-f4ef-43d1-bafa-8cadca749459",
        "cursor": {
          "ref": "78cb0690-1280-4e99-9249-d49b54e8384d",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "fedf6a27-5a65-48a8-8c3c-5df7b0f2d285"
        },
        "item": {
          "id": "4b5b69f9-f4ef-43d1-bafa-8cadca749459",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "861dad8e-57ed-4e92-85c2-406ffef406fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "32c1da74-644e-46c0-9ba1-edad70930d82",
        "cursor": {
          "ref": "cd544671-f8e9-4c13-857e-20b8b5328b0c",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b0bd2018-fbe4-49a6-a74c-3182454b0d64"
        },
        "item": {
          "id": "32c1da74-644e-46c0-9ba1-edad70930d82",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "9bf76397-7b41-4706-af03-6153a584046d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "d55eaaed-6306-4649-b1fe-e46f62e376ad",
        "cursor": {
          "ref": "eaf158f4-2533-4ebb-84bf-10490a4d1667",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "2159dd8a-4c2c-45ba-b909-e1f1ce6095a9"
        },
        "item": {
          "id": "d55eaaed-6306-4649-b1fe-e46f62e376ad",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "056f95d5-d806-4e1a-a8c8-888bb4616b18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "3ed86ef8-8999-4023-afd5-2ab7143b536b",
        "cursor": {
          "ref": "252c9455-d2a3-44bc-abdf-ef9657826200",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "754a176a-d225-4596-9088-3bf5bc332739"
        },
        "item": {
          "id": "3ed86ef8-8999-4023-afd5-2ab7143b536b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3f564a15-70ef-4ea8-bd38-ce4b3a0eda8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a88e8276-7b1c-4195-9a71-a7d54e1c1fdd",
        "cursor": {
          "ref": "197d96c4-0f15-4801-97e6-5f9e664077bc",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c36b1ac8-c548-40c4-a064-db1df109f6c2"
        },
        "item": {
          "id": "a88e8276-7b1c-4195-9a71-a7d54e1c1fdd",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "b3b196d9-3f3c-427d-8f5e-1efc96063095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "6a793057-a2b2-4124-8d9b-39c8f6231073",
        "cursor": {
          "ref": "71beb58a-b552-440b-abbd-940e73a98ea9",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "adbe1722-4625-44fb-be90-2400b3284d00"
        },
        "item": {
          "id": "6a793057-a2b2-4124-8d9b-39c8f6231073",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "bb3d784d-77e6-4eb3-a82f-389d555af153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1355,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "a965c151-fbd4-464c-9948-95556e66299d",
        "cursor": {
          "ref": "fe9fe1f1-14f6-49c3-9d5c-22d4e7154b35",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "42d422c4-fdcd-47f8-b62d-c33cf61131d7"
        },
        "item": {
          "id": "a965c151-fbd4-464c-9948-95556e66299d",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "9c4486cd-c05a-4059-ac7f-855b46240515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "5aa4574f-75d7-4aa4-a981-110dedc739bc",
        "cursor": {
          "ref": "da2f81b3-aec7-4c98-a518-eb5a1df8a2be",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "53f6073c-48d0-4f0e-adaa-1f8ddfa05a4b"
        },
        "item": {
          "id": "5aa4574f-75d7-4aa4-a981-110dedc739bc",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "2ffde0f0-f48e-4dd1-b131-bc469248c9f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "41e40a53-abad-4ea8-a4a0-865f480c6dff",
        "cursor": {
          "ref": "20a23eb2-a5d5-4aec-a0fa-6c091d94d21e",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b2f1f3ab-063d-4d1e-8aa4-0d755d60cba3"
        },
        "item": {
          "id": "41e40a53-abad-4ea8-a4a0-865f480c6dff",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "84f6dad1-d8fe-4b73-880c-9f9b44e29dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "0b33a12f-c4ef-4c38-85e0-043fbd5ff743",
        "cursor": {
          "ref": "3b372ece-a2aa-4dc0-ac27-1a51314c5397",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "ddc834f9-3d3c-4bb4-bfbd-903194e301b2"
        },
        "item": {
          "id": "0b33a12f-c4ef-4c38-85e0-043fbd5ff743",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "2aab6165-f017-4458-b72e-bff8bed687d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "ce68f73b-233d-4766-bef3-b16e48f90f35",
        "cursor": {
          "ref": "6e9992f1-3bdb-4a9b-924c-f177aec67921",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "4feabbcf-2453-45b0-b951-e9633be7198b"
        },
        "item": {
          "id": "ce68f73b-233d-4766-bef3-b16e48f90f35",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "cef35487-8655-456d-9510-6c49053a665f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d870caf2-682f-4f11-a7f2-e576ca245bcc",
        "cursor": {
          "ref": "1aac80b1-5e85-4685-840d-19025c4ccd9e",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "d669a1bc-9270-431e-b494-b82ab3c01db7"
        },
        "item": {
          "id": "d870caf2-682f-4f11-a7f2-e576ca245bcc",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "bd98535c-52fa-4c0d-abe3-9b1236b76f8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36ee4809-8a6c-47a5-87a2-d7d82865f263",
        "cursor": {
          "ref": "030c7c64-6b6c-432f-b800-1a9093e6d0ac",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "0de584ac-1348-4aa6-b262-328a51b3f229"
        },
        "item": {
          "id": "36ee4809-8a6c-47a5-87a2-d7d82865f263",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "1e46f3af-ff45-4d17-aa10-f0c57dacf984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f635dbcc-d317-429d-8d14-820970251091",
        "cursor": {
          "ref": "3e93169a-e70d-4af0-8187-3e0429c6165d",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "16b8a4c1-df6a-4ec6-ac11-ab2bf7b5f7c4"
        },
        "item": {
          "id": "f635dbcc-d317-429d-8d14-820970251091",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a75c03be-2bd2-463d-943f-30e7e4830c63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14f98e7b-058d-4efd-90b3-d36a26191108",
        "cursor": {
          "ref": "a5884998-cfef-4143-94d8-f1c1c9130b4b",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "b45085ed-ec6b-482b-b953-422a7088ba11"
        },
        "item": {
          "id": "14f98e7b-058d-4efd-90b3-d36a26191108",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "9f9058f8-7d8a-47be-9d29-111b6c26ac55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb3f0091-2e71-4aad-8412-c85e00a38677",
        "cursor": {
          "ref": "7abc075b-1fc7-495f-a947-ee13c5271a90",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "5619886d-6bf1-4d4a-9d08-a7ea9dc3d577"
        },
        "item": {
          "id": "cb3f0091-2e71-4aad-8412-c85e00a38677",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "3adedc29-5a61-4357-a896-1f4770d9167b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f1108c-15be-4d4f-8443-775c16a53f82",
        "cursor": {
          "ref": "330b05ba-51eb-4efd-af17-748e5a872929",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c69e9e74-6407-4bd2-a8ec-a3c5b0c06b04"
        },
        "item": {
          "id": "36f1108c-15be-4d4f-8443-775c16a53f82",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "a82dda62-d8f9-4627-ae3c-217ded6b5b30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b03cb6b-91a4-451f-a7e3-a1fc1f3288f8",
        "cursor": {
          "ref": "1d87ece7-260a-4cbc-928f-7a5a97f90368",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "68cb4d96-72cb-4923-8604-29f8ab7c2be1"
        },
        "item": {
          "id": "5b03cb6b-91a4-451f-a7e3-a1fc1f3288f8",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2155bbaf-cfb9-4087-bd25-017388182b66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e2da07e-0031-4bc0-bf25-ad702a7ef120",
        "cursor": {
          "ref": "f74498f5-305b-4197-9be4-b39133b7e58c",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "14b2aa31-470d-4af4-a3ea-5bdfba443ea8"
        },
        "item": {
          "id": "1e2da07e-0031-4bc0-bf25-ad702a7ef120",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "0d555ec9-dae2-40f7-8970-fcbfe7714869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3286d578-c97d-48df-8805-e69c852fa5c0",
        "cursor": {
          "ref": "acc46b1d-666e-487a-ad73-a03ff4aee025",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "db358b5b-3259-4e67-9d28-df22cdc4cc2b"
        },
        "item": {
          "id": "3286d578-c97d-48df-8805-e69c852fa5c0",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c09e2f8d-6d4a-4719-bfba-0e757f2024f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c608c0b-a970-4e86-8d60-a5a45904ad9d",
        "cursor": {
          "ref": "136d7a88-214c-4aa7-afb1-2a5962d03039",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "74596fa9-8cbf-4cde-a024-29764ccfdc61"
        },
        "item": {
          "id": "8c608c0b-a970-4e86-8d60-a5a45904ad9d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c2d0b16d-5fd4-44db-9004-c5aad70bea58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1242a546-924c-4176-a71a-d7874597c358",
        "cursor": {
          "ref": "e4cd7959-4298-40bc-be57-24f15886af68",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "8e6b5745-9a6d-4635-9966-ab3ee8715742"
        },
        "item": {
          "id": "1242a546-924c-4176-a71a-d7874597c358",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f9fafd9c-9484-4f9c-90e4-de54663a79c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99f84b11-265a-4d24-ab5c-b6857c5c4fda",
        "cursor": {
          "ref": "974ccf26-5e02-4148-bb8e-1b721a3d82c1",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "19ddab53-780f-4889-8c81-877e6c07e255"
        },
        "item": {
          "id": "99f84b11-265a-4d24-ab5c-b6857c5c4fda",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "97f6cb94-28aa-4a5b-8371-1c4f4b8b9b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba25e146-2cbd-457d-af8f-d8767280c60c",
        "cursor": {
          "ref": "355c9a31-cfd2-4f3f-bb2e-151666535fad",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "8048cfbc-9688-4629-88a8-0075b311b7f4"
        },
        "item": {
          "id": "ba25e146-2cbd-457d-af8f-d8767280c60c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ea1a4412-f495-42bf-8ecf-43e06e110929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1263,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "86ba5fb4-dc62-45d8-8490-cacb26219a0e",
        "cursor": {
          "ref": "13c91038-f105-4631-a43d-2ff984d07f37",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4bfab5f2-8cbb-48e6-8b93-88c7eb004f53"
        },
        "item": {
          "id": "86ba5fb4-dc62-45d8-8490-cacb26219a0e",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c4182319-71c4-40c5-b043-5c8e9aa8b221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1258,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "3bf2b628-8c4f-4d4c-92a3-5dae4e269309",
        "cursor": {
          "ref": "ec962a86-2825-4dc9-80c5-68b237f9b39a",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "4426a26b-da0b-4681-8118-973c4eee3c02"
        },
        "item": {
          "id": "3bf2b628-8c4f-4d4c-92a3-5dae4e269309",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "335d47c8-ec59-4f61-b41f-659722ee9640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "4864d595-dd8c-4973-bf4f-a3a96ea6403e",
        "cursor": {
          "ref": "3d558301-3a4d-48ba-a0f9-deb2a2e17202",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "5468865b-d75d-4c9e-96b8-17f13c985b19"
        },
        "item": {
          "id": "4864d595-dd8c-4973-bf4f-a3a96ea6403e",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3b137759-c4c6-4929-a5d3-0455859b00c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1211,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "26dbab4f-2209-49ff-af4e-15c64e6f8ac2",
        "cursor": {
          "ref": "5732e5a9-4f13-4790-a2e8-4faebd90d38f",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "dc52f0d0-7f05-4d87-8daa-bd67e62cbc4c"
        },
        "item": {
          "id": "26dbab4f-2209-49ff-af4e-15c64e6f8ac2",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "bf2577c5-81e1-401f-a63d-8a545af722f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "ab1bfdc7-4c87-431a-aabd-d84adff665fe",
        "cursor": {
          "ref": "f68b42b5-2e3a-4a75-9cb7-caf5caa6702a",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e4cf8b29-c2f2-4794-8756-c8ccb5739e2c"
        },
        "item": {
          "id": "ab1bfdc7-4c87-431a-aabd-d84adff665fe",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "37c5c79e-d141-4461-ab83-dd7cc9f77faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b4c5e7e-f4de-470d-92f4-bd369ffdfac2",
        "cursor": {
          "ref": "f50fa85f-8728-4708-aeb2-08b6fbf50eb9",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a380d229-d79b-4d73-b771-4b8d430029c7"
        },
        "item": {
          "id": "3b4c5e7e-f4de-470d-92f4-bd369ffdfac2",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "1d32f16e-0843-4017-98c6-158627e5e122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e25bca5e-7e5e-4085-92e4-cb42eb2840d1",
        "cursor": {
          "ref": "c09ba579-6b69-4a72-9e6f-68649013b1c4",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "40d7a917-44f8-4e29-ba5b-92123ff217d4"
        },
        "item": {
          "id": "e25bca5e-7e5e-4085-92e4-cb42eb2840d1",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "23cfb0f9-e596-4c60-9f14-b65a6e07dde8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2da82ca-657b-41b2-9621-019a9b40b1bd",
        "cursor": {
          "ref": "a4d0cf9a-7790-4ee4-8a27-51637cc1a2bf",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2bfc3d23-3ae9-4341-bca0-1170e695c279"
        },
        "item": {
          "id": "e2da82ca-657b-41b2-9621-019a9b40b1bd",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a16d28e4-c50a-4084-9b4d-d0e8b0aab7cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37534187-3470-4058-9938-80099b63e83a",
        "cursor": {
          "ref": "6b761598-6157-45e5-9640-ee791048c8c6",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "daa730b0-a539-4539-a4f8-8c4f7981f564"
        },
        "item": {
          "id": "37534187-3470-4058-9938-80099b63e83a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "4cb1e601-a486-4b18-b92d-e4d8f143af80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e69f23d-aca9-42ae-82c0-23fa5b9a5284",
        "cursor": {
          "ref": "1f688f10-d50b-4472-a3e7-3510f5e49052",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "8dc0a143-132f-465e-93a7-9e620eacb77a"
        },
        "item": {
          "id": "3e69f23d-aca9-42ae-82c0-23fa5b9a5284",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "dfbbbe38-1320-4e56-8629-27240165204e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dd781f4-3196-4260-9fd7-77cebee338cf",
        "cursor": {
          "ref": "f45a47bd-5fe6-499d-a717-d66e9a6390e8",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "44b93272-020a-4cd4-9bf6-70a564315b6b"
        },
        "item": {
          "id": "0dd781f4-3196-4260-9fd7-77cebee338cf",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "f3f6fd99-e680-4453-a3d9-e27ab799f64d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b344de46-c1e4-4ee0-b8c4-1e1482b292de",
        "cursor": {
          "ref": "8592897e-af5f-4893-b822-6e735ef09fb7",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b4e08330-ac20-4dc3-81a2-ffe45d15f7be"
        },
        "item": {
          "id": "b344de46-c1e4-4ee0-b8c4-1e1482b292de",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "48e659e4-4c7f-445e-8b64-7b0fe266566f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a34f392-66ac-4101-8fa6-62e70db05a2f",
        "cursor": {
          "ref": "298a25be-51de-40e4-8f65-2fe145e39ebb",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b2764396-d658-47bc-83da-89b3604b4dcf"
        },
        "item": {
          "id": "7a34f392-66ac-4101-8fa6-62e70db05a2f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "0945d2c6-71df-4ca8-906c-4d5d1df99e26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8656d9a-ab25-4f96-992b-f5013b84b29d",
        "cursor": {
          "ref": "4e2e651b-7025-4cc0-8f59-7ba0797a7b7c",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a2d0dfa7-7748-4e09-9685-58f370c1e75d"
        },
        "item": {
          "id": "b8656d9a-ab25-4f96-992b-f5013b84b29d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ed9f7abb-c72c-48cf-a1e5-7132419f8e31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99d3d446-fac8-4c6f-a039-f5c302c2182e",
        "cursor": {
          "ref": "0d621a07-272e-41e4-bb5c-a56df73f77e2",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "c9ec5404-7727-4a56-a633-d02b6ef43a66"
        },
        "item": {
          "id": "99d3d446-fac8-4c6f-a039-f5c302c2182e",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "eb85f15f-4dd5-444a-af92-6495d43391f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "951b7886-2d7c-418c-bbaa-26ab7097547b",
        "cursor": {
          "ref": "ac864199-c4af-4fe2-9143-f6d68ed0628b",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "84884d74-bcd6-444b-86d4-45ff898fc331"
        },
        "item": {
          "id": "951b7886-2d7c-418c-bbaa-26ab7097547b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "eab4bd2b-697c-4dd8-b705-e3e6014de046",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6b4d395-9486-427c-b77f-33dd887cdacc",
        "cursor": {
          "ref": "e7d42c2c-bf8a-41c4-9547-5bc64d06899b",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "f369723f-b098-422d-b4c7-90ac0b13cb93"
        },
        "item": {
          "id": "e6b4d395-9486-427c-b77f-33dd887cdacc",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "41a429ed-3f99-4ce5-b7db-0021f4a21623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d10b15a4-d6ec-4eb5-8577-a4c4cf238e9e",
        "cursor": {
          "ref": "a2f19d81-cd81-452d-a73e-ac43cc4f1922",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "6dd7d195-9c72-470e-8616-21c4931fabad"
        },
        "item": {
          "id": "d10b15a4-d6ec-4eb5-8577-a4c4cf238e9e",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ccaf2fa6-841c-4bcf-998d-54623ffbb9cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da6ed26d-82e4-4c29-8603-55a8d6732c20",
        "cursor": {
          "ref": "3cf7c97c-c498-4650-9a48-04c527c46b9f",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "f3151d12-90bf-442e-88be-c3c9a2129c36"
        },
        "item": {
          "id": "da6ed26d-82e4-4c29-8603-55a8d6732c20",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "249df91d-f5d6-4502-945a-31a399e3424d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85e248e2-8ef0-4a5d-9b91-46d8d917b903",
        "cursor": {
          "ref": "31aa534b-cf0f-4f93-9dd6-c3256eea1817",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "9de84c2c-245a-4641-8b46-5ecdc67671a9"
        },
        "item": {
          "id": "85e248e2-8ef0-4a5d-9b91-46d8d917b903",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ea016119-6838-4586-b8a3-9d9d8e6244ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f1310ef-9b21-4b0b-81a4-2e0cd355ec22",
        "cursor": {
          "ref": "4fa28ef9-b412-418b-9049-0d9c0b6c9ebd",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "21a17add-a606-4a38-beb7-b5adea1378a2"
        },
        "item": {
          "id": "3f1310ef-9b21-4b0b-81a4-2e0cd355ec22",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "2837f78e-0588-49d2-843f-e794557c01d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "233e8221-37c8-4886-9606-2c633f9fa153",
        "cursor": {
          "ref": "f52aa5d4-98fc-465e-a7b2-2428a1f092e1",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "bd72b81b-4884-44c5-9004-d0a723ecad6f"
        },
        "item": {
          "id": "233e8221-37c8-4886-9606-2c633f9fa153",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "57871942-6abb-4c21-8cb7-257f5d71a1fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b94172d9-6be1-4d01-ac26-3191fd0cf019",
        "cursor": {
          "ref": "a8b282cb-c126-471d-a35f-4d4815f9022e",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "e8aa6de8-5456-4fa7-b625-7479fe6e751c"
        },
        "item": {
          "id": "b94172d9-6be1-4d01-ac26-3191fd0cf019",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e100a55e-1017-4e7f-8f03-67c9b64ced13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c54826-089e-4831-8a57-9e45383c4363",
        "cursor": {
          "ref": "9830bd9e-9dbf-446d-aaef-909b7a77085b",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "f0da5d22-4106-4f80-9f46-f7731d15ad26"
        },
        "item": {
          "id": "53c54826-089e-4831-8a57-9e45383c4363",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "7d1da0aa-a279-4484-b478-3540649e884d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0581fc60-f7fd-4885-ad40-f02c9fe3aa91",
        "cursor": {
          "ref": "7a5918b0-746c-445e-87a7-e374c9353d9b",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "784becd3-38bf-48e0-b7db-b074c4e1b7b2"
        },
        "item": {
          "id": "0581fc60-f7fd-4885-ad40-f02c9fe3aa91",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f0fb809b-a1bd-413f-a79c-d9f0eb2f08dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8506d25f-08ee-4349-9d87-71aeb68a1058",
        "cursor": {
          "ref": "52294347-9d52-4b8f-b57d-270b3028484e",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "266b9eac-4a67-4cec-8017-8cb11b1b7a24"
        },
        "item": {
          "id": "8506d25f-08ee-4349-9d87-71aeb68a1058",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "88340e9c-e540-4912-90f0-b51e7bd5d0cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af57772b-684b-4c88-94e5-b6e69225c072",
        "cursor": {
          "ref": "377453ab-f5b8-417a-bf21-ed40286728d4",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "9d9f1f79-3026-402f-8f1e-82fd204f2a4a"
        },
        "item": {
          "id": "af57772b-684b-4c88-94e5-b6e69225c072",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "7df4ba3c-4410-433c-9137-93954f6848d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d5c74c6-1cf1-4da3-9baf-11340d0b1495",
        "cursor": {
          "ref": "b2997b60-6600-4f58-824d-6a366429da63",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "7d981082-99ec-4bc1-bd66-b16f2bbab9f7"
        },
        "item": {
          "id": "9d5c74c6-1cf1-4da3-9baf-11340d0b1495",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "07c2c3af-9ab3-4443-9695-cb098286e347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3da3e429-beff-4701-9f96-db1bdef9fe75",
        "cursor": {
          "ref": "9bd180b5-94ee-4270-9cce-a1982d2b7bd2",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "f3fee07a-868d-4219-ba88-1f1b1fc17a6b"
        },
        "item": {
          "id": "3da3e429-beff-4701-9f96-db1bdef9fe75",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "2bb13fe9-7d74-4374-8464-2be5dd2fc362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13b08bd8-5108-4981-8d19-8287031cc649",
        "cursor": {
          "ref": "4a71c6fd-a5d9-4599-b2c5-634f6a09aad1",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "f0d68618-95a7-4bff-947d-76a1e2f68e0f"
        },
        "item": {
          "id": "13b08bd8-5108-4981-8d19-8287031cc649",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f4334b43-148b-4798-ac5f-c5df638c0d67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34e78e7c-afe1-4c7c-bfa0-65216190745e",
        "cursor": {
          "ref": "f4bfc82c-2aec-4077-9cf0-a8dac32fa24e",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "7ff58b01-b11e-4c70-848e-08c66c6771b2"
        },
        "item": {
          "id": "34e78e7c-afe1-4c7c-bfa0-65216190745e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "ad346abb-0929-4c3a-9bbd-098e356015c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf567f4c-e46d-4e00-a30a-2cb8cd5c2c29",
        "cursor": {
          "ref": "a48868f1-f258-4f57-8aa5-86f8b7fbe030",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "f4c558cf-2e51-4d1b-a1e3-a59e904e70f9"
        },
        "item": {
          "id": "cf567f4c-e46d-4e00-a30a-2cb8cd5c2c29",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "73d96172-3fb7-4417-84fe-a08d1a20452e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aac26dd-ab08-41f5-a7f7-3382880a02f1",
        "cursor": {
          "ref": "cd55f2ab-9cb9-4d02-b9d4-68dba0b228e3",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "aeeb0af8-d6a9-45a2-855b-97c84a5ca51f"
        },
        "item": {
          "id": "4aac26dd-ab08-41f5-a7f7-3382880a02f1",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e1333d60-ab16-4d46-954c-936f362ccc9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f913287-4df3-446b-bf29-104cc7afd2c8",
        "cursor": {
          "ref": "c8982309-86ec-47a5-b3c4-a9e8b59d67f8",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "969b5a82-dcfb-4a5f-bfa4-5b219f335826"
        },
        "item": {
          "id": "5f913287-4df3-446b-bf29-104cc7afd2c8",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a05932ea-e4c0-468b-af10-0ebb36d5d2e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f588c686-899d-423f-b117-95cceb37913c",
        "cursor": {
          "ref": "6b1fb797-3f30-4f0a-b5c0-63cea0062caa",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "d6d7b644-a6e3-420f-9afd-ff4929e6fa0e"
        },
        "item": {
          "id": "f588c686-899d-423f-b117-95cceb37913c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "7b1bd549-47ef-49ed-a83e-2bd991b98872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa168b73-18b4-469b-97da-83ef3c288f6c",
        "cursor": {
          "ref": "a7c0edc9-9cc1-4d42-b2ae-8067cce49369",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "ad77c479-6ccf-425c-9071-b5e35ff3c32b"
        },
        "item": {
          "id": "fa168b73-18b4-469b-97da-83ef3c288f6c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "e18ae826-fed5-454c-a304-f5291c9b7117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "273a9fc9-34ad-4f24-8ac4-c4371a225bd3",
        "cursor": {
          "ref": "cec568d9-d9c1-4a02-ae7b-f062e2ace140",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "0b56c314-6df9-4847-b201-8b09426e3d26"
        },
        "item": {
          "id": "273a9fc9-34ad-4f24-8ac4-c4371a225bd3",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9cdeed5e-1d05-4a7f-bef7-84ad774e909f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73b08c06-442b-4b23-a142-ff32c17c9833",
        "cursor": {
          "ref": "c73fd5a5-7523-4a56-995a-46880af3081f",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "75cbe411-e184-4572-a672-bbf4fe7812f3"
        },
        "item": {
          "id": "73b08c06-442b-4b23-a142-ff32c17c9833",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "af8c31e2-2478-4605-916a-8211fdf78fbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9efd6806-6ae4-4086-9a1c-507ee0b69875",
        "cursor": {
          "ref": "b106c791-f996-4700-9a9b-2d8dd0a94ee3",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "cd02a1c4-bda9-464b-b70e-c9ae89f75a70"
        },
        "item": {
          "id": "9efd6806-6ae4-4086-9a1c-507ee0b69875",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "895b4565-4585-463c-b7c7-c209772c6a71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ffbe699-d3c0-4781-8a66-d09683c9d2cd",
        "cursor": {
          "ref": "c19d32ff-b0da-45f5-a9cd-2481490b60c4",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "1ebfd8e8-7219-4c4e-9f22-a410a6c82ae5"
        },
        "item": {
          "id": "3ffbe699-d3c0-4781-8a66-d09683c9d2cd",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "c86c12c3-d599-4a6f-aafc-bdd86ff81037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e6cb36b-bfcf-491f-8617-750d8c9fde23",
        "cursor": {
          "ref": "14f39b34-665d-4755-9a6e-b76421a85f8c",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "177848f2-07cb-4d2b-8687-8c1a8eccfbc7"
        },
        "item": {
          "id": "1e6cb36b-bfcf-491f-8617-750d8c9fde23",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d3bf11e4-e926-4bfb-8a59-34c555e072c1",
          "status": "OK",
          "code": 200,
          "responseTime": 1219,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "20658348-bfc9-4538-a021-31d91cfe84c6",
        "cursor": {
          "ref": "d3127462-bee6-41b1-972b-ebf6f701bf47",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "c8375993-85a2-4946-9941-4fdd0e096dac"
        },
        "item": {
          "id": "20658348-bfc9-4538-a021-31d91cfe84c6",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "1665d86a-2c3a-49f1-af00-f55348914d9f",
          "status": "OK",
          "code": 200,
          "responseTime": 1247,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "99b99423-d724-459f-a299-f1bb8a4290fa",
        "cursor": {
          "ref": "327ea73f-414c-4ad6-89a5-7cd00581988d",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "10fa417e-4549-4331-8eae-c0332044ffb6"
        },
        "item": {
          "id": "99b99423-d724-459f-a299-f1bb8a4290fa",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9a71c131-9b82-45f2-9629-e1e7662e35a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99b99423-d724-459f-a299-f1bb8a4290fa",
        "cursor": {
          "ref": "327ea73f-414c-4ad6-89a5-7cd00581988d",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "10fa417e-4549-4331-8eae-c0332044ffb6"
        },
        "item": {
          "id": "99b99423-d724-459f-a299-f1bb8a4290fa",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9a71c131-9b82-45f2-9629-e1e7662e35a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f57f0fb-d295-4047-b3f1-0242b992181b",
        "cursor": {
          "ref": "f96336c0-de6c-4b04-867a-3f027146a199",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "213bf5d3-1afc-40e8-bdb1-7b46e2489481"
        },
        "item": {
          "id": "1f57f0fb-d295-4047-b3f1-0242b992181b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "11c8e29d-b63c-4e1e-adff-40b702eebb3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9bebf18-5209-4b67-9f0d-4bb469e1d47a",
        "cursor": {
          "ref": "0ff3e0e1-48d5-4a2a-8eac-37bd6c7ea712",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "f793924d-c371-4315-81b2-02f34b2e0795"
        },
        "item": {
          "id": "c9bebf18-5209-4b67-9f0d-4bb469e1d47a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ff687495-6986-4c64-9e6f-5664c0842379",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}