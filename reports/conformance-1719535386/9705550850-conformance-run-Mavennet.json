{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6cb679c0-cd30-401f-b3fc-50fea9da1abe",
        "name": "Clear Cache",
        "item": [
          {
            "id": "8836a717-7c95-4c88-a015-e08fd39c72e0",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "02e62a59-41db-40c1-97ce-14f53edf0ee7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2a4ddec6-41d2-4b34-ba46-cb493a31d2c9"
                }
              }
            ]
          },
          {
            "id": "d8a32e66-0970-4006-8a98-e1a13b5092e9",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "00b844d6-f302-48ec-8a0f-62123e74273d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "fcaabb73-4e25-48c8-bb97-83203447ddd3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c201ac17-1de6-4f21-b452-98df9993d4e0",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "39daa7ab-18df-4037-b773-335593f8bb2a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "44fdca86-fb36-4a4f-b297-31c22eb36a09",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "55304121-8b8a-47d0-a8dc-423363e89105",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8c0067a1-9af1-4e55-ae1f-70c6644d9eb9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c21681eb-0111-41b3-9e0c-ac9dbcaf82ae",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e21adc84-871a-4605-b971-0a78000f6f66"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "68019a82-93d1-414b-8937-fc001f3e617f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "20248ff7-b8b8-4b3e-91ce-bfb5edda8a0f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dbd40135-ecb8-45e6-baf5-4f031cb146bc",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "8356a3a1-b8ff-4759-a60f-f6fb8684a8cf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "234e730d-ccc0-4b12-8f42-136b804f2b09",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ee8aed7d-5789-4826-b5dc-539031bcaa48"
            }
          }
        ]
      },
      {
        "id": "70fed135-9281-4802-8579-fe87680f5fff",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4d2f0a54-6532-4bef-8768-459ed4237fd3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b01b023a-f9a1-4c25-b52c-9a9f55266385",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f2bed5f8-f157-45da-aefb-d8065e2f28f1",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "954ef65d-6f23-4823-b06f-92b09fc23803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc8013c8-6be2-4b56-90b9-69969413dd47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316c5d4a-99bb-4a4d-bd1e-571ee484809b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc9e3b3-4e46-49a2-9b9a-6a802c5621ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "846d05bd-7f5b-4219-b554-b0cb6e8da802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3da3ba-e4cf-458b-b3ab-847d5e869b1c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0321ae84-398f-4cab-aedc-cc2dcc04fc16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d065da9-d7a9-44b8-bbae-3d8b8ebaf82c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "55b179cd-b730-45e5-a4c1-e127136256ca",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1be2d3e2-4edd-4390-adb5-07a0035cf8ea",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b32835-cf43-4aca-963a-1e6fcaf70b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "598c04d9-6af0-4083-a2cd-396c159f0f40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec204fd6-26e8-4b8e-ac86-21a7a4462d16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41427425-bca5-4df5-b68f-a44c41340fa3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5244f9be-328d-47ac-9b54-6b85f854008c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b972febf-b717-4707-b3a7-a2472694db8b",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1dd40580-31ae-4568-afa3-f872d4a7f32e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "417f66c5-2ec7-47fd-b23b-736070914349"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cf6e32c6-5831-4a1c-8ad7-64d9bc6973ab",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "162a90b3-d64a-4617-bf68-f2f102aeef26"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6a34ddb3-c530-46f1-97f9-c951b1ee2fd4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4bf9f828-1325-4b5f-8356-9783305e6d49"
            }
          }
        ]
      },
      {
        "id": "ff64cb01-e02e-4c4f-9249-f905192f2630",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "443319df-e218-41cb-8264-21f772e48f82",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0215b0d2-7404-4439-abb7-9f0c0edc58a6",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "fe1fd710-2c9e-4d11-b204-054ebf2e7172",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fda37ae-acce-4c81-913b-9772ce070a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79bfe7b3-3e42-47aa-a3c9-1ce0b34e6683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b1660b-745c-4817-95ba-38e563f577bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6afbe585-903e-4650-aa63-abb8c445fb82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a4aeec8-bec9-4852-a258-a59abe8cfffe",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "104f4f39-2015-4913-a851-cdc76b082ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2331e44c-5d20-48ff-961f-a8d445b64b16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da2b81e-2ee6-4f8e-906a-bd18fd8f7111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "797c6b9f-6f51-47fb-b16e-9687c47463f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45e7b36f-3b99-449c-904f-bbbdcac4ea16",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c0a0c4e-dfba-4e15-bd00-c3fd87498d28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5954285-25f9-4428-b51c-dcbd12f07e11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83642927-718b-49d3-8051-e04027b0c92a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a2323023-1362-4cd3-ba7a-ac326eec841e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1e6aa9d-fb54-40d7-9558-f70022617da7",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df0f8ad-0e72-4f56-913b-bd26ea56faa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff009b7e-4034-4de8-adfb-2c1a95dac54a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3d1bf13-c09b-4214-816c-e41b45950fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21345414-5e05-415a-bd73-34847a490e3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebee389e-140d-4967-a30e-a1bdbf285818",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5c76f47-f120-4f1c-9249-90dd7c03d51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcf20d1c-1473-4ee1-a4f5-daa03aa0b6f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "133058e1-fbcf-4985-8d05-bb055e41c2b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f744cac-5dca-42d7-ace5-e0f68794b6b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f51609da-af3c-4667-a65a-80b122ef8c11",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3dd8f27-d17b-4bf7-bd31-aaca102bc28b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ebe0886-9596-4108-b2c9-21ac9e62f56b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af17a56-3be5-48b9-b4e5-1ea1cc500fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64b7de39-272b-4c09-a51d-8159a006a9ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1c3f8f8-7dff-423d-babd-8a4be2a9202c",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8730c37-014f-4d83-9f41-c90a10e0278f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3817262-d9ba-4641-8994-582d0a922c63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca4ce549-37f6-486c-9140-db51377225ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e960a3c-5e3f-48fa-b81f-6eb487b5bcff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e4855cd-f634-4fdf-8176-846cb5bcbe87",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4dc130a-aaeb-4c35-acf3-f434e82d523f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f339b679-8440-4441-bbc6-3a452f270aaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b815d342-e4c9-4273-bf7e-05a9dfe1767b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3494fcf0-f104-42cb-895d-0a25b2e9c44e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7611b31e-5c04-412b-a97c-894273561802",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4e6b922-e062-4997-8ac7-6854003f52c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d98aa37-8d49-40a7-9213-5f18bcce836c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7d9b22-4508-4754-b386-886e08b84295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "44d63c52-781e-40e1-b787-a57a5b69701f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a4593e-32c3-485d-baa0-6641a231c129",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d05f94-1a98-4384-a6d3-9a6cba2fc497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f962aed-ecf0-4668-959f-31ca6dd7bfa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb1fb1bf-8c7b-47f2-b29a-619799ffe5b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3121e6fe-a509-4f7a-bc4e-1b3232876ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb406dc6-0dad-4936-9735-a50328bd7538",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b53a4afb-4f5d-4a3e-a82e-bfec2907bcd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d04a3136-ed1a-43a9-a9f3-4db0d748d35c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e824bf3e-3bb3-439a-8637-19aebfbcd374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3307d9f-4374-4ab8-aad2-5fea64a62e29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6386df6-6146-4cb5-9b77-bb4777b1fc3d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e8ffef2-7084-4a78-9e37-f5b43f614d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "517a8963-d6f2-40b2-ad97-9dae5c8a5f70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be06bae4-4554-4a3e-b89b-2437e4c91c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d7838f9-fa29-4225-96ac-7b9251bfc191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfc40e0b-d3e4-47a6-b509-85fa6313abd7",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0226bfbf-2172-4fab-80b4-a5ab2658e628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60040a5a-5d88-4e90-b417-978ff7f553a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b29d5f5-ee0f-4da8-8f2b-096df678e21e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2824ef44-d28d-4537-be32-5e275d40b4c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a640baff-b207-48fa-a3d7-a2ccfb7390b1",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8950163-b1e6-40e7-a64c-a3a4fd551da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc2c4c09-d729-49e9-a807-6ced311a0fe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a9b2851-e47b-4417-a840-e838f9252d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dd140cef-1049-4d80-88d1-4f236c355f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c48c2dbd-95d4-48df-a4ef-6befad262fb0",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5458ca2-5614-4022-b707-6cad4ef44422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "406202c7-0f07-447b-97cb-eb9fec841b74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f8b6050-8351-40bd-8045-21134924a442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ead8d071-fa96-486d-9a9c-ac5b9788d9f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f6bb116-3bd7-40e7-95cc-92262fb2a489",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f630a051-cfdf-48c7-bcb7-953ae8a94d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73b38862-6af5-4f35-a968-370d8567594e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c2bdc63-e5ac-494c-90f3-411e7bbc2b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f6d2771-6f6c-407c-bac1-18d41c2e283c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a983ad54-30cd-4afb-a633-f5e04b23392b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e67963-e898-43b1-9609-9831a3ec31b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f06f87c-4bb8-443e-a03c-d4555e64597f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f26ff39e-4197-4d56-83c7-84ce26d1862a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f7283866-1515-40d7-a485-5e12359d1049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f779c5-7312-4444-b650-b6147e91071f",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "949d8a0e-ade0-4ee8-9418-09015f45d74e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4350006-5f82-4a06-a1b5-58979b526511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "807ae471-219e-47d5-8ff3-70a1b32bb2c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "337f7b93-3e1e-4813-9945-d41dc5e95a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f3a463a-28ef-4f0c-acf7-af326716ab11",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e829c6-8c77-4d37-a19d-af7b3f1f6daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c92fd38e-580a-42f7-ab00-c475b59601eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04468ef2-9834-4795-b3c7-790debbc3f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c00dd78-c636-4837-997d-298e366bc0bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa64c697-4c6d-485a-b291-7d52279b7c20",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b66ed122-2948-4599-9b7f-7d8fc64fd078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aba72a73-737c-4cb1-b708-ae6c5e0b896e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa5aee91-9902-4f4d-8906-9f417ddefab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "45f246ac-1f31-4708-9c13-029004b0b996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b6cdf67-5083-4ff0-a383-1eebd1326e8b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcad040d-8c66-4c7e-b681-d0be8ca18eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46147345-d1ea-43fe-b4e9-7e630b440f30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f5d062-6dad-4fab-888c-4b22cee424de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8151a2c2-00c3-40a6-b7c3-e8848669d3c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1b89941-2e4b-474d-b885-cb0a44cde1c4",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4548958a-c1ee-4753-98eb-5a5f9dbbe66f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dcb422a-de52-4f62-b3c2-7b16c72ec728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68206f7a-0674-4bdb-83b7-9811765dc44f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5808d29b-0d92-44c2-9701-5d61e357e65c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35063692-7315-469c-8786-f1a5c3631e3e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d4c404-188c-4f0e-8f42-9aea8a36e403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e5d7dfc-54a7-4f82-8d93-141850daefab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e743ee49-32a1-4203-aa85-7c3de7ffb91f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c3ef172e-961e-4966-843c-85017e004283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "775ca099-8290-45b2-b073-3592681879c9",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0965805e-10e5-46af-a1ee-bd028be17ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5655e012-7cc9-4b9b-b406-00ba70375444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1b8c94-3d64-4dad-b78d-c21a63792714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a783187-a47b-4a68-9e16-83e10699a39a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cec7dcbf-049b-47a5-9dc2-33a061878875",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e31d97-a3f0-420b-a04a-90c80cfbb033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20fd1700-d281-4361-84e2-7cb54dd02cd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e39d3d-14ff-4b6f-8f70-5d0546e290f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1aab6a16-9064-459d-9d1f-036d524c96ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c741f41a-7951-488d-8efb-8457d432cce6",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77a70c74-233c-4bfb-9ee9-b1d89d674217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c50cb288-3843-4012-9b33-efdcfd206d49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "645660ca-7cdf-4b12-870e-5a0a57dd4930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d48b2c0-35d3-40fd-ae86-78b255a1a20d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e54d908f-d16f-4046-9d07-0e55f6d5a939",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f327954b-ef0e-41d4-a411-f7625c99aaf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26bb36c3-2834-4435-a484-0c7d03ccdc6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a63fb6-907b-427c-ba94-150b5e9916da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b297ec1d-3f7b-4dc4-b7a5-209aa9c25d1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fabc0503-26ac-4f0b-b32a-5f112defb9e1",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9933b5e-6a95-47c2-97b5-2144edaf45a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50bb0eb7-3c04-471a-a894-5b61fb42695f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c352c113-9030-4745-9c17-50710aa5c12f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "170a726c-eaee-4e95-a4fc-d6b799b87381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56cb6aab-14f5-49ac-abc2-9ce6340ae255",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c80cba48-c369-40ad-b663-ffae6d2f1553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ad21e0-3d52-4c64-b531-6e89eb5563f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14635d49-877c-4a55-b7ef-6135c3e0cbf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ef1424d-74ec-48d4-b2f3-284b4e92b2ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4807578e-7381-4e73-a932-a2d472dc2e03",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3991157c-4459-4f0c-a664-5a6f9b3bfb4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f980dd1a-bae2-4155-9647-2e4ddcbce92a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f213adbc-dc23-44c5-b938-14ae9f8f1e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbb0bcf2-dabf-44fb-9786-b7ea7d6140e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aea46be6-4001-4d36-81d6-a0df34db12d4",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "716c8f0d-6f32-4af3-948b-c59c63d17527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "762f6aeb-d5af-4994-aca5-e02e3cd7576b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d4a7c11-4e6b-4eb0-8392-049e120af71d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0975d6e-80b8-4ed0-b9f3-e5f2816ee76c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb93f0d-5c29-492b-a821-e655bd11dadd",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9b7151f-a60e-41f3-afbc-08c589d459af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13100c59-38e8-4fec-b362-1c54eaa957e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02ac8cf6-612b-4259-8bec-9c7ef4e7bd95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c247579-c3f5-4392-b565-9b20a67b5262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "467a0ca0-d4a6-4d81-9bbf-07fdd17ef74e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f39f28ac-1dc8-4e54-848c-3da820ffd712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "605e5f47-d69e-40ce-8d4b-e2ae04b8efbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "914106f1-19e0-4267-a4b1-52975f703b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "87258a4a-2506-49f1-bb37-f0827830eae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e29795d-1009-4e67-a307-a9768930fc0f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de714aea-507f-4a05-a577-06e626e5ec3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfcd83c5-7974-48a1-8ca4-612db5e81c3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f7aaa7e-8ed5-47e5-878e-d8734b62ee93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cd70ee0-0f04-46b1-9605-f25f1e9649b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc33b71d-82f9-4f34-8716-cc63ef58841a",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d27d6a4b-2a1f-4e7e-a689-3f4cedcc1cec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4330315-036c-4689-8e77-b69ea40150a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f293778d-2022-4a83-9ee7-bec865b3fa58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "dac5efb4-be4e-4451-b7fe-3656a4b67283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fed7f44-3d2b-4a2c-bd26-ca33a5143d65",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6902e046-23ce-4512-b3a6-b5463125d0e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4dc49262-30c1-40b5-bb7c-ffeceddfb202"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5cf63ce-0c31-498c-ae01-70d3601187a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5636a2fd-cdfc-4f4c-9626-a2665d502c2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863805b3-02d5-4d9e-a31f-c8b3243ead33",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eda9832c-9c65-4361-9a49-f6b75477c1a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c18aa206-286b-4fca-957b-b226d09a6b2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "749911a7-5ff2-4af4-bea5-c2c9b235c3ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f3ae114-a6e5-4d95-afd8-f843bd5e16f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1197d52-e4f5-4311-92b8-c0eed087f4d6",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26a47df3-0f4f-4d81-8a49-0b7463db7ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "347bc6c7-984d-4373-a060-3f8e0b6b5a62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0f68481-bd2f-4ad1-9abc-0bc7ca94cb75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7b1f231-7faf-4522-a3a0-86b4b1e0d245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f79a378-bb0e-4f5e-9069-f2ac4b278617",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f70e56-a0a4-4a95-b8ac-70184d878b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13a5b149-79d2-4f6b-9794-4dbfb5804c58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bec8342c-7a26-4386-b50b-1b8552185ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a14a5c3-c0f6-44d4-8627-a1cff56f4c4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c301f8-eff3-4d92-9882-0809dc57d55f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4807fab-1ddd-4857-bd0e-1f990fe3f530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14aa801c-1325-40b2-ba32-3203ad98b572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7521cf3a-ad1d-4624-bee8-a975d7a05ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa21546a-7b19-4fa7-ae3f-d729c98a7cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0dcd309-8bca-427a-9dea-c935aff53d13",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "144bad6d-8cfe-45a3-b6a3-04cb8946b2e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42f2b28c-752c-4c26-9adb-b5026a7cf4f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b8f7e8-c9fe-4182-8379-225d94ad0ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "eed800b3-9a38-4938-b8d2-34a203e3d66d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "355061eb-a9da-4609-ab6a-a1e350afa59d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f08042-8f28-4568-bf2c-ebab9e388366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73859274-f009-4254-8d38-6b2dc631ef2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a060d437-ddfb-466b-8fc2-1b57a6349999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "a91f0ddc-aac4-4855-8ffe-5e0e34dea2fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b65e31c-8bff-48b1-b934-11f915613627",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e29f566-4089-4b07-8cc8-1f10fa5e51d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfb180c5-6bdf-4b20-91b6-b82af300288a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e19fc85-5193-445c-b3e9-ef24552fc250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6712e67c-e8d7-412b-8276-b910693aec69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ced618-16ce-4933-80c7-9d306b435180",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c9dc5e1-ec7a-4a33-b74b-7f60102085bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc566f9a-c1ec-42fe-a246-4c1a7776f770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ab4642a-e451-47c0-87df-08be28fe4ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d05ea075-d815-4ee1-887c-c930b4525bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3576e7ac-c0db-4195-ac18-eda7f5a8036d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce4befb5-13b1-4e6e-a488-075c92d675f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2553b4b-7718-49aa-9665-2cdc754be734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f670d06-0fac-4c4a-9e74-7b4c703a4300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "507e622f-b271-4934-b5aa-33e7c1f1bd80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92c884ff-d9a3-424c-8160-54baae8198e8",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc5077fc-90b2-4ae2-82f8-884b8f0c1ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ce19e62-ed02-4ab7-96a6-7906078bae5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "610c3dff-f9ce-4ec4-b9e4-71bf4f64b77d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a8d4f9c-0b56-4bd5-9ea3-ae583a153bf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f762c4d1-7b13-4155-85f7-fd39f5cf621e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "314074ad-3edd-4ba4-8f75-c36f828ab6e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce29ce8b-4ca2-41cd-b9c1-b34582507b51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03949a28-7b59-42be-89b3-a86fba139b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b5171cc-fe18-42f3-b428-1c49ea87a66a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82dc338c-f2cf-4b23-b56b-73aa3f7944fc",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d30f8377-bf8b-4f99-a17b-395965fd81b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8638a57e-d354-4d97-a1a7-e8e9be18a3f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e169b9f6-116d-4447-a384-80d97e14eeaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dafac394-d070-459f-91ee-66406a1188b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38194ebb-cecb-4e83-a8cc-e851b6efe340",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2365de2-a23d-4ed0-9942-c40967fc8393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e222ca8-0d80-4a31-b2c9-363e4a3b8ae9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8082c34-8661-4509-b68f-d2d11ce162d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "04b20e83-fda9-4e78-9470-280785ad2192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf4fd2b7-5919-4b67-9bc2-5e299e69d72a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c993faf-91d6-4cd6-8eb7-7fca1afb1207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b40b4de-bf1f-47ac-bcde-9d21612d47b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c5970f7-1131-47b0-96fb-879a246a30b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "846a93e3-7cda-4b99-acac-de441df47480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b148e161-e4a1-4d8e-861a-469fe475889f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "536dc5fa-935c-4453-9f4d-b65ec895e6b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e114bc02-3f93-4483-951c-1fd08533be92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19b9195a-852e-4f60-babe-a14649ad3daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa52e36a-14ba-412c-91b4-6f4209a98a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b89984b-bab9-486b-a46f-f05571866ff5",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "780442e6-7f29-40d4-9292-711651026d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f04734c1-1b82-4ec9-85ff-1595a4d17117"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5f051a8-16e4-450e-a582-6956b0d15260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfb787df-8c05-41b8-b3f5-547b4bc49603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f1e7af-8852-40ba-a816-602d939c30f8",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "108909b1-2650-48df-b186-2424ea4c0c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14695798-d1c7-468f-8f31-37d94fa50699"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f77cd0-afc3-4dd3-9663-d6c18622e49b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fcf675f-328f-4755-9dda-fb1c6544022c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b08098-f627-4044-bedf-9102a8ce9a48",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1444a464-1b47-4e56-a327-f20420e5b278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2cede66-2c08-44bd-a26f-eccd204ffdcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2919f204-51b7-4587-a03c-9dfca4b1ec93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "997a15e5-7cf6-42df-bfc2-5c3ad3f89fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e709a80-306e-4de4-ba46-c0fb28c82d21",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "306609bd-6fa9-4789-a211-84b36db33cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "161944c7-77f0-4ae1-89cb-486f76285807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb9bc7ea-0bcf-45aa-8751-0afaf1d16131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5699a11c-0f05-4e4e-8015-b0b2ecd4c8d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9f5d38-d068-4c7b-abc2-d592e38d9d7d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f6e2647-7e2c-4ae0-adca-f7a90a760956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bbd163c-e91d-435e-b427-fb89e79b8407"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6b865cb-e75f-4a0a-8f53-bec259fbbc7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "0e45871a-12e9-42df-a27b-12b4980ab919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74107012-f1ab-4e72-8c67-97339ddc813b",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73965a49-69b2-4dca-9f67-86df36b7d546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bec0e25b-ccf7-464e-8ea8-adb1d89bccad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49e2e85d-ddb1-4dec-b5c6-f216c4d5502f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c71f25c-1d4d-4165-b20c-644af76dabe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73bdb9e0-33f8-49d3-bef4-ac21a5f9a929",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14163da0-1d42-45fc-8050-53681529735f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f2eb8e6-4393-4c44-be81-5e57534837fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da374ba-0a61-4823-8a7f-064e635bc5a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "21bd32a1-33a8-4da5-970f-60fb023d4862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c280aaa9-9d16-406e-a53e-8caaaa062880",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f39fb58-d496-44e1-80f8-01b00e6423fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1610a38-f5b6-4fb8-86b3-e3877b31706d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ae3ad1-08fe-4f2d-b9e8-efdaee453b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "57987171-1a82-4225-a3df-4c95dfddad7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36747f19-958a-4bf1-baf9-14906c10ba9d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24abc68a-2bc4-4bb2-bcf0-2da8df19f1c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad782e22-f3df-4559-bcee-2bfcd75f07ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2276bc79-96b9-49b7-9cf7-5ee5c1e095cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a55bf75-8530-45ff-b490-b207e81fb01b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a1afd7-0274-4c06-b22f-75bed9c4addc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb18c7f-25d5-491c-882b-1deec71e286c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "509a43f7-d3a8-4017-b2d6-9d4713313994"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cec2d53-d598-40aa-8195-11c26c0f5907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8404d558-07b0-4b0b-9bd2-c3d97839973a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d833e04d-30b0-4dae-aeb6-0739493394d9",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc67f25a-2eae-4ea2-9b49-1a765edee603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac4136f5-ebdb-4c08-8408-05e372d18539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "768c5f6a-9b61-4d91-8f80-32be7ae92112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a8faf38-6ad5-40fa-8b57-9d0ba2d6c535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1d934b-b49c-48f9-ae46-fb2a27689535",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba8aedf-ea22-4f94-90a4-9490477859c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f8c6907-60e5-4d2c-a921-b60e1fb302f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d35b69e-8db3-4600-b987-4e8c295a9dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "811bacac-25ac-4d96-bad4-4c1418a32f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75f7b3d2-799d-4705-94da-b55f7adc3c36",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7025c6b6-e9c6-4944-88c6-1d2caaf77e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9f9f79a-2cc6-4867-9d95-f22eedb7eb93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7feeeaec-3c87-4f78-af45-4e41840fc9e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "07b8bc99-d238-467c-ad49-b8656fa37ddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be1acd6-3bc3-4057-9cb1-35af29e9620d",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae1f093-b0ff-47b3-97a8-68e9f5310f5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ceb3b84-212c-4625-adb8-af0d05ff5d1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b332c0-f648-473e-abba-9f7d195fc9d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "74c5ba71-6e24-4432-9ae6-27433bdaf049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cee8a735-a6f9-4b11-8064-a3408f5693b4",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7da26725-0a9e-407b-856f-3747a064b9f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c51a511e-ae7f-4d1d-80d7-03bfdac862f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a486a3-002c-48ea-af40-8c5d7aa2cc72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "001bdb88-5875-403a-9b43-e0c72751340f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc6cd09c-28b9-43b6-a4b1-3e0209cbc218",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "606a01b6-c6d1-4873-a383-2b5bbb835590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2994fb6-27bb-49f7-8cc5-9c43242eaa55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de79741d-dd0c-488e-9b34-9bef8f15c9b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4f6a5da9-6cd7-4eac-a894-4b93f2e05cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e16d17b-673c-4c6d-af0c-58784991eaa7",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71fdc799-ee51-40e7-b486-29a90eac3702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e498c51c-3784-4011-a7dd-12f52c6ab090"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25e03c5-94a9-4f0e-9ad5-30761731adc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff104500-db1b-4c7b-93fa-dbd57128a78a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1506461-c529-4776-9e9f-e358b1fc3885",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbda0f05-884f-4403-bd3d-6b0411b54696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b4bf47b-cc47-4a64-89d6-fce9900ebda1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "047462a6-e00a-4db0-b209-b5a3825d31a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "57c8a746-a606-41e3-aa50-088c3fee157a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eecc3bf-6fbb-42a3-914d-0f33fe571549",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c8b5f19-1cbe-4bdd-9d65-7cd69555875e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37c6f2db-f6f8-4553-aac8-955271690553"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8198ec67-c837-4aa9-b0b8-929337a4b05e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "777e0144-f0ad-41bb-8a1e-f45f2a8654d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14acb422-e100-45d2-9115-450a783a8190",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc038cd-8db3-44e3-ac9a-8c6251284b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "635b8e8d-59fb-46cd-a580-cc5fb1fdaf2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7e94df-c60f-49b7-b52d-3ca63a0a2d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee6c30ec-a2f0-4671-93e4-d0bd77192783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1aab5bd-0133-481c-9e4f-4c9b892187b9",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "228e9c82-6118-4bbb-acea-e4ba4c95b31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de2aae72-bb65-442d-85d6-5d3d4bf921ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51bd9f22-6e78-4766-ac68-0fc42884380f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f74f0324-9ffd-4e24-a064-4471d0e1a9fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fab0173-1cc3-4e16-bab2-94367f8dec1d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86b509ad-b12f-4f04-b966-904be4c2bfaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0423f18c-44e0-456a-8eb5-9b2f5fa19096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e26fccb-89fd-4172-988d-5912fdda4965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb9b3b2b-f0d5-4a28-b546-cf66fee66044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd846ad9-d9ff-4289-afe8-53c4a566584e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e0e3739-d086-4565-8eab-4ce8bf0a8586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07f1562e-140a-48a6-bb54-5c77c1eeebca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e6ee072-4f7d-419f-b7cc-d311035bb595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "18f1a6d7-83f5-4789-b3a6-4a923a3de6b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8c1c33-42b2-4811-a7f6-76dc1bddb906",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d70ae96f-344e-41fb-969f-4dbe57a0a6a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c467d09-0b9e-4086-8dc0-3e8b11cf1e0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d415320-1d0e-4ee6-b7f9-b03abac17769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6867de50-af0a-4348-bc69-ae9d277c0c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23392d8b-3607-472b-a65b-93e59f35cbc8",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2974bbd-8eaa-42d2-bba1-e15ca5b06ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b93bd7fa-5429-4e05-8f7e-2d1d3887df11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ef8b416-fc1f-4191-8335-833ddff2c1bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "48b967ab-8994-4de0-adf1-93f9e9139ee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a0533c5-4dd2-456a-8e83-1b3063e56c16",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edd028b9-eb82-4586-8c31-d7b094598a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e056bd8-1ecb-4491-bbc4-1543330ae8be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1480c44e-c278-4e62-86f4-a14b95cdae93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "31526eeb-94ef-4b9a-a50d-62cd6b6a030f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e643ae3e-393f-456b-aa78-af99b9c720ef",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "805dcdfd-9566-463e-a2a1-88be29bf88a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ced7906-2fdd-40b0-9606-d4e0d79e1063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c63ea3b-48d9-414e-bd7c-30037f3dc009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac2883e5-c001-4bed-956a-4b869fd4af93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d560f03-2d8f-412c-a087-1ebb7aa598ad",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50caaa70-27e6-45bd-9aba-159174fcff94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "300384f4-9b5d-4abc-91ae-07f8356693b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c62562a-bdba-49b7-bc13-54bbd25d6ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d14af96-29b9-419b-9f63-439a3e1ef51b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5918c078-80c8-4bd7-a0dd-8306f9c1679b",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aca582b8-112d-40bd-aac6-0bbcb2e87486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e79f8c96-1456-46a9-9b90-c71f190ae59a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4697e222-3631-4d10-81e8-ec44bae5e82f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "54bbdd2f-4acc-471a-bbee-e9a4497e8c54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "970b77f7-5b20-40d0-955d-3a9f914a6412",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "252693bd-57e8-4b3c-801a-e69309fa6896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7057e3c3-dcc7-4c57-97e0-ada11edc59fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3523caca-e80b-4f2d-bda2-a4e092c68b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "35127e9e-3c30-4ddf-8341-5d4053e26cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef56e59-4cac-49bf-ac24-fd59f733d7f3",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eab03e74-f555-45b0-8464-9af13d988ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfb3fc01-2e0f-4232-a624-5b7f886143b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d080390-cada-4328-b1d0-415f8242d998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "53b70e2c-1241-4756-aa8d-f02f1f28a034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4556a448-a46b-4931-8cf7-8cf43909f22a",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb3ed798-aae7-4491-995d-6162b260209b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "058e65ec-ea1f-448b-8233-c4c4e247acd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c56def8c-71df-4fc3-9f87-3d1a4922b484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8320c6f-dfd7-4c37-a189-56657e400b30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ba4615a-943c-484f-9fa9-39c9f437766d",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "386c0321-d79c-4e44-a440-507b8134fa69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f998b24d-c908-4d13-9e9d-14883306c7ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d73b0e-3293-4c04-8b47-b938defc1d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f41627e9-dbe6-4b6b-82e5-d91098e5d17b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cec64b9a-ea44-4a3e-bca9-623708e161f1",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb58360-8bc6-49af-bc1a-a54d5ecefcd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f55a0a6f-98bf-407c-bed5-18a465eb8521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e14084f8-f9be-43f9-b60c-a3bd5306f308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dae047b6-96bc-4299-a2db-fd89441e4fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7566f152-23a7-41a7-aee0-d14734780b18",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9530ac7e-29d1-4f1c-b524-4edcfb16ac12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9db5c74d-22c7-4e73-a76b-e0ef47d21a57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c9915be-d5cb-44ff-8b61-20c6ec170fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "348b9e47-0d71-4368-af92-4104b944e039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20662cda-0cd9-43e3-9e7f-e0b42cedf3f6",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ad608f-ce99-41bb-80c0-6ffb2ef08641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56c2a45d-760f-4844-9909-0179323b5168"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42054c1-1952-4f90-b4e6-f03fdcba586b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8898773-7957-4edb-bcd7-2129cc940435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2039e37-ff6f-4ac6-919a-7ed5ea2d444b",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf085d3-2845-4e1e-8553-d1d4c22ed9de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ed96c91-3b25-4b09-9700-e438d50f2acf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "826eed19-7168-41ac-bafa-622917682e30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "44a80380-68d3-45d0-8f2c-dd46ced5cb84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69d8098-6332-4120-806d-08f53a3ae058",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c335d23f-b66e-47d8-91f7-775ae254e2b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34e2fbac-b9bf-4a6a-8143-0ca0013be11d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a64f43-e2ae-4ddb-bd50-c399bc0ffd99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d112cb32-3ec4-4db7-8bdb-c15130d19be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35817d09-b35e-424d-a399-bfe80aa58105",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb81df6f-15a3-44c4-a640-b96e11de9197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9debc8c-c3d2-402b-8eda-cb0ed10aed8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241a1b37-7ff0-4fb7-bc46-c9ffe384d224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea40ff13-513b-40af-a829-d04b90d4a89a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4351ce4-ce9e-4a13-9061-48ba4c3770c6",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8f0c13-2534-433c-a845-2e9aaf43c670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d699a295-579b-4e39-9646-d36f8ecf5989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "615147b1-7521-4379-9fe7-31d95914851d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d734855f-cda1-4ad6-a1e6-e09a2e748dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a0045a8-7434-42f7-bf8b-2dfc000d12af",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7d47b3e-9f05-48cb-83b3-bd2cf2bb8d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "96f87a26-1c1d-4fd0-ab30-d490ecd2e2fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e6aa2d3-41bf-4f75-b9f6-cb4a7c75c4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e54fbc5f-0625-486d-813e-09b3a87c4774"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "63eaf316-37f9-4656-a5e0-004db443c97e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2d2ee0b8-9665-4834-8d00-557e35aa124d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "569ac5c2-dfda-46bd-80a4-db0169fdd8c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3ac00abe-bdab-43b7-8800-0ca5ebc58cf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8852aacc-2793-49df-8399-f1c899df37ae",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bfaadf4d-8c82-4520-9ffb-67255e67fca0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27fa2bc2-64fd-49ae-9f88-757e6262d2d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "71ec6a28-5920-458d-a0cf-a7eca2b17b7e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6fd5ed3f-9be7-4b88-b376-72a25e1fea7a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9726311d-5a72-4665-a132-f3145c832f69"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ee329695-2c81-4581-a43f-9de97cf44c9c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "875172ca-5efd-401a-8e82-e1d0f328155f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b2695120-a197-4648-9620-2067d7d32fb8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6ad17826-58f3-4887-a278-898b3d87b6b9"
                }
              }
            ]
          },
          {
            "id": "568ea4c0-c001-4ed8-b0c2-85d69367eb19",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7f9137ff-13ff-443e-9e09-4856b753c9c9",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "3b15116b-0fb0-43b7-b538-37c87ad3ff0d",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f7a5a77-82e3-4d2a-a383-24032a9e9ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c078939e-b45f-41c9-8e17-271a1e69d24e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "426e3844-b281-4a95-8265-513b08d5a893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31cba656-3744-42dc-9c37-f38aa6a870da"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bc66c968-5fc9-41ab-91ce-b9d2e2582757",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "829802b2-2366-4a09-8867-bdb675b2b2fc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "af9aad30-baa3-4d6f-a65c-28976ee6c94a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4bbc70fa-0974-48da-891a-2312531bcbe9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b739959c-1d0d-4e18-a9d7-68adfb45ffe7"
                    }
                  }
                ]
              },
              {
                "id": "c9b00ec2-33ff-48a5-917b-4e1377c975de",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "21991558-6ccc-4ae0-9d3d-c2ecef83d121",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a1b4b431-9b46-4577-bce2-45dd097159ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "73c88a67-80a2-4a05-955d-ba8766fd5ded",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9d6b8c36-8ce7-42ca-9bf4-9d9ff736bf6a"
                    }
                  }
                ]
              },
              {
                "id": "2154a1ed-5497-40c9-8641-bd54a1b9932d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a102eeb3-84f0-4e5a-a507-5b26858db76d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3b7e43bb-3344-4401-bd11-e9517726aa21"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da4ba550-1325-437c-9f10-d8539bf90b1f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4e374de4-355c-4321-af75-83309ca883e9"
                    }
                  }
                ]
              },
              {
                "id": "70093355-e51d-4af0-bd1e-1bcfc9e20d9d",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb0ef791-ab67-4a28-8f9d-5b9f7cd18aec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "10158e84-5be3-41a4-89a2-2c0de696644c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8636edc-6965-4527-8648-df92d05c070e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "2c1212d9-f938-4179-85a7-84a8c6e048bd"
                    }
                  }
                ]
              },
              {
                "id": "4aaa4389-7198-4ce3-95e2-368b18a2a993",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4bef20d2-9927-4f48-9106-5ee234584cb2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4ec26547-389c-4c87-83ad-985dfc68e03e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "123ed6b2-3657-42eb-8f55-3af87fb6e9f2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "80026583-60f8-46ba-b9d7-1a330c4bef86"
                    }
                  }
                ]
              },
              {
                "id": "d5f645ad-0165-409a-b648-841ba5d74319",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "16038f9e-5803-4e62-a63c-77838e394922",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c181abc2-086f-4e7b-85f9-f371bdb3e083"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4acc6dc7-b44e-435d-9773-c3c3b42d8119",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a8d8bbb3-2b19-4bbd-8f1b-fde4db7c9222"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9d9b0e29-a0a3-4566-a56d-30bd6c87fb5b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "65eca9db-4a72-482d-948d-932e0f80f0d1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "148221b9-a162-4e8e-afe2-0a38e961394f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "576808f8-d02b-437c-8758-ff72984f505f"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9d2cad13-9fd8-41f4-a2d0-5868d6dda60f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "e0d39132-4568-455d-bb9f-04f6d3447435"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "725430ab-cb67-4e1d-8d19-ac9fbd23395b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0c429d33-03a0-4205-8e20-4e4f41657bb6"
            }
          }
        ]
      },
      {
        "id": "ecf50807-bdac-4df4-a2de-4c518dffce75",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "8eee817a-710e-4d64-9741-735928663bee",
            "name": "Negative Testing",
            "item": [
              {
                "id": "30672636-10a0-4fdb-89e0-40c8ccff4c20",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f24d7fa7-feaa-4029-b8c1-29ca6b652374",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "567ea09a-946e-449f-8f66-b258cc87073d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d044f1d-b5e9-463a-b90d-f297b687042d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efdb8105-dc12-4ea3-a5b6-319f7779a3a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9323eec-0c15-4a14-9a30-2bdc88cfa5e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c95397fc-8e5a-4185-9d04-84517c6c415a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "986f6708-0594-4ebb-8f6f-c775741da1a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4610ce0f-c856-48aa-b327-5dcb3eba4d89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "441cfab9-33a4-426b-87b0-a0cb2ab026d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "caa29425-8f22-4df8-914a-1ab773d8c40b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c71bcd60-a20d-4a38-aca1-cb71853485e6",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5861da2-5b44-446a-8298-90766aca923a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c10ebac6-2e4f-43a8-84c2-79145d1177af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10eaa3ad-65b6-4f78-b724-b3e419bfd9a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c92be6a-ae12-4c73-978e-8c434183f704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a4ee3b-f25d-43f0-bfa5-6ec1ded88cb6",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9b92ba2-594f-4ff8-9852-5ec77ab1b2cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "841bc91e-a59c-4b58-ae1f-0a84878202c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4833a6d1-0b8b-465d-a9d6-3a49e539e260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a6fb2f9-ff69-4563-ab3c-d3918415ce09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "265c08f6-ea66-447c-a32a-72ec9e9f9056",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b22682c5-5de7-480c-9593-3a9397fc1b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e78cee6-9b97-4303-818a-df47edbb459e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaf35918-6fde-4bb9-ba40-ef93de731f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7961438-5730-4646-ad14-90c3647024db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d6a328-7d4a-49be-a151-15b752b3c28c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e82238-3cad-491c-ad48-20e6d531f45a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0089fbad-a36b-42ad-a63e-478c1695cc70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "176614d8-7585-4443-ad43-4a59eead7515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b66ddc99-27cf-4c28-aeb1-60c1ec36305f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a4e7387-20fd-4cce-891b-92af625a0d3d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "668e9a49-9221-487a-aa7b-1643f5b5a57a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9c79950-3249-4464-8d57-870ec7382fb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2875f250-e684-4af0-a468-6683f9b0005d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "da62d27a-9559-4504-b591-365c8fdf5781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf3b0106-964d-4879-bb12-c0059c419b61",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ead1dad-1043-47bc-918c-6f15dafc6e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3391b979-1a4c-4bee-b2a2-591548beefcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5210dda9-e5c0-43bb-b72f-436c32874a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6109740a-5b14-46c5-aec5-fae68fda879d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd338c2-67ac-4f6b-9827-2f97122607aa",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db6c048e-1ee8-4b06-825a-cbdf1ad05da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53846bd9-e328-4262-965c-caac1548011c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6810999-3ec3-4a1b-afd7-688866f13cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9c81133-1fbb-4e5d-8d00-a6052d6c33a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9efc11b2-79ad-4f85-a5aa-5d13709ea18d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f026cf67-33a7-4d0d-813a-5bda2734531b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32c0c48c-05d7-4238-91dd-eda3fb864990"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d21af205-633c-4c89-8a96-28af0d972f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "010a857f-17bb-4632-8743-8ef5a8cd6eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc35702e-b382-4a39-b628-2cc2f9e0ebfe",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7579664-66c3-4ed1-b657-135ebb928376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b7e3c29-5590-418f-b928-c7c425f388c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37406379-236b-4162-b02a-b726faf22fdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f2aa79c3-9109-480f-9df8-32a3ce70173b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad35018-51f4-46eb-9b29-bb9798994416",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb8db5ad-b563-4c44-bd17-4b095c3879b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35a867b4-79e8-4aa1-aed4-d11c22900918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a83364d2-4f50-4474-8360-599ec591f76a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "359262b8-5056-4ea0-b707-26b8c2049ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2304c4f4-3314-45ba-b18a-e0e5aeece973",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a447968f-d89c-41eb-b632-b0d2f51717e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1adc9cd-1321-455e-b0d0-8613061139b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "228b7485-4229-4d67-8996-82eb33c6c285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "16f55624-c5a0-453b-a1ca-6b131d464823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7464862-a852-47c4-84ab-474297a097ab",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ddc8cdb-ad3e-4349-82d5-050ac74e922f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e9f0d4b-100c-4d81-9e56-0ea99d6ead48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bca655c-609f-4166-a9c3-2327ca4a4db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b4ac063-b889-4ba6-8201-0b04446a5c7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af4c7068-d53d-4a07-af09-e13dbe652075",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "731a7023-c882-4fd9-81af-a9a8e4f05a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdccf6b4-7435-4d49-8ae5-c61717bde984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff9324f3-45f1-4129-853e-ed0fbcf4cf93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d840be99-9ec8-463a-9817-69b6086c8604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74a3effd-050d-48ba-be3d-19dd2a2d4b00",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f55481-72f5-48d1-911b-f8ad7fe3b23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b56135c-f478-49e2-aa38-d1c336fd0c44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1509864a-40d9-4976-ad01-8b7bbf4173e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "568c5791-5aad-4a39-a730-a6a751a9f36d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29411387-6bc9-414c-bf42-37fa14e896dd",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9cbfa22-ef39-4e75-8aff-45d672871d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "094d948f-8e38-402e-89a8-a3d65d8555dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea9f3ad-00d4-4826-ab36-ca68ef102815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e61dcce8-995f-424c-aaf7-3478a306bcc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eebc3dd3-455a-4cbd-8c44-b1761cf0968f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d92645-645e-450c-8854-7e6342e7d575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d1b038c-fcc3-4e1d-b530-6cc0d34c11c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04bfdd95-6a6c-4e04-a6f9-afda376310a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "66100d78-6802-4ba7-95e9-91b2e1976e0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1616454-b8b7-4a84-abf6-87a609e90c70",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc8f09c4-86c3-4b87-b38a-fd895e9feecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3ec3e51-09aa-44f3-83ef-572d3654f432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94584942-316c-4014-a6f8-c1b6559b2f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51e22d7e-6045-448f-9e8a-7e8d69515b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4da5563-59ad-4f27-92cc-7fb037f2730f",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "441d9ee2-23fa-4806-90e6-abf6c5bb76da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39f52ba9-db1c-49e4-9c96-142f11a73dba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cec7a62-cf8c-4995-9ef7-c1c7b261b606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6e4f087-5ddd-4739-bdc0-9346ed2ca487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c18d53d-6ad8-4df9-9174-ec3d47d406f1",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b925eb5-fca9-41e2-87ca-e06015a8cf25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49ab1814-8bdc-4c70-bcbc-6fbbd0e02a50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7037f8aa-f88b-4566-99de-0f7347b3da65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "307e64ae-06be-4ddb-838f-46923f2fd1c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad73e453-8b2e-4d67-9705-d29d87c43e25",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40398242-e3a1-4ee1-9e9b-272497891ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe51ad3b-438f-4172-b025-26e4ea509806"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c77a5a3-30b0-46ad-b1eb-2b0d98c2ceeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae6a5425-a435-4575-acd1-edf984ee4f04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d83b4db5-4063-4560-b4d0-4a1ffd213072",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d754e54-7c05-4d54-a455-9216b45011cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfce07a2-4959-4b39-b7af-a9e4a15cd366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf6287d-0058-45a4-b6ba-c5817b76bab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dbfedb1-6291-4fda-8f18-1d17d6389b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02f8383b-c734-4845-a2ed-7e44ddce305d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7388862-cc29-4cec-a0a5-70d5ac76fedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30fe9ca3-1067-4c5d-ac13-cf8d5fcbdf26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da1865f5-4b06-45ee-9a77-fb385160ad12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d62e0b5b-9964-4948-9a67-60cf5a173359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb2387be-00ad-4f31-a45e-b7e900f8d0e6",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3745d6f7-d3f7-435b-8535-2b993d405235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4a4837d-a77a-498d-b108-99b891f2801d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51854896-65fb-4f5a-af39-06fbf296293b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4542d5e-8e29-4001-97a4-45341e713f0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c1c65e-4073-4c8c-ab65-8883a8ff79e5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0913c1fb-07f2-4657-97da-11f7089312b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3116451-cfe2-4aef-842e-0f9c3e0da8a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a045839-13ce-4cc6-a048-1f4a6053cf74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed36a6a4-f195-4668-8ea0-c310b31c7b96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55010417-1ad8-477d-ae78-56c614aff66d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebe18f03-0b2b-42c5-b178-1bff4735f6e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9951eb8f-3252-426d-8695-c14761549f6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91f5ca4d-5d2e-4d8e-92ea-d5d7084152af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "051d279a-6aa7-4aaf-9fd5-3080fa1b9cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a468cda0-c4e3-4961-8293-bff6d1cc03c7",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "601a05f5-1f68-4df6-9010-77c26bed4655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a1e557e-f566-428e-ac5a-385ad3325a3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a94cf42-1824-4d95-9fa2-6061feb99a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0687f459-5904-4a2e-b684-b6281599ad1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a89b1e5-875d-4178-8436-fd7ccce6d4ee",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66207116-0326-4ad1-803a-73b0b9525e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ac54e48-41b4-41f0-8a83-33997f838c28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad7ffae-3781-4237-a84e-baa6db3e010e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60fe5880-b673-4d22-8d38-c418763017f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e101f062-7493-414f-aa02-1e4d80001d10",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "562c7885-e643-4167-b6c2-db81500e5fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e38cdf54-db8d-434c-b603-e0e05c46273c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f8f6b8a-8ef5-400c-8b36-37247c8997ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9563b1f9-39bb-4456-ba15-95854c87419a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b4d0c7c-fd53-42df-9299-a3888e148077",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31cbe037-198e-4171-9c03-f881ae1101eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00a9396f-ba9a-448c-a3f8-9f2bf1fc2378"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d45f9da0-383b-458c-bcd5-0cfa0e2582fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71715d91-f8ad-43d7-98c9-4649e6990a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1e5fd14-a270-4ef6-8003-89b96a776a80",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f50a8240-6924-44fe-817b-cb02f0ae9b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "974c9289-b620-4f38-a2e8-5f198b78d1c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c5551e-4c60-438e-8aa9-869dcce0cc7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "764e5ca4-d308-4e3a-bf0d-9e9dc82e56e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3133d6f-b34a-4462-a924-87014778d678",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df0b5e6-4b4a-4bc8-8736-8d269aa89b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3dc91e6-8e0e-4a3c-af1b-8fd2fae7aa4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c4fcc36-5753-4762-863c-8ba0eeed9453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8de3072-e29c-4f46-90c8-f5aebcd33612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "149920c9-14b0-446d-b7a6-1ecfb2f3c719",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd965aae-ecea-40e7-8c99-cfdebbcb320d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b672262-0c51-46ad-91d4-a4c0febbc2fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e27c044e-dfbb-496c-ad2f-9d1046b4ef4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7be54052-00d4-4bac-99d5-bcf7220b6731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d6615e-80dc-48e6-9f5a-a797350527f2",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c422215-8462-48f3-8fde-1dfa7777eb40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34a98fb8-38d3-4e24-81dd-159f8a343283"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a290f58f-97df-4ff6-9f53-7021d64666f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac0da5f9-f63b-46cc-83b5-b33fcd852e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc97d80-5567-4d7c-889a-58c219700d9b",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c090b94-e37a-41ce-8e65-3ec0c5fbb25b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "962c18c6-be28-43aa-8fc2-28763797fd92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef4b057a-6ddc-4da4-a315-354972863531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ee015ab-5cc6-4d7f-b8fd-8f3b7603a6c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8729a4d-8cdc-4164-9f68-35adbdea9328",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf22a294-df79-4fd2-bbef-01911ccadbaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf64eb69-df65-4ec9-a75b-2a3411a45218"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6103d870-49c7-41dd-86d3-b8b236b8675e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35762af9-332a-4870-8971-b6390f3a5337"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e129f586-3f0a-4928-a289-14732b9735ac",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0e105649-1f22-4c4a-a024-924c86e5df4d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "220b15a1-1a3c-4abe-a168-acd982fbb4a9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5744dace-9bf5-45a3-ae5f-054076ec450f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9630c3aa-694a-4e17-8f49-e796228fcee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "34fc1024-0f2b-4f34-97ca-d6032d8cc2a0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae6d4f2f-af15-4438-ada1-7c476118c4e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cdfb197d-30fa-41cf-815d-8c7a1b89ac5b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1cdf7a48-ebb8-4e48-9c85-b9070c5105f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f464520-a996-4221-9e9c-ebdfd817ec5b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "59d3f6cb-c11a-4544-ba34-b87a04e2b89d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b88ddcd3-b801-41e8-be51-96d06402c283"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fe3ab453-9a45-4d76-b53e-f55f79e7e101",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6e33654e-54ac-4af1-917d-e78fcd0dfd9d"
            }
          }
        ]
      },
      {
        "id": "aa36333d-51ca-4a3f-b7ca-5af5fc7acbcb",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "55a41009-879e-4de8-b05b-5f6b47632c99",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8391c282-6832-40a1-86db-f92d2bab2e0b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e5289892-9b2b-498b-a27f-dda96a756ae6",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e38836ad-30d0-4527-b4ad-bf55ede5012d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "855f86d9-f6e6-4576-981b-8064e38310cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff486ad-b306-4115-ac15-c03653bf9295",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b33b0c1-62fa-4c1b-b0c7-b7640b93ed1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30003d41-d398-4db8-9271-ca3a0818ce12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa422d0-1bae-4a2b-98f4-acd599fbcf38",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0584bf36-8dc9-4abc-9714-6277cecb1814",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f30ad63-1d48-4f36-bcfd-91748ccf9ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66d08a43-bff3-4c85-a07e-6f30e0fc2ac8",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5587a923-e039-43d4-bb81-de59f4dea3d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "547dfb12-c718-47f7-9cd6-13b1c2d59f64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb05ce48-ce43-4a1c-82b0-f4371f25e4c0",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b115ed-dc52-41b0-99c7-052f94af99e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67996c72-06eb-4973-be6f-0a12f99796c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f474443-7afe-41be-b25d-0c44ad344f8f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "286c5a3d-da07-48ea-8b20-b6957ddfd175",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe5d83bc-3713-4be1-b154-23bc838f644a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad967b7f-0cde-4441-b87c-5b8dfb7b98fd",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddda3edf-3cb3-4752-9531-6af0ed109805",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33bdfcff-3c67-4de7-9b25-aad393ab60e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a8d3d3-33ca-4233-b128-3945a263987c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbe12a74-855f-4e2c-9083-da12cd8e185b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "819bf8f0-b4e5-4173-ae37-2d32cca3968f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4d62d3e-e367-439a-aaab-42604ac423c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae6c9f55-9848-4715-8d1d-3888cbd6c157"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12426886-92f8-46b1-96bf-34eb76b85820",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9b7366f-67d2-45ff-8e81-b62d9d35c1bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8031e3f5-f620-47d2-80e1-7bda8bf4cb5f",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f7af0ca-ac8a-41ee-91e4-32de647d110a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c9c43f8-f2d3-4e0e-9326-446b1e8d9b93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8004338-0e21-49b8-af98-51a9f8e344da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c56a6191-9653-44dd-b3d1-d917281c7c0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20dd55bb-8322-406e-a99a-feb85a165ed9",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1569203-3bc1-404c-8e48-65dbcea6d0e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1d21800-1495-4fe4-88d1-7923561de314"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f7d77a4-b835-42e4-8fa1-b0d590230a5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bcc3a2a-d096-4a79-87d2-501449a9643b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a684d72a-4231-4dbd-997d-da305c8f5526",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c12d125a-544d-43bc-adba-732311747574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b2f8743-4cf7-4674-b995-5fa52d8626ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c7ace0-5733-4ca2-b3f4-c7b31d195a09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd8a4de0-7acd-4a87-b116-909486a19284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3c40b3f-7577-46ef-9397-f2de6730b75e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "028d2de4-8bb9-46a2-9803-389eaf34b4e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aed7c26b-aeb9-4627-ab70-8e4a032f3bde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54224d0f-89de-45a5-847e-e4d94d0857f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea8113c6-9de4-4af2-8848-a16866922e1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c1f30eb-ada9-4329-af38-e792b41fa706",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09753686-e151-45bc-9fe1-2b1b33c744ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6e1b077-dc69-4d7a-b947-b7be9ec4d564"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16079ada-3d2a-4eb7-8608-4c9d23799200",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f74ec83-6b5b-4c96-92cf-86cc37e973ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0977136e-2fb2-4b38-a881-61d0157eef71",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f7dbd5-e53c-4188-9dbe-9255120cb7f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a39a50df-0a76-44dc-bd68-08521bbecd1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b18ca258-5bb4-49a8-a051-7e21879d5c6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "780c633f-40a0-4c28-b395-c62648753d8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74ae675c-c6bf-473b-9375-cd4a332bf37c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfbad607-5928-47ab-a0d7-55398a7bbb71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d533587-026f-4c36-acd9-fe074b93f76a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e45d2292-83cf-4dd6-89f3-5063a1aa4832",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d328fc8a-eb24-45f1-aaa1-8e59468d8532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "815aa63e-d247-410b-a017-08aae714a0c8",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1142190-ce2d-496c-9ddc-4c7c25aafb82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77645d6b-713a-4c21-84d1-7002dbfb0708"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02518c15-c828-4a8f-a331-0c5652a00f30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8531393d-31a1-42e1-86a0-4676c10e537f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b3252e-30f9-43b3-a579-209a4da2000b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f63805b-8dc7-4f74-be3b-54030ad91734",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0111e832-b13c-4715-82ec-3e9869a3302a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0d53ca-3353-4a23-ba23-81056673732e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8c7b873-ed16-4c74-b66d-74f1289f8739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d018af37-55e1-4368-8113-806bb8ddfb3e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd320686-c47a-4a12-99be-9fbf742e1513",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08fddf30-9b45-47c0-b79a-514537906e82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21ed7968-bd15-4570-acf8-f39f187cd5aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99e14e04-0d91-46a9-ba14-7c88e9b4c4e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b88994-a6a6-4b6d-9be6-434aeb4e0b93",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37cb73bf-6a2f-4923-b2ff-8097ee761b37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c40aee54-291f-4829-bd0d-c113c7b6933e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc2f97bb-f80c-4eb9-b4e6-9399d57331ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d9214eb-b428-493d-ac9c-02d9afcc0403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "440f8fd8-06fc-4320-a307-1e0dc268a0ff",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20f264b3-45ea-4053-ad8e-28027cb5f0a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09a22eb7-021f-4269-97be-f35d8cd43424"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d3a003e-48e5-4457-910e-e3d5209fc740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "401eb0fe-8468-4c14-942b-b3ecb11621c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac19b4dd-0550-41bc-93b1-4b7c21b9433f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e6e515f-8f4e-4345-9d55-fff3f04468e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cba4d1d-af1a-4267-9207-0343bf3896ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c09c4a-6faa-4f23-bffd-b069720a853d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "644eb3ff-f75f-4bb1-b9fe-e0025094fba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b056c490-03ee-4628-9d42-01caa2863c21",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76b0c0d4-78af-497e-a25e-49195b0980d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01ec4d62-4780-4f50-b68f-f6fdf83bd9c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89d5a87d-f808-4485-a11c-804e03556fab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e928da0-dc7d-4445-83d8-5bce812adba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb72cd23-6e2b-4cfd-83ef-c25730ff609b",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba79553-9d11-455c-a313-907bc877a62f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "720874de-bbd5-4150-9f97-85ded69e3967"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3fa4ad5-2a92-4f46-becf-1e4c49359d0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23daf94f-170d-4b3b-b399-35cc2b49304d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93918dc9-c323-421c-84da-5ffab6d97012",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19aae0e9-536b-44e0-9ca6-48e52ce86d76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a6a2f8f-57c3-497c-a5ce-e79fb02eeeb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89ab5500-12fd-4ce3-9044-fc910fe17cde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "778d31a2-f48d-4a11-86c4-dbd55e87e79d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e30891-9c96-4e1e-a18b-6acf48f85248",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bdfcbca-1306-4881-a509-acb29af79023",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2d5a0cb-13b7-4400-83be-403d0c338a8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5924af8-2acb-4765-b290-654b007c98ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e697060c-10c9-42df-9b6f-36abd2688d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99dc7406-dab3-4d2b-8531-7110963f9ba6",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4729c25-f19c-43f0-aabc-fdd7abd32300",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76795884-a2c0-41b0-8c1e-85112d939731"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c93ddc1-778b-481a-a439-b7090e589976",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48ee0b56-461a-4a8f-a57e-1fd1909825e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9843ae5-c12b-46f8-83a8-5bd350f645cd",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b9dca35-28a3-44b5-b23f-83f7d8503abb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f051346-95d9-4a53-972f-52039231125b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34bce1d7-1ae5-4a0e-aa4c-6e620645fd67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d85e834d-ca14-4c8e-a4f0-980c8d17e0ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9aa5300-02c3-477c-af45-e3a49ea392e3",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9378bd39-4019-44db-969d-0c8a97f5aef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f671a6aa-4650-4f5b-8718-c05b8beb7376"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf283a3-ecb4-4a29-b24f-e9762ad672c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33f43e22-32c1-4bef-9621-bf0d0e00ebaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "843cbb22-c24c-4cac-a6d7-f10e0148c494",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d83b2b5-9e46-4670-bec6-0ef57f053820",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9165dbbd-fc38-4f50-93cc-c2e091b8ba55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e0ebbe8-9a7d-41c7-abef-717d5dd3f92d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fdc2325-cd60-4f9d-bf32-0606a4e5a268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba98a8e0-d10e-40a1-b91c-4149317355e2",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d78d60d-9da1-497a-8bcd-2d5a7dbc1ddb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e258dba-5067-4b8a-a5e4-4e893b4dba7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5302a0c6-4ebc-4da2-9926-3e0760e2cc6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62b4d34d-35e7-431c-8f61-81e203cbbbcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdbc4d94-baf1-40d1-91df-6c2cc46f65e3",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f547cf87-a052-4dc2-bf60-2b595e7ca2c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "552f70b0-da41-4ee1-b8bf-7440ccc64a40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "782a2835-43c6-4890-8bbe-ab79eb171708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e891ff16-3291-4cd9-b6f7-4c55bbc75889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4743fe00-14ce-4596-90f3-5d0993cbfee6",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67850da3-6f16-499f-ab70-5758b1f265b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60dfb246-c8f6-418b-9866-0db52c3901f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b98448fd-c90e-433a-bf29-d04288b3aa96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63acbe08-d8ae-431b-a29f-eeadf1a89077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceba091b-c93e-45f0-8e17-94480586b5ec",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1e46f9-33c8-4b92-9b7a-419a90e3b755",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d59bc89f-b334-49f1-b035-6b497b76e00e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02501e9a-bde5-42f2-a2f2-b7d2d7278a97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe273423-716e-4139-ba59-e747cb027d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "642e5b5c-33ea-478a-98e8-80e00b9be5ee",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5be42f89-8843-4840-8982-5e6a4691b4b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5f68b49-940a-4ad8-be2f-9f8d0116a85b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f0c5807-682e-4544-8b1e-07511402ed28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46e2e050-cee9-477e-8dd0-4ac636ef8797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "930657dc-6822-47da-b372-655dc173dc42",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "532acd83-d353-44d6-be2f-70194f3a9e8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cc20d6e-710f-4ec5-abd3-70b06e86d811"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "786d193f-3fbb-4308-bcb0-307e9dd6b961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67fa1567-5cea-4018-a780-3a0fb410bc3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a81e7553-40b3-4d05-91a5-2fc335a8cfdf",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "219ef313-5d34-4061-87ac-874ab1a63544",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f25ac81f-fcb1-4f03-b9f6-cbf486c89a91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b548a71-187e-41c9-af1d-9c1d46bdfce0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dbd402e-2988-47af-94f5-5ff7943233e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c2306d-03c1-4088-b4ab-557b1fe78a57",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e66b105c-c66e-46cf-af82-a1544ae29df2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05fd01ab-53d6-4764-ad23-5f1bd58f8b66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d16177-a042-41e9-b44b-5e0a97753b16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dcd2193-5ef5-4a6b-8413-e7c07d236e3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f1c6fe6-5675-4150-ba28-c826de7e2d44",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc23937f-b1c7-49a8-aa35-dc855396c41e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eddabb78-bbf9-460f-a25e-0878f25109b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f93be6ea-4fef-4838-8442-90d434cb57cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8c990b8-b764-4a43-8c8e-97fa5444e2e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89cbb0f0-3155-4bcd-855c-a5efb4312ad7",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1700356b-c63e-4f22-8574-a2d74d936495",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c1a769e-ddb1-496f-a81b-f1ace4894167"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "600614e6-ea3d-4bf2-b1e0-2bef957a8654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "346d3286-76b0-40f7-9bc8-da5b385925e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "303c4c17-f434-47f7-82cf-ab6fcb24e937",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "444e8a45-5d43-47d2-8cfe-69967d1589bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc1accd5-4fd4-4aee-90a7-10c7f26b09cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "060f710f-6435-4d71-a0b3-c6c6779d7240",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f2182a7-3b9b-44cb-9182-d9f1a51137af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ca904a-4a00-42aa-be87-e67bcc04066f",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ed5e90-36b4-4f0c-93ff-d74c4da485a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba53c9a2-3a6a-42a9-b25a-71c666f8743d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1489fd78-469c-48a8-91dd-c8cd2dcb2f76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b74ee70-8420-40b6-a238-8787daa3a41a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fb601a3-3ed3-469b-9b14-88c0d76619bc",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "792be2c2-b1ae-4c94-a00c-3b8254dbfc16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f03d0de-0e0f-4bdd-8a1f-4fdba469b901"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "217a3232-883b-4832-a6c5-1555bc1e80b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46c85acf-8c43-4fab-838d-33c28d64cc2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e54ace67-671e-4bad-8bad-788e9d887903",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3b01a0-229d-42e5-b6c8-0d6cd125e44d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaca907b-dc89-4f5e-b55b-4999be68315f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec07e231-1235-4ff1-b60b-6923a2a4eb36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba99de6-a8dc-4d71-bf0d-5f13d9a6bc25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf1c16b3-d6d8-4715-8ba8-3c9677bb39bc",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "971dd8db-540a-4c70-976f-7caefcd7d936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2835bf6-b248-493e-bcb4-bc72b53e6cf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c267907c-d4c9-4437-a060-b2ac05069811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d1bccf9-acc1-4957-8051-d2c1047d8edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "462aeda2-c5b9-4947-8975-75b3aa978b58",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94827c03-23ed-4d75-9b23-aa59a19aca6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2950738-0936-4183-8174-358742732bed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89745241-ae42-4e21-aceb-c7821cf04f93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c13dfe51-2d9c-426c-9ff3-beeb6062a4d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26cddcdb-0850-45de-a877-e1769f4e3f76",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2037d19-aab3-4360-a09e-94fbb589bb14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffe5cba2-02b2-4a86-9d8b-0712a9fb66e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff5e819f-506f-475a-82c9-8755bf73ad78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e828dc3b-167d-434d-b2af-c150fcaf9bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fdbda3e-69b4-46a6-8006-599baabc04ec",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35def697-8102-4258-9e86-f410c4881764",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e81443b2-4d96-4bfd-8480-a6f6297854c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d26a7ac-64a6-4ded-92e0-b449cdd76640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc71014d-bce3-4da4-8ff8-123eca4262a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c72c3868-e123-4679-bfed-0f8703cceebb",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce4cc026-fd8a-4d7a-b480-80a857443dd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43e51805-5f8f-4929-ba50-f591289b549d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb2daf5a-7ad6-4ffe-920e-9b444820c793",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb845e3f-7e8e-406e-b128-d2dbe35177e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc53f485-15b9-4981-9806-0ea58fd25bb7",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b61b2399-3447-460d-9225-24713ba7533a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2b381b8-0016-43b8-89d1-640ea6ac3118"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4455be0-69b5-47b2-a10a-0666a008077c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85731222-fe64-4083-b235-05dbcca64ac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "608ea9bc-97ae-43b9-ba60-b13ee13859f2",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9125f05-3a99-4233-8392-b14f1a2da624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c7252f5-65aa-404e-bcb9-607f037bfba8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66d0bee3-c27a-4c20-84b8-e6a74404553a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bf44fa4-0b31-4204-850a-88f0422f9786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1277882-1641-49f3-9773-31692b611e7b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "386bc6f4-8e4c-4164-96f1-db11611b0439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cb60242-3339-46e5-8fad-6538dbcbfaa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1acfe5ae-eadb-4b8b-b4ce-e0e758a03e21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e0d2b63-2885-4f6f-960c-d4fe591604a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd727e05-01ce-484b-9270-70cead0be5e4",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "268df298-1606-4cf7-b363-0bc4666db867",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d7b795e-8590-4fb1-852b-f50272b72c7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc4eac0-b876-4b48-b38f-1df649054e79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f69c5bdd-e808-4083-915e-821862ede18c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73811e87-450d-4e21-953f-f5ca7c7c9164",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccd30e5d-214a-4195-a9bb-875bf82b1c8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37e74839-22af-4d51-aac3-60ede6d95547"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c73a21-8340-4331-aa63-973d1f231d5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20b13f19-4f9f-4c47-82c3-3f17b34b42c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e2a443-7784-4cf5-a6f3-fa2e0b073c5b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cde5a21-d4bf-4391-9d77-2bcc56967e42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7bd4c06-4685-4cf8-9339-8c2231f2d1dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae49015-93d3-4d93-a5f1-ba6d66b214af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b23e957-b099-4f2f-a68f-d1f7d5180501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa38ece-67d1-4ba5-b6a4-59f2aa96ee25",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b14178-64e5-475d-a6f9-f38aff9b9282",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c18bffc-ac8a-4943-bcfa-b3df8363a07a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b195bcc2-fd52-484b-ad39-28f5a7e2178f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cffec707-4208-4b02-95dc-2a07e3f1890c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e77f4c4b-507f-49da-bcee-d79dda02ff80",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45956277-343b-4acc-9f0a-eff2b1ad667b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6beb9cd6-ea49-4568-8d34-f2bfe93266e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc621af-a14c-431d-b5ad-e28f476ce10c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77a25739-2581-460b-90c0-c879e343f318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e7cd756-914b-4123-9f6f-ce2de818469c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f47db9-aa6b-461b-9a52-970311e9ab1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2910a4d2-adf0-4ce9-8136-dd18d7bd7a5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f368b751-7f9d-47ee-98bd-4dd12c122d25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "924e65f6-4002-4a91-9ac8-737cae1d2574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3063207f-3425-4b7c-9ca8-f3a2a8b2874c",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ad6d7c-2bbb-4216-bbee-75db6eb2a5b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f63acf91-a513-4de7-9515-bfd4b596aec6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e76f8070-fca9-4faa-a7d3-8e41f460093e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac044c43-b688-4c12-8cce-c6c2ec7b1f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be38fcdd-c2dd-4a85-b522-c00bda441f03",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9429cbec-5adf-4c12-944f-cc9546731bfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f45a2f15-eed7-4c9a-9a28-8413b12b4b8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50631354-3975-441f-be4e-7449a51c68c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9b20640-a77a-4a51-a8e4-1503e7599ba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c4730b1-6802-4b74-8a26-fa27e64a24bd",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b723c782-8053-4bb2-a71a-7396ca97bd63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56eb0456-4c15-4639-a7ae-81fd9bef0450"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "698ab671-e203-4d6e-8f7b-982b3f0c9a32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c71142f-86bc-4453-93ab-5eef780e0a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca87e89e-3f46-4ec7-a5b5-80e648582252",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ccb93b1-5c32-48f0-a3a3-87747e5adda0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edd12300-f5cc-41a2-9108-bf726205bb0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ff2383-d32b-4d7c-8124-8af99f6bca45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64384156-9d5f-4e99-afdb-a45c2cbb202d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5477fed3-e812-42db-8509-dd2f00f1bf87",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2582d6fa-24cb-4e06-8f05-86300bb47c1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81d1b15b-cd47-4b94-bf07-7eba7abc05be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "797d70e0-13ae-4552-81b7-414973c82a60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "296da4f6-594e-488f-8ed5-c6eb480ad897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ccc0e20-77aa-4d2f-baad-ca452d05c9b9",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d6a569a-2fc0-4ceb-bc16-2b6763c4f970",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adbde92c-777a-4b12-b232-e07b99b12ced"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "303728aa-e365-4e92-9b5f-f3f6c6852033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bace7d38-8e32-405f-8ab7-4da341cd2e5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c8abc6-6210-41e3-8743-66750adfb683",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2c3253c-3910-4644-8840-199e3fedbd55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80170f58-6ae4-4417-962a-e47c69c0cfb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b927c1e2-8a08-446b-b5f7-836c9e92c893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1024a13c-3309-4614-9fb6-02086367f9b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa4783f-804a-49c7-b10e-a7dfba785654",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0435d4eb-a2b2-4325-9ff2-49cc56e20208",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43b8dd2b-cd4f-4850-b6d4-ce72164571e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d524c170-c0c0-4160-b6c3-b3d6ebdcbd2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8b29e5f-c982-425b-8147-4ee6d0f8f6fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8753ced-41b8-4b99-8d9d-b1facaf8b3f2",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61e504f8-cc57-413c-99b8-4478e87b8dce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "576fb2a6-6705-4714-991b-689500f96dde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3237c82b-f3e3-4e8e-b27e-b03610bdb44d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecb83e02-f701-4adb-8f8c-50d3be8826ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6054ca76-00f6-4783-9879-fd55ec0b05ef",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e768dfd4-46f4-4749-a179-b3ed851cbfc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a06cb02f-9df0-4b62-a3c0-910a1c92343e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7957351a-60c6-4671-a0d5-194c1af215e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2f565a5-f0a2-41ae-bc9d-fcee595bc162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e175e72-95ad-4bbf-a60a-2323feb784d9",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba2876d9-1d0b-450b-8394-97d45fbbca1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0c76ab6-195e-4392-a169-1830bda67963"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e83f839-eebd-403c-a771-48461a3db6ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2de33f3-d96e-4dd2-82c2-41b20642e680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f978b828-a5f4-4706-8186-849b0751964c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f82ea69-bdf3-4a8d-b38e-b87ca35a0aa6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efa34aae-79f5-4e37-bdbf-6fe2d664854b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10207781-d90d-4aa4-9f7a-2ad5f06de6f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edfb22db-3320-49a2-ac29-33258199df7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e04debf7-4432-4b69-b6ad-a53e70dae4a5",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb0fbccb-fbc5-45ae-a452-ae23c849a19e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9760fdf-69cb-42d9-9870-e4ed7a3a383e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1fc252f-ed60-447e-8970-fd2a639dac59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e60aca3-508c-4d2e-92a7-cdf338699031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "291b2829-d00a-4160-81f2-53873b313941",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d9f8a99-e555-4f51-b4c8-74f7a65f2787",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df17a981-ceb2-476c-891b-6d21c53119bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b000e158-2d8c-4e2b-b605-06f49601f9d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d2cb59a-6cde-4c74-8df7-c0a7625bd593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d19066d-cf51-4bcc-94d7-0b58005d95b8",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "552f5dd6-368d-4939-996b-20a47b26162e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d243834d-bc71-4dd1-86a6-2e7bc66071b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa67406e-d36a-4918-9b15-fbda80974017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "100ffb38-5ee1-4a53-a28f-3444af637093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a63c71c6-363e-4edb-8ca0-3770123c7151",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b5809bf-08e0-43e1-bf4e-6c1c8129bd7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f8bb7bf-7606-4477-82cf-0d96bf18e29c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7694d67b-5723-4956-9056-cbd0d4cd8cc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2a86b75-0bfe-4473-a0c3-b2cf305c3096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a7a07b7-aabb-4a74-af24-a185af891685",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb22972-efef-4c6f-b5f9-8403c8805731",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1f8c34c-2bb2-4272-92e0-23ad597d629d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6758e304-4658-47a5-aae4-0c4e1eebc0bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bae43fa0-51ba-4075-8788-395240366b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f9e01b-a973-4366-a5f3-40ad3f5d8504",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f892651-33c1-42d6-b308-803aa0bba43d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2497aa2-17f9-4ac3-86e3-f1ef66e6d7dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eadd8b62-e60f-400f-8ef6-b34ab7be1d46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b8ea9e0-1cb7-4604-8491-e51f2575c991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a54fafe3-31af-40e6-8b70-f5f8fa02157c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61ec68f9-bef4-4cc2-b97e-45ce2bb12407",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64e8d7a7-05e2-43b0-a0b0-0d5108a80a11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c81df50d-6c04-4449-b57e-44a72a54a493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7685dc17-b934-44d2-a20d-2d0db30869c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86c7807c-01af-4b9a-b3eb-35a2f5ebcc9f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ec831a-bf0a-4fc8-ae73-1023d622de9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0efae60f-4d15-4dc1-8951-d96f0e37ab09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2945cb3-3a73-4f5b-86b7-43ced43e0f78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b793b8e-5cc7-45b2-8e68-dfa5cb252f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16648e24-9cc5-425d-a884-75ed671c93c7",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe3c8bcf-30a0-45d2-a7bb-1c731b578217",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85dd9d7f-d9f7-4c48-8835-51021c65f4f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "debb25b7-fde4-4890-bccf-884bf139f3d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65ea9bb1-2611-4cdf-98b4-6030483d3912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dfa65eb-5b66-445c-a907-8c65ea990c2e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94fcc554-01a6-4997-a0b1-369a84319c14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a1abd53-94f4-4121-ba3b-b88ce4d0a4c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc0bcb7-a1f4-4dc4-b570-7dfa83b69e36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e18938ff-8549-41a2-82de-bad50dd39e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c0a43a-00ab-4b12-b81c-1fc1346552e2",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29aac58-6f1c-4929-96ab-a085f60d4350",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "733fd772-b980-48c8-b2b9-4405d3184df1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae195c9-15ca-48a8-a8e5-c43c391ab509",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6609f917-abfa-4a81-8971-24f75b6fe650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cbbcc3d-b33d-42bc-917f-1ae170414b58",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76ca5f7d-cc8d-4f98-a59e-cac2278fbf0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e61868d3-36fe-47f1-8ef5-a892ebf6ba29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8abf0b6d-79ef-47bd-bbaf-9f0c4e74f09c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aecfc22f-51df-4ff7-aef0-8268d972bb2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0671a621-d4cd-4e31-a755-45bbee89ae0e",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edfc253b-575f-42cf-8de3-5de0395eb2d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a858dbb9-15c5-48e0-8723-5253274cbd79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd9590f-ce6a-4528-93ba-5da28973d614",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7be93795-043f-4767-844c-e4a07fff7228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e13838f6-d151-4ec8-9950-d9f4bd9ff256",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5194923-cf8f-4ddd-881b-0527ac64d31f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a3f7f4d-e869-4684-808f-310d3b73b359"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6dd2e42-e1c9-4aa7-8162-dc551af29dfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd243024-1454-4948-8872-2803f5eebc9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00010779-8a61-4f21-b9a7-10557a9d9cbc",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d626d1-eb17-49d8-8266-4be43ff95d7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84850c92-f8b3-4399-8859-9008712ce221"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a4866dc-0261-43bf-9e1c-859ae2344aac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57290ef0-0f63-4464-b0f6-160eef3ad379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b41cac9b-ce96-4f70-96e0-0675d2d958a8",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15e7799e-4f0f-41bd-9d1e-24d97ec2516f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17ff9cbc-58ab-4736-b237-636896a067bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4abddcf-cafc-46c9-9819-5c6e53472704",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "254e2363-becf-4dae-819a-4b5929ef1af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2df289e-e00f-48f2-8ec7-7bb8b2c55bfd",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49187fea-f8f9-4fc3-b474-9a047698707b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61358373-1d04-4cc7-b29a-83d29fb661ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ec2046-7ebe-4ec5-a51d-5c752117f474",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0718d5cd-af4f-452d-ac94-219f8c7fa2d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf7e931c-3e9e-4bf6-be81-38a1f8bcf702",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a8e8d4f-7e86-4b81-a86f-99fd97d3b761",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97654806-ecf5-42b9-ac11-274978c09274"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "244ec5fb-30a8-4486-a473-132e9e906d99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a23036f-df0d-4291-b741-cb5c05df1544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "554d3e0b-0872-4317-82a1-7b6fb922f7c0",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11f901f-504f-4598-a86d-e375d79314cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df8b52d9-ae0e-41b6-b792-d8a5a4ef3915"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd120857-5106-4a10-ad7e-d0547a764459",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3c3e2dc-2d0a-4a29-abe1-3e2ec9c3e48a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2673ef46-c945-4aed-9596-eb6f281862f3",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "794e61c1-121a-4254-bea3-d3c7a1a770e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76617c54-8c6e-4c64-8cb4-1ae79a40aa94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82e8cf75-31d4-4eb3-a18c-c67edb312d5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f58e1f4c-621d-43fc-8dc8-3328940e6400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d286548c-612b-47a8-9a7e-82a2e20dcaac",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75365749-05e7-4ad4-8d39-0e54fd613301",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "622b44c1-1bd8-4678-ae28-fab11eb4e2cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b0ecebb-ab07-4a94-8893-f53113849f70",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a71aa56-e924-4731-86f1-fb9225997a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db26316d-1cf5-4ffa-843e-f8394a50ad24",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c477ab8a-a0ba-4209-9645-cd79e37d16e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38d15e55-d222-4f66-9727-a58f809e0798"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "160de101-f440-4561-aac6-c073a5593808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "571b742f-0d4b-4b37-a77f-01c4fcc16e1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "492041d1-0502-4d53-93eb-e3b9f2c98e12",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b356cd3-883d-4094-bc20-99093c23c604",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5f8d054-0eeb-4967-b2ac-aeaf9c941fda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc03cdad-15f3-4934-926a-60d09833c27b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66002867-6779-4c79-b34f-b16b73a8c535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a61de14-745c-4fd9-82d8-c41ea627fa4a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f2d90e-8821-4cf6-b434-a324aa354d58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a6e0ff8-c924-4696-aace-e0a414092232"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1407cb-89e1-48d1-b601-37aaf4d5ce17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46952f65-beed-463f-9f87-69404c65bfa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f49390-7e57-4591-aa7b-d2540efbd5da",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9511d1e9-a905-4549-8c93-3c80cde7d471",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9642d81-ee7f-4be1-8f06-ffe3f0242266"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f80df5dc-c7be-48f0-aad9-ed8b149c797b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65d73369-12c9-40bd-ad96-6fc28773c8c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a28dede-f5b8-470c-a3b2-a1123a315d38",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84d027e0-111f-4895-90ce-8192c6d0a4e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40e73a54-9f55-4597-bf30-0a8c9bff56bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf94fb7-ac36-4b78-b702-3af6df0c6cbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33d82ba4-96ab-45cc-a2be-1cdac49e72e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5d20af-aefc-4a77-aeb1-cb4a36616e24",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "961e8321-1017-474e-ab6b-fc6f0873a10e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67e441f1-7e3b-48b3-91c2-2f0cefe03b0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b33e01f-0a83-4a65-a2c8-c3de91fa03b3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a314b295-d03b-42c6-bdb4-d88f240b6409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f2422fd-a7d7-4df2-afd7-0ba09563c4b3",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0efec4bb-6bba-487d-ae73-175d7327bd2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a5c9252-bc8f-43e3-8b96-b8a740558470"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db2e2b7-6634-413b-a288-c7e9e3dbaa0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72e733a1-7e1d-41d3-8e1f-31e120cc645b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d53d7117-f70c-460f-a431-65b1a0fb0f2f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f455dd9a-d491-4e57-9e5d-75755d0ad7c2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "588ad4e2-f4bd-49d3-842b-af5927533b2a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "75459dbc-751d-4ed8-9366-c1225aac99fa"
                    }
                  }
                ]
              },
              {
                "id": "93ff0a16-013a-4fb9-bf0b-123bb9966c6f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e5f22553-bc63-47a3-95f5-a29346cf252c",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e03896b-da62-487e-bf99-ed3c4d354dfd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "95522359-9c26-479b-b9ba-fd43a88f48e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d800f477-e277-40ec-b55f-2d2c973ede2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e4830fb6-5f79-41b5-9ea7-991f40d870e1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d9c833d7-fe2d-410c-9a1d-d509b44273cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "66c65050-c7e9-43e0-9efd-3ee88ede3808"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "226dff3e-6f63-4631-9d7b-2107aa3208eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "898ded06-fece-445f-a853-384403dd1cf1"
                    }
                  }
                ]
              },
              {
                "id": "f8485773-b9fb-4020-824c-b0e7995e1d3f",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "9f10a651-33fd-45e9-b128-f5c5eba80e49",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb77953f-8454-414b-9ff7-38d4e240afdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "2acfc5e4-b7bb-45e1-bf75-58df0e87c2cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32e12e0c-5111-43bc-8965-8b75d292df6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7445a902-9dfc-4f09-b32e-bf361c791c83"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e24cf8d7-1659-4f1f-bcdd-595d18a0ff33",
            "name": "Positive Testing",
            "item": [
              {
                "id": "973c2992-be7a-4398-be82-637910bacba5",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "be97067a-89e5-45b5-944e-8fe7e432422c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9306ba5e-744e-48e8-823e-f6b316e893fe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "473e0a81-b394-4cc0-8547-a2deea013803",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a4469cc-fdd3-47fd-9303-436c095b9f2f"
                    }
                  }
                ]
              },
              {
                "id": "aa8052eb-3bdb-48ac-8d76-e69cd60e63f1",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5d7dc99-beb8-4e90-bf7f-9221f03cb223",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3ab332c0-5e6b-4381-b963-1e64137c2f48"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6aa2674e-6112-4e2d-a139-0e02ceb33d20",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c3412ae5-de95-4c55-b937-77bd686a4f2e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ec5274f0-a116-4c3c-888d-f057a4debc1e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "53de39dd-43a6-40ce-8be4-5463d32e910a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f59eefe9-0bb8-459d-9ba1-b43feedb07ec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "11a2fd6a-326d-4c9f-a10c-3205f043ece6"
            }
          }
        ]
      },
      {
        "id": "0745a949-1433-4ed7-ae52-732cc957f083",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "da6e78b1-c67d-4327-ac31-fb5bba87f48b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "46cb632f-7b58-40cb-ac50-2eecf0f8b665",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c5b5367f-441d-4f91-affd-e051d74f9c69",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "653bea8c-cd46-41df-9e1b-ceb45a85a92b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f467e660-c0f2-4b77-92a0-fede1365a206"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4368efb9-dd8c-4fe6-a81a-4b53241f77b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f603a3f-72ff-4b99-a9bb-f18e868e7eaf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c70028f5-1bdd-4da5-8b08-55d9c946f110",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3ec7a3bb-dea6-4644-8e10-9b179268206e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d40bfb4-154f-4968-8e1a-e66a97a4c1fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f341147-39f4-4a97-936a-1e62a44aa139"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fe7505a0-ae8f-4b03-b80a-39ea36dfb4b4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "164e46ab-8f71-4d84-9d24-007eafd75634"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "800782bd-a8b3-4010-84cf-653df80a778b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ac70b6f1-9c89-4c91-bf57-5da2ccbf6003"
            }
          }
        ]
      },
      {
        "id": "61db8dd2-4a9e-4529-91a9-cd52579fd271",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "4c8dc595-7f6a-4232-a3d2-d9535bb18938",
            "name": "Negative Testing",
            "item": [
              {
                "id": "29d74366-1b71-430b-922b-bac2afde5f67",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eb16add0-1d45-4096-b758-63acc9e33be9",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "385f6c77-4eff-4d4e-9e47-e510cb9ac3e0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6a9e78b6-c8f8-47c5-a1f0-9038dee445d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8bc663e-5605-40d8-b22f-e4d12bccc783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "51bd7a72-34dc-47a3-85c2-1637f062d767"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a295ce2-5ab3-4406-885c-0114928205db",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "26b0e7f0-3dcb-4300-912c-872c4db60b95"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4e4898b1-d3bc-4191-b97d-78530d0c1602",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5d838011-144e-4c0e-b96f-95e51b73c58c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6d2e873c-78db-45c6-b289-0dbfa33afe0f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a528316d-3a17-445b-b484-13e679dab244"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e5baaa63-794b-4f61-8dfe-db5ce7820112",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "44cdb53a-56ea-44e9-9042-ee8ba85cabcf"
            }
          }
        ]
      },
      {
        "id": "760bb84c-41e2-456a-9b16-2cff1d2322f6",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5b6bf803-824d-4783-86e4-25346f70c30a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "15327b7e-855b-49d4-b5eb-d33623c6848a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "11c64cb0-1660-4eca-8b7e-9b69a526e51b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aba6f54-d0c1-48c3-84bf-ee08930d8d52",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3edfe1a-e74d-4d7b-b25f-15cf3337df79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d8d099f-ffdc-46a9-9287-ba295d503867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b00cccf2-7652-42ac-938f-f96481825a00"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a66268f4-9962-4901-a1ff-00a9e0f39e46",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "927df45d-e8aa-4d41-9a74-e762e3c15834"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ee86da8-5a29-4608-9864-d50b4fc5d1bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f6b0daed-5d3e-4096-8acb-3d01d0ca777b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4fa86448-cc48-45de-82cb-dc4468f39d6a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "93c9e5dd-a114-4e1e-a2b7-da8da8a9b7e9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4e341b2b-b84f-433f-941c-516008292e9e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "690a3b2e-0b98-44d7-9466-0f3aeb6776fe"
            }
          }
        ]
      },
      {
        "id": "27c3d4fa-31be-4912-8753-3e4bdc37a2eb",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "144d5802-7f00-457e-8f9e-2e34d1a94187",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "87f7b9a1-0482-4936-bac6-7be141d8094f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4c11559d-8a9a-4d2f-9ccf-e884878f063f",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9854d2ec-0eb5-4e6e-83bf-4866a3278241",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7c581a4d-7b44-484b-a02c-3c1a8588a3ad",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 63.444444444444514,
      "responseMin": 8,
      "responseMax": 681,
      "responseSd": 84.321527082076,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1719535112639,
      "completed": 1719535137128
    },
    "executions": [
      {
        "id": "8836a717-7c95-4c88-a015-e08fd39c72e0",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "091e7e0e-3ea8-4d4b-9e53-c372468a39cd",
          "httpRequestId": "574c3fc7-b39b-4744-a4cc-a354a8f27c83"
        },
        "item": {
          "id": "8836a717-7c95-4c88-a015-e08fd39c72e0",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "2bd8f900-53a1-426c-a8a4-f8b5e5b7e987",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 0
        }
      },
      {
        "id": "d8a32e66-0970-4006-8a98-e1a13b5092e9",
        "cursor": {
          "ref": "e17c19a1-5cb1-4416-a493-c35091fb7ba6",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "33bc8bd4-f33b-4563-8323-6a3a12aceba9"
        },
        "item": {
          "id": "d8a32e66-0970-4006-8a98-e1a13b5092e9",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "438b8b57-b9b2-490c-91ab-07f33e1fec58",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "44fdca86-fb36-4a4f-b297-31c22eb36a09",
        "cursor": {
          "ref": "21711bf6-3cff-466d-aac8-5592a4b3ba37",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3d9ff036-d1f2-4cba-8844-34be946a6237"
        },
        "item": {
          "id": "44fdca86-fb36-4a4f-b297-31c22eb36a09",
          "name": "did_json"
        },
        "response": {
          "id": "cdc10ef0-c9bd-481e-80ed-527374ddcc7d",
          "status": "OK",
          "code": 200,
          "responseTime": 282,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2bed5f8-f157-45da-aefb-d8065e2f28f1",
        "cursor": {
          "ref": "73cb8f52-9ad4-4e83-b2f2-ab35b7cca134",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8c175d8d-22fa-434b-b1db-ba4da6e76ea2"
        },
        "item": {
          "id": "f2bed5f8-f157-45da-aefb-d8065e2f28f1",
          "name": "did:invalid"
        },
        "response": {
          "id": "8f7a2dfc-1b48-4257-af3f-8bbf43e1cd98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2bed5f8-f157-45da-aefb-d8065e2f28f1",
        "cursor": {
          "ref": "73cb8f52-9ad4-4e83-b2f2-ab35b7cca134",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8c175d8d-22fa-434b-b1db-ba4da6e76ea2"
        },
        "item": {
          "id": "f2bed5f8-f157-45da-aefb-d8065e2f28f1",
          "name": "did:invalid"
        },
        "response": {
          "id": "8f7a2dfc-1b48-4257-af3f-8bbf43e1cd98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "316c5d4a-99bb-4a4d-bd1e-571ee484809b",
        "cursor": {
          "ref": "df795452-1ab5-44ea-b277-cd24f46f7217",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a13a3df2-e651-4479-9915-e1b24b0c2949"
        },
        "item": {
          "id": "316c5d4a-99bb-4a4d-bd1e-571ee484809b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "5692af58-5559-4f3f-b199-02181e1c17cd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 100,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc3da3ba-e4cf-458b-b3ab-847d5e869b1c",
        "cursor": {
          "ref": "9f18e860-66a8-43ba-bff0-7727de52387d",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "62a7e3a1-baa8-4854-81ad-955d09069dd0"
        },
        "item": {
          "id": "cc3da3ba-e4cf-458b-b3ab-847d5e869b1c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0a3ad598-11b1-4f7c-b8e3-f77b39b8d131",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1be2d3e2-4edd-4390-adb5-07a0035cf8ea",
        "cursor": {
          "ref": "f952f985-0aa9-4300-9aa2-a4d4c6f6c2fe",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "162f462b-44ca-4043-9a7a-f28d2409c8ab"
        },
        "item": {
          "id": "1be2d3e2-4edd-4390-adb5-07a0035cf8ea",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "275c0d01-4a68-4c69-bd41-6312521a3eed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b972febf-b717-4707-b3a7-a2472694db8b",
        "cursor": {
          "ref": "e2e96f4d-e867-47af-b8ba-69ce645f314c",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "51d28b0b-d869-4c7c-b845-e870208fd401"
        },
        "item": {
          "id": "b972febf-b717-4707-b3a7-a2472694db8b",
          "name": "identifiers"
        },
        "response": {
          "id": "1805d0a9-22c2-4fa5-8194-0fd7e2f43f33",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe1fd710-2c9e-4d11-b204-054ebf2e7172",
        "cursor": {
          "ref": "41d616bf-e582-4598-9814-ce6f1e41b5e2",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0d8e03d3-0427-47f3-9f30-2bf6338949fa"
        },
        "item": {
          "id": "fe1fd710-2c9e-4d11-b204-054ebf2e7172",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5d527c7b-9cf9-49b6-9a72-016b3c9efe38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a4aeec8-bec9-4852-a258-a59abe8cfffe",
        "cursor": {
          "ref": "8d069a77-83e2-4e25-b8cc-5ebe5b140394",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "349a33ee-59ac-48f0-b995-fb8a322afc97"
        },
        "item": {
          "id": "6a4aeec8-bec9-4852-a258-a59abe8cfffe",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1517e134-5e78-4203-b7ff-053997718aa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45e7b36f-3b99-449c-904f-bbbdcac4ea16",
        "cursor": {
          "ref": "338cf9a1-3bd4-41c4-af82-6b523bb663e3",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "92f6981c-b36b-43af-80b4-bc7216620f74"
        },
        "item": {
          "id": "45e7b36f-3b99-449c-904f-bbbdcac4ea16",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7ca11f49-86d9-473e-8f8c-5001131dd1f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1e6aa9d-fb54-40d7-9558-f70022617da7",
        "cursor": {
          "ref": "dcbb5fd6-ee28-4df6-a5fb-be257e0b74ce",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "cad77cff-ad18-46b3-91e9-54a31601ac30"
        },
        "item": {
          "id": "d1e6aa9d-fb54-40d7-9558-f70022617da7",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "bc17723d-bda3-4832-9392-494f2e807043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebee389e-140d-4967-a30e-a1bdbf285818",
        "cursor": {
          "ref": "b682e80d-36d6-4f99-8681-5ebd44d1ec00",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b112760e-3772-4e95-9631-d35fba75e827"
        },
        "item": {
          "id": "ebee389e-140d-4967-a30e-a1bdbf285818",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "e0f6bfff-1d5c-4766-bc81-8798ab813506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f51609da-af3c-4667-a65a-80b122ef8c11",
        "cursor": {
          "ref": "ae144386-e9f3-494b-8110-07d9c9509f1a",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "63879e03-c39a-4111-89a1-3c798643ce82"
        },
        "item": {
          "id": "f51609da-af3c-4667-a65a-80b122ef8c11",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "dd46580c-3b71-4f5a-9bf3-ad90a77cec72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1c3f8f8-7dff-423d-babd-8a4be2a9202c",
        "cursor": {
          "ref": "fa689758-982e-4533-a258-168e6d6c6b95",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ee5c9f42-fd02-426d-82d3-6ec1261515e5"
        },
        "item": {
          "id": "b1c3f8f8-7dff-423d-babd-8a4be2a9202c",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "0613676f-e83e-4ee2-8ee0-15f1e79b8cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e4855cd-f634-4fdf-8176-846cb5bcbe87",
        "cursor": {
          "ref": "206d703f-2c17-4607-9d29-18e49fe9e0cd",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "94cc472c-67c4-4fbd-a8ff-bf6f3f38e83a"
        },
        "item": {
          "id": "9e4855cd-f634-4fdf-8176-846cb5bcbe87",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4d87d7b7-68b7-4c32-a3ce-2c86707f2bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7611b31e-5c04-412b-a97c-894273561802",
        "cursor": {
          "ref": "8c1a9090-15d2-469e-8afa-e0df040eb5b3",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f9a97659-a787-4635-99ca-34b4f942b7a5"
        },
        "item": {
          "id": "7611b31e-5c04-412b-a97c-894273561802",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ae3b80d5-09c8-48d9-aff6-4f241268c583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34a4593e-32c3-485d-baa0-6641a231c129",
        "cursor": {
          "ref": "f0bd9393-ed80-4064-b9b6-e7926cfedbc5",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d39767be-0e18-4cef-8825-644faea9acf6"
        },
        "item": {
          "id": "34a4593e-32c3-485d-baa0-6641a231c129",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "cdbbfc69-9322-4f54-87f6-49b6ff630241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb406dc6-0dad-4936-9735-a50328bd7538",
        "cursor": {
          "ref": "69e45987-3067-4b67-9623-db2a3518d37a",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "03b69695-ed95-4406-8b2d-8b73ffbb3fa4"
        },
        "item": {
          "id": "bb406dc6-0dad-4936-9735-a50328bd7538",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "20838516-4a15-4ccc-82d8-c95c02f5f46c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6386df6-6146-4cb5-9b77-bb4777b1fc3d",
        "cursor": {
          "ref": "1428af9a-0fc7-464a-bbaa-29484a0a4525",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f2c79258-3732-44bd-871c-44913b553d3e"
        },
        "item": {
          "id": "e6386df6-6146-4cb5-9b77-bb4777b1fc3d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f89a1d76-b83d-410e-85d3-6b0635946d31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfc40e0b-d3e4-47a6-b509-85fa6313abd7",
        "cursor": {
          "ref": "bc40bb49-feb9-4ef1-b334-5669662c0182",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ff213e56-55b5-4ae2-b55d-3646c0e27f04"
        },
        "item": {
          "id": "cfc40e0b-d3e4-47a6-b509-85fa6313abd7",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "90658e60-b3b4-4880-9b6b-c1328aa76946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a640baff-b207-48fa-a3d7-a2ccfb7390b1",
        "cursor": {
          "ref": "c51af6b5-bf37-42b4-afd0-220e3ade14d0",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "dbffdd0e-cdc5-42aa-86e7-3ac67b19865d"
        },
        "item": {
          "id": "a640baff-b207-48fa-a3d7-a2ccfb7390b1",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "6dd4a54c-b37f-4432-b71f-07e80c2f2022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c48c2dbd-95d4-48df-a4ef-6befad262fb0",
        "cursor": {
          "ref": "9e56fa18-2141-4ed0-aadc-1c3dca61067c",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "fb808af4-460e-47c9-8da0-1d44b1022d98"
        },
        "item": {
          "id": "c48c2dbd-95d4-48df-a4ef-6befad262fb0",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6dd353d7-c59c-4c5c-b52c-5f075157fafc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f6bb116-3bd7-40e7-95cc-92262fb2a489",
        "cursor": {
          "ref": "f74ef4fb-cc69-4abd-8148-7f49762faa6f",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "b2b9ccb8-c882-4e23-93ee-87392056c80d"
        },
        "item": {
          "id": "1f6bb116-3bd7-40e7-95cc-92262fb2a489",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "df204ed9-ee7e-4a7a-9976-ee3120a6e295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a983ad54-30cd-4afb-a633-f5e04b23392b",
        "cursor": {
          "ref": "8c910ea8-c677-4e79-904d-944f8634d032",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "663e8032-7b55-4e1a-a78f-a1040d3a66da"
        },
        "item": {
          "id": "a983ad54-30cd-4afb-a633-f5e04b23392b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "29e342bc-7321-414f-b1d0-e3957707734a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f779c5-7312-4444-b650-b6147e91071f",
        "cursor": {
          "ref": "c8b078e4-8c96-4576-bb35-b52fe4b53cf2",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c11209bd-1c11-47e6-ae5c-c2e82f33bc15"
        },
        "item": {
          "id": "50f779c5-7312-4444-b650-b6147e91071f",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "41856c9b-60ee-4d4a-811f-b653454b44de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f3a463a-28ef-4f0c-acf7-af326716ab11",
        "cursor": {
          "ref": "bb34eec4-961c-4b2e-b766-388c23611871",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7378cbf9-53e5-4092-9d89-944b70ee7850"
        },
        "item": {
          "id": "8f3a463a-28ef-4f0c-acf7-af326716ab11",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "d5912603-519a-4ce7-9b91-e62cdb69264a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa64c697-4c6d-485a-b291-7d52279b7c20",
        "cursor": {
          "ref": "32c66bad-c6a4-46b0-a2c3-1e99cce9b0dc",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "daffafd1-8cf1-4c7c-8795-8abe08d6b810"
        },
        "item": {
          "id": "fa64c697-4c6d-485a-b291-7d52279b7c20",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "df8bdcbc-86e0-4120-8f60-b4132c5fefc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b6cdf67-5083-4ff0-a383-1eebd1326e8b",
        "cursor": {
          "ref": "73c8c489-3b3d-4384-851e-bbed75fb1a9a",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "54feac47-15d8-484f-8fcc-94e0776574d3"
        },
        "item": {
          "id": "6b6cdf67-5083-4ff0-a383-1eebd1326e8b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "da12d20e-aa54-4aec-8543-6e90a76ee305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1b89941-2e4b-474d-b885-cb0a44cde1c4",
        "cursor": {
          "ref": "f6cbfd1e-81d8-4994-b96a-04f46079625b",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "7019c0d9-b81d-4901-abac-15cf35af8416"
        },
        "item": {
          "id": "f1b89941-2e4b-474d-b885-cb0a44cde1c4",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "84aaa91a-16b9-41af-8d50-39805027acf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35063692-7315-469c-8786-f1a5c3631e3e",
        "cursor": {
          "ref": "54f5362b-4f66-4476-8b97-dd325366bcc2",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "5bdce8b3-a485-4e93-afa9-6b92ff831c8c"
        },
        "item": {
          "id": "35063692-7315-469c-8786-f1a5c3631e3e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b3c7eba4-e640-485e-be82-1ece3c407fd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "775ca099-8290-45b2-b073-3592681879c9",
        "cursor": {
          "ref": "37226351-8651-4f0e-b7c9-5b720a9834ea",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f70716a2-f7d4-4de1-81df-8f415075d9a4"
        },
        "item": {
          "id": "775ca099-8290-45b2-b073-3592681879c9",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "5b0d3013-eabe-478b-8094-582f23e8b198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cec7dcbf-049b-47a5-9dc2-33a061878875",
        "cursor": {
          "ref": "2ee39f58-a0e0-4575-ab1a-ff84641f2432",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "2fb563f7-2cb4-42da-a731-da753c6fb6ca"
        },
        "item": {
          "id": "cec7dcbf-049b-47a5-9dc2-33a061878875",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "96951faf-45f9-4627-bf61-292e93d182a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c741f41a-7951-488d-8efb-8457d432cce6",
        "cursor": {
          "ref": "15075479-241d-4b28-826d-a1039cca1e46",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d782119b-1f72-435d-b025-14431015f509"
        },
        "item": {
          "id": "c741f41a-7951-488d-8efb-8457d432cce6",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b35c26d2-7be0-4bd5-859e-2f5a9b5e915e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e54d908f-d16f-4046-9d07-0e55f6d5a939",
        "cursor": {
          "ref": "2a7556f7-75fa-4af3-b4d5-814cb962f1bd",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "24680b84-9703-475b-8c61-fa214ec06787"
        },
        "item": {
          "id": "e54d908f-d16f-4046-9d07-0e55f6d5a939",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f4ab1387-3376-4e90-9bcb-c1a7ef346d79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fabc0503-26ac-4f0b-b32a-5f112defb9e1",
        "cursor": {
          "ref": "cef85a0e-d81c-41de-a803-89ce1bec00c6",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f2e25c65-7242-4214-954b-f791d67ecc32"
        },
        "item": {
          "id": "fabc0503-26ac-4f0b-b32a-5f112defb9e1",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f2b81bd4-00f2-46cf-88eb-6afacf84522e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56cb6aab-14f5-49ac-abc2-9ce6340ae255",
        "cursor": {
          "ref": "6b1ee419-53a7-4b40-87f3-9a3a7e54981d",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e7eec3d0-cbde-4595-a05b-91480ffc78e2"
        },
        "item": {
          "id": "56cb6aab-14f5-49ac-abc2-9ce6340ae255",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "822daaf4-6d4a-46fa-95cf-bbd726806f42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4807578e-7381-4e73-a932-a2d472dc2e03",
        "cursor": {
          "ref": "5b85e596-b4b4-4ef2-ad0d-4c0c401223fd",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "316e4920-8bd1-4c52-b1c4-ef5ba4d66d0e"
        },
        "item": {
          "id": "4807578e-7381-4e73-a932-a2d472dc2e03",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "9d7ddf18-6102-430b-87c5-58d33119bcfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aea46be6-4001-4d36-81d6-a0df34db12d4",
        "cursor": {
          "ref": "793ca8d8-d23c-4dfa-9d0e-b7b38754315f",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "eef2ac97-df2b-4c63-9c2c-2bd0a597c26a"
        },
        "item": {
          "id": "aea46be6-4001-4d36-81d6-a0df34db12d4",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "078d0d43-e037-4019-b920-44d1cca47b9a",
          "status": "Created",
          "code": 201,
          "responseTime": 681,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "4eb93f0d-5c29-492b-a821-e655bd11dadd",
        "cursor": {
          "ref": "85a31952-1106-4a0d-8a7c-7ebd7e43b296",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "67ff1946-6489-4f0d-b11f-a386d363872c"
        },
        "item": {
          "id": "4eb93f0d-5c29-492b-a821-e655bd11dadd",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "efda4f6a-782d-43d0-a257-b3c70be22fb6",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "467a0ca0-d4a6-4d81-9bbf-07fdd17ef74e",
        "cursor": {
          "ref": "3bb40d89-421b-4f3d-8060-7d35fc407110",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e470519e-a534-4fe1-9dbf-74235fe4f544"
        },
        "item": {
          "id": "467a0ca0-d4a6-4d81-9bbf-07fdd17ef74e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "3fcd9579-47d2-4906-8661-54d308262591",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "0e29795d-1009-4e67-a307-a9768930fc0f",
        "cursor": {
          "ref": "6a3906fb-1a87-4b45-a3a6-b5e58beb0a6d",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f3edb6fc-0dbf-404d-ac27-d8cb69d25c0c"
        },
        "item": {
          "id": "0e29795d-1009-4e67-a307-a9768930fc0f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b7ce9a04-387f-4604-9175-bc6a2a1204b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc33b71d-82f9-4f34-8716-cc63ef58841a",
        "cursor": {
          "ref": "743e87a4-499a-4d89-908e-fae49373755f",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "e2a9ebb7-2112-4508-ba87-d27fc54a1145"
        },
        "item": {
          "id": "dc33b71d-82f9-4f34-8716-cc63ef58841a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "5b152205-9072-41aa-9841-1d802cf63289",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "8fed7f44-3d2b-4a2c-bd26-ca33a5143d65",
        "cursor": {
          "ref": "e521c913-9e26-4891-9292-b8d8fc035942",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "bf421f97-de45-46f1-866b-42c10bbf59c2"
        },
        "item": {
          "id": "8fed7f44-3d2b-4a2c-bd26-ca33a5143d65",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "83fea395-b167-46ef-a283-e97bf9056fe3",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "863805b3-02d5-4d9e-a31f-c8b3243ead33",
        "cursor": {
          "ref": "7316ffa1-08d9-4d34-8b2c-2ee3402397b4",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "da42fba2-ceac-4841-87f7-568f9cc3b2df"
        },
        "item": {
          "id": "863805b3-02d5-4d9e-a31f-c8b3243ead33",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "4ef89263-8b26-4d0b-8ef3-8cfc0865120e",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "b1197d52-e4f5-4311-92b8-c0eed087f4d6",
        "cursor": {
          "ref": "f6ba8c2b-a072-4349-9536-1ea4cb7b3aad",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "01728dff-84f1-4c9c-84d5-0d43e9000ed6"
        },
        "item": {
          "id": "b1197d52-e4f5-4311-92b8-c0eed087f4d6",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "bde54441-2322-4d4a-853c-ce4073ed4467",
          "status": "Created",
          "code": 201,
          "responseTime": 338,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "9f79a378-bb0e-4f5e-9069-f2ac4b278617",
        "cursor": {
          "ref": "00ff4bb4-76c2-456c-970b-8bea1dda565a",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ca10807c-470e-47a7-a042-3913a68b2002"
        },
        "item": {
          "id": "9f79a378-bb0e-4f5e-9069-f2ac4b278617",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "5f177321-2c2f-4bb4-9a00-2a5579dff131",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "93c301f8-eff3-4d92-9882-0809dc57d55f",
        "cursor": {
          "ref": "1e2b0790-f1a1-4cc5-a60d-c952437fe2e6",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5f733bb3-e810-4e4c-a21c-d3ed936d7ce9"
        },
        "item": {
          "id": "93c301f8-eff3-4d92-9882-0809dc57d55f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "755ea588-93f4-483b-be08-be36485a9429",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f0dcd309-8bca-427a-9dea-c935aff53d13",
        "cursor": {
          "ref": "bd990399-5caa-4615-8124-3b135a09d67e",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "aa7d88b2-1689-4323-997d-e6267957cd1a"
        },
        "item": {
          "id": "f0dcd309-8bca-427a-9dea-c935aff53d13",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "30996a54-7353-4e1d-bc2f-753da597ca91",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "355061eb-a9da-4609-ab6a-a1e350afa59d",
        "cursor": {
          "ref": "a058a6c2-5dcc-4d5b-9aca-381cb1bc1af2",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "836d1ee4-03e7-45fb-a800-2f30ba1fc1cd"
        },
        "item": {
          "id": "355061eb-a9da-4609-ab6a-a1e350afa59d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "fb911bed-6de5-4b4d-ba57-9fb4f0e18c5a",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "1b65e31c-8bff-48b1-b934-11f915613627",
        "cursor": {
          "ref": "c38250b2-a4dc-4bb2-9162-e7c72bae2724",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b3a11ef2-b707-4e55-98cb-107d0bf9bd41"
        },
        "item": {
          "id": "1b65e31c-8bff-48b1-b934-11f915613627",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c96ed6f2-03b9-4fc8-a13c-a336cf4163c7",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "87ced618-16ce-4933-80c7-9d306b435180",
        "cursor": {
          "ref": "2adb8b9b-e07f-4cf2-800b-0ad73b86c5f5",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3ef48050-47e4-40e6-9a33-cdee475b0fdc"
        },
        "item": {
          "id": "87ced618-16ce-4933-80c7-9d306b435180",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c17a989a-b247-47dc-8234-d5f8472becfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3576e7ac-c0db-4195-ac18-eda7f5a8036d",
        "cursor": {
          "ref": "da4eeaff-b2e7-4cb0-8a1c-a05b55cec154",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "4fef9392-42f6-4c08-be1d-8ede88baec2e"
        },
        "item": {
          "id": "3576e7ac-c0db-4195-ac18-eda7f5a8036d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "a51d99df-a719-4ea0-aa5e-52edad96ae6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92c884ff-d9a3-424c-8160-54baae8198e8",
        "cursor": {
          "ref": "e85534e7-c2bb-4443-ba11-3806f583d066",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a1d5c0c8-58a6-4355-ad6d-a8339929330a"
        },
        "item": {
          "id": "92c884ff-d9a3-424c-8160-54baae8198e8",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "22d0f7d8-b4e4-444d-9f34-ef4222821642",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f762c4d1-7b13-4155-85f7-fd39f5cf621e",
        "cursor": {
          "ref": "9fbc2e02-74f7-41d7-bf9f-98dddd553109",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "72ea41e0-8bf7-4803-9694-3d84ab24bd09"
        },
        "item": {
          "id": "f762c4d1-7b13-4155-85f7-fd39f5cf621e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "cc074b57-4e4e-4119-aa3c-2c5c153f16c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82dc338c-f2cf-4b23-b56b-73aa3f7944fc",
        "cursor": {
          "ref": "011338bf-9f10-4eac-8983-432be62b1b3d",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5d22d286-2d05-4f25-a6a0-9443884a72a2"
        },
        "item": {
          "id": "82dc338c-f2cf-4b23-b56b-73aa3f7944fc",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "8cb67faf-7d68-4aed-b2e9-0c60bfa10b07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38194ebb-cecb-4e83-a8cc-e851b6efe340",
        "cursor": {
          "ref": "055146c5-68ba-4836-b8a7-98875e748d45",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d10d4dc6-d73d-4e1e-a118-900768e5b795"
        },
        "item": {
          "id": "38194ebb-cecb-4e83-a8cc-e851b6efe340",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "22c1cd79-8bf6-4880-88ce-59c352423ea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf4fd2b7-5919-4b67-9bc2-5e299e69d72a",
        "cursor": {
          "ref": "6b78e72b-b88d-4625-a1e7-62cccae67259",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "9f398395-e6a2-4480-9544-93564a4a9fb5"
        },
        "item": {
          "id": "cf4fd2b7-5919-4b67-9bc2-5e299e69d72a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7df466c6-6e99-4aad-ade0-179033317cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b148e161-e4a1-4d8e-861a-469fe475889f",
        "cursor": {
          "ref": "15006b17-5f52-4204-92a3-959456bb57fe",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "617340c5-7472-4ac6-9ca5-f7673c8097ee"
        },
        "item": {
          "id": "b148e161-e4a1-4d8e-861a-469fe475889f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "dd20c82e-1d73-4073-a72c-54d30e28d7fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b89984b-bab9-486b-a46f-f05571866ff5",
        "cursor": {
          "ref": "0a8358e0-647a-4967-8827-19109bb70455",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "98e3c0d4-a7ff-4d6e-acd9-89c83dab8ed1"
        },
        "item": {
          "id": "9b89984b-bab9-486b-a46f-f05571866ff5",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "793dbe5c-8206-47e0-aaa8-4c1108a5e203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87f1e7af-8852-40ba-a816-602d939c30f8",
        "cursor": {
          "ref": "2471c1c4-c328-49a4-8947-c749ff78fee4",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "61407930-9b24-4a6d-a917-5fa291e152f4"
        },
        "item": {
          "id": "87f1e7af-8852-40ba-a816-602d939c30f8",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a731959c-7bfb-45bf-9d82-3395d6909947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16b08098-f627-4044-bedf-9102a8ce9a48",
        "cursor": {
          "ref": "b49e197b-1a22-45e7-bcbb-eaf589b1a129",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "2d63e84c-baaf-4c5f-a093-bbaef34cf420"
        },
        "item": {
          "id": "16b08098-f627-4044-bedf-9102a8ce9a48",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "71f477da-4371-495b-9ebb-55022b75f3e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e709a80-306e-4de4-ba46-c0fb28c82d21",
        "cursor": {
          "ref": "6da265fa-c59e-4a5a-a5e6-3d63957473a9",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "83640118-2c9d-45a4-b225-e8bdc8c7f88a"
        },
        "item": {
          "id": "2e709a80-306e-4de4-ba46-c0fb28c82d21",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "3756c7f9-62c7-4a25-87ac-b3bb1f613368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f9f5d38-d068-4c7b-abc2-d592e38d9d7d",
        "cursor": {
          "ref": "fe5431ad-e5db-448c-b5c2-84b9cd7885ac",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "45a7bf2a-665b-4667-afc3-9db7e3b2d536"
        },
        "item": {
          "id": "4f9f5d38-d068-4c7b-abc2-d592e38d9d7d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "4e88ca8d-1293-4753-98b3-9f187a3619fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74107012-f1ab-4e72-8c67-97339ddc813b",
        "cursor": {
          "ref": "b3307bc1-64fb-430e-b097-be0c7b839350",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4a790aa2-e043-40d0-a76a-bdc9dc802f30"
        },
        "item": {
          "id": "74107012-f1ab-4e72-8c67-97339ddc813b",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "7a3bade6-d386-487d-ae8a-f7862d3fc981",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "73bdb9e0-33f8-49d3-bef4-ac21a5f9a929",
        "cursor": {
          "ref": "5c2f799d-7f26-47a0-b09c-fd8586b32ea3",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e6e0b674-d5e8-41d7-bb73-8bca0f4654b1"
        },
        "item": {
          "id": "73bdb9e0-33f8-49d3-bef4-ac21a5f9a929",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "8f5bc392-e987-4fd5-ac11-9d287c9e04af",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "c280aaa9-9d16-406e-a53e-8caaaa062880",
        "cursor": {
          "ref": "7ff6b537-38e6-4426-aead-741cdbe9445d",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ed682c73-e804-4c54-906d-3d69a1a71ac4"
        },
        "item": {
          "id": "c280aaa9-9d16-406e-a53e-8caaaa062880",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "039d0c9a-e2a7-4c53-a79c-d8e65d62d63d",
          "status": "Created",
          "code": 201,
          "responseTime": 370,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "36747f19-958a-4bf1-baf9-14906c10ba9d",
        "cursor": {
          "ref": "aa0da590-c6a4-430f-aed3-3ade5e7ab928",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "0d988c1e-2ae6-4f98-940f-f183c240f031"
        },
        "item": {
          "id": "36747f19-958a-4bf1-baf9-14906c10ba9d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "a9d64fa7-a5f3-475e-a51e-e046d976e9ca",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "91a1afd7-0274-4c06-b22f-75bed9c4addc",
        "cursor": {
          "ref": "cfb0af3e-de36-473c-9c89-54645866f2de",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "34443638-061b-421a-be44-3a332789c59e"
        },
        "item": {
          "id": "91a1afd7-0274-4c06-b22f-75bed9c4addc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "cd248c10-1868-48b3-abb4-e9d5bcdb4f20",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "d833e04d-30b0-4dae-aeb6-0739493394d9",
        "cursor": {
          "ref": "acf73001-72ac-48dc-a13e-f156e07652ec",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "122bcc97-aa3a-423b-a75e-fb5047f39b88"
        },
        "item": {
          "id": "d833e04d-30b0-4dae-aeb6-0739493394d9",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "70f8f3c7-7394-45f0-aea6-9a7850228a99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f1d934b-b49c-48f9-ae46-fb2a27689535",
        "cursor": {
          "ref": "53aecfbe-d91a-4eec-9cb3-54038e76b602",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "1f5efccf-29d5-475b-8de4-24a931ebf6d5"
        },
        "item": {
          "id": "2f1d934b-b49c-48f9-ae46-fb2a27689535",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "b3554d9f-dda4-47e2-bfb8-d09be2e7d8e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75f7b3d2-799d-4705-94da-b55f7adc3c36",
        "cursor": {
          "ref": "6670de96-2ed7-4a0b-9780-1778104a8451",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "072915ef-a987-44be-a6e5-7093481ba26a"
        },
        "item": {
          "id": "75f7b3d2-799d-4705-94da-b55f7adc3c36",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "31d3323a-f512-4b48-8c47-a7c768dcedd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be1acd6-3bc3-4057-9cb1-35af29e9620d",
        "cursor": {
          "ref": "5aa6bad7-1774-4814-8aed-1ad451ec39ba",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "ffe83dd7-be8d-4c32-a45d-d274344564aa"
        },
        "item": {
          "id": "2be1acd6-3bc3-4057-9cb1-35af29e9620d",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f860a50f-18d5-4822-8224-f1d38aaa67e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cee8a735-a6f9-4b11-8064-a3408f5693b4",
        "cursor": {
          "ref": "d06a5614-8804-4169-b932-89681759466a",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8c168fec-b4e3-4840-b016-1179881ee91b"
        },
        "item": {
          "id": "cee8a735-a6f9-4b11-8064-a3408f5693b4",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "7413ea05-8e9f-4b88-a774-915521dd552f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc6cd09c-28b9-43b6-a4b1-3e0209cbc218",
        "cursor": {
          "ref": "b9c5fd64-3e31-40fd-81e6-cdd2c5775bc9",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "60125c3d-dc53-46f3-a5e9-c684fdadbfb2"
        },
        "item": {
          "id": "dc6cd09c-28b9-43b6-a4b1-3e0209cbc218",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "0f8167a2-4650-4f75-bd02-5f45b29e3459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e16d17b-673c-4c6d-af0c-58784991eaa7",
        "cursor": {
          "ref": "d3087c21-ab2b-4035-8691-7d02d3de53cb",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2cfe3959-8538-494a-bb2f-e1406d024124"
        },
        "item": {
          "id": "1e16d17b-673c-4c6d-af0c-58784991eaa7",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "401b5dde-cdbc-46d0-8f3b-0104dbd5e859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1506461-c529-4776-9e9f-e358b1fc3885",
        "cursor": {
          "ref": "11d286f7-c055-4452-bb91-77993784868c",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "881498cf-9957-49e9-9fc5-4e9800758b06"
        },
        "item": {
          "id": "e1506461-c529-4776-9e9f-e358b1fc3885",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "6c168f5e-5cdb-4942-9814-e377efee59a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eecc3bf-6fbb-42a3-914d-0f33fe571549",
        "cursor": {
          "ref": "2ae5abfb-6ce4-4f1f-83dd-96152a2c93a1",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d5ed52c9-78f9-4b95-b496-fe0be4ae1a1a"
        },
        "item": {
          "id": "8eecc3bf-6fbb-42a3-914d-0f33fe571549",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ec6fcaeb-8758-4ee7-b231-90194698f57b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14acb422-e100-45d2-9115-450a783a8190",
        "cursor": {
          "ref": "64664cae-d165-4c9f-bdcf-7e38ba417339",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "029fa634-5d9d-43ce-aeed-573e05621e9a"
        },
        "item": {
          "id": "14acb422-e100-45d2-9115-450a783a8190",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ca25efdd-64ec-4e0e-9adc-c463d9d0f926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1aab5bd-0133-481c-9e4f-4c9b892187b9",
        "cursor": {
          "ref": "c53bffd4-1e02-420c-8e7e-d0cc97cab1af",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "bee9b60a-e033-4e7e-8bde-bc89696d8763"
        },
        "item": {
          "id": "c1aab5bd-0133-481c-9e4f-4c9b892187b9",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "d0e6b8db-bd15-4310-8a38-a941d46391db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fab0173-1cc3-4e16-bab2-94367f8dec1d",
        "cursor": {
          "ref": "1546f2b8-3e77-45b9-826c-738c500c0945",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "1a408294-c7ed-4378-9a51-193d1e670bdd"
        },
        "item": {
          "id": "8fab0173-1cc3-4e16-bab2-94367f8dec1d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1b3d46a5-b238-4a34-953a-732d4e9fefdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd846ad9-d9ff-4289-afe8-53c4a566584e",
        "cursor": {
          "ref": "5541a339-8661-4417-8089-cb8e4d7e9637",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "960f7017-958f-4a5b-91ac-5653ca2e6186"
        },
        "item": {
          "id": "cd846ad9-d9ff-4289-afe8-53c4a566584e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "220f831b-69f4-479d-ac15-2e098303fc60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e8c1c33-42b2-4811-a7f6-76dc1bddb906",
        "cursor": {
          "ref": "8733140f-b4fb-4f95-96e3-8dc4a3a0c28b",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c01084ba-b0d8-4bff-9ec7-7807d871b610"
        },
        "item": {
          "id": "4e8c1c33-42b2-4811-a7f6-76dc1bddb906",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "966f7fc2-118f-445e-bc76-ec0c2d62d316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23392d8b-3607-472b-a65b-93e59f35cbc8",
        "cursor": {
          "ref": "a5c5b7c3-e959-44fd-aecf-763090a79de3",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "de66c726-0463-454b-b59a-87c2115ba045"
        },
        "item": {
          "id": "23392d8b-3607-472b-a65b-93e59f35cbc8",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "5608abb6-3c41-4c54-bece-838100778324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a0533c5-4dd2-456a-8e83-1b3063e56c16",
        "cursor": {
          "ref": "d70bc5c6-2e9e-4bf0-aa72-679a6af5c81c",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "de6a09cf-4634-4d56-9874-358f93e17af6"
        },
        "item": {
          "id": "7a0533c5-4dd2-456a-8e83-1b3063e56c16",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "9a6763f6-ddf9-4033-807a-898f57ac93a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e643ae3e-393f-456b-aa78-af99b9c720ef",
        "cursor": {
          "ref": "7c48f60c-459e-4234-b6e6-231d6f41655a",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "0906daef-1990-4359-97e2-add4686acf87"
        },
        "item": {
          "id": "e643ae3e-393f-456b-aa78-af99b9c720ef",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "cfb90d19-a301-43a3-bbcf-f2bd0ad52adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d560f03-2d8f-412c-a087-1ebb7aa598ad",
        "cursor": {
          "ref": "5ef12de8-4ccb-4dd0-890b-0778f556ac6b",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d05b4891-4652-4cc2-9770-5f60340df5f4"
        },
        "item": {
          "id": "7d560f03-2d8f-412c-a087-1ebb7aa598ad",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ebcb8c5b-cfc0-40f1-98e1-5272a5cde01d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5918c078-80c8-4bd7-a0dd-8306f9c1679b",
        "cursor": {
          "ref": "1b2e5c34-ac91-447b-b453-1c8c19012f16",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "5de93ace-f4ae-4add-bb5c-299ce337bb7f"
        },
        "item": {
          "id": "5918c078-80c8-4bd7-a0dd-8306f9c1679b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "d91a3526-d36f-42f3-8eab-9905183b35f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "970b77f7-5b20-40d0-955d-3a9f914a6412",
        "cursor": {
          "ref": "72e6e87f-188c-44d1-96db-d55dd6d9466b",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "71fcb61f-4a4b-4628-b471-7e1c347ae8ab"
        },
        "item": {
          "id": "970b77f7-5b20-40d0-955d-3a9f914a6412",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "545a87f0-175b-46f4-bc16-8f996dd354c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ef56e59-4cac-49bf-ac24-fd59f733d7f3",
        "cursor": {
          "ref": "8f2eef32-55be-4bbe-8d0f-32fefb5ae311",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b7e87688-3a72-46c1-b2ce-68e2548cedc0"
        },
        "item": {
          "id": "6ef56e59-4cac-49bf-ac24-fd59f733d7f3",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7a27b3fe-3893-4c94-9a66-acea19701933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4556a448-a46b-4931-8cf7-8cf43909f22a",
        "cursor": {
          "ref": "36206431-fe69-4c8d-812a-b05458829c9e",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "63e8ca64-dcba-4555-ad68-e697955455cc"
        },
        "item": {
          "id": "4556a448-a46b-4931-8cf7-8cf43909f22a",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "7ac89784-d921-4dc6-b44e-ac077e2fa2c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ba4615a-943c-484f-9fa9-39c9f437766d",
        "cursor": {
          "ref": "a7ae30fe-9520-473e-8fca-f3acdf82887b",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "07c6fc47-362f-490d-85f6-8f5779eff4ca"
        },
        "item": {
          "id": "7ba4615a-943c-484f-9fa9-39c9f437766d",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "61450322-690b-48ef-97a5-acd181bdf87b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cec64b9a-ea44-4a3e-bca9-623708e161f1",
        "cursor": {
          "ref": "88d184e3-070d-4a62-9893-8c33114b6436",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6d35ad8f-bd24-4061-8b55-3f355941ce2f"
        },
        "item": {
          "id": "cec64b9a-ea44-4a3e-bca9-623708e161f1",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "0d05c26a-e63d-4911-a0fc-438477a1b203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7566f152-23a7-41a7-aee0-d14734780b18",
        "cursor": {
          "ref": "49bb5ea9-a4ac-4f04-8182-77a2e4292714",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "fcfee1d1-3097-4315-9012-6c11e1c6fe7d"
        },
        "item": {
          "id": "7566f152-23a7-41a7-aee0-d14734780b18",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "7dc58277-042d-4c4b-bb4f-54005f3a59ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20662cda-0cd9-43e3-9e7f-e0b42cedf3f6",
        "cursor": {
          "ref": "94e65cb7-4e36-4790-8e49-ba0d422a329c",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f6f6f290-b8d0-4369-a833-d2e07717a84a"
        },
        "item": {
          "id": "20662cda-0cd9-43e3-9e7f-e0b42cedf3f6",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "a5bbf4b5-92dd-4bde-a0e2-12546b7c0a00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2039e37-ff6f-4ac6-919a-7ed5ea2d444b",
        "cursor": {
          "ref": "94de61a5-3c9a-46fd-b3e4-dd4f734a697e",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "cdee4f9b-e5a0-41a8-97be-e90d56df164c"
        },
        "item": {
          "id": "d2039e37-ff6f-4ac6-919a-7ed5ea2d444b",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b52bfcf0-250b-4ad3-9aee-4e5ff1abd766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e69d8098-6332-4120-806d-08f53a3ae058",
        "cursor": {
          "ref": "bea368d7-97bb-4fbd-9458-850da8ac35fa",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c57cff72-8f33-4640-af6b-1d28a7eff6dc"
        },
        "item": {
          "id": "e69d8098-6332-4120-806d-08f53a3ae058",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f1ee7ec9-0d6a-4aef-b184-ee8d25a2ac9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35817d09-b35e-424d-a399-bfe80aa58105",
        "cursor": {
          "ref": "452404f5-2b5c-48de-a365-a28da4246044",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "b261d200-fa45-4ab1-9c3c-4e7b1ef5a93f"
        },
        "item": {
          "id": "35817d09-b35e-424d-a399-bfe80aa58105",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "521a5def-bb55-4b3e-9a0c-c862dbbc3017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4351ce4-ce9e-4a13-9061-48ba4c3770c6",
        "cursor": {
          "ref": "f66373b5-3534-4266-80c6-4b610deb3c5c",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b075bcf7-5b0b-4905-b0a8-5c2383acce22"
        },
        "item": {
          "id": "e4351ce4-ce9e-4a13-9061-48ba4c3770c6",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "ca1baccb-31b4-4c26-9c26-dba0e2928db2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a0045a8-7434-42f7-bf8b-2dfc000d12af",
        "cursor": {
          "ref": "a04849e5-a011-47f8-82ca-2273c55323a6",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "dc892686-fd2a-44c0-b732-780e43491cdb"
        },
        "item": {
          "id": "7a0045a8-7434-42f7-bf8b-2dfc000d12af",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f5ab6119-3405-4a03-aef1-86d81ff31a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d2ee0b8-9665-4834-8d00-557e35aa124d",
        "cursor": {
          "ref": "e9a8225e-6ae4-4580-b765-79fc82c1e9fc",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "13e9d659-69ab-4965-9571-35e9f42557ad"
        },
        "item": {
          "id": "2d2ee0b8-9665-4834-8d00-557e35aa124d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d17e5a72-9e3b-4c2c-932c-5466ef25a42d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b15116b-0fb0-43b7-b538-37c87ad3ff0d",
        "cursor": {
          "ref": "52992396-af98-4951-a9a0-228131bd9233",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "4a206c1e-2f9d-42a1-bb64-bce15cab992a"
        },
        "item": {
          "id": "3b15116b-0fb0-43b7-b538-37c87ad3ff0d",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "0766fd25-0754-4ddf-b5dc-895c5da5b1eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "bc66c968-5fc9-41ab-91ce-b9d2e2582757",
        "cursor": {
          "ref": "f39b18db-2fed-44ab-b7c4-dd9f4c96c34d",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "110e1fcd-6eeb-455c-ba6f-e795774acf39"
        },
        "item": {
          "id": "bc66c968-5fc9-41ab-91ce-b9d2e2582757",
          "name": "credentials_issue"
        },
        "response": {
          "id": "68778e3b-7503-46b3-8c0e-f05d569f9493",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9b00ec2-33ff-48a5-917b-4e1377c975de",
        "cursor": {
          "ref": "092203b0-ed83-4347-b143-e14dfd8e2a34",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "dff7b78f-fbe9-4dc1-acfd-428a44c3b0a3"
        },
        "item": {
          "id": "c9b00ec2-33ff-48a5-917b-4e1377c975de",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "7981c619-7fc0-4016-8f98-90a2cdf5a45e",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2154a1ed-5497-40c9-8641-bd54a1b9932d",
        "cursor": {
          "ref": "75a953a5-c32f-49b4-8937-38f08fb3f715",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "fa7cb408-3a18-4f7d-b7f0-0f66367dda02"
        },
        "item": {
          "id": "2154a1ed-5497-40c9-8641-bd54a1b9932d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "39d8b4d3-c313-44ee-b00f-e29b630c6729",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "70093355-e51d-4af0-bd1e-1bcfc9e20d9d",
        "cursor": {
          "ref": "1ce34d68-f760-457b-9cba-14d2e3904d7d",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "12cdf5a6-e5f5-4379-a32c-5d6e17957790"
        },
        "item": {
          "id": "70093355-e51d-4af0-bd1e-1bcfc9e20d9d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "02f51b6a-c4cf-4a16-8d51-f8ddfe02b288",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aaa4389-7198-4ce3-95e2-368b18a2a993",
        "cursor": {
          "ref": "fb20e562-f60a-48dd-a825-630d19782a8a",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "44bbd807-ded1-40ae-9814-83791c2b4ed0"
        },
        "item": {
          "id": "4aaa4389-7198-4ce3-95e2-368b18a2a993",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "90a37989-57fc-4e97-a339-aeed9a8b5ef3",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-28T00:38:46.599Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-28T00:38:46.599Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "d5f645ad-0165-409a-b648-841ba5d74319",
        "cursor": {
          "ref": "b92fd25a-14ba-45de-8846-23b8156520d9",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "1f46ce44-13ab-4b5a-a85d-1a3b60ef8bc5"
        },
        "item": {
          "id": "d5f645ad-0165-409a-b648-841ba5d74319",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6b79dd8a-9951-4b91-ba08-5d8fb5ebc7f6",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24d7fa7-feaa-4029-b8c1-29ca6b652374",
        "cursor": {
          "ref": "91933ae8-9518-4201-a842-653296495c85",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "fdd2b855-92ef-4c70-927b-0f96e981e905"
        },
        "item": {
          "id": "f24d7fa7-feaa-4029-b8c1-29ca6b652374",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d424cf34-f485-4e86-84c0-a0b7c923f41b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c95397fc-8e5a-4185-9d04-84517c6c415a",
        "cursor": {
          "ref": "46e218d1-49af-4cdc-9e5a-068f39a54bfa",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e5cf6ffb-0696-444b-bb3c-0c673c5a5806"
        },
        "item": {
          "id": "c95397fc-8e5a-4185-9d04-84517c6c415a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "90d8dc65-9136-40af-b82c-69a60bb9bcd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c71bcd60-a20d-4a38-aca1-cb71853485e6",
        "cursor": {
          "ref": "81099d29-11aa-4ddc-91cf-041ad8a97ed3",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "6e0ded0f-6d74-498c-9a8b-9f255b09de9d"
        },
        "item": {
          "id": "c71bcd60-a20d-4a38-aca1-cb71853485e6",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2325f42e-4abf-49e9-901f-a8f28944fc9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a4ee3b-f25d-43f0-bfa5-6ec1ded88cb6",
        "cursor": {
          "ref": "3ff9e0b3-2023-4b28-89fa-58c36e6f80dd",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "22e57a95-8e4b-4fab-bd16-a58ed7625348"
        },
        "item": {
          "id": "f4a4ee3b-f25d-43f0-bfa5-6ec1ded88cb6",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2f9d0090-5824-4566-b1f0-9241d1e96313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "265c08f6-ea66-447c-a32a-72ec9e9f9056",
        "cursor": {
          "ref": "d8e8399b-c4af-46ca-8dbd-4932ff8d1e06",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "41f59c20-72bc-472f-bfe2-18aec98d2419"
        },
        "item": {
          "id": "265c08f6-ea66-447c-a32a-72ec9e9f9056",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "59c670bd-6673-4145-a33e-e4e61585bacc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4d6a328-7d4a-49be-a151-15b752b3c28c",
        "cursor": {
          "ref": "beef123b-a068-4c4d-9b63-fa26f3a46162",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "593c4774-0a0c-4e73-ab81-7992617daeb8"
        },
        "item": {
          "id": "b4d6a328-7d4a-49be-a151-15b752b3c28c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c4316b05-6f31-41df-a148-b6c34385af19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a4e7387-20fd-4cce-891b-92af625a0d3d",
        "cursor": {
          "ref": "21f48c60-02fe-4e88-849e-f7493688617b",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a1cbc00b-9269-4db7-9452-9979492acc78"
        },
        "item": {
          "id": "5a4e7387-20fd-4cce-891b-92af625a0d3d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "19a21229-49bd-4dec-8194-67512e7cdf4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf3b0106-964d-4879-bb12-c0059c419b61",
        "cursor": {
          "ref": "ee7ba5e9-d5b2-4bf3-b412-43e77c6f4958",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "73e2384e-ed55-420f-a8af-d0d7b2d72f82"
        },
        "item": {
          "id": "bf3b0106-964d-4879-bb12-c0059c419b61",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "712b8b8b-37ba-446e-88ac-a787dd5b5041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edd338c2-67ac-4f6b-9827-2f97122607aa",
        "cursor": {
          "ref": "b1945ae0-1b7d-48fe-af96-4f274f8ec6f8",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "359a9c15-9f0f-48c6-9fe5-727754b47a37"
        },
        "item": {
          "id": "edd338c2-67ac-4f6b-9827-2f97122607aa",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f51d846c-2f94-42af-a98b-842b92e74010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9efc11b2-79ad-4f85-a5aa-5d13709ea18d",
        "cursor": {
          "ref": "89fc3efa-51f8-40f0-9a80-6b94d0c592cc",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "c43bf4bb-6c1f-4aa5-b2b6-f893df8f5342"
        },
        "item": {
          "id": "9efc11b2-79ad-4f85-a5aa-5d13709ea18d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5e5fc1fa-3501-4fc7-bb00-9b72f89b02a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc35702e-b382-4a39-b628-2cc2f9e0ebfe",
        "cursor": {
          "ref": "d4958e27-42a5-4d2c-a9be-7ae413670c32",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "e995c51c-9c59-4c91-8ba6-77b219ed709e"
        },
        "item": {
          "id": "fc35702e-b382-4a39-b628-2cc2f9e0ebfe",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d1b88fd2-9569-4c1b-ac07-1f57ea4bdeb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad35018-51f4-46eb-9b29-bb9798994416",
        "cursor": {
          "ref": "cf6d5819-192f-41fe-90e6-e1325cff4bfd",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "31edc8bf-feed-47d7-8431-bc28ba76acf5"
        },
        "item": {
          "id": "bad35018-51f4-46eb-9b29-bb9798994416",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "bc02171a-bd26-45d8-84ba-9725a2d37167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2304c4f4-3314-45ba-b18a-e0e5aeece973",
        "cursor": {
          "ref": "3e3f734b-4ecd-4e0c-b9ae-16acc045296d",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "35bcadb6-6fb4-4ad5-b190-37db37ede30d"
        },
        "item": {
          "id": "2304c4f4-3314-45ba-b18a-e0e5aeece973",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "36016ccf-f7a6-4163-8132-511c29a149e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7464862-a852-47c4-84ab-474297a097ab",
        "cursor": {
          "ref": "8d5e5b12-249a-4ba7-8728-aa8c98643b5f",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b0125c35-889e-4cac-b9cb-0ada15b82b7b"
        },
        "item": {
          "id": "a7464862-a852-47c4-84ab-474297a097ab",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "82675737-d308-4103-8878-627d8028d97f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "af4c7068-d53d-4a07-af09-e13dbe652075",
        "cursor": {
          "ref": "f3ed4280-0961-426e-a9ef-ffb978400a5d",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "87aee900-4318-43fa-bd53-4434307231ea"
        },
        "item": {
          "id": "af4c7068-d53d-4a07-af09-e13dbe652075",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d137b50f-19d2-4568-a024-e6884122d097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74a3effd-050d-48ba-be3d-19dd2a2d4b00",
        "cursor": {
          "ref": "e188de12-59d9-4e1d-b4aa-13f91dbc1f17",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b92ab0a3-4703-412f-81ad-492d9f524d18"
        },
        "item": {
          "id": "74a3effd-050d-48ba-be3d-19dd2a2d4b00",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ff982319-cac2-475b-b2c3-1f307c6e0c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29411387-6bc9-414c-bf42-37fa14e896dd",
        "cursor": {
          "ref": "57159736-38ba-4d3e-8ff5-d549cda9e7f3",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "47e1628a-4c09-407a-bab4-a1c730089280"
        },
        "item": {
          "id": "29411387-6bc9-414c-bf42-37fa14e896dd",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "cccbd353-c27f-46cb-b2c8-aebcccd2205f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eebc3dd3-455a-4cbd-8c44-b1761cf0968f",
        "cursor": {
          "ref": "0799eed2-1183-49d9-a668-ac0e1bfbc78a",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5c22d50c-213a-4276-9395-561367b821ea"
        },
        "item": {
          "id": "eebc3dd3-455a-4cbd-8c44-b1761cf0968f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "daa16698-0696-49b9-9ca2-3995b208e3a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1616454-b8b7-4a84-abf6-87a609e90c70",
        "cursor": {
          "ref": "5e51f1c4-c0df-4256-bf6d-79c10be745fc",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "cc689491-b542-4778-a9ce-d8e1be32eafb"
        },
        "item": {
          "id": "d1616454-b8b7-4a84-abf6-87a609e90c70",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "08f8b05c-43dd-4f32-aeb1-2bb4d4cacc61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4da5563-59ad-4f27-92cc-7fb037f2730f",
        "cursor": {
          "ref": "3b7ad7a6-43e8-4aaf-bac1-59149ae03ed0",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "652a2784-acd7-40ee-a9fb-788d08c33c79"
        },
        "item": {
          "id": "d4da5563-59ad-4f27-92cc-7fb037f2730f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "52269f0f-f9c9-419a-8eac-9cd2ac07dc03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c18d53d-6ad8-4df9-9174-ec3d47d406f1",
        "cursor": {
          "ref": "b042cb13-f054-456c-a7e9-8b74191e9396",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0b76eaa6-80c8-48a6-9bfb-d2862b11d103"
        },
        "item": {
          "id": "2c18d53d-6ad8-4df9-9174-ec3d47d406f1",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c66a6c58-1124-46bd-a6c8-9ee35e7dace2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad73e453-8b2e-4d67-9705-d29d87c43e25",
        "cursor": {
          "ref": "89a67644-87e0-4eb5-ac7e-64641aa20d76",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "e213bc16-3770-4adf-a830-2df9c70ad56d"
        },
        "item": {
          "id": "ad73e453-8b2e-4d67-9705-d29d87c43e25",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "629dce77-1879-42b6-828b-05ea7315c7ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d83b4db5-4063-4560-b4d0-4a1ffd213072",
        "cursor": {
          "ref": "0c46e2be-5972-4b35-a09f-c2636f11ab6d",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "49f69b08-20e0-47c0-82ee-8c18208fcab6"
        },
        "item": {
          "id": "d83b4db5-4063-4560-b4d0-4a1ffd213072",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "da90fd5e-de43-45e6-84a5-0cd72d9ff3c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02f8383b-c734-4845-a2ed-7e44ddce305d",
        "cursor": {
          "ref": "2e9343bc-fcd8-4b85-abda-a0a49f1a8c56",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d85be893-0d5f-4b7c-9113-3197192712fd"
        },
        "item": {
          "id": "02f8383b-c734-4845-a2ed-7e44ddce305d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8b9fbebe-7e23-4839-96ee-46590bd5f6d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb2387be-00ad-4f31-a45e-b7e900f8d0e6",
        "cursor": {
          "ref": "ff19a2b6-0651-4e4f-aca5-39ac7f0102ba",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "aef4c4e1-9e66-4055-8709-f3e331ac8525"
        },
        "item": {
          "id": "cb2387be-00ad-4f31-a45e-b7e900f8d0e6",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "9e50a677-c22a-4d49-97eb-837cdb96a112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8c1c65e-4073-4c8c-ab65-8883a8ff79e5",
        "cursor": {
          "ref": "4f278f78-4435-46c8-bce7-5e045eb6ca5d",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "2466eb80-7d38-49a5-9356-c3b9e66c74fe"
        },
        "item": {
          "id": "f8c1c65e-4073-4c8c-ab65-8883a8ff79e5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f91b485a-ccba-4032-949f-4dbe3f1e5b08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55010417-1ad8-477d-ae78-56c614aff66d",
        "cursor": {
          "ref": "bfffc60b-0c91-403f-901e-046db76fa3ab",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "56feb5ba-cc07-466f-aabc-fb00c259b04b"
        },
        "item": {
          "id": "55010417-1ad8-477d-ae78-56c614aff66d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "479cd3f0-7955-4a72-8ac7-ba4a55492a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a468cda0-c4e3-4961-8293-bff6d1cc03c7",
        "cursor": {
          "ref": "fee383f2-7574-4f48-b862-0f2eb0396885",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "efa6119e-c40f-4fa0-8003-798bddaab3e4"
        },
        "item": {
          "id": "a468cda0-c4e3-4961-8293-bff6d1cc03c7",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "28da0903-eaa9-4c86-a260-9deec277a463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a89b1e5-875d-4178-8436-fd7ccce6d4ee",
        "cursor": {
          "ref": "d8b60fc6-c4a9-4ddf-9045-ff271786ac1a",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b9736097-883b-47f1-9edf-4b68ef3a53aa"
        },
        "item": {
          "id": "8a89b1e5-875d-4178-8436-fd7ccce6d4ee",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ec464cd6-efe1-4b65-9e0a-a6894672315b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e101f062-7493-414f-aa02-1e4d80001d10",
        "cursor": {
          "ref": "d56e1390-8e9f-496e-969f-5c877928e1d7",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "02a31659-3bef-4d65-8208-ab9daf29c6d1"
        },
        "item": {
          "id": "e101f062-7493-414f-aa02-1e4d80001d10",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "73c006d4-588d-4768-ad1c-cb29be9b70cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b4d0c7c-fd53-42df-9299-a3888e148077",
        "cursor": {
          "ref": "052054f3-e86b-4358-abe4-40f35fc93c96",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "990a763a-cc7b-4675-b2ec-834a2b815c31"
        },
        "item": {
          "id": "5b4d0c7c-fd53-42df-9299-a3888e148077",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "427cdb30-821c-4bbf-9856-e0b66e22dc75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1e5fd14-a270-4ef6-8003-89b96a776a80",
        "cursor": {
          "ref": "79099aa0-f1a1-4d32-80da-1b49196403d4",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "49cd84b9-917e-4f4b-88e2-8b9de412c01c"
        },
        "item": {
          "id": "f1e5fd14-a270-4ef6-8003-89b96a776a80",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "2c670c41-5f39-4ae5-afeb-ce69c64d2d89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3133d6f-b34a-4462-a924-87014778d678",
        "cursor": {
          "ref": "3c7d6ce2-54a9-4684-a269-0c04b1a52774",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "5e877f7c-26de-4f2e-aed1-c69d11b2fa0b"
        },
        "item": {
          "id": "a3133d6f-b34a-4462-a924-87014778d678",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "0b5786c8-0edf-4c5e-a1af-668aa7b9a05e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "149920c9-14b0-446d-b7a6-1ecfb2f3c719",
        "cursor": {
          "ref": "70fd2c9d-9fc1-4943-b057-0c5d4a3f8f4b",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "36ecbc0b-3f46-4508-879a-b8847ecc1328"
        },
        "item": {
          "id": "149920c9-14b0-446d-b7a6-1ecfb2f3c719",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "8760533c-13de-43ba-bd9e-7df9fd8b3715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89d6615e-80dc-48e6-9f5a-a797350527f2",
        "cursor": {
          "ref": "f5fa7a0c-8da4-40cb-bda9-377e8fc2c116",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "c5c6bad3-7257-4695-9ab7-51c5ce07e15a"
        },
        "item": {
          "id": "89d6615e-80dc-48e6-9f5a-a797350527f2",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "b0fb8c02-af83-4723-89a4-79ed6bba5f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc97d80-5567-4d7c-889a-58c219700d9b",
        "cursor": {
          "ref": "2f7866ad-4d4d-4c62-933a-00bdfa6dbab0",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "27289aac-c91f-4fcf-866f-c1b3ad9d1d4b"
        },
        "item": {
          "id": "acc97d80-5567-4d7c-889a-58c219700d9b",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "85ebe241-8698-4e6d-958a-5571034c8a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8729a4d-8cdc-4164-9f68-35adbdea9328",
        "cursor": {
          "ref": "71b0e731-2a28-42c9-a77d-d215ffb7e5ca",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "974fef5b-d979-43f1-b9b4-e3790cceac62"
        },
        "item": {
          "id": "a8729a4d-8cdc-4164-9f68-35adbdea9328",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "8a3ab121-7920-430c-8370-06e0a47a067c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e105649-1f22-4c4a-a024-924c86e5df4d",
        "cursor": {
          "ref": "a4e9b435-f155-4cd4-ab89-222cf6f13ffa",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8f93808f-0068-4dd8-b8e9-631c015452e9"
        },
        "item": {
          "id": "0e105649-1f22-4c4a-a024-924c86e5df4d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "595e302f-f99b-417c-b85f-14295ba773a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5289892-9b2b-498b-a27f-dda96a756ae6",
        "cursor": {
          "ref": "831582c0-7652-4e0c-872f-05984a577ee8",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b323b7cc-5cd4-4274-a610-08eb5260c2fe"
        },
        "item": {
          "id": "e5289892-9b2b-498b-a27f-dda96a756ae6",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "180728ec-1722-453d-8cdd-eef01afaebe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ff486ad-b306-4115-ac15-c03653bf9295",
        "cursor": {
          "ref": "52b5e66d-0688-4fa9-9b5c-b9773ed72336",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "973371ce-45f6-44a2-bd88-07b1eb958e98"
        },
        "item": {
          "id": "8ff486ad-b306-4115-ac15-c03653bf9295",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "c534338d-f693-4f3b-a3aa-d8a0b9671f52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa422d0-1bae-4a2b-98f4-acd599fbcf38",
        "cursor": {
          "ref": "e5a55c98-4d21-4196-a6ef-6e080cea0b23",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f697e2a5-0815-4b81-8ff4-d2406021fc2e"
        },
        "item": {
          "id": "3aa422d0-1bae-4a2b-98f4-acd599fbcf38",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1881e7cd-b0ac-4767-9236-080b2c51b0d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66d08a43-bff3-4c85-a07e-6f30e0fc2ac8",
        "cursor": {
          "ref": "993ca331-043f-4d1d-a41f-2e3a18800390",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "fa790817-b17d-436c-8b83-338837d1070e"
        },
        "item": {
          "id": "66d08a43-bff3-4c85-a07e-6f30e0fc2ac8",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "17717eaa-1a98-4db0-9ec8-631f8591d74a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb05ce48-ce43-4a1c-82b0-f4371f25e4c0",
        "cursor": {
          "ref": "3949d66a-1356-4bf6-a26b-84e863c13511",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "a798226f-7564-492d-8906-93feb8c3745b"
        },
        "item": {
          "id": "cb05ce48-ce43-4a1c-82b0-f4371f25e4c0",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "9365831d-48cc-4006-b844-cd5f327b0d79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f474443-7afe-41be-b25d-0c44ad344f8f",
        "cursor": {
          "ref": "9bd6fe00-bef2-45b5-bc31-1742c7fbcd2f",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "4efc3701-1b8d-40ed-8433-f2f0dc24918b"
        },
        "item": {
          "id": "2f474443-7afe-41be-b25d-0c44ad344f8f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "2daeab24-4f93-4372-a197-63fb23c25519",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "ad967b7f-0cde-4441-b87c-5b8dfb7b98fd",
        "cursor": {
          "ref": "b4c15f2f-fe83-40d5-9d65-590a4842e222",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "706a34ea-a14f-4e20-ba89-2e1e708d7a71"
        },
        "item": {
          "id": "ad967b7f-0cde-4441-b87c-5b8dfb7b98fd",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "3fd25cb4-dc8c-49d3-bcec-db5a1130296b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "819bf8f0-b4e5-4173-ae37-2d32cca3968f",
        "cursor": {
          "ref": "0a0eda6d-aa32-44c5-beaf-4d88b84b2379",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "64523abd-68ce-4836-8387-d6e4b128512f"
        },
        "item": {
          "id": "819bf8f0-b4e5-4173-ae37-2d32cca3968f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8139a480-eeb4-4a5f-aff2-ffd53e409374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8031e3f5-f620-47d2-80e1-7bda8bf4cb5f",
        "cursor": {
          "ref": "1d94f36d-2e79-41df-91a1-98e55f81996b",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b5cd2e19-d9dd-40b5-9976-0755284f108b"
        },
        "item": {
          "id": "8031e3f5-f620-47d2-80e1-7bda8bf4cb5f",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "692e4242-3669-4ac1-b0b1-32ed2e4ac0b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20dd55bb-8322-406e-a99a-feb85a165ed9",
        "cursor": {
          "ref": "395c33d5-d067-4633-953a-e2275837fe1f",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c13ef6f9-2868-4b4a-b8af-bc2bf8bc1f51"
        },
        "item": {
          "id": "20dd55bb-8322-406e-a99a-feb85a165ed9",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e16a2666-0a3c-4536-a568-3038b76bc7a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a684d72a-4231-4dbd-997d-da305c8f5526",
        "cursor": {
          "ref": "10a209b2-8c13-4fe8-9d8e-f9f21a6a22c5",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "c400c47e-b17b-4def-a83e-2bcf38c5e615"
        },
        "item": {
          "id": "a684d72a-4231-4dbd-997d-da305c8f5526",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9714e1ab-44f5-4560-88ff-e378890926bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3c40b3f-7577-46ef-9397-f2de6730b75e",
        "cursor": {
          "ref": "5b740840-21a2-4178-859b-182b49067401",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "a3605b10-e930-462e-94bf-c522403d2e3f"
        },
        "item": {
          "id": "c3c40b3f-7577-46ef-9397-f2de6730b75e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "ad7153b0-75f5-40f3-8299-1990c0aabdec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c1f30eb-ada9-4329-af38-e792b41fa706",
        "cursor": {
          "ref": "972e4b37-5448-4b93-aa1e-180c623c3636",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "43719840-fd5c-4705-9de8-e918f479de61"
        },
        "item": {
          "id": "7c1f30eb-ada9-4329-af38-e792b41fa706",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "8228ba0f-48d8-4a60-b890-660a18c61466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0977136e-2fb2-4b38-a881-61d0157eef71",
        "cursor": {
          "ref": "8e61dbb5-05af-4b8f-9284-cc296beb00c9",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "66dfff20-dbcc-4cf1-af30-964b7b273436"
        },
        "item": {
          "id": "0977136e-2fb2-4b38-a881-61d0157eef71",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "696a8412-5463-4601-b68a-19f6392350e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74ae675c-c6bf-473b-9375-cd4a332bf37c",
        "cursor": {
          "ref": "8bfd228c-40a7-46d2-a6b1-477a5a7a635f",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ef97578d-e447-4d24-aae4-809ac5d4501c"
        },
        "item": {
          "id": "74ae675c-c6bf-473b-9375-cd4a332bf37c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "78009d0c-a8a6-43e4-99d5-53b59a2de37a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "815aa63e-d247-410b-a017-08aae714a0c8",
        "cursor": {
          "ref": "52bfdc8b-5c12-42a5-9f77-7a7861731a08",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "faeb66ff-bdb1-402e-a09d-f267b6e9fe12"
        },
        "item": {
          "id": "815aa63e-d247-410b-a017-08aae714a0c8",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "4530eb5d-7234-4368-ba1b-d6319b9be9b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b3252e-30f9-43b3-a579-209a4da2000b",
        "cursor": {
          "ref": "6e7eb9f0-53ea-4373-8749-6497275805aa",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "d5d39904-cf60-4edb-a055-e3ca99061f4a"
        },
        "item": {
          "id": "47b3252e-30f9-43b3-a579-209a4da2000b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "228c03ab-9bb8-43e2-bfe8-340cf441d9a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d018af37-55e1-4368-8113-806bb8ddfb3e",
        "cursor": {
          "ref": "a31fb5d6-6206-48fd-834a-bf70afcfeef7",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "750bbdb3-bbd8-4759-b159-3504fb8828ed"
        },
        "item": {
          "id": "d018af37-55e1-4368-8113-806bb8ddfb3e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "e16cb552-cb6e-4167-ba0a-840b7206b7cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80b88994-a6a6-4b6d-9be6-434aeb4e0b93",
        "cursor": {
          "ref": "eeb24e7b-e17b-400d-8212-7c688b723dd3",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9e14f5b6-b616-4945-863c-4e9bd06d7d96"
        },
        "item": {
          "id": "80b88994-a6a6-4b6d-9be6-434aeb4e0b93",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1216a044-3fdb-4bcd-a536-bba46d3689f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "440f8fd8-06fc-4320-a307-1e0dc268a0ff",
        "cursor": {
          "ref": "7663d8de-aba0-4fb5-a526-204b9ce42c75",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "9b6aba19-bc28-4136-8e93-fd4f976ae931"
        },
        "item": {
          "id": "440f8fd8-06fc-4320-a307-1e0dc268a0ff",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "3157c85e-3675-468b-8c63-3c0919dcfeb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac19b4dd-0550-41bc-93b1-4b7c21b9433f",
        "cursor": {
          "ref": "d895d2a0-eb28-4219-922a-179bbd03171f",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e99bfa4c-c6c1-48fc-9476-a36fc4de6f12"
        },
        "item": {
          "id": "ac19b4dd-0550-41bc-93b1-4b7c21b9433f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c19c3904-b2f4-45f1-a9b9-1e0074506c04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b056c490-03ee-4628-9d42-01caa2863c21",
        "cursor": {
          "ref": "bce34848-411a-4c3b-84b5-5ba3b66fcda1",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a17d0bb2-dab0-407d-9242-bec573270bf8"
        },
        "item": {
          "id": "b056c490-03ee-4628-9d42-01caa2863c21",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "aff5052e-5257-45aa-9883-23c14ac8d714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb72cd23-6e2b-4cfd-83ef-c25730ff609b",
        "cursor": {
          "ref": "67e7251d-90d8-4514-a5ef-035ff9b7dce2",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "1a0c74a8-9f0e-4771-8d1f-c18cfc27d228"
        },
        "item": {
          "id": "fb72cd23-6e2b-4cfd-83ef-c25730ff609b",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "dbb888b6-7398-415b-982c-9a232b33bd6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93918dc9-c323-421c-84da-5ffab6d97012",
        "cursor": {
          "ref": "7379aa29-2dcd-4859-bcd8-6ea1f765445b",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "b116fa0f-57e4-47df-9f53-7b5ccc8d5f73"
        },
        "item": {
          "id": "93918dc9-c323-421c-84da-5ffab6d97012",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "335d7a9b-25b3-4bf8-9066-933954c7639a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e30891-9c96-4e1e-a18b-6acf48f85248",
        "cursor": {
          "ref": "b3cb2043-6205-4a0a-8aaa-9f9a7f010066",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0ea4ea72-5370-48ca-9c1c-99f5a0f2180b"
        },
        "item": {
          "id": "94e30891-9c96-4e1e-a18b-6acf48f85248",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "780ccb6e-4e23-4f99-9bb5-7f8c8888254a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99dc7406-dab3-4d2b-8531-7110963f9ba6",
        "cursor": {
          "ref": "cb4d66d3-a152-495e-a0ea-ba0ecec4233f",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "dfffcd53-981a-4d15-aba9-7765bd574b79"
        },
        "item": {
          "id": "99dc7406-dab3-4d2b-8531-7110963f9ba6",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "351897ac-5bc3-4dee-bffc-872b3076410c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9843ae5-c12b-46f8-83a8-5bd350f645cd",
        "cursor": {
          "ref": "cc0cda81-5e39-40b6-a1e7-1fc599f9d833",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "e8900a40-f4cd-4e82-b8fb-772a1b517074"
        },
        "item": {
          "id": "e9843ae5-c12b-46f8-83a8-5bd350f645cd",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d6b333cb-7630-40c7-9f51-d02e2935f7ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9aa5300-02c3-477c-af45-e3a49ea392e3",
        "cursor": {
          "ref": "fe0c240b-7477-4831-89fa-7d543c0efee8",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6d17f37e-c587-484b-bbe5-2129a1c26828"
        },
        "item": {
          "id": "b9aa5300-02c3-477c-af45-e3a49ea392e3",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ecfaed1e-04ce-4efc-af4b-d567d3f8643c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "843cbb22-c24c-4cac-a6d7-f10e0148c494",
        "cursor": {
          "ref": "9f8fc365-c20b-40a6-a249-3adfd0e9cbf2",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "25519129-b703-40f4-84bc-945ebd2704ed"
        },
        "item": {
          "id": "843cbb22-c24c-4cac-a6d7-f10e0148c494",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b15c227c-1f18-41ae-813c-11ecd92b27d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba98a8e0-d10e-40a1-b91c-4149317355e2",
        "cursor": {
          "ref": "2f1c3be8-fef0-4b39-837d-6ea2f540d425",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "5a7ab9f9-61c2-48ad-b549-20fe522c5a6e"
        },
        "item": {
          "id": "ba98a8e0-d10e-40a1-b91c-4149317355e2",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ab5fecbf-116c-41ec-968f-0e61789599b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdbc4d94-baf1-40d1-91df-6c2cc46f65e3",
        "cursor": {
          "ref": "4e85c149-dd71-484d-9e1c-8c31c43593a3",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "8a801a9c-f719-42e1-88af-74659f8b51a5"
        },
        "item": {
          "id": "fdbc4d94-baf1-40d1-91df-6c2cc46f65e3",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "7c6cf898-3f1d-4c86-ad32-05892a239f53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4743fe00-14ce-4596-90f3-5d0993cbfee6",
        "cursor": {
          "ref": "3632dbf6-5617-41b9-81da-4874d6125876",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "0d6d61ac-9486-4393-9c3d-5076204ffeeb"
        },
        "item": {
          "id": "4743fe00-14ce-4596-90f3-5d0993cbfee6",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "45ae1d8d-de05-4364-bb37-58db72e2ff3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceba091b-c93e-45f0-8e17-94480586b5ec",
        "cursor": {
          "ref": "e835d70a-7d74-417a-ad13-e80eafffe58b",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7cbbaceb-e169-4bfc-83df-29c8f4a84d6b"
        },
        "item": {
          "id": "ceba091b-c93e-45f0-8e17-94480586b5ec",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "48bacc25-ff29-4c47-b938-b3accf302204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "642e5b5c-33ea-478a-98e8-80e00b9be5ee",
        "cursor": {
          "ref": "9b2e2942-a732-4337-869d-c1720a735b04",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "37a65027-0dc3-4cc1-aa97-a20605da22ef"
        },
        "item": {
          "id": "642e5b5c-33ea-478a-98e8-80e00b9be5ee",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "30907e79-4579-45b0-a477-2233cf73fc3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "930657dc-6822-47da-b372-655dc173dc42",
        "cursor": {
          "ref": "69af0f28-5dab-4983-a551-820a9075c2c3",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "45c66558-df91-4358-8f14-c77446afe070"
        },
        "item": {
          "id": "930657dc-6822-47da-b372-655dc173dc42",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b8f6c7a1-59de-44f4-89f0-dd967d796cf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a81e7553-40b3-4d05-91a5-2fc335a8cfdf",
        "cursor": {
          "ref": "2f49b708-fb25-4ee2-a06f-b94c87f87e46",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ddea21b2-ad7b-4876-9135-7ddc01eac574"
        },
        "item": {
          "id": "a81e7553-40b3-4d05-91a5-2fc335a8cfdf",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b12d1b98-3186-4e28-9c3b-27865df57aae",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "30c2306d-03c1-4088-b4ab-557b1fe78a57",
        "cursor": {
          "ref": "247c5445-8c2a-4817-82c2-8b77966bca81",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "673d1899-583c-48d3-bfb0-beffde109efa"
        },
        "item": {
          "id": "30c2306d-03c1-4088-b4ab-557b1fe78a57",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "95ca4959-21f3-42b5-ac82-5e46e2b1d07a",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "6f1c6fe6-5675-4150-ba28-c826de7e2d44",
        "cursor": {
          "ref": "da6c5d54-8146-4a95-9da9-766b03d391e5",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "31a8f1b4-b652-4de9-b1a7-a760d3025672"
        },
        "item": {
          "id": "6f1c6fe6-5675-4150-ba28-c826de7e2d44",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "16773d3f-f4f6-4004-864d-2051d33f2281",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "89cbb0f0-3155-4bcd-855c-a5efb4312ad7",
        "cursor": {
          "ref": "9ba61c83-b774-412f-9670-c4b2e5f95a83",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "979f1867-b777-4727-8b99-051bae6f7a0f"
        },
        "item": {
          "id": "89cbb0f0-3155-4bcd-855c-a5efb4312ad7",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0ee0cc99-1692-40d2-b1cf-cc29f02ffeee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "303c4c17-f434-47f7-82cf-ab6fcb24e937",
        "cursor": {
          "ref": "b07e262a-0a73-4168-b554-ffa10f953f48",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "1367fdef-fd21-4f4a-b728-b8b2e0b2715a"
        },
        "item": {
          "id": "303c4c17-f434-47f7-82cf-ab6fcb24e937",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "573465aa-5efb-483a-b49d-7339bd35a5fc",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "11ca904a-4a00-42aa-be87-e67bcc04066f",
        "cursor": {
          "ref": "be969907-bcb3-4196-b099-d5483d0db1e6",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "8f08fd84-d9ad-4ff1-acf9-14c0be2ac32c"
        },
        "item": {
          "id": "11ca904a-4a00-42aa-be87-e67bcc04066f",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "4cd55e02-7aa3-46f5-9406-0de7fb9a677f",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "6fb601a3-3ed3-469b-9b14-88c0d76619bc",
        "cursor": {
          "ref": "b52ffc82-1120-4003-8445-be131f408996",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "7934305d-9585-427d-a3d9-8649ad1565ab"
        },
        "item": {
          "id": "6fb601a3-3ed3-469b-9b14-88c0d76619bc",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a9b6c7ab-6786-4a87-8514-e1e969582460",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "e54ace67-671e-4bad-8bad-788e9d887903",
        "cursor": {
          "ref": "9894430d-1293-4330-8222-cfbdc42c01a8",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "3d595ef2-4e2c-4d41-bafc-8bfb89f666cb"
        },
        "item": {
          "id": "e54ace67-671e-4bad-8bad-788e9d887903",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "002f5d07-8b93-4d01-9279-e22dd4dbc9f5",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "bf1c16b3-d6d8-4715-8ba8-3c9677bb39bc",
        "cursor": {
          "ref": "c4abc3e9-faaf-4c53-ba12-99b9206138c9",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "17798d1a-d48a-4744-9291-16cad464eb52"
        },
        "item": {
          "id": "bf1c16b3-d6d8-4715-8ba8-3c9677bb39bc",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c08c479a-6cf2-4ea5-9864-49418ccb3e32",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "462aeda2-c5b9-4947-8975-75b3aa978b58",
        "cursor": {
          "ref": "9e577a20-f56f-40e8-98c2-000b3cebec39",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "1e138723-9bed-4956-9328-6041d447c2b1"
        },
        "item": {
          "id": "462aeda2-c5b9-4947-8975-75b3aa978b58",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "cd03f79d-41cd-497b-99fb-a6978550d11a",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "26cddcdb-0850-45de-a877-e1769f4e3f76",
        "cursor": {
          "ref": "f8556456-098c-4db7-ab17-5a58c6e854a5",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "c954660b-de38-4a23-9181-b1ccc8208cb3"
        },
        "item": {
          "id": "26cddcdb-0850-45de-a877-e1769f4e3f76",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "5475f37c-b59a-4401-b70a-b99d3ccbfbbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fdbda3e-69b4-46a6-8006-599baabc04ec",
        "cursor": {
          "ref": "4bd94be7-ed4b-4a61-bbb7-1d3c264f8c09",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "97ec3cfa-505c-460b-979b-c530a47deba8"
        },
        "item": {
          "id": "5fdbda3e-69b4-46a6-8006-599baabc04ec",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ea2ed3af-d469-448c-8e2e-966d7cb074a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c72c3868-e123-4679-bfed-0f8703cceebb",
        "cursor": {
          "ref": "84b10dc6-4368-4aee-b0e7-ba579e06ed67",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "63ca0179-c008-4307-9aaa-be622a01e1d2"
        },
        "item": {
          "id": "c72c3868-e123-4679-bfed-0f8703cceebb",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d59d8986-8343-485b-bf58-66a6340bff4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc53f485-15b9-4981-9806-0ea58fd25bb7",
        "cursor": {
          "ref": "2792c488-e38f-440e-addf-e457693624af",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2d76e69d-4164-430c-ba96-22fc8010c03c"
        },
        "item": {
          "id": "fc53f485-15b9-4981-9806-0ea58fd25bb7",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "6cb76e95-a991-4b96-b278-1817d7a16923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "608ea9bc-97ae-43b9-ba60-b13ee13859f2",
        "cursor": {
          "ref": "6fa1e2c9-eb7a-4f01-b9b7-ded3fe5d758b",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "1c47c83d-922c-4750-848c-52832c46b3c6"
        },
        "item": {
          "id": "608ea9bc-97ae-43b9-ba60-b13ee13859f2",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "1d84003e-603e-4675-a441-8c5e05b07402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1277882-1641-49f3-9773-31692b611e7b",
        "cursor": {
          "ref": "15fc796d-3040-4a65-ac48-3a4f0172f18e",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "8ec8b4fc-2097-406f-b663-0052c545f5ab"
        },
        "item": {
          "id": "f1277882-1641-49f3-9773-31692b611e7b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "039e2cc7-038e-4bff-9af6-3ddb0cb1f653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd727e05-01ce-484b-9270-70cead0be5e4",
        "cursor": {
          "ref": "4fa9895b-8d5f-45f7-9913-705c82b81de7",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "9a1b89cb-3e27-4223-9d7e-8f0be7ff2baf"
        },
        "item": {
          "id": "fd727e05-01ce-484b-9270-70cead0be5e4",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "e112616e-8222-4393-8acb-22e56323e0cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73811e87-450d-4e21-953f-f5ca7c7c9164",
        "cursor": {
          "ref": "b066b052-7caa-4ac1-bb06-458410beff82",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5086fe8e-7dc3-423d-b01b-8b27953bf702"
        },
        "item": {
          "id": "73811e87-450d-4e21-953f-f5ca7c7c9164",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "43a74a36-e7e5-4be9-a2b6-e2609fe6b7ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e2a443-7784-4cf5-a6f3-fa2e0b073c5b",
        "cursor": {
          "ref": "8199e1e9-7739-4857-8f16-29a9bbdf90dd",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "dd6a0804-16c9-43a0-9d3b-a3d3219a6510"
        },
        "item": {
          "id": "08e2a443-7784-4cf5-a6f3-fa2e0b073c5b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "888c58f3-d261-42aa-95f7-28611dd0c77d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa38ece-67d1-4ba5-b6a4-59f2aa96ee25",
        "cursor": {
          "ref": "2765e858-a73a-43fc-a701-f6fe2c4ffdd0",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "8568e1c2-f5aa-45af-908d-16c39556bde4"
        },
        "item": {
          "id": "6fa38ece-67d1-4ba5-b6a4-59f2aa96ee25",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "0fae0e5d-f456-4a14-b56e-ccb25c92ac91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e77f4c4b-507f-49da-bcee-d79dda02ff80",
        "cursor": {
          "ref": "33d488de-ebf5-4321-a713-b1bc726fe922",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "086b9b98-8c67-4044-9e22-61062ccebbbf"
        },
        "item": {
          "id": "e77f4c4b-507f-49da-bcee-d79dda02ff80",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "892cb5e9-ae1d-4598-b214-9ac2ec382fee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e7cd756-914b-4123-9f6f-ce2de818469c",
        "cursor": {
          "ref": "7f243fdb-7126-4acd-af8d-b20b185971cc",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "d24d2c66-9938-44b4-bb7d-7f477a691bc6"
        },
        "item": {
          "id": "0e7cd756-914b-4123-9f6f-ce2de818469c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "8613ad34-0881-4454-a683-41600f269f13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3063207f-3425-4b7c-9ca8-f3a2a8b2874c",
        "cursor": {
          "ref": "2505a6cd-8950-4109-ac4e-02e95e7f1845",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a3589238-921d-4249-b7d9-2f7a314c1387"
        },
        "item": {
          "id": "3063207f-3425-4b7c-9ca8-f3a2a8b2874c",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "885782f8-3500-4db1-b3b0-4fff0ed31184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be38fcdd-c2dd-4a85-b522-c00bda441f03",
        "cursor": {
          "ref": "72c0228f-54c2-44d8-99aa-582481f5dab6",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "dc096c9a-8b1d-4823-ab30-850413a689e9"
        },
        "item": {
          "id": "be38fcdd-c2dd-4a85-b522-c00bda441f03",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d7e97253-514e-4f2c-816c-a3450ce29390",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "5c4730b1-6802-4b74-8a26-fa27e64a24bd",
        "cursor": {
          "ref": "746b4e5f-60bc-46dc-9191-19c66af7c705",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d1c02c39-2477-43ce-985a-f3fc96c87c75"
        },
        "item": {
          "id": "5c4730b1-6802-4b74-8a26-fa27e64a24bd",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "adbd2375-bd94-43ff-8f27-01b9455383a9",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "ca87e89e-3f46-4ec7-a5b5-80e648582252",
        "cursor": {
          "ref": "e17c867b-ac98-4a3a-a709-02767199e878",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ae3f5445-3e9a-4e32-a0c3-144d3263a021"
        },
        "item": {
          "id": "ca87e89e-3f46-4ec7-a5b5-80e648582252",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "75a295de-670d-44b3-91ac-52c68bf530a7",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "5477fed3-e812-42db-8509-dd2f00f1bf87",
        "cursor": {
          "ref": "ea0e5596-5c99-4760-99f1-761e42241e37",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "a998c9fb-ee38-47e3-8539-14c4aa987e2a"
        },
        "item": {
          "id": "5477fed3-e812-42db-8509-dd2f00f1bf87",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "55bbd7fc-f992-4053-80fd-2efb629fc699",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "2ccc0e20-77aa-4d2f-baad-ca452d05c9b9",
        "cursor": {
          "ref": "caa3907f-b89c-468b-9ade-5791c85ed103",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "bebc3281-2b01-411f-b412-68a845cbb7b6"
        },
        "item": {
          "id": "2ccc0e20-77aa-4d2f-baad-ca452d05c9b9",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "76ac4b51-814a-4038-800f-9b4c652aab9f",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "f6c8abc6-6210-41e3-8743-66750adfb683",
        "cursor": {
          "ref": "a8c5ab7b-21ae-4a11-a745-20b4e10a8ece",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "af1f5fe3-7c5c-42b0-8464-d1af6239c358"
        },
        "item": {
          "id": "f6c8abc6-6210-41e3-8743-66750adfb683",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "1ed10bd8-8260-46ea-90a7-4ed3c3c32a1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa4783f-804a-49c7-b10e-a7dfba785654",
        "cursor": {
          "ref": "216b5b7e-9479-40f2-a401-fa4c2e7c3fb1",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8484ce16-d692-424c-a6e8-e8e80e28db98"
        },
        "item": {
          "id": "3fa4783f-804a-49c7-b10e-a7dfba785654",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c8705cc7-0d0d-466a-b008-a7b7087ccd0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8753ced-41b8-4b99-8d9d-b1facaf8b3f2",
        "cursor": {
          "ref": "b834bdd7-1631-43e9-9d62-7e54860ee056",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "4a494e1d-7d4f-448c-9987-71a0f0228733"
        },
        "item": {
          "id": "a8753ced-41b8-4b99-8d9d-b1facaf8b3f2",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "4cd73190-184b-4141-ba57-216c1890b128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6054ca76-00f6-4783-9879-fd55ec0b05ef",
        "cursor": {
          "ref": "b2994bab-053f-4cbf-977c-8093021e1cb9",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "925f0ffb-f593-4fae-8f7e-ad3fb8a4be79"
        },
        "item": {
          "id": "6054ca76-00f6-4783-9879-fd55ec0b05ef",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b951dc7f-a27d-4db8-b603-a9ddaa8e2bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e175e72-95ad-4bbf-a60a-2323feb784d9",
        "cursor": {
          "ref": "f575ded0-b00d-4385-8302-e88f12b3e6c6",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "df8b73bf-d1c2-40fd-b035-839c55803143"
        },
        "item": {
          "id": "8e175e72-95ad-4bbf-a60a-2323feb784d9",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "51042f63-8723-4ccd-b403-11f53a423794",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f978b828-a5f4-4706-8186-849b0751964c",
        "cursor": {
          "ref": "c83fb497-5fcb-458a-8710-d7b7eed8ab2c",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "6afbc68a-ea53-4bf7-91e3-4ea8464d7b1b"
        },
        "item": {
          "id": "f978b828-a5f4-4706-8186-849b0751964c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "f2c34a97-720c-420d-a216-37ec3cc288af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e04debf7-4432-4b69-b6ad-a53e70dae4a5",
        "cursor": {
          "ref": "4f5c510b-6205-4522-8ce2-c3cdd5be97d3",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "89d8cf32-8694-4191-83c6-ee684dce350e"
        },
        "item": {
          "id": "e04debf7-4432-4b69-b6ad-a53e70dae4a5",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "0387d41e-d449-4c79-98f9-44c72cc19abe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "291b2829-d00a-4160-81f2-53873b313941",
        "cursor": {
          "ref": "1f0f5cc6-a317-40bd-b443-21807a188ea0",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4e6e58a1-09ca-41d5-aef0-076e997fe50c"
        },
        "item": {
          "id": "291b2829-d00a-4160-81f2-53873b313941",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "1286635e-623e-479f-b7b3-f8115f889682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d19066d-cf51-4bcc-94d7-0b58005d95b8",
        "cursor": {
          "ref": "640b45b0-9944-4ed7-a53a-4205df540579",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "28067e31-5077-4555-88a1-8c243d8519c3"
        },
        "item": {
          "id": "9d19066d-cf51-4bcc-94d7-0b58005d95b8",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "6463dcf0-c4fc-466c-993c-647e710dd216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a63c71c6-363e-4edb-8ca0-3770123c7151",
        "cursor": {
          "ref": "69dde7bc-30f2-4485-a400-11414036ed3c",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e3428ed1-3b18-4325-bf57-7ecd7b9d0207"
        },
        "item": {
          "id": "a63c71c6-363e-4edb-8ca0-3770123c7151",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "cf26a4ae-45e4-4e54-aaf6-c147fba5db4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a7a07b7-aabb-4a74-af24-a185af891685",
        "cursor": {
          "ref": "841790e5-2cf7-40c2-97b2-07bbb0ef0f4a",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "882ab86c-41ad-4e62-8a35-8a755d733d47"
        },
        "item": {
          "id": "5a7a07b7-aabb-4a74-af24-a185af891685",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a800b2e2-8f6f-4335-a4fe-995ac297156f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96f9e01b-a973-4366-a5f3-40ad3f5d8504",
        "cursor": {
          "ref": "c7322874-744d-4182-a149-6a320be84993",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "04ed5886-d586-421a-bbcb-01c481f866ba"
        },
        "item": {
          "id": "96f9e01b-a973-4366-a5f3-40ad3f5d8504",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "fafc96b3-dcb3-495e-9a1c-af56c207d661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a54fafe3-31af-40e6-8b70-f5f8fa02157c",
        "cursor": {
          "ref": "addf1761-9e65-4f88-8a02-3925dd34e134",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f7d3436d-9c8f-4269-a231-c13040fdb2e9"
        },
        "item": {
          "id": "a54fafe3-31af-40e6-8b70-f5f8fa02157c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "4a0e339e-f341-4282-b504-6716ba99294f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86c7807c-01af-4b9a-b3eb-35a2f5ebcc9f",
        "cursor": {
          "ref": "b0d84de2-2f80-4b6d-8792-08faf4d8b7e9",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "17800fe1-d3d8-416d-82c0-a2b7302ffd03"
        },
        "item": {
          "id": "86c7807c-01af-4b9a-b3eb-35a2f5ebcc9f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e8044d3a-af23-480a-b55b-9afae43feda3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16648e24-9cc5-425d-a884-75ed671c93c7",
        "cursor": {
          "ref": "096a94e3-44e5-4b2d-a07e-b5244b113def",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e713a4f2-7577-4aaa-96d3-8d2de725bdf4"
        },
        "item": {
          "id": "16648e24-9cc5-425d-a884-75ed671c93c7",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "5c42fccd-9661-4247-9ff7-38d2798c1bd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dfa65eb-5b66-445c-a907-8c65ea990c2e",
        "cursor": {
          "ref": "bca5c343-1e16-4104-89b9-72201144246c",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "5814a2e4-a5d0-4171-9c34-73f9ee1eca2a"
        },
        "item": {
          "id": "6dfa65eb-5b66-445c-a907-8c65ea990c2e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "85c76fcb-4798-47bf-b0ab-06286991128c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16c0a43a-00ab-4b12-b81c-1fc1346552e2",
        "cursor": {
          "ref": "78695dbf-4869-4fb1-8003-9697673127b2",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "5fdd4d7a-26ec-4b55-8e43-0bba1cea6435"
        },
        "item": {
          "id": "16c0a43a-00ab-4b12-b81c-1fc1346552e2",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4a400f53-d604-4d92-99ba-c3ddb7da7bef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cbbcc3d-b33d-42bc-917f-1ae170414b58",
        "cursor": {
          "ref": "9b8ba7bf-5e16-4b2b-97a9-f15780fc4dbe",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "fa8da58f-e316-4826-9021-7e4ffd699134"
        },
        "item": {
          "id": "1cbbcc3d-b33d-42bc-917f-1ae170414b58",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "4fee5d6d-4012-4673-a13e-43aca095d720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0671a621-d4cd-4e31-a755-45bbee89ae0e",
        "cursor": {
          "ref": "e52642e6-f32c-49fc-8a73-e6f3bd9a7b5a",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "b2f365c9-f32b-4465-b057-e99a57216f9a"
        },
        "item": {
          "id": "0671a621-d4cd-4e31-a755-45bbee89ae0e",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5ebf7921-800d-4785-a237-357c5620b873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e13838f6-d151-4ec8-9950-d9f4bd9ff256",
        "cursor": {
          "ref": "9dbd3e7e-2b23-410a-b766-4159aed9d3a3",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f318a656-0b4d-4061-92e8-5aa362d3c5c4"
        },
        "item": {
          "id": "e13838f6-d151-4ec8-9950-d9f4bd9ff256",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "942a4019-71f8-4057-9831-abed2fc4326a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00010779-8a61-4f21-b9a7-10557a9d9cbc",
        "cursor": {
          "ref": "0b4b195a-23e9-4972-bb8f-4159acc6a983",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "0baf0945-e13d-4713-8020-3bcee029e59e"
        },
        "item": {
          "id": "00010779-8a61-4f21-b9a7-10557a9d9cbc",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "5bfdb8ea-8e25-48b2-9cba-5cee21b6d5c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b41cac9b-ce96-4f70-96e0-0675d2d958a8",
        "cursor": {
          "ref": "74467a37-8896-4b3a-b070-2e05f8178444",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "3b18b707-a1fc-45e8-8323-810ea5063cdf"
        },
        "item": {
          "id": "b41cac9b-ce96-4f70-96e0-0675d2d958a8",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0f40b64b-4751-4499-97d8-4dc6cd7ae8b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2df289e-e00f-48f2-8ec7-7bb8b2c55bfd",
        "cursor": {
          "ref": "5c7d2f5d-5bf9-4bc9-b29e-e0f221c951f3",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f43921bc-633f-4801-80c8-5fe2b84c697f"
        },
        "item": {
          "id": "b2df289e-e00f-48f2-8ec7-7bb8b2c55bfd",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e44503d6-8e32-4edd-b801-77aeadfdeb90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf7e931c-3e9e-4bf6-be81-38a1f8bcf702",
        "cursor": {
          "ref": "6b52daa4-0890-4f16-ab0c-60458ea22821",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "f7a0930d-25b8-44c8-bb79-5a5b9e592f9c"
        },
        "item": {
          "id": "bf7e931c-3e9e-4bf6-be81-38a1f8bcf702",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "b00cb19d-4dd0-4c33-b9a7-3cfa877595f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "554d3e0b-0872-4317-82a1-7b6fb922f7c0",
        "cursor": {
          "ref": "494fcf4d-8ba3-450d-914d-e6a077b5aca0",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "23b76ab6-48e4-4632-9277-632d1addcd5c"
        },
        "item": {
          "id": "554d3e0b-0872-4317-82a1-7b6fb922f7c0",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6d71f545-da5e-4890-b4de-cf75ce11adf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2673ef46-c945-4aed-9596-eb6f281862f3",
        "cursor": {
          "ref": "4ae92edc-de33-4558-87c8-b2ad5b1c7f06",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "edd47ee2-9c42-4a6b-b9d2-40adbce19d46"
        },
        "item": {
          "id": "2673ef46-c945-4aed-9596-eb6f281862f3",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "3cb6492b-96a8-492e-ab30-6495c6515b79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d286548c-612b-47a8-9a7e-82a2e20dcaac",
        "cursor": {
          "ref": "37163d5a-6e07-4a80-b13b-baac8113abd3",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "3d11f696-c5ef-4d7f-8708-34c612192936"
        },
        "item": {
          "id": "d286548c-612b-47a8-9a7e-82a2e20dcaac",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "708f9815-0cf9-47a6-8e6c-e7ac5db38089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db26316d-1cf5-4ffa-843e-f8394a50ad24",
        "cursor": {
          "ref": "ba41d9af-911c-4938-a892-d4808764f14c",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b17e2880-8b99-4db3-a291-122a88191602"
        },
        "item": {
          "id": "db26316d-1cf5-4ffa-843e-f8394a50ad24",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "99f32262-02c2-47ad-aa8a-2b9ee2457c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "492041d1-0502-4d53-93eb-e3b9f2c98e12",
        "cursor": {
          "ref": "7c2de813-5aa0-4624-a630-2a05e87386b4",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "926742b1-9fdf-422c-875b-85204c9c3b96"
        },
        "item": {
          "id": "492041d1-0502-4d53-93eb-e3b9f2c98e12",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "239dfa63-029f-4e21-9800-57379eea3a54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a61de14-745c-4fd9-82d8-c41ea627fa4a",
        "cursor": {
          "ref": "3d399373-b982-47e9-ac7c-ee527efcd1d9",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ee186578-f9b7-4855-88a0-01aa4f730b80"
        },
        "item": {
          "id": "5a61de14-745c-4fd9-82d8-c41ea627fa4a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "8a5e75a2-e094-45a9-a577-9ee0ff538fd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4f49390-7e57-4591-aa7b-d2540efbd5da",
        "cursor": {
          "ref": "03b4a1af-3db4-4cd6-8c4a-8cd22de7377f",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "a0cc93a4-239f-4239-9605-91d02e624fab"
        },
        "item": {
          "id": "b4f49390-7e57-4591-aa7b-d2540efbd5da",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "fa6e5fce-4dce-4d23-817a-670540bf27ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a28dede-f5b8-470c-a3b2-a1123a315d38",
        "cursor": {
          "ref": "f1787adf-c2f8-43b5-9672-2db2c751c172",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "965e8dcf-b017-4ab8-ab50-a54c72b8f214"
        },
        "item": {
          "id": "5a28dede-f5b8-470c-a3b2-a1123a315d38",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d0d27621-11e3-442e-a16f-d2bb8018da5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5d20af-aefc-4a77-aeb1-cb4a36616e24",
        "cursor": {
          "ref": "0b5dc8ba-f7d5-4e52-810e-e5c2bab48e24",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a8bf4e40-971e-4542-a33a-deeb8d2f4ecc"
        },
        "item": {
          "id": "eb5d20af-aefc-4a77-aeb1-cb4a36616e24",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9a1a6b68-8aa3-4f4a-b2fe-dbe6d93854ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f2422fd-a7d7-4df2-afd7-0ba09563c4b3",
        "cursor": {
          "ref": "9d3f16bc-bb1d-474a-8638-45578e9ae9da",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "0fdb2c35-d2a2-4df4-8567-fcae98e1924b"
        },
        "item": {
          "id": "8f2422fd-a7d7-4df2-afd7-0ba09563c4b3",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "eb8e56c2-66c3-44ff-ae7d-c90a8fa440ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5f22553-bc63-47a3-95f5-a29346cf252c",
        "cursor": {
          "ref": "e6d01f4e-613a-4201-a26a-0093ee540580",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b2e2dc25-a200-46fe-8e45-d8851c6788bb"
        },
        "item": {
          "id": "e5f22553-bc63-47a3-95f5-a29346cf252c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "519c8fa5-87df-4e73-a2df-3cd9eb5be069",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f10a651-33fd-45e9-b128-f5c5eba80e49",
        "cursor": {
          "ref": "477ab825-f649-4a18-ba34-de018260bc7e",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "15be1a45-affe-4eaa-bf34-92f46d542799"
        },
        "item": {
          "id": "9f10a651-33fd-45e9-b128-f5c5eba80e49",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "b33c5687-42dd-4683-a7ab-584a9be45740",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "973c2992-be7a-4398-be82-637910bacba5",
        "cursor": {
          "ref": "09ea56df-d088-46d3-94d1-228faecbb507",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "df871ea8-81f9-4916-8abc-bbecd2f88c8a"
        },
        "item": {
          "id": "973c2992-be7a-4398-be82-637910bacba5",
          "name": "credentials_verify"
        },
        "response": {
          "id": "76529544-8035-4695-874f-bfbe93535f9d",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa8052eb-3bdb-48ac-8d76-e69cd60e63f1",
        "cursor": {
          "ref": "2711edc7-235f-4b12-aec7-8c30f8ea2bd1",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f5c81311-b5ea-49c5-8a78-634f73085108"
        },
        "item": {
          "id": "aa8052eb-3bdb-48ac-8d76-e69cd60e63f1",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "04d7b9e7-50d1-41f9-acdd-fc7c9ebf6db6",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b5367f-441d-4f91-affd-e051d74f9c69",
        "cursor": {
          "ref": "580cd410-3aad-417e-bf19-1bd51c80b1f1",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5c632817-0f09-4871-8bdd-aba5601914e9"
        },
        "item": {
          "id": "c5b5367f-441d-4f91-affd-e051d74f9c69",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f67eac87-09c8-456e-8647-208cff9ea9a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b5367f-441d-4f91-affd-e051d74f9c69",
        "cursor": {
          "ref": "580cd410-3aad-417e-bf19-1bd51c80b1f1",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5c632817-0f09-4871-8bdd-aba5601914e9"
        },
        "item": {
          "id": "c5b5367f-441d-4f91-affd-e051d74f9c69",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f67eac87-09c8-456e-8647-208cff9ea9a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb16add0-1d45-4096-b758-63acc9e33be9",
        "cursor": {
          "ref": "e294be9f-bfdb-49cc-8391-81f3366f2ec7",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "553bc870-c6a1-4330-8108-3755e80c44cb"
        },
        "item": {
          "id": "eb16add0-1d45-4096-b758-63acc9e33be9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0905fd2e-aec9-477f-b7c6-cdc105e9a8f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11c64cb0-1660-4eca-8b7e-9b69a526e51b",
        "cursor": {
          "ref": "bb3fbd73-cced-498d-be98-eb01b69ac74a",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6aeb7a58-9e6c-4dd0-bc65-9bb50d6f331e"
        },
        "item": {
          "id": "11c64cb0-1660-4eca-8b7e-9b69a526e51b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6adc28de-77ac-44bc-ba83-6e23db15a1a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}