{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e9d2c8e8-6b1e-44a9-adef-e9885f89beb5",
        "name": "Clear Cache",
        "item": [
          {
            "id": "79870155-e174-4e8b-adf6-cd36f9b07988",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9f6f2a3c-94fb-462f-914f-3583b9c38b41",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "20893bb8-2c57-4331-a074-e77854c0866d"
                }
              }
            ]
          },
          {
            "id": "49fc8e21-4f79-4a2c-8d89-ad8fc92a6a0d",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b1724d11-ac17-4f98-8701-352bfba962a8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f3a097fd-0762-463d-91f9-a69176a1ef76"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "de18f3f5-730f-41ee-b440-b38aecb4ac5e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "872f7eca-a240-4bac-960f-0d34a8b9d3b0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f6a66323-7796-4e80-bb88-c9ee2c7582cf",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d1dc6a3-a988-4b4a-bb97-3c1120afe60c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fba3664d-970f-4dab-87db-c90e2a73f6f5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e9416893-11a6-43e7-aef1-6436c3d812b7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "41ed703e-07bd-4a82-860a-6812cfe567df"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "005eaab8-1c0a-4ea1-b91f-a7aecc48ec7a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a3806cee-6db0-4616-8946-9363c7a6d9ca"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2942788c-adbd-4154-8d25-2846dba3ec5f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f29f3fc0-a958-4214-aad4-37614905d145"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "53c98d8a-b0b9-4b8e-826a-e981b944a8e3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "765cbb6d-5e86-44bc-952d-33edfa465de4"
            }
          }
        ]
      },
      {
        "id": "205efcbb-06f8-40ab-ae17-41e81b75d961",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "f8a72e1b-f54a-4d45-8665-367419d5c183",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bb008ecf-f011-4eda-8cac-22c2bb4251a9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "746c8092-1ffb-49a3-930f-b0cc4e409595",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "716255cd-f1c1-465b-81a7-e905eea9cf45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fad13a72-e712-42c6-a7f2-95f2c1ce1978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d308c95-584f-47f4-947c-bf08c5be9ee4",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a32a85c9-1d75-4988-8155-d46b67182e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "85efc6e9-bcf8-4d9e-80eb-6962077fa596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce0e4de-34b3-4bae-9c34-9eadea510f57",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c7c61c-2f44-487d-8ede-c8c088241acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "55ddf8c6-a56d-4bef-8107-72bd12d9acbd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b7e450f8-d389-4530-97f1-160a89896f6c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "29dc3c82-073e-4032-9dd5-5d0437c4c947",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1f68fe-1bb3-4aa5-85c9-e16ff8f0bc86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e530dd9-acc9-427f-8c6e-712d208ef630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b7d9ae-6437-4877-8ce1-6363ef73b5e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfa13015-0a21-4999-813c-25024da37587"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "eaf31bad-760d-4ee1-b1ff-9915b7a13ca8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "16c70589-c746-434e-86ba-eccb7846e708",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b019ed1-0a3c-415a-875e-cafc6b90b022",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "9d9e4c1c-0893-4bf7-8bb2-286a14d8719f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e2ef4bd6-78c7-4a87-bf68-8556b5e4d3cc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "06f43fa5-3d57-4735-ba14-83d17553af7c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "27a7551a-f3c3-4b82-989d-fc3d8ed816a8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "42bf3d95-b03d-43ae-8cbf-ae8110c884fd"
            }
          }
        ]
      },
      {
        "id": "8784c0f5-98a2-4c4c-8b75-70cb8353d377",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "5e13d221-1595-40c6-82e3-9bfb47bf7926",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b1a40f43-9a88-4038-bb4f-f5b012c2b9f0",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "8f009752-d9d8-4977-8bd7-ad34fdfc338c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b69526-5d02-4c10-b649-61fc196af626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63b9569b-c5c0-4b33-9ebb-e20d0fc3598c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "940f1882-f652-4dcf-9eee-9d29b6a2743c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e3166a6-1aea-430b-8d81-619b2453c5d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b26ef2-728f-4b9f-98e7-0dcd1495ab46",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "712b1083-eaf8-44c5-8eab-76b576dbaaa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80e8c9f3-b90d-4067-bd10-7650ea428e61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "522493cb-110c-4b02-9db2-f1a8bfd27cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b03520e-6014-49c2-8ae7-c7504c78223e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a715208-fed3-449b-99c4-455d190a1317",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90af929a-9791-45ca-a62b-be68a965f54b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "534cd4b7-6050-4309-8dc0-7e59b49cb610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0abcb03-391f-4728-9a14-f7fcd08e266c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5db14a7-c17f-4f39-a5ad-f0d5ada3437a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71c1e575-b4b1-4114-a610-52a60db26cc5",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "309d5a61-aef4-4df2-bfa3-321d3be2a0e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3dc1fa3-e975-4419-b786-65f300e2e068"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f80a47a2-e6f3-439f-807c-bc713f6fa19f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4be38e26-b2e9-469c-850a-1f0ae3f49029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a522b3-84d5-418e-9f25-471738df0822",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa607eb-cee2-4928-91da-8c1b337f5418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a894ddd-28c9-4e5b-9522-d2a1d72f855f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dafcb1e-aa02-46b4-ad0e-6102d14df96a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d713adad-cbba-483b-9bbb-9dbb0680f918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43115034-f0b6-45af-9679-4c7e2d23df36",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8900cf3f-ea79-47bd-ba79-f65d0581f997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81c58df8-131b-4c29-bed4-2b8624d33f26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b29a910-66ec-4d41-a93a-f6525ec72dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3d9f889-c082-472c-96ae-ce1c75e49b47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0570fcc4-7390-44b4-9f28-1a1ed2624862",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ba3cc97-53c5-4b99-a777-18f3a421dba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d8f7761-b74b-4423-bd35-70f905e7fc0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b15c4fd4-5310-4739-81d3-f0f50314c1c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "474ba731-27ed-4b32-abf4-6bc82c637e00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01078dd1-19f6-4a97-9424-ef9679b008b7",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e9cc427-930f-4214-9414-7593b7b4d350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec369e5a-4de3-4d6b-b478-32a9145f1214"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e173b2-b816-4a7d-9ded-366858a11589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ede67f8f-9279-41c7-a13b-d002b04d3524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263c64f9-d2a1-4b29-b622-10bed3d25300",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb2d284b-d867-4dcb-b6c1-c5c804a062f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb12bc73-0f93-457f-9599-fc957bfac782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0651dfe4-be67-4166-b974-c187cedc0cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d81b00c3-4f7c-452e-ae89-b5744f96ac8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57f70d39-c58d-4fbe-8bb9-a5237d77dbbc",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "860a8e5a-35f7-4eec-bcaf-620110b7c7cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5c0088a-58ad-4113-8562-dbfbbec38f1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ba0b8f-d5e8-427e-8f7e-52219309b120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "40862c50-662c-41aa-bdb5-4b2a20cc9c8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c832ef-20e5-4987-a928-f6067b9f670b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1036bd4e-867c-4ac9-9aa9-54a50c6fb382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d31e877-93e4-45df-80da-bf3474202751"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5292debb-10c5-4d51-a705-1f83fed1127c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "909a054f-6855-41e7-85ff-5698fbb2adac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a3d4bb3-6d99-4343-a949-f11d5be9c128",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6887ea6d-a4d8-47a2-a20e-4445ba68c2ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fdcf52f-67fa-4aff-be3c-5de8b99b24bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a468e889-a2af-4e7c-b368-bac88a3498e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80918e02-046a-431c-8558-9cf852da5dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90006e82-d28c-47f5-8f0c-3c510a9dfbf4",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf417946-4375-4112-a801-9359697f7af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fa8ece0-5e31-42ef-8ddf-e8df54ffc99b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea056b9c-390d-49da-bbb7-bb07b720a7c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "470f662b-73e0-4bbd-869b-62cfe6acadf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e800d53-6edb-4e2a-8843-32e9a39b5c52",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c2fb15-cc70-4564-bbe4-698105dcf8f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "235608f2-7199-4109-a171-22e7471d6680"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e2fcc92-0e72-4dc9-9f88-adeb57200638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be57d4c8-0b10-46f3-ac6c-f49994e4ad62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da0694df-fe56-4435-8bff-9ceec83b8626",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de139810-07a8-47b9-a57d-f42096eae027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1166663f-219c-498e-97fa-8e6407b1d7f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a2d10dc-3fae-4c5e-bf0b-27b832753f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6285ece-44ee-42b6-87ea-eb17e46d21f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65eb42a8-ae6e-4ba0-b0c0-efae3c345f03",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41913659-ebdf-4fdb-826b-e837b4dd8f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cc0949f-d7cb-4983-99fd-afd6cc8e3216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cbe5e2f-1166-42e7-969a-6b03dbd7d53e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57c629db-1aa7-4eb3-865b-aaca2dcd33bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac4eec01-bd45-4718-81ef-115c189db25a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14e5c104-46d5-4bee-b702-e55958bf3547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1141bf7a-c9e2-4866-a313-8974d0e4a6a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c517634e-8e32-424c-8c08-8c926b7d941b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6cc9981f-bcbe-46ef-af3e-b0ebb8fb7c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5075140c-9e6f-4f2a-b18b-20ed6b95e295",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed9d0e2c-761b-46fe-80c6-73a574240b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76b2db51-d61d-46ed-b2ae-ab375091c68d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78182523-7fc2-4d18-aebe-122866d17ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba3db0a6-e78f-4c07-85b9-2b362412ea0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a96c956-5cc1-4593-b2e9-c22c0817d85d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b95109c-d61b-464f-8d6d-ba35e781fd89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abf71b04-bbec-4d8d-931f-eaea373d8f35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "543588ab-4d42-4e62-9097-5c5237ddd7e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e06b58fe-f054-4f9e-b6f7-b74abdde8fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9bb3666-a81d-45d2-b475-a4fa11c1e1bb",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25eab45d-5cd4-4175-bd5e-98e687351a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc321808-7d08-4c3f-a475-5edf5a8dd9e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c06839a-f8b6-4a2f-8afd-31f588fa3ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4a41c4f-7c03-4598-bbc2-0eee46727459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0887f8b-a668-4ae8-b918-21780b5a230c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c99c92-c0f6-417c-9a32-8c358ad45a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33033e9b-a656-45b5-a19b-8a71f813a164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b17ba20-ff0f-4f05-9a8e-87774516e30b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d72257b-b176-42d5-a9df-b4ef700178fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c70603b-5b98-4f6f-b0f5-4fab037a78d7",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5348a8c6-a038-4cca-9fe5-6702257353b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "488a3c6f-bb1d-4023-b0bc-a286ce1ac51b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c26728e6-4481-4c3d-a64a-8e7230d29398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8feda0f2-d034-4be8-9405-4ba7b1138125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "078aec83-faac-4622-929a-24413e1652c5",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf8aa20c-fe97-479a-af62-ad66e71c6f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ce2a32c-8c1f-4560-8d33-16c1ce6bb7c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bbeffda-fd0c-460d-84e5-4f1b7ea85dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "04527327-44e7-473b-9534-abc5616ef5c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea0b260e-425f-4236-8d45-d3113f21fa4d",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45534ec3-7368-47f4-9625-10a48ec61772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8226aebe-120d-4a5e-a881-c90aaed47047"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1feb61fc-69e2-4fde-9db2-f82568f14c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3fa22df-2e76-412d-b13a-814a9c360b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8234153c-22e5-4766-b15e-54feb8ebe319",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7edbd0cf-3d99-438d-a68d-b5b81e579ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5f4119f-9193-4d59-912d-07e09a573f70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c829198-7003-4fef-98a7-a4d4ce1fb705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe31a9a3-b082-41ef-85a9-e35603fcc252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fef87ea2-1b98-484d-b212-331f85cd6d27",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb85ad92-0efa-4d80-9578-74d204b1c2ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b34e1c5-be0c-4fd8-a254-0d9d46b24481"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "940eb38a-72e6-40b2-b681-89bdcf64e1d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b6eef00-ad06-4057-a27c-9ff1e7591cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba86166e-9177-4848-ae3d-9244ac2fd441",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc181691-8087-459c-ad5a-10071f8451c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8db525db-11ed-4ccb-bc9d-a0f1a63d5a8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d474bc7-c484-4544-b543-4a1bf35044d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec5aa5c7-b064-4cdc-b49c-ed582d238eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ee8812-5c60-49b9-b0d7-96c5ac700abe",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "172c2413-8cc8-4a83-b71c-7b296ead9648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d542632-e478-49a5-ae72-15cdd94d67cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cd26194-3baa-4c58-b6ce-7db6ae7897cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6001a4b6-e45b-4637-b169-7ad95410171d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4f9e03-df7b-40a3-8923-91d20c3476c2",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81443d29-faff-4ba2-a964-ad78a7cc1c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c55888d8-b692-4930-8787-74192022a230"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b06710e9-1f6c-4668-801e-0a65eb9a7a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a38669c-e025-42f0-8cb6-91942dce4b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00c7503d-e823-4abc-999e-8f3f62287e44",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dd328c8-cda3-4598-a5bd-2b76341eb5e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2628e121-a0d4-49c3-9a42-6aa3d510cf21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f247d565-a926-4032-af84-eae514b914de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "93c317ce-79a8-483a-82d0-f4ad7bcf82c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "131e688e-ca1c-44c1-bad3-4e2e1b3c5156",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1cfc328-d693-44bc-88cd-26f4c65487ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f88402e2-a61c-40fe-b7f0-0a6b4017ebd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc1de518-763b-4fa5-aa4a-3c92a4478ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f884428-3ca0-40f6-b319-95b373bf2a8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0cc3531-1969-4ab0-91bb-da862147b07a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd03f957-1b91-4d3b-b40d-dd07aaa971b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d7a237c-10bd-4792-a325-683d29223f02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b45ba93-35eb-4b84-8f82-129b4763d955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdc117e2-4c8c-4603-ab9d-c88fae6c8bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9848f210-9c9b-493b-b209-169a9bdfa370",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "612e28ac-6c71-4252-84df-1a3f259e1ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94ed409f-c812-4af3-ad5f-582da2a6ffb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae714564-2d06-49ce-a3f7-ee3175f99607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f1787c1-8a70-4d92-8d7b-03b34f61a2ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1fad611-e14e-4909-9103-212614180915",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c11d48-2f30-493d-9296-6e85500e066d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5531c51d-b4bc-4740-b6a4-ba89ee80abc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b6378dc-2472-4752-9007-741bc9297d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c227b5d4-70bd-4207-a9bd-67a1bafcd52b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee7d835-0fc8-4b70-9466-22291c2248a4",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6493bd7-ef2f-45da-bb51-eb31f5fac769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d1fdd01-d3b5-4cab-aeb7-eca414e0e6cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f8ddcb-f7b1-4a09-ab9f-da659a66f467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "46d07475-5079-4478-ae1f-13cd85031b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "771acecb-9a4d-4087-b8b8-47ee6901785b",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e3eb238-d2d7-46d1-8c52-92bd8136b1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "644a2a28-598c-448d-8790-ae0ae8194195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6fcf8d9-4d38-482d-b133-80451cb1de49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "12321937-bb09-401c-af47-bad6e155f34e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fc969e8-7d7b-458f-a09d-b8707024c603",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db37e4c-3148-4545-8d0f-52d6ce672cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eb71c1a-3d08-48b0-ba8b-2a9a2c1820c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "562abd5d-11ce-4290-b850-ea4456a1dcbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e99f4d12-1a5a-4685-b78a-6069f4343c1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad58799c-50bb-4427-81f8-858261004ee5",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8dede2b-af60-4907-b448-d7814a286404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70d19caa-0346-4993-b6c9-74a0abddb292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "472ac784-01c8-4a33-b01e-58e91480c3c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1729472c-b877-417e-8a63-eaf104a75f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5adf7891-d47b-4091-ace1-02eae6cf0c67",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97769364-c665-48ee-8871-69dd7726f06c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b89ba7b-af68-485f-bcf4-e1b4e73dac02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "800876aa-5cb2-4a04-8d72-88867a28f775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "511bf064-08b3-4358-bae6-ef25b5f02483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23ac2202-1a6e-44cd-b414-876e3b14c483",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d48bcb76-c1fa-4028-b565-80103acc8967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6aa5c5e-c497-418e-96c4-b0a5f8c5d253"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e76bd570-60bc-43ad-a794-1d0ee33a175e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce66280a-5b5e-4b92-ac3b-5e324be1c5b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c56c96a7-e782-49a8-ab2f-25c49b0b9367",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e2532a-d028-423a-8ee9-730a0274743f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd5f8f0d-728c-44b9-a29e-1648b1c60d7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3f8e803-637f-4f42-80c7-a9ccb1c2db38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb0387af-ca74-4c1e-b1e1-95e1cb3fa82e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db9c2cc-430e-4064-889d-bd403cb8f677",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c805cd3-1c40-4f49-ae85-25d8adecec9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaf87a53-cf19-4333-8f8a-0b213d4952d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "442aa6b5-746f-4856-aac9-6fb9d760369d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "636ecff2-caf9-42a6-b3d5-174e78d95fe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93d5c865-380d-4095-a2e0-da4b29150e5b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "688b92b2-5145-43fd-baf3-24cb1f619d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f960c216-e5c0-4ba3-b1dc-a22762a8885a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3468fb11-d51e-4281-a452-11452ccee278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "33f6c41b-c8e9-4e16-916a-e3f102c72f23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f75711-8f94-484b-b30f-5c85c58338b7",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dfa309b-8205-4ed3-af7e-16dc9f0d90cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79c6ff8e-b634-4661-945e-99f569353e50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a42d414b-d4ba-435e-8c1c-30f74f76994b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "82e3afaa-2bdf-4885-bb35-ff68ea458f0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab415a5e-79fb-450a-9f4f-45367733be8d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "337773c7-4f72-4456-a94a-960eb09797c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18a325a0-19eb-4eeb-8b85-0ed48cdd500f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b89e8a6-b2fe-407d-a706-811242bac9f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b1a58d9-9c4c-4df3-a29c-66f7d663bc2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d43856a7-ee59-4c2d-b8e4-d81fcfe265d6",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b023f6d-f1b5-4893-9a89-a3b25e2de900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7571a3f-45cb-4770-943d-1ca34005030f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d8696e-c6c1-4d1c-b8da-3e362e36cc3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c0ea2ee-1786-4d6b-92f4-651370abd018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4b3791c-2b76-4fa4-a6bf-e2c5ecab7794",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "702bb9ee-aede-4ab9-8377-f109fa51a624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3532a33-a896-4969-9fcf-127d04ce4c51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8facce18-41ec-4293-816f-b447197c0922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "45f30315-8350-4f29-9f4d-2fb3b15d4546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d7b044-c4e5-4b29-8226-469ea5894ec5",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d45b0e18-13f9-43cf-9344-d68a58d4febb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83c8f257-bd56-4b1d-a2da-1cf2b73d1cd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8da66f93-881b-4aad-b5c6-f5e2bd5c379f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a483f659-562f-40b9-9fcc-64451f8e704b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37144453-9218-4315-b046-f26c2d7ae798",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0346ceb2-80a1-43cb-8e1a-749875ab3fce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1f0a288-3623-449a-9fa6-67219f96ae31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f9a778c-f10f-437b-886c-85063b13d982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "abdc794d-0a41-407f-acb5-1f49e76d1cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25610d0e-0de4-4035-b5a3-3439eeaa276b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c2e636f-e428-4d92-86a5-a793c0f32f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8345a885-977f-4c0d-bba9-862bbc46f1ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa9384c-7508-4e21-b1e6-1411d9f18b79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0ca9b837-6a0e-40cc-bea5-e2bf70b90ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae181a9-f510-4ade-a4dc-db02c871f506",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce470ab-ceb5-4b25-b436-8db11dfad083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7fce59b-ddd9-4bf8-b29f-d134c57f4c72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "048185cf-63c0-4f86-8e5f-1a92122b7af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "130d9308-9399-406c-9964-ea603eafb5a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b0699a9-33ee-4fda-9b58-f4bf7769126d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada007bc-1ff3-4157-8450-0bc70734978d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ea5c5ac-4af5-4490-9c6a-9759b684e3ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f54c5af2-5485-4d6f-b870-7ae3c4a4c383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8877e176-f2f6-412e-bacb-1b0a83db16cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e7ababd-a09e-43d0-96fe-5ff09d0513ef",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a58e387-a88b-48e2-95a9-6fc49ea48e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "730213f5-0728-441c-b063-140a26ab2156"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb068402-db5a-4bd3-a0eb-5cbc0686d51d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3692e47-10fa-4b44-84b9-b970c2e64e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b8765c5-7c31-439e-ae49-fa22ed534a40",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5653f7c0-c60c-4da0-9b02-93ac7f3929fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ebf458f-7410-4e29-9dc8-bd7842dea5b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff5ce1c-7465-4262-94e6-8f84bf0fa90c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b075e1db-3a13-4e97-87da-34818bba8c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9daee45b-9659-4997-a1d5-3615c97687fb",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b76da8-be35-480e-98e6-c77f973e780d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b7a2178-7e48-4d38-9dac-0bb074c79ad1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5d0cc34-ee96-42f6-9b43-19d589526987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b57ef10-ab50-4b07-a369-e2b678cac301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a89d9302-132e-48bc-a6c2-585cfc6e66d3",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79eaf11-e766-482f-8fe3-e344c07f05e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "870eb892-e587-4460-87e5-93124479c3dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caeb84c1-d0fe-49e0-b319-5d17d75d5772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "ba131ec2-5c36-4fae-bbf2-27c544a29383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd58e1c7-4630-447e-88c0-8a444700aee3",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "debfadf3-2f94-421f-b524-5b3fa7df80fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f6c1fdd-cde6-4900-9253-659ed7ab8654"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ebd3d06-6535-4e36-b2ab-4875c73f348b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "71226710-a37a-4044-9c3e-f4b7bd144e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6855c557-cda3-4cb8-ae23-36601dc581b0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f4e986d-fded-4442-8078-54ccf3cfa5fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e908049d-80f7-48f8-960b-971a604d0cc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a03e1304-facb-444c-b337-156eeea445b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2838dbc1-d733-4051-be74-c658767b5a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a4b9bd4-5219-44a7-a45b-03184a15cfa5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c0882d-bcdf-4d4c-84f2-e7bfdc03ff35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de447220-5b2a-4a3a-928e-cc0976b59e6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6a34d5-c881-465a-9d7f-dad9b7605afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd2413b8-fcbd-4b32-86ac-c27359eb6a4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45437a5c-ec43-410a-a28b-fc1a091a7c9e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b78bf3-54d0-4ca6-b679-383b02622626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f34b092-d92b-498f-847b-0d8167646ae3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea033b66-349a-43c4-9436-699ea3f8d755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7395dc27-5e50-4902-b6b3-31c10e0daeaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb7c5bb1-8e91-43b3-8a1a-29d3681cbdd9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3829b15c-5ccc-4831-a904-741b1e0f2178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff0068f6-6fa4-46a0-ba0c-28b6fde1f8e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a10433d6-f285-480e-b1ad-9d5dce2aad39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "87710265-79b5-4185-b230-41812e71be7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d675f3c-2fe6-49d0-8526-09a5919cc591",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd7c5de-5136-48d2-a28e-c2d189125f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc77cd30-9306-428e-8ffc-1319caa79709"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f715da-603f-4680-bff8-92a5794c5b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "6726e248-d364-42e5-bd08-a87e91aabba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ad3aa1a-e6a0-4dac-bd68-e6fd9eb4d373",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc6bb1dc-3d62-45f2-bbdd-970f2f611a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9427dc4d-c00e-4a26-900d-9bd433e19e91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86336b15-d77a-4121-99c7-63076c051e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2bfbc858-1cfa-4420-9fd3-ec9b31ed12d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fef0aad5-c5df-4eb9-80c2-2c24aab7a631",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b92600b-3b91-46e9-9c71-faae3250a852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d7dde09-5d70-462b-b9d3-ca23ac4b7e67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5279e927-8ac5-414d-97c9-836139cc75d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ceb75255-ff0d-4c63-8dab-06a239b53c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910d6c40-1c6b-4703-a4dc-b7fdaf11d728",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4db0d65-04e0-4df4-85e0-ead174e064b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25f94a03-d823-4c31-9d33-4b6259c7337f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d18431-2b70-4ea0-92c3-cf1819e08e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d708f44-aea6-4db2-883b-432ca3e23d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44d32ba2-3ee3-482d-94b4-dfa292e9a590",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2505a244-8a6d-4217-8252-72fd890b079d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ded29eea-57c7-44ee-99bb-8d6ff2815872"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def3d0e6-2082-43cb-8bb2-ec75ec1cfa04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5fbe5ac-72eb-4fec-876c-28ded078009a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0e3d4e9-3e8e-4b77-b9c0-d4a2d0479b89",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "def41a61-1c92-48f4-b51e-deaeb7ffe88c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c19659a1-0de8-4a93-ba00-73c392abb38c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c69501e4-fa78-4e4e-b5ab-17b52c06e83d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "abcb439e-fe80-48a8-a4a1-93d47089ea0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d7ccf1e-7e2f-4894-abdd-622fc0e5c556",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db65e5b-8e73-40a2-ba04-7d8963a69580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05535028-368a-42f4-9fc3-d0e89280d3b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b780c7d-d051-4364-94a8-b22029925b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6ee88c8-d639-4345-8c8c-e802ea399455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cede292c-a510-43c3-8046-c55d4489da51",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f924d18-a948-4d1a-aa1e-68df072c89d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f309417-c022-45bd-be4a-cc7d9972eba6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6037d0e0-3682-41b8-b07e-ec48edee129a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a748c232-ed04-444e-8d4c-15db4f9bb7ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f20794d-0525-4d73-b0eb-bdf3fd0b16ce",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d48a4431-9fe5-4cf2-8e1a-5fab5bdac91e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86e6195d-2e26-43e5-8a1e-878db1941d4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "045df3dd-5eaa-4331-ad08-99d513b27982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e69e52e-0fb0-4815-85af-67cb285d222a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c22cb9a-8c3b-4e69-be25-dcda007de326",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "088e0e36-7101-413d-8ae1-0e70e2ea97ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9be9692-2809-4131-863b-a41d49be4333"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deac06f7-c8f0-4f0d-93f8-cfd015174e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "82810251-2b3a-43be-840a-2f2962cada24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a524846-5ad6-4290-99b1-2c471ecb8dcd",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3757db3d-d123-42b2-a5d8-fef250977fd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99dccf2f-35a9-4f9d-9d57-4c3374e98ad6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1407e6bd-b7af-4155-a6de-bf32dbfe57c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdbf4a77-10c2-40ca-ba40-26d796e73a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a40642-d61f-4ea0-afcf-c136e095abf1",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aefa08a8-48ad-482a-be1f-b3c3e10230d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9769b6f2-9078-44af-805d-d1c9fa5d07eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f092419-4159-4579-a564-d35b6826a2e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec1adb6c-49c9-4b2c-ac35-b387db80b2c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7fc9c0b-4175-4874-9a46-a94c5973af59",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f02623df-c13b-44ad-95ae-d4555ef02b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31cda43d-e081-4302-9e3a-0a442520c584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcbc5813-7ec1-4343-a023-797b8c8ad1a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c9e7a6fc-8541-4210-a856-5dd0fe40e499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8824a710-dc86-45d4-aa1e-83567e480217",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6fa6acd-1528-42a9-a0d2-d79cd3fa782d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e180388-9483-4899-954a-5dcc2a5b39c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f791942-fc2d-4d43-a11e-029824d8bf2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "de414ee4-9990-454e-b339-28eabe180ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f5db8df-4ad1-41f1-a385-5bbd35b81e03",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bae61a2-572f-4714-930e-73666c4903dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3bc1afa-e06e-430e-97fa-70e2bbbaf438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "473ac2d4-6921-4f90-a040-ba1934a08811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb41f071-fca6-487d-bea7-bac43ae556ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e39b9915-c9fe-47f6-a500-b7eb6988b37a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b41e7cc-d68a-4eb7-ae4a-681b45ab2707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "094cf754-ee99-4862-a590-d58e43a5b136"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b47d45-abea-4d18-98b4-514c48c7c0d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae9d0418-3272-4153-bab6-be8910aa6cd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bcde1b1-c377-4887-a2af-f8f82b6304e0",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74086263-ff93-41be-a8f9-5545bcbf47f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d436ef5-2e4a-46cc-8eca-3e1c4339a246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c98e405-7f80-4dad-bf1b-61c75afc1fbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e36edfd-a49f-417c-b772-48e61e3f72e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b9ffcb1-c779-45b9-ae83-2b9f84617519",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7cb45bf-dca4-4ab9-b8b2-fe379f3a70aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e792cd00-d421-4196-93d3-c0526c458253"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3677aab-c1c6-4efd-a8b1-034b507174c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a35cb357-8073-44c8-bf62-7d20cd1b01cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3af5f5b3-ef03-49e0-b4b1-89c6d7e316f4",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a294e61-0d70-4978-bd30-0c64bdb5c5d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c45f7695-6f2f-4779-9496-fc701c7891a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8796296e-2dde-4804-b97f-8f8ee6e7bffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e2dc8ea2-84b1-4bd9-ad52-3c99bacf3422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ae86ec-6e05-4ef8-9fb4-ddf292056f6f",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "743421c9-ff5c-4484-812b-93fb17a21ff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e57f6a7-8c77-4f08-9936-d69a2dc796a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf36b432-f8d5-467f-a1b6-fadb171234bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea6684c9-1c89-4631-9a58-4a87da365a16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f47946d9-3aac-4b3c-8360-c0ede483af0c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4030a9ef-4047-4cd8-aef7-37a57c567c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9868cdcd-0729-4b6a-9021-a443d04fea6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d254c4d-af1b-4af6-86e3-dfba1343fcb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc1daef3-0dcf-4892-905c-0f0a6ef91585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c2f4ff-0ddb-47b8-9062-090c4e1b59ed",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db7605de-bbe7-4ec7-b966-034b1e5c4176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af8439a0-5484-4c78-a840-31d915635e2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "087376c3-59fe-4a84-b4c8-d2c720446f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e338f80-c4fd-466c-869e-5ea76991c379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5ba438-1b93-4e1b-807d-3caaedb5ea92",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f770f210-3e18-4272-92c9-cb2cc2ff1cda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1511ca5-d38f-4646-92a1-92f3897dfe66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea7fa142-bbbc-4252-a92d-c1bd3b4c70d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2cc6478-c9a1-4e7b-b851-40b6e58c2f94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f1e221-1dbe-43d0-8984-72728700411a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d693e932-ac55-4c4a-bfa8-a92d7fe21ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd3f191a-43fd-43e8-bc79-467ec4a76390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43366c20-ed28-406c-ac11-f7aa4c9c1e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a6e08c2e-7c5f-4b8a-b437-4e09c4c4bd7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c557830-4db0-473c-969f-753b37e9b6da",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec26834-3430-4373-acd9-dc9eb8a9e1b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "289ad578-8614-4c76-b440-c84900c8f07c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6bf8424-e13e-48b4-bc90-93de0c08f190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "38853c53-f897-4314-a962-914323f37253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ffcca9e-88a0-4596-8cc5-4f10d4e68390",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f1ca6e-05f4-4fa4-aaf9-f574929836d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "489bba4d-9dc5-4da7-a6b9-e3a61f12c572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80acc378-c20f-4218-858c-058dd5a4e9d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b66db045-e324-4448-b68f-65723efaed8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c0108cf-0609-40e7-a6cb-466bb4b685a0",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "732d851f-4289-44a3-9435-15099d50ff1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1cb6231-c261-4e05-b7d6-185aae53e51e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a528b7a3-c9c1-4a00-bb2e-db80692c5934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7720782-5b01-4668-95f5-4f1472cd2bdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8643cd33-5b94-4b31-82c2-aa1ad7898a78",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f165ede-151f-4932-8c62-d738b1bba813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c6ec084-720e-4392-8c7f-941c289976d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "594b8977-8784-4aa6-9d3e-28a2ceedf313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8670edea-05fa-4abd-9a3e-eeddcbd33cb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e03bbf38-8c07-4b4b-9922-e7532a6daeb9",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5adf86f8-625a-42e3-9efd-fcb7470575c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f38906b9-78b1-4132-b195-c88a256bd3ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bed5ce0-10d0-4491-b10d-ff8040b19e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a55bb443-b060-4ba6-88af-0870878d6967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39f64d8b-7fed-4beb-807a-c37636f287ce",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ebe8795-07b7-4dc3-b9fb-b91d0b9d1a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81e60c53-41ef-4d51-99d9-f6a4b910bd73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6242c4ad-6942-4344-a8b8-9c06bd9fd065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3d311da-119d-4e2d-86bc-bdef624e2b7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b30e468c-f89c-43b3-bff0-c70bb3f6c307",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c727588-df72-4fcc-9801-99d4d267566e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "03e42c96-89c4-4fe1-8927-3f11a96e76c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ae61f2-ab73-4878-904b-a5eba3671b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "50acea20-6b8c-4410-9e31-4bfd5fc1b489"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "10b33911-26ba-40f0-a000-6069e7c1ae20",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "15f81f0a-6e1e-44c5-a97c-131551d0dc4a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df7f5a13-273a-4b23-95cf-f7041e395c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cadc3e9b-572c-46b6-b8b8-60e1a14e634b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a2d256-4829-4a33-b62a-dabfaf08f1e5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47137686-db16-4052-9c19-635dfc25ad59"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44a5cc3f-046c-4a7d-988a-77f7cd5109e6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27738f0e-239b-4560-9771-ee9427ccbb8d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d93f800a-6c8f-48e1-87f7-9ecd0675ca93",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b1544ddc-7912-4bec-a6f8-fc2e1e2f93a6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c0fca8fd-6fa0-4e0e-80fa-754e15f6c651",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0ee23885-78ea-4b4d-bd12-e770fb49f2d3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "19bbf85e-a037-45e1-9be9-fd9723317a71",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f79112e5-e82f-4d26-a4cc-bed31422858a"
                }
              }
            ]
          },
          {
            "id": "b2426c29-e80d-4431-a429-0d8fa1de76f3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "85f3e05b-382e-4249-9f73-01e90bc85bc5",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "acccbf3d-203a-4f75-a217-9894bb3c0444",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfcfd975-6692-4a82-9c19-04a7fa2bb455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "98f9ea2b-e618-437e-98b5-d97ec327a0bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88de6725-82a5-4e9f-a37e-fd73be3da24c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e5b7bdb-9e9a-45c2-b2ef-61358a333373"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "74cc21b4-ef89-4f1a-9b08-6be655f4334a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee1e1cb5-ad90-464c-a788-5cc68017dbc2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b2080ebd-97b2-4766-a4a8-b223e54a538d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "47cd77ce-0535-4806-bfa2-bd993a374b8a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "14088a70-26a7-4929-b57e-cc2e81a15dfa"
                    }
                  }
                ]
              },
              {
                "id": "4580c87d-1c48-496a-bbbe-a86d66e864b5",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "78d423cd-e944-432e-bd7c-27fd5aa11a62",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c92da0bc-d817-4a80-8ebc-cc51bb4073a4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c466cc3-2b4c-48e0-b4dc-352df8e7b840",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "57f0bd54-4add-4f77-a01f-f404d085c596"
                    }
                  }
                ]
              },
              {
                "id": "62dd13c3-2810-446b-b715-85fdb5052252",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e59a1f8-94f8-469d-a5d8-8306fbfb12d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "26270d09-23f4-4c52-8116-6faeed062a13"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "495f6c49-2d45-4117-b72c-dd1060aaedcb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e1f6c1e9-8cc9-459d-9225-c3fef62504bf"
                    }
                  }
                ]
              },
              {
                "id": "0358343d-3e98-4adb-b549-bc675d836c24",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3641664e-7efa-44e0-b9d0-075c8ab113fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "07047408-33df-4c45-aaa7-1611856f955a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f80ab718-6f31-44a6-9e39-54c7e9d93255",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "adb71a42-2cbe-47f0-8ddb-f5180aec8fbc"
                    }
                  }
                ]
              },
              {
                "id": "ea433b6c-e15e-49bb-b933-48cfe8b4e42c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "631be21d-9d59-47bf-88c6-4781bb25bc77",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c869cfcf-eca8-4c61-a053-3ab4324b0476"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad1dc097-34ba-4500-9d62-8c9d644f222a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "22aa6fca-013b-4300-a660-d3cb842b12aa"
                    }
                  }
                ]
              },
              {
                "id": "2c5aec36-566b-41c9-979a-982b93ab468e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "804887ca-b8f7-4677-84d3-5d88cd621d73",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ba7f4c13-1240-4543-ad17-70c3ef1839fb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2fcb3757-0dac-475a-a75b-3fb680c844d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ad22edcf-35ed-44d7-afb0-40b9a4c31d54"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "62ccf997-3a3e-450c-9bb8-e1d70f904dce",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6c509656-9ca7-4720-98ec-2121d8c125f8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bc51e7ef-4dcc-41a1-98a6-4456f58d9802",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a2c7e824-823a-40af-85f7-a7224215e980"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a1610172-9e47-443a-a3e8-c5d31e1bdd62",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "73b718cb-d6d2-4df6-ba26-633fc2f948d9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0b138143-0ea7-4ce6-b5ec-b0d3191d1bce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f78551bd-aebd-45c3-aead-8f459095b152"
            }
          }
        ]
      },
      {
        "id": "d154c10c-45ad-4afc-ae8e-08497c28284f",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "184bf23f-47ce-4775-9add-9a858f15056b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "af33919f-971d-46a6-897e-8279c9f27c80",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a5ee8770-e55b-4c47-ba2f-811113dbb5a5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbfbc331-aae1-4b60-b40d-9957f8810e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7af25a4-5b4a-4930-a591-0937e3ac782f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e658a559-dba6-4f82-aef4-a4ce76c08a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b88ff070-fc82-4de7-b8a1-c9b3376c8de7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65d72bd9-eeaf-4118-a3e1-f23d36512d9e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b72592-e9ca-4dc4-8703-3bf8f5adeb52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9e242a9-1789-4fe8-9d23-01361dfde462"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b5cd92-1ea3-4fc0-bf12-2eb18a0fa6c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "53349ca9-5657-4b1b-8eb1-8bad9671ad89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1772590b-1b27-487b-b45f-74725258162c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "361a9424-cf1c-48c3-bf21-2b63e30debc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1afbdeb3-23e2-4f65-bd7c-9fdb5bca3af3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87460994-a1ac-4ebb-9d3d-3db6ea4d0b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d23fa7ca-4951-4ebf-a306-9755346df8f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c781ab-0400-4f85-b992-bec176a766f9",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1043ad52-0cdd-4683-8078-cf4499116ef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77ad4ac7-acaa-4bf5-97ef-f44ed23f6c36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa4f9dd-dda3-426f-8146-ecd0d7883d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f582629-e60c-4b13-9f32-5d5f70b828af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c639124c-32ae-428b-91f8-f6bbb1f7bb0d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca96a56-66e2-4996-84d3-0dda0de20baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6d7b54b-dbdc-4ee2-ac74-a053da6745be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09f3707f-824f-47c0-83d5-69537bd02f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb0ec565-63a0-430e-9c1b-61dbb2a76a9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e40de9a5-25aa-4ee8-9b4a-c9a20da63983",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b25e76-b536-4ec5-8238-848c422c0c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e3c4efe-17e6-475f-961a-494725e60a13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4112a124-7a47-4499-9038-1f39ef61ae69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9aa0792a-159c-429d-8fb6-64c114f4d64b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed80e1f2-439e-46b1-b82c-f2e2baf7eee5",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e914b078-e8a0-4fb8-b3ed-1920e7230df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ea992bc-624e-4a3b-be41-40bef108ee68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53fee0f0-e5d1-4464-8c7f-db4f7371c0e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b343639-b101-459b-a2a5-0baa0a3a8d0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24d3958a-e47c-4d3a-801a-834169849fe7",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e053243e-98a7-4965-b2df-db5267697318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4d3b92a-bc8d-4f7a-a257-36d3023ac23f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c56fa0-8ba6-4fef-8c38-3d8c9ea980ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "939272c9-42d8-454b-86f2-a950fd3fd346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc650c97-6542-40f8-85be-948f359f0a29",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d67e32ff-b993-4b18-a8cc-912fcc5bf111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2246c09-7ed2-4195-832c-dd3f09566161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e973458a-15b2-4a6d-8534-cf2f91cc2675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c806d9d6-8464-48af-855d-0bbc35e46532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd1cd6d-ac5b-4edd-a571-f2be8413d110",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37136686-56b0-4105-b1c4-b5f431cf6f79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6ee9044-d6e1-4567-985a-7a44735cbf69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9321f6b-1b04-43e6-8c3c-d777239c2788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f51f9818-3375-44c2-8818-0ba298fc5b35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b22d2a54-0b11-4573-a0ff-ead08590681b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f964b3d7-618e-4f2b-98ed-9cbc5535b75f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bca622d-f597-4255-9eda-b0a11c8dc7b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6fb2bc6-7d7c-4646-8709-e3495a29c89f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f038e8b5-ca7c-444a-89fc-d7494a013a76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb9fd4cc-b1e5-4de6-ac78-9ccea279cbda",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b641a5e7-48f2-47f4-9af5-525f06021201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e92ff78-d0b5-405e-b2c3-0b8a3b4b2f66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1acdf9c-0e41-4563-88e0-80c90924c36e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5c2a2bb2-87c1-4a89-a159-acf3b6ac38a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31a53650-c4b7-4570-ac2c-f31cf76a4f98",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "193b3f9e-6186-478e-bc7c-0bd90747c7e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5f1a4c6-1a7e-439f-a720-fd499eea2be9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3686723e-b485-438a-96c2-2996cd5eb2d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b59d8c5c-3e3d-42b2-8634-f0d7f051b907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df8594be-392a-4834-b237-36b096fdd09b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f99050-4e3b-45a9-98a7-a2838b5165d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffdf0907-59f2-4466-91de-238f31021beb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aef7f68-399b-43cb-b424-d78335ddd4c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a2fdcb7-5709-4bee-8a42-b54fe6eaa2c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa8ad1de-dffc-4dc2-9642-1fba0f4fba6a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e7ab784-9b18-48c0-99ed-81483e2e1bb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e2ff45a-01b3-4f47-acca-aa34efbe2b5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fbfd4aa-4c01-48aa-8225-60cbc3bef014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "835a0b1b-dfca-488d-90b1-15cbe8614e1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fcbc6e8-ffe4-4594-a189-4ab3e41c89f8",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "594e6bcc-edd3-4a10-9746-5dcc77e996b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e05d42a7-6cec-4cee-82ec-053a8afa5a39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f797e133-006e-43fe-ac88-ad335b91acb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "04a03e18-f475-49ab-9941-22ee2d44d27b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e88d585-aae3-4aaa-abc5-dc333db7cecd",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c5921de-6bc6-4634-8199-41e84ca9271d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "173042d0-ef16-4de0-aff6-5422e8db94e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be8c1dc-3b17-4236-b2b0-67858ba0a002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbc3cde7-fa28-4f4a-9ddf-6ab81514c447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8de9f1db-270d-468e-b65b-41a6e7f631c8",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ca92560-f553-49dc-b537-d0b33937342d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2557d0ec-5fa2-4393-86ca-42035a4142c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcc4679d-c854-4910-b286-c4cbb0503a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fedf30b4-e085-4b23-924b-380f8e7382c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eae73ec6-4aa3-4c5c-9c8b-a898b5dc7597",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc912a1-5e4a-49d6-86e7-fdd04667892c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67185866-176f-42aa-869f-96c988ea87f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "291ddcfc-c49f-40dd-ac1e-a6cdf43bff29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ddcf72c-61a6-4892-b97a-0ed34069efbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f0e1aa-d68e-4690-8765-5b9502d8cf0e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1f897ab-6887-4c18-b7a5-2f1d9d21a029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eba4dbd4-432d-4186-9348-37f891fa2a25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4956f202-afcb-4da3-a945-f2a78905b6a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "93fb2fd2-12db-4ea2-b53c-073d1bc10272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b404688d-6115-4edc-afb0-4581948068c4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ae8be6-a24f-4178-a20c-ab18e77a30e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f16f4a89-9d21-445c-a77e-2b87b5d75f6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b8b4404-3509-4c5f-bf64-c3de2e163a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74da4fd3-5f62-4dfd-b391-af33990ad046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46194d63-70c3-4bf8-a455-f3323e8fa0e8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2004fa98-2738-4b72-b334-464abf764992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "371f41ef-c201-407e-b27d-a87c1d882b0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21cc6643-a713-4bc9-b87b-6bd41f42ad15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1026eae3-e4c8-4813-9c74-6c74e29cd398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d58dc1-31b6-4477-b564-f7c49a645028",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c7145a-a01a-4757-8141-f03db6aedff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec060bbe-77fd-4c3e-95d9-cd193a014da0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "418802b3-fdb2-46ba-b151-0a6960796f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2426ec41-d18d-405d-bda7-724f372574fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bff7b90-9961-46a8-9ff0-4e5e5c6d910b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59663551-ab20-42ff-a0f5-61cae511057e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71fa9db1-7940-4a4b-962b-59b01c6a984c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3858c90f-b463-418d-af98-5c705d786dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "699b1ceb-c074-42dc-bbe2-4ce6fd66d7ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a96185-edf1-4c6f-b643-cb2efe3fb11e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d894336-ce9c-4961-9d79-aa8f7c07b76b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da94d49d-3977-47f1-93e7-21213b5fa640"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2532d30c-d705-4f27-96e8-9f2ffa18f57c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70d97247-9876-46e0-9161-821c40798589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90feb373-2ef0-4733-a0af-5e37801103e9",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a98ea7b7-63a4-42f0-9a1c-eaf76791af09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb7e0633-7887-4b33-8a39-a57e9fe2061f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e4ee540-4b34-404e-a99c-5d1c21cda150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bc3d7bc-3440-4c11-8c70-dccd978d1b7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0a258e0-697c-47c2-9b1d-651e8abbcfad",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "225894a9-3e7e-4be9-84de-037080efad66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3588e85-74a1-4124-a955-f99a4124470d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b1aaa4-2261-4059-b7d1-17dbeea3c96d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41e73573-c409-43ae-8fed-8ba9c81fbad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba73e84-d677-4280-bc31-226416c3ac99",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "046894d7-98dd-492c-9c75-e04fb2848f60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1842ed93-f14a-4c56-b1cb-43f77036404f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "515c8dbf-0078-4295-9127-770df3551b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc00c94b-0295-4ef1-8cb2-2ce90daeb32b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e558c3a7-be56-4b7b-a999-0f10a582dde3",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7f59c09-10be-43a1-9ff7-abecae642190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b68fcb96-babe-443f-94b0-232c0c4e76a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a17dc6f0-22ce-492b-b3c1-189519fd1e1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71888e71-3a37-4810-a7a1-737761bf9f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f75b675-6598-4e71-babc-1ce8d01c1a4a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b73c95-07b4-4c49-9515-41c281a00080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0aee97a-330d-4b4e-8a01-58aad1502f74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4be2b23-0ed0-4ddc-a6ab-edceef3d34fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a41829b5-08f0-481a-bfbe-1f6d16f00d88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87b25a9f-8037-4bd9-a857-d11f817bd556",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f88825-ca35-48a2-b581-980d40a66646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e805655-8d92-40f9-9af7-66a77046308d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b4828d0-3470-4c80-b4bf-4052ccf061a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe5c6314-e5a9-4c1a-9cf8-07b8d21b054d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2822746-b14c-4eff-bdf0-64476b29b0cb",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e1afb39-2c71-4515-8a61-bf37dff39eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd452a24-11bf-47da-9f3f-189da6697dd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19133cfa-ce7e-49ad-910e-ae0a03d2c6d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d77818cf-5d20-4eba-bc2b-52fa19325761"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4a85760d-0c0f-480e-aeb8-f3980069ee93",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ad42660c-b127-4c39-8236-28b7247ae627",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3304e77-2afe-44c4-8557-d5424fbfb9f2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "521ec6f2-d323-4961-96dc-727931083049"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b31e2ec-506e-4768-96ab-15d3fb4b07d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c64383e5-4869-4072-b956-8a02bba9897b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "24072494-1182-49f1-8fac-f66d0bafae59",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27d0515c-c993-4bea-9c47-5b77200121de"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b3c8be8a-cb6f-499b-a62d-8310137bf83c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "46dae9fd-6b61-4c83-bad7-9b5abb99d4ed"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c29210e3-4ddc-4824-8548-07bc941311ee",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a540055a-6730-455c-9e1f-cbd8155b03ec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1d577d45-c0db-4cd2-8832-a13a81b47dd1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9553e395-65ec-40a9-ad19-02324246508d"
            }
          }
        ]
      },
      {
        "id": "cf579c4f-c51f-4d1b-8af0-aeb8bb5f0344",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "89a8040d-2747-4bbc-837c-d0186644e309",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2f761c13-0ede-40a4-9131-f29ff96b8b8f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c308a2d6-81d4-4218-bc8c-c468bbeac130",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9742a3-36da-4fff-980e-299efb99f352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f94f9c4-e64d-422f-883b-cc05afaf208a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19048d75-76f5-4da9-b255-c32dd7d2db26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "13eb6eae-0207-4479-8721-f7a6d71fd29a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0ffa2a9-bfd2-43b4-8115-eb2cab559917",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd1eb1c9-0355-42a3-b431-3ae4b93a78c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0335000-9c2f-4f18-8db3-c599e533bbaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "209f509b-d737-4a74-a4fe-b1d1fe579eca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8816ac6e-5931-474f-b71d-994171b5b962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b8992f-9de6-4799-b52a-5248ed6c05eb",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c63b5949-8314-4deb-831d-9eaedc6798f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf649bdc-1960-4c13-9236-373c5dbe771a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4ece1c-6763-473f-a76f-6cd7ca4f593a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1698f459-a579-48e9-a50a-9f4516b0c7be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f51fed5-7ca1-4ad1-b8d4-03829153376d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7403b1-d375-4f21-9d9c-64fdc19cf601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00b5ac2c-9a6d-4a5f-aa7d-0edab07fa1c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d76fb4f4-01b7-4840-9154-fae40efc1448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3752b931-f379-4826-9d7f-8819cd430dcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f864e6b5-850e-48f3-a3cd-7df211839487",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e9ea032-095a-40ef-bf82-8e5f2af142bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05ca1dbd-e15a-4cb9-b7e1-fd898bfb74d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e346f6a4-eee5-4ba5-bd96-10e083b5522b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5cb80a98-9b40-4ea1-aaff-c8790ad1f030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0851ce27-16e9-4554-b2e1-e31ebdeabae6",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5cae3ce-304d-4744-8407-454aa4c4ca11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3772e6fb-093f-42d8-ad8d-d62d05e33185"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98bb43b6-a540-4aea-91ad-5de00fa6a7e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "33c12646-2bbf-480b-a150-9c4d837eeccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "413a6e7f-c334-428b-a180-c56577dd0887",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27848ff8-b6be-4cc4-b4e9-dbca69390ff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5996e501-8f7d-4ea1-a776-0375f264c4df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c7f7ca5-d4fc-45f7-874f-9eace923e541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b56267c5-b527-43f3-8c5b-c3ab2a03b868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "217e29a0-0b54-4ab3-a669-65cc41a1fff0",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7301c74-d81d-4e3f-a909-fcfc0bf05612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce3e02e1-b4b4-4131-b396-9c71073c8c2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b6826c-db10-4a8c-9036-fefbc5731d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb23a0f7-aec0-4b7e-a74d-7b61aad502c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d3010eb-4d43-45ef-bccf-ac489331e717",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b078a891-7503-4b84-a463-70aad1777336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07fa7552-d1b2-4cea-9dec-3478b74f3458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d17ac9b5-6ccb-4f41-806f-7010383c49cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e61bba1b-a249-49fd-9411-e2adba97a8d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dfdf7b2-32b7-4f62-8ec5-6d619a8861e1",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40aa8b13-024d-435b-b834-2ad2bb3198cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dabdb1e-f12c-4b8b-ab57-41edb1003590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719dd3f8-490b-4113-8d5b-8eaf85110ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4c97459-f4e5-4157-8b8f-c15aa94ebbd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4966fff-a6a0-4c31-bfda-6419c1596161",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce64117f-e60f-4fdb-9c88-a3ef1b45258a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "975e628b-d275-4310-af3f-3b4f1ef82cf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97aa3779-2bad-4c36-b9e2-b6c6e2b8d146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d01f02a9-8bb4-4e20-b57b-684d3362b0dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d493e422-f83f-4b78-b2c4-c0b832c019db",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "386a4c68-96e7-45f2-bbb2-4ebdbbe99de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e68d57f-d326-478e-832d-7dbfdbf06e1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7cf626d-7039-43ac-9c60-282a862d2e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7a86c0f7-a05b-4216-a916-286b443e9642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8909118-fb2b-435c-99c2-7a27208f6192",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f752621-4081-462d-846d-deffb0ee5583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c93048c-c9d4-488c-8e0f-314f209655a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31d323cb-3b38-431c-b321-69a31cb958bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3c18aa5-761a-4c42-998b-bbd5e1805d7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77040461-64d0-47d4-b3a1-cf5ba747d24b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a3461b-1dd2-4268-8e4b-9d01597a7938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d07b279-cea6-4e4b-b658-7257353ef25a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16c9e5cb-9ee7-44a6-b50e-22a99ddd06b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2e383a0-270f-4540-8c3b-141008bf9d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40cdbd4f-896a-462b-b393-5bdccb34f996",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79fecfb0-6375-434c-a204-b3fc387e03c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "178c0ade-bc60-4dda-b5a0-78732460f55d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7926e517-9c1c-4569-9d55-f92172c9b7fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0fb4c30-8d7d-4ff2-a788-4af413849253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feafe020-520b-460e-b6eb-d278534b5c17",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c78a96e8-8d43-4997-9984-5ffe8de7580f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b91fc1c7-9c48-4d86-af02-4ec22bbfda7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02c8aab9-4f10-4d77-8813-74e59eda4992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "2363be2e-6589-4250-9ded-3b3994f2542c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b904f958-30ca-4a54-b1c4-6ebb07fde7cf",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b202c25-4a32-4f16-bd6c-ead7a04b1870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc91c334-1b3e-42a1-a326-ef837ef023a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5864e645-72b2-42d2-84bd-4fec491d7a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e447c03d-d069-4bb2-84ec-78dc9745c246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc963dc-9b75-4270-82b8-d57c075a8e55",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d2713d0-d344-4b06-a0af-0d832a7e9eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a26d4f34-5542-4b0a-9503-53292630d757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "882cec8a-35eb-4c67-9214-d6f3cfb03f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb92d547-ab93-4257-94e2-7488e95aa0ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71639661-1cc2-4736-86de-8c48d786cb7d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b1577e-3b20-4e86-ab97-4ab694eaae0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cb30a2a-f631-46f5-97e9-1314cc770635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c3a2622-3bf5-4a5d-90d4-a8bedd196617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcd386e2-0d43-4e45-a3ec-ced250fcf839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65badd46-5281-4704-b486-c5051b4b3434",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23cad051-8ad0-4607-90ab-769f6bb416a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa8f58e4-049d-4d21-b0fd-c8ff79ac3562"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9921bb8e-ace5-4b50-84c0-d61f1988769f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "620fe3e9-dfd0-4d36-bc10-fc3b28117e0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d5c58c0-ff1d-4045-b834-a5837e4f24d6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55eafe2a-1e31-4bd8-9158-87c78de7f987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44fa0d65-26bc-4ee9-9d2f-3650c2136e26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b6d003-1bcb-4907-b530-b49081c728b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e156371c-e149-4104-86cd-52c570274002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1623e896-a361-4030-8fec-65f9f714ec95",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bcea8b9-5c8e-431b-8e85-ff1687314ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bbebd74-a61f-40ed-8028-c2aa5486f74d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef6e9de-1bd2-4528-a568-624d4c6d484c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de40e3ba-a952-476c-b6dd-487bcaf1fa17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193c85e0-dab3-41ac-b798-7d9e456c8f06",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a286f9-0a03-4234-8ccb-3a17bdeb1e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c26c44f5-7b6e-4577-a118-045c4fcb4658"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b932691-a57e-4122-8beb-ccfeff3390db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5d31909-a3fb-4eb5-b7e3-1125e86c5633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e3beada-a053-4a58-8f07-40903b987bb8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc048f6-1394-4578-b09b-cadc04167255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ef20fd4-d823-4fd7-887c-62777cfa33a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3255e641-5935-4e31-b523-509cdec2d51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18c3fad8-5a15-4956-ae55-3f4ef5431851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7607c97c-5295-4195-98e7-aafc691f0487",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1134db65-a7e8-40d7-83ee-1442e8230a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abfc1ef0-055d-46a1-b192-8fcaf14f81e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15d85b31-eb05-4d3d-afa1-ec5313c63ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67fa29c1-3792-47ab-8af7-3797c36dd8a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3c63e80-0d43-47aa-bb09-b569f5269dd1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5f5230-83bf-42ed-9238-6a3b446c4cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b1ba524-bcc3-4106-b946-6fb3eb1400d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faba49ce-8d01-4a35-ac9c-f338e18f11f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "541e8b45-220d-4c1c-a6bb-19e2475e0ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7010bfbb-5fce-47e6-81ea-fc073dd376b3",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c92af38-9fdf-4166-ac59-3e68ab686015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80d31154-c428-4115-abba-80a2e8af4807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6f039a8-a644-42f3-9260-a46142fb1002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba1c14dc-7c58-4ee9-b110-a8f5bfe755c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9b44f5a-102b-400f-a2be-d4c204dfcb35",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b928a9e-a495-446a-8275-fbff572645af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "277857f3-8dde-4d58-8f59-64cc1baceb34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e27337-ee2e-4e06-b310-f0e96382ca26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05462b49-0558-485d-b92b-582a15437fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3657e1a1-d09e-41b5-8457-d984368b79cd",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "394950fb-6270-4bac-96d3-4c718912262a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07fa8602-e25f-40dd-8b33-8fd3013bf13f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1cad1c0-1346-410a-bf56-ed1b4e4dcbaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21418dd7-04b3-45f5-9d14-e051398ac53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bcf9237-6fcf-43d6-80f2-4d02edbcfe40",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea8dd1d1-3bc3-4cea-83b5-ba0486bdb85c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28335952-8789-4a1e-b509-071815b2d247"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98878fed-f069-4b9f-a7ec-ba9a7d6c567c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e65fd21-9a1f-4c1c-9b26-b4cb3123d842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba178980-4447-4cd6-96f5-b0ef3a303c57",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ff5172-bba0-4ad5-843c-15a1a6536e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a86838a2-818a-4750-b4a4-92ab19eaf064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2dc1b9b-a4ff-4e4e-b63b-2c29503f8afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d81150c5-e066-474a-9ebc-9c3dfcfaf350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83db505c-5152-4d99-9f1c-e76c363b4dd0",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "040174e8-7e79-40fd-9b94-b6d4a1dcc4cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8ab7eca-852d-4766-9b8b-998f678e750d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d8ef63d-4173-44e0-8340-5fe79d1e567a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de83a7e7-7809-4638-a8f0-e6480fc0a368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e092703-45d4-4f7e-bc52-3c8fbd66df8e",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "473cdd48-0755-440c-8df9-8afc58ef9b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0173190b-0a7b-4173-bc3f-1e78accdf645"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e4abd3c-7174-4cd2-94a8-ae9dd08c91e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6b8e79c-70a1-46bc-8727-fd5a9295ac11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5791e4c3-8564-4998-be5c-6bbee568e09a",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "152c900f-0256-4087-82f7-dd33a8c0f1af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0c06b3f-8ca2-4882-9403-fbb884b82484"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b5663e-a89b-4120-9909-22df6d3fb44b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39600c74-7c23-44af-984b-f0dd227d042e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "602aa731-cd2a-418b-a849-d1d02362e29b",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "402a72e5-dc2c-4954-aa0e-abb30f2208f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86f88480-34c7-42a3-b176-57b96805b0ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c235f268-e6c8-4548-96cf-287886af6f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a9ca243-ae1f-4cb9-acd4-3b2f8a18648f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83695804-5a5e-491b-957b-38964e1b675b",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3592b450-cc42-49da-93dd-170401b66ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5001289-3f72-44f2-8bc8-01548200cb2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaf952a6-46cc-40bc-b6a9-206bcfb0825e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18fd6185-c7a4-4b50-9ddd-94ccecc97ecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09a99beb-35c2-404f-9400-10ee63784966",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e60e7b43-8000-4ebe-ad33-1c4a063e0b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f14c4143-6cfe-4ee3-8890-c33abecfce48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e1d23b2-8430-46df-96cd-24265cc51b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49fac39b-b8df-4870-b27f-9571dd8a543f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "72bba810-1fe3-4810-8272-709f0fe08dd4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1350a0f6-103d-4e80-9e34-6624713ad800",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e499e7-d5b5-4ee7-b0f8-6e70a5a12286",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8792889e-c0b8-4538-a38c-f08f5925e589"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16458d0-a90c-4cfd-acb4-5810ffe898cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0041da05-7dd5-407a-864b-8b7d3afc169c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e3de122d-8db8-4b69-947f-4d7275e2fc64",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5e339c4a-88e5-486d-8fa5-8096ab6d325d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ddd5344-6eca-404d-b0fd-8913c1b00222",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03dc3f14-9424-4732-a75e-fb2cb3f2f7ad"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "15122306-ae8c-4fa2-bcc6-8bf444da74cd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7344c111-4774-41d9-b7ef-c72df07b90d8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4e7908ae-2049-418b-91fb-f6c25d30bb1c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "571dc9af-d1ea-43db-8146-808bda1c268f"
            }
          }
        ]
      },
      {
        "id": "674f9a69-d892-4b5f-bbb7-99f05c5b8591",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c56a6aeb-a48a-4576-8313-f435fbd2a8fe",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0ad2699a-0660-4081-9f3d-01ea6462cd74",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9d44b749-d6ef-452c-8b00-68eae9127c9c",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "411ee75f-258f-480e-bd50-5c26c64e640a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0b3ac4c-b410-46a3-bf4e-7d50a12f99df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c7b74f4-5e86-4f7c-9a9c-cc79c26418af",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee2e8855-e1f5-4284-b69a-3b1620afecad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "282455fd-7631-4e9d-b14b-b59256b5df89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b5d23ad-0fb0-4eda-a0c7-e2cc035db480",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "377c3921-b17e-4506-8f35-72c1dd78e798",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6646281c-0079-4ac4-b6e0-2cff1a8416d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76188879-d718-48fd-9ae5-d6a479c2fb8d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e5f08b-b65d-4117-8807-f4889dc89518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5750cb39-e9fa-475b-b538-35892ea81c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe8e781e-bdb6-4ee1-8449-dddee0d8f272",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2239c550-142f-4f80-b5a1-db27305f36c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf7763e8-64cb-42d5-83d7-d9e228eed0f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d0b184b-adbe-47ad-ad8e-3c1d09780748",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15cccf71-f226-40dc-8229-0d4d69f7ec74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f420054-d36e-4016-b6cb-4303dc7a9e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54b1449d-dfa2-4037-be4d-958295e2f8ad",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56b4db58-1147-495c-9828-9a33b4556f55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b76b179-d60b-4b6d-a87d-ac3080c024d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd4328a-cfbc-4dc4-8d4f-2c247e3e1e88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d8dacd6-4e84-4fb0-af0e-1b05bc505f7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e04e0a-fe1e-46a0-8e20-b6f693297659",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c87140-55fc-465f-b26a-385cc8287841",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3eb311a-4b55-4fd8-aa06-5427e6a637e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd8ee2b-090e-4634-b83c-f139ac3af143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f363dde2-679a-4dbb-acb7-c94534011cf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e251d92-d492-4e42-89c6-2b56e387a324",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5d4ff1a-482d-46d3-8888-0bced9176509",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f22964f-c89e-4344-89dc-2280b9b2e6c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d70a32-ebcc-485f-8eb0-43413b1bc9dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e767dc0b-f916-4264-8b29-916327f94739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc22489-2d26-4b8a-a470-f5f7f317e851",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da23e607-a2f3-449b-95f4-cc14ce040710",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2908a37-7eca-4b9f-8a86-58a6d5eb4a25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f36ebe0b-d45b-41cc-a30a-e97104788487",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5ccf588-574e-4a22-bfc6-c6933cdcb072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff6991f2-10f8-434c-8733-152c9a44e000",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "565afdba-2102-4d49-b851-8dc005ada656",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d8798f6-2fa0-4137-8058-788890b2e7da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82363196-7fbc-4ec8-8a52-1841713f73e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7de98c47-8e0e-4380-86f7-3e2b3f114288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f496ae-1b26-4e91-9fc7-247724e1c7d4",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e970976-b9c1-4877-aae5-22e2367f76c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ace9a9bc-c563-4c58-8520-1201867a493e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f970879-7668-4273-a438-a612327031ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32a8aefb-e896-4768-a9b7-ed282805a5dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a79821f2-1fe7-44c2-bf51-49e9875b6293",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c07f0984-3dfa-41c1-b7ca-40586b42cd38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70f701f6-d9ed-4fd7-b3c6-2a9ee5c1b9e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d01dde-0062-4d08-832e-d94050f07234",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2c3b9f9-431f-4cc8-8551-6058868e6666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2afa5fd-9e32-4f81-a412-ab773d25d69f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d512e8-8fbe-43b3-8dd5-93e6f82a4235",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e23fa77-c0c6-42b4-92a5-40b0b4b90ba5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a232f55c-20cc-4237-9d2d-9bc54d6bebe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c225167b-ed11-4eeb-9a10-8dfeda6e4ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0484b928-73c7-4bb8-ba8e-3bbca11ea89b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca5845eb-2ee0-4947-9f49-6807d84aa91f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5dac43bb-7c58-4e6f-8de4-c5c1e1181a93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "040ee685-2eed-464c-acc0-bfe523ca26b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0eaec82-052e-4646-baa3-3fa3e52244a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c649e422-2f98-49e4-b1c9-079e27c423af",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ba628d-3c10-4078-9c70-3e84e336d8cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60e75716-2d39-4fd3-9af3-a963e8937e58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89efd486-d516-47b1-8753-21ca75a09234",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c795a27-2f4e-4d6a-bb88-bd17c9dce6bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f49073-c60a-493e-bc50-13e369d91bd9",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eac4d410-ef70-4b07-850e-7763b28564dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c1913c8-f811-4e00-9108-cd20638b53f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c79d972-7381-44f8-9ce8-84111e72fbde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebfcde81-f649-467c-9ee9-5c64a6baab1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48da366e-b18d-46ac-bf2a-8244c781cf16",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b303f9-9021-4e56-890c-788b18159bfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "354128ee-511c-4741-b3a9-5601611f6cf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cae3c4b4-5564-4a49-852c-c217d3ffd9ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ab99dc3-2f6e-49c7-afab-9e5c915eaec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "618788a0-adfe-44ba-80c1-926136d1013a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd96c03-5b23-48be-9402-8d5648c0cbbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7018329-f625-4958-8d09-dab8fc490424"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e070ccf6-30a2-464c-8c6a-99815588b6d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55692486-b528-40c9-b11a-2ba74de59dff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "591f2b69-abc6-4a34-a224-ea0a47e19e0e",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95311d7d-fb6f-4e09-8af1-b353aba9618b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d69e04f0-0ad3-4e38-9fdc-2c82aa3959b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bcf2960-e113-4a83-ac17-5118a9bf778f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ba393d2-f99b-4f34-8c62-91ae6bf03203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db39f16-4928-45a2-8112-6c34c3f02f19",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9beb022-046b-4616-896f-fb22d7927095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba34cd38-8cb4-4735-a77c-7aad938b8e01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f8b87db-56af-436c-9db5-c7101b53271c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e2a94c6-25f8-487a-a168-92c4c1641cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aaabfb6-bf00-43a8-813b-7c432e377fa2",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "220268c7-a045-4368-9c5f-ea6591075630",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07237cf3-4689-495b-b1de-0a54fcd9bc4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6358e05e-fafa-470f-b3b1-830dcd342053",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47df48de-94dd-44a1-a888-b98c3499bb96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c33324e-1709-4026-8a27-20d0c9756b62",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa0edc79-72a1-46ae-9d8a-fce5743a7c00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "221e3b28-c871-444f-aa5d-7a2294940341"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67c53d39-7a18-4641-bef4-f490d719e231",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1454d097-c99a-4bbd-b98a-e924d3591a10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62cdb3eb-5319-4652-a6ac-096920f8ae9c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9afdc8dc-9a1a-411e-9fe0-48e208eeb435",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85980e60-cd60-4752-b917-501b2274dbae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1030626c-f1fe-4fef-ba1c-ab3ffb9a579e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb8cafc7-682f-4191-bfac-5115690570ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c88b0c3-5086-429e-9992-cdef086de991",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0439e26-2426-4c65-b3d9-dd42d7f5fef9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca3d6967-654e-414a-bc86-ba3381b9237f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "396ce3c1-7c37-4d76-ae0c-97bf023bbe10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb5cef5c-7aaf-4c18-8d95-ca2b699a7daa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44cb317b-5850-44b5-85ef-f86452c23f09",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44fa4d08-645f-4f5c-a57e-61bce84180a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4e6e17c-6d59-4e5a-9e69-374a459cdd47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af75340-a878-4320-8122-95347f101534",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92d33138-deec-4f26-9391-d22d4fb6ef99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c098bdc-d7a1-4597-b518-1b55588ad635",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61767d83-4284-4ac3-85ee-596985caa071",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4531a1c4-68f3-4de8-9968-dfc07263193d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "587922a5-cbcd-4509-b466-f1b1b703cf68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f01cf5d-da20-434e-a12b-8053da6865b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40637af2-d3ec-435b-865f-6cbbd5e9d3b4",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3353ddf7-7ace-4543-8e29-4c6cb4457aa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "516a8e31-4668-4dce-91a8-8fff34ebc9f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f2fae28-62c4-4071-8da3-21e1a88d9645",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91333e53-19e6-4a27-807c-b1ab31cb5bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bce8313-5531-43e6-a49d-ee4b74960ca9",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a6102f5-b423-48ac-8c9a-cd3626a2766b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9e40307-008b-4ee2-b910-9aed4912fa02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93589dc9-65dc-461c-8dff-a1a301a4974d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ceca579-942b-49dc-a312-846b8d416178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "132d3597-44bc-44ac-95b3-5255704b0c69",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e21f62-ac2f-437e-894d-0519ac3a892e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4722882-8b62-4833-8c16-203acf3123bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b289433-e0d0-4aae-ae81-e2a8539b5a4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dfbb641-6204-45f6-b748-b50fed25ea0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d45dc518-f9f4-400c-b382-1e5f7e5c5d4d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ffd3e5-27e3-4971-b771-c6499fa8761c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c6c082a-7acb-423f-8b3d-86fdcabfe623"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ac8ef1-8acb-4245-91e4-252cfe96c838",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34687ab0-6a7f-4ba3-ba4d-375f23c86de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6b0aa6-2965-47a1-9319-92990f42b687",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a782699-0c18-4c2c-abd1-0f8a3737a118",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37e2d832-92c3-465a-8da5-b18ec5131756"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f111792-f1e7-4272-b00f-0ac2b4dc1d01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bd31bff-6eae-426e-8c16-592c2551c8e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c08b08cc-8aad-45fc-b037-5995e415735b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e9468a-47e4-4184-b5ce-5a8785bee660",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81d99b4a-7b51-4edf-83dd-a1aada1b27d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab0c1a59-f3b3-4a65-87a9-2bdad51dd597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "878d7aab-f512-44d6-9f5f-fee01a3f1aeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "700960a8-ecb0-4921-a1c5-6b446865ca10",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6090920-8b5b-48c3-886d-bb690c598a58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79c03b15-3d3e-4ef5-92d2-448d71d56c10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abced2f1-ee35-444c-b520-fb3a851676de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29ac16a1-1b68-43e6-a46b-ad05095da253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e614e265-234d-47c9-b037-4b6d9d730214",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9636c9f5-6132-4273-9f22-091afd69fde4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1008812-8ad2-43c5-83b5-b0afe43c08dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fbcfb97-c94d-40b9-ba4c-3ed6c4afae19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e23b36b-08f8-4c9d-a514-138f8c8d7086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e15b56-9ee6-42f8-a877-fbcafb89e718",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3738244-9016-4855-b360-e6cc4f474c95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7ae3404-cf98-4789-8817-a0eab5b2566a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dbb16ea-439d-4204-9c67-0d9feb4bf1a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5774412a-d5fe-41ee-8547-ec5a188d4309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a44ce7ba-bfeb-4f19-8c83-b94f378afff4",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df8d2c8-c161-4776-878f-8e3ce03728e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61df599e-d34b-469d-be78-dca13cc3b759"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3c94038-0776-4d34-9488-ae32b9b6e305",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a498fed-35b9-4222-be4c-e0147387df92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25d7d268-39c2-4f4a-b6dc-02d57c4d8ad5",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feb0f051-7445-482f-bfbe-8f16ab4fc15b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67fb54bb-98cd-49e0-b0ed-e1bff433af2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a2db46-c2e1-479a-826a-25daa6f9f36c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "761cb2b6-172c-4bd9-a6d2-e0402095a8f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f525be-1ba5-4e5d-87b2-0bdf7b837953",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a03c2fd-29b6-45f7-a28f-99eedf3bacf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "312ed664-18a3-4249-b14e-9072813b304b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d31fb1-28e2-4a1f-a28a-441a25149e86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e40b48c-3f52-45fa-9eb6-4cbc0cf3e36d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d82f3afe-2516-4317-b952-1206e2630d49",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "969c4568-fc5f-48e1-b54a-debc90477ace",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a339666-0595-4244-ab81-2c2f93f81100"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6df7c7b-060f-4a11-84ca-78cb7f66a37c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d5e62cb-7a30-4aa8-abf8-312b2232a13e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75109e78-1f4f-44e3-9063-d0ed808d8ab9",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c93c21d1-6ea7-4a2a-87ad-c83c9223bc38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f464aab3-670b-4791-a2c9-a338561cbf54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec3f1d0d-783f-47d6-85e7-317d7c054480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de9d2d8e-a252-42a2-8cde-7b1464fc1bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c0a1f9-fd0f-445c-99bd-4cfc378f4eec",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "988d4159-5098-47cb-8263-1c9abca220cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8461bc20-b043-4584-92b2-9336f54d81c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e43e89-8c52-47ee-bebe-9abe18e63de9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "786d4916-f6f7-4521-9a84-6db4e194764b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b479aa85-ac2d-4058-adf8-d418b7ace7eb",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea21bd0-0140-40d1-97b0-3efbac8cf789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "963d4890-113f-4533-aea1-9270b67b27fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66407412-7b4d-44bf-817b-10f9aadbc266",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecefa2e9-f020-413e-8756-10891c9af18c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1572a329-8a10-46c4-bc73-001fb23d89f3",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475bf27c-384e-4e30-be23-45053d0d49b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53239b2a-bf9b-479a-a7f8-deb4b959b179"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31abf984-a0fe-41c4-a744-764787df6fc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68bc8661-2f26-43f7-b2b2-b1f0ee5f8054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac8c714e-1254-41d3-87de-a88b97bb2956",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a165957b-5bd1-4710-93d6-3f7ec69e2676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0253c117-538d-4cc2-b77d-87860680ad9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9d06f2e-0276-493f-b7f4-683bc53f61ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eedcc6ae-2751-4c7c-88de-b5eb43f2430f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e0f0688-b1ea-4376-9654-298ffad9907a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "425b0742-831f-43a2-a9f0-2d1ec037af22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1d5f984-4cee-42b3-a5d1-f6bb07f0bc8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "535fcf93-1d32-401d-8035-bf8272a4962e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c1e53e5-5e81-49ad-a079-d7bbba6740bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba66faa5-f383-4088-953b-df28cad036ef",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de5cbeb-598e-4eb6-9262-7ba7e9205522",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd7f0d0d-f3a3-4fb9-8919-65aa28da37f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afebe68a-856e-4b0d-a2f3-bb40d2e34972",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a75dae4f-d244-4580-b267-4dbd4d1f8def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1015e95-abe8-45c3-ab59-3fa30d654265",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3bd1b57-d3c1-459a-b49f-f9ed1074152a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c9d16e7-7c78-42f0-853e-695546320352"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c037161c-0832-4b15-896c-bb76fe90056e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01b3f2f6-c307-429b-a504-c262cf3d4f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19850a98-731d-4911-957a-99ae76a4a456",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "403825f7-293c-43c8-8166-ba44338c9711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41d4f230-df67-4cba-89c9-bcbce70ed80f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f009eddf-00a5-44f4-9f29-ad6113e65f42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "659c5a09-2c13-4fd5-86c1-60a6f97e46e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11324c71-04d6-48db-8973-3a22af73637d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec966315-428e-4027-b018-3bda4a6b13e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3417d45a-2e48-4a63-993d-76a0a35ac5d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "175a9b4b-7fb3-4370-ac69-b7d7d3224f7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dcda81f-1437-4e45-b181-c4b9324007c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af3053c6-5549-4394-80b3-9c3d5d28c1c6",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61519a2-b4e1-4f16-87f9-0549a92077bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aa74aec-c63c-426a-a5ad-8f68581f1324"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf43abe7-2cbf-4b9d-829e-06be5f5a78ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0bf1973-eddd-4710-a4f8-136cd5c7f02f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "309d629f-2004-4a20-a988-4171e3f99025",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dba2ef8-d191-4c62-befe-0016f509f5f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0926b246-bbb0-47dd-91c5-4d2135a6581b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ddc37ad-3852-4d83-95c1-4a22a04fff58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "511d9a31-2df9-4430-8bd3-540bd9f81b51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00481ef7-41f9-4483-96ef-43787601cbb3",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95d76e3f-3a8e-4f18-95b6-639097675af6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e51e178c-11e6-426c-8da7-392d54643b0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc8fb11e-21e0-447e-a7e5-b062afe83efd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50b164c4-9060-4fd4-afd6-fa6651693066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5b2b1bf-7907-4966-8e16-188a0e619339",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a66fc5b-df06-4a1c-8c79-c3bde2535f62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c676a84-2150-4728-b359-c141cd629f6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce6f5980-f74d-4d78-a859-d4c7b86e2cfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4858715f-6df9-43de-87ba-6b9af1d47cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52883273-ded7-4de4-a7ba-09f753f9c4f4",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e629dc5-33fc-4689-9653-d4956a8c7a34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4660d5f-bb93-4fe2-99ea-d7e3631117a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29009703-cc18-48ee-8d82-d295b6ce5f24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f23d330-2bdd-45d4-bbad-e22de4d554a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b25a59ab-4bd9-430c-b4e1-035817f441b4",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fff6a5a-4d6c-4fab-8835-7a6c18ab30ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bb9dbec-6c7c-45d7-b15d-123fed66fdd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dcbd7e0-1a77-43da-99b4-3080692cf4b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc615fa9-6b65-468a-94c0-b5d4f04b4b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34cfb76f-402d-48e3-9716-ad00ff791ae5",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08085435-2882-4933-9d15-b260247f9307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe774437-4886-433e-bef5-85734bfe2a99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4663b05e-a1fc-4030-a290-6ba65830bf6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6a90a16-09b4-41b5-8f1f-239a550e377b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54e83312-fced-4437-a62d-d9c54e3534e6",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9a08e4-bc1c-456d-8377-5518d7228820",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8b7233d-6b0c-49e0-a060-7df8b4990f0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e39ba49-c758-4fa8-adc5-3b4078120e91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e237fdc2-5c42-473d-bf2f-f0910c97abca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0794efd4-861d-4955-8204-522598e8eb53",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5178c91-6774-46d6-b815-ad8f4441df93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdffc05a-dd48-4721-8c3f-579fc48e9c61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "393298a1-df60-47fb-b854-1a504a6bd00a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08150dbb-dee6-4e41-bccd-4a6d11803a7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43d19a16-02f8-4ba6-8713-d57c209c0ae0",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2ddbba9-85e5-469b-941e-cd10a0204f48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b39c0bb7-60e3-4d16-95f3-4b2c06af9166"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "480c3c80-dd6e-4549-8e6c-eea6a4505dec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8692a4ed-b264-4b6d-b5d8-d7ec724495d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d54422b-b6ad-4d00-ac57-77bdd508a0a8",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "418f4de4-bc6f-47e8-8bf3-b75c8342868c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51e6328e-28f4-4297-ad6f-697abacd9f00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c516e100-8a30-4dca-a8e7-97536844a01e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86c80d9c-2d00-47fb-99c6-e0d3adca3399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7edf22c6-40f7-4c30-94f1-08a289584ac0",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "133c8e1e-b89d-444b-a9dd-3cfc5cb04f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff9373cb-aa35-45f2-b121-42373b64dfc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc27c71e-89a5-4964-950d-b4a1c735bfce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18e978e4-b9a6-4635-8aff-cd8e55b97623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a73409-878d-4bec-9675-b587ff169a30",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15203369-76da-4d93-b76d-38841afe63fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89f8bf44-d326-495f-9847-e236278d7a0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffaba8c4-36ff-439c-a546-630c8f57b026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98b1eeab-5e38-46fb-9fec-dbd96e473d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec544f04-a443-4dae-a4ea-c9d693137e87",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9736df59-3937-457d-8b2e-2dde9fcdd615",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e18b01a-5d4e-4042-b87c-24d2b7553cc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d46167d-e0d4-443c-b889-f585c1afdf2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3d5db71-c0c0-4c65-be2d-1e1fdab4605b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76a17260-619e-4b32-9904-f577d9a288bf",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c9d1a97-cdb7-4380-b933-ebc62141ed83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f21ae42e-8074-4b36-8eda-cbddae26aba9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ff598e-cd9b-4a75-9565-344c2f667ece",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dedafdcd-9afb-40a9-bcda-3c11a1ca698f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ece6e59-c73a-4bd7-8372-364d394a48b2",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27a0d9b4-034e-46e0-9eb1-9e704b01d298",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c2c192e-2629-468e-bc44-b022ae5fea6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4a41752-2a8a-4320-850a-68c8566501e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1b4b1a0-7463-4ce6-8c82-49ce16286fc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8f64c56-b5ab-4018-8e7d-368e76c92964",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99f08c0a-bbb1-48ab-b836-6b3d1f63268a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12788964-9edb-49a1-acf9-f116643700bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c025c14-a44b-40b3-afaf-1ead9ef1699a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "663badfc-0458-4137-8155-96899d94251c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a21cc11-8563-4c8d-9929-6fffe4b84010",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ede1006d-b163-4a88-b0b6-92ae430b0db3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f47757c2-9025-4cdf-ad44-6026543064e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aa1c759-a917-415e-a304-15efed62a824",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80063004-3705-4d12-9bc2-dbfa55febb93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73e0393c-662a-4800-a6bf-0e946715ec2b",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da407d8c-1c18-4dae-9f47-8e160a2a9259",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab3fc538-8741-4718-925e-f965d7871190"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d16bb75-9ee8-4e6a-bc77-a99458abe4c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1058df54-9b3b-4b39-a4e8-656d22edb98f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceedfea5-f589-403b-8a85-0e52965194b8",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b1076f6-158d-4e8a-98b5-ee1a9044a4c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ffef816-99f2-4bf5-8f4f-f94bde4ef0b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d0d8e9f-b3e4-4a7d-9d1d-c4a8db645938",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f41f549-2a3a-43fa-bd6f-5f07d17b0c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3caca43-22d2-4f41-a0b4-920c7a4b1adf",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cddb5ab1-fa17-4309-b40f-b2f44ca25076",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26b1b7df-f046-4fa4-b568-27a4291c6b37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a056b7b-f605-4390-85ea-4ad5085a72ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "214bf156-2c86-4763-a09e-746f17c6d3c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c43f2689-cbf3-4559-9a3d-c7fd121f5b8d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7939ba5c-b312-44fd-9625-986cb3c4e819",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47dad3a1-56fa-4150-a961-0476e1feb8f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a5cdf8b-2523-4dac-82df-ee4fa9afc762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a929622-5e75-4f9f-bcf3-6b30eb876b97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2adda4cb-38d7-46f0-886f-9634f551e64c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "523a8872-7387-4d56-9b78-611a4439a9f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f92ac7f-0f7f-4960-87ea-7b0cca293256"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03314ef0-be99-47ee-aca1-229f351ee4d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18676b7d-f366-4c93-9ac5-270e3472cb7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c7c9c9-90e0-428e-a860-4519f43614a5",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29198f24-abcf-4d09-9b15-c85a89a27562",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "795ed2b4-bddd-41f8-9d7d-ec4877acc837"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c7f1837-8192-4378-aa55-2dd4c86ff045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01624d80-9a39-488a-9795-4f207516deb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4989aff6-4819-4a1b-a13c-c0d6942f68f4",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c12074f-85e9-4709-816a-e2de89d36023",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b20549f-921d-4de6-86d3-eee2d971c21d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d46d0d-0788-48e5-b63f-7eb447397ceb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76be8f44-4b88-455a-af9f-eab3ffcfe438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2472fd9a-30c8-472a-8b30-b2057308cc8e",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "612adbf7-ee51-4925-a40e-89977a8631fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e14bc3e-a891-4487-9e99-a068fbf045fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62dbcc65-6e5c-4618-adbc-429fd0ec3c28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95188580-d978-4b48-aea9-0fea50f20125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f403fe47-a631-4ec4-a282-376cec79ad77",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "502e3df3-6bdd-4b28-b941-f5a6f11e5b2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c87cc8d6-6615-4ea6-aa25-075f59973b77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "723dbce4-cd20-4243-82e1-1ec9a5078ce9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "895991d5-cece-4029-a80a-e6ac91268876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff747a05-41be-4ab5-8849-b27a4c8625d7",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dab1127-1c2e-4892-a464-cf31efc8bb4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17403d16-3b58-4107-8a26-b04e38fb729e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d9565d-a66f-42c7-8ec3-7b3de3775125",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26390f84-dd7e-4c86-a1df-ce2cf7c251b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca6c0029-59f3-4fe8-8b19-e73b430bc1f8",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48472e14-eeff-4f53-ad0d-6c94f7f0d78d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5cb881d-2a6b-4e48-a4c1-533796c33c11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a62c8995-6f83-4a15-9006-5693162a4998",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac9ad18d-ab83-42a3-8722-a1eb4fb3052a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2601b87-0877-4dd1-9bbb-bbddda77b0f3",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b20993f1-56fb-471b-b967-4c7a8f5782ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1dbb0a61-dd0d-47ea-8b41-f51f18489b42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7926e65-5943-4a25-a7f1-cac0e88b4255",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "754777ba-9602-4401-8086-b95d39bdf758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be7f4a0-5439-4f6d-ba59-ac60acbaa1ea",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e334a8c6-9ab2-4e71-9d34-bf590447ce1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c562a2a-024d-49e2-85b4-5d0b75c58999"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d1a90ab-ea81-47ae-bb1e-eebebbfa867f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f91499d9-0ee2-4ebd-8ac7-3868ecad0ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d31bcb7-41af-4bf2-978f-c9838a961525",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ff568c-b5dc-48c0-82b2-0b546519262a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d1c5c29-1526-4a5d-b1c7-2853a995de06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4696e5e7-4bc7-40b3-8878-07ad44028aed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cb6ece2-e46e-4a24-9a2f-469300563529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9c0eced-b111-4bca-8b30-24140ae95363",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca9edc75-4c0c-4a84-889b-8cf8e8ab6474",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fe03d16-5324-4559-83dc-e524e5b69753"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b4a531-4dfd-4665-94b2-ce4f2ec51481",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccdbb28e-0a22-4bfb-8b7e-9ec7fc9a76b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac655c9-fb13-4a8d-86eb-de8638cc70da",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d69bfce-079b-472d-b245-7e947bcc85a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d821127-92af-456a-af57-04d583cbebfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4be9e4-0ba0-428f-8651-ce5c4d1cb4d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "915f8500-6bff-47d1-ae91-ee918b796c3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb8d19f-2463-48f2-9143-8aacfdb50af7",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b3b8d85-d602-4c7f-9a0f-3704cf50d2ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "976b8239-ee2a-47eb-9d40-d4ea7fd4f888"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f75164b-18b2-422e-b908-d1818ffb5286",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "165507c4-4ad3-4b88-a5f2-561873a75ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "108b8358-0031-4797-93ee-a99e871f25c2",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bc80b2e-5dfa-4635-a45a-23092efc26f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7f02f57-cc1e-4f5c-a5b7-e49647e3a53b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02a23beb-07ac-4bea-8118-6c7158284473",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6af7ee44-979e-47be-bf11-a603beca5ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e13165de-6cce-4992-bed6-002ceed331e4",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b006de5-7772-43f8-baa4-85efd985de40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fae687fd-eced-4606-a83a-675cd688f579"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "851dbedb-057f-4053-b593-66fffdcabd8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f2f4285-10e6-4063-a487-9f5abde054cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0760024f-5166-409b-b40a-78209af1946f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c72b4569-59fb-4d90-8e32-b8373c7c34bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f803d698-92f9-4132-8a35-f7bd054bc385"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "184bfa95-ddb6-43b8-89c4-8f89fca704bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f7e52c3-216c-436b-b1f6-850e2ea72c33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b08e14c-b03a-4445-8bcf-69806c416187",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f746a2e-2634-4c7a-821b-2c2096f5ca92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd3390fe-3eb7-4ff8-b146-faf95df52c77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6319817f-c148-4145-8de4-f04bd95d7272",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4f90332-9f62-497a-871a-8a360c7794d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6e03ca0-488f-4bf6-9de6-3a4fa1ad80e9",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe4c54cb-f80e-45fa-ba9f-7e77118211c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3da95932-50aa-4959-971c-afff5a4b0464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd92bec0-99a1-4d9c-8123-838df936a4ab",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bd3dc29-257c-491c-a817-e9338f8e4cf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52c2b7f4-09eb-4678-8970-9f305344ddd0",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9128d3a1-3c55-4402-a284-859182215d85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e9bab35-a40d-413b-9c2c-81e91db2cea0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1283bda1-29e7-4500-9fb1-eca62f50ce9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aa0e54e-9d5e-47f8-9e18-8797c8522a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92aff6eb-4222-4620-aa61-a37b7e7e934b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f84e080c-e088-46e6-9099-72524a5b79be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "515bb24a-2889-448b-bb98-4003d306a54f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a166d8dc-c627-4249-a095-f97f37716375",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "156066d8-5dee-4f87-938a-89f31beb240c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31bb8b12-62ee-4682-a7fc-58ceea79dab7",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40cae6f8-c4bb-42e4-a2b1-abe412d144b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4650d6fd-6d30-4d76-945f-aa572eb10f11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab935c01-d6b3-4182-b0e4-55c5b9eba445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ea440cb-990d-43e4-bf95-0f080da9e0ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a1542c7-73ed-4b72-8c59-e67e9c5a0a42",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcc5b8ad-df6a-4bd6-9704-866c46d6ae9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20c64be0-37d8-4396-ad33-f6eea44d641e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00796aed-e72b-474d-ba04-a8d979e4e100",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c791a4e-b9a6-491c-a319-85564452e690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b079c5-60d3-466f-9cdd-e706df1983ff",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670f1ec8-44ee-4c70-b511-3e572e715f4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26af83e8-2cf9-4b40-8566-8268b35aa6a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6061e11e-910f-48bf-988f-68f49a5e4fcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cd368b4-c5a5-42a6-8755-4010c6797b8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc24b371-981a-4085-8af6-2f2cad1fe956",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f56d64a-a645-4e2d-ac57-e2df236f2887",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d123e929-8231-4b0c-a20c-1a69e865cb8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f18fd6e1-e651-4a2c-90f1-5f14dbdeb781",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cf2fd76-9196-4d94-a638-57f2b2b9a9e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4823c57d-510f-43d2-8f93-06a01895c8c0",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc3ae3e-7e74-404d-9586-0789bfdf2ae6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1be24c0d-dfdb-450f-a94e-d5cbc1743457"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a91e57-cea0-4f04-8929-6ff7270dbf04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c846c00-7ca4-4fe4-b630-68403d87cc1f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "62ae965e-54c6-46f8-a3d0-9f82bcd351d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b8689bf7-c8d9-447a-a2cc-80d0be29ee0f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2cebd994-efef-4161-86ff-22fe56a46c97",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "66b5ecb9-37d8-423a-bcd8-862bdc93ac6b"
                    }
                  }
                ]
              },
              {
                "id": "65545ae6-e375-4f7e-8cc9-eaa3b37f95a5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6ac59968-8d9c-473a-a047-f3d058a563bd",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5804dad-736e-4e70-a15f-ccc52ff498ef",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f2643277-0c1a-47a3-8bc7-d0297698cec2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba3a89f-e83a-4997-a2d7-4e8ce1df9845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b39465b-fc72-4a50-ad13-6b1d02de8f6f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "65493b3f-0655-448f-b6db-da93faba744d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6d93627-58bc-4e6f-9955-d9a317ef435b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f121dfec-e853-4872-8a5c-05c47f56cf28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "72fbc52a-2239-4bd6-b9f1-a024b28cb7ad"
                    }
                  }
                ]
              },
              {
                "id": "ec510f73-a1a7-4e0f-b626-1dbc9dc44817",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "bb41a0e5-cffa-47fe-a8ab-d9f2efbbeedf",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e4000ce-5e0d-4890-91ed-579a452f203d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "fe9073ef-fa7b-4d49-b329-5090d3fff26e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5c7f625-b153-4e8d-9982-f767d0eff96b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f9a1c4f-bf89-4011-9de2-1d358903e4c5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4f08f875-734b-4ab6-bf2b-28ec90da6628",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2d5c2887-3207-42b1-bdc5-d64ae0146f0d",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "482f7f16-5f23-476a-849a-ce658bef333f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "fd412deb-2e96-43c0-87f9-8c912f1be1df"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "49da6e3a-5718-4051-b40e-e460d9b234fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2989ffa-f9f6-4b9e-b952-28bf6ea96819"
                    }
                  }
                ]
              },
              {
                "id": "a72726da-3372-4f68-a07c-c29c6509af2f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1af2cbb-e0bd-46c5-8fd5-4c86928964ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b554748d-31cb-4e63-9367-d1c1b02a52c0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89d16c93-3dcd-4900-b183-87571b74dd71",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f2f59916-14b6-47a7-baba-5be95733faa6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5f1c39ad-1f89-422f-974f-4dd421fc2d5d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "8ccbbe7b-041b-40bf-bf56-a975d9527046"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "caf5a152-d865-4611-ba23-5e5b44c288bc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "de145c8d-64bb-4fd0-8b64-f6ee33f6e134"
            }
          }
        ]
      },
      {
        "id": "ccddac8d-9234-499c-87ec-b2bb285f2e5a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "54b43ab9-900c-4da7-894c-27838fcc2ac3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "66bd3dcf-a0e1-482b-9d63-d9c8ca185687",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0f26247a-1ccb-4704-b974-b6949a41d10a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "329f107b-d165-4a18-83f0-359633cc0927",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e42706a6-151f-42e2-a8ae-9784590f74fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b85380a-64bb-4c60-8b8a-064e74dce09a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a947d685-42fc-4050-bb0a-5f0bc7ef423a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "70fab775-8977-4188-9bd0-f88874326f9d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a466e98-1e37-4c6e-bed0-c595726e5113"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b36d0bc2-317a-4b81-a90b-0bab05359903",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae4eef3d-7697-4834-827c-b881adf0d63f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b8b0f583-2d5f-4125-95b1-3398fdb155d5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2de6db27-ab44-4602-a954-ab5df6e42621"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "251d5ec7-a683-423b-861c-6d3679c29072",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7db2b697-d226-427b-956b-f7cb9aa8bf40"
            }
          }
        ]
      },
      {
        "id": "70a20378-76aa-4dc9-85af-f9587b4c9291",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "052e4ae1-1767-4114-9dd6-838d18b4ba96",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5242fa9c-d796-4e2b-96a7-e30c903d037c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7e02d91c-0c62-4cec-85f9-639192fc9aa1",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a5e580-198b-4a26-9517-8066bc88996b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8e47f12-7c47-42e5-8e34-66b4ef545c3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8035d57a-c996-41f4-84db-d70f34fa2987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "32b6020a-a90e-46a2-b616-2c94521fc2d1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "11e7887e-569a-48bd-845c-500fff4bd31d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "90f1c6d1-f47d-493e-afbe-0e810aafccdd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7cb866fd-008d-4773-bdf2-78bd3d64213f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0fe2f451-2296-417f-9065-d152e992a8b9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e4482588-d87a-4bb7-81ac-dfcb87414b93",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e99bee25-bb3d-44aa-a3a8-4da33ef54f94"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "54323175-274b-4405-ac51-99cf40b6fd20",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0d6c3582-5af5-4baf-98ab-21d7e36699b3"
            }
          }
        ]
      },
      {
        "id": "8b82fab1-74fe-4ee1-a2fc-19a611a20636",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "4977a915-fa9b-41c0-89e9-ece99ac2ab04",
            "name": "Negative Testing",
            "item": [
              {
                "id": "465a2936-1424-4ab9-8ce8-47445de8c4fa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b8450612-1f02-4929-a1ef-7d65ebead893",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f484bbb-b92a-45e0-a2f1-c224f20ce785",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2175626b-3099-4d35-8e2c-044d3ad4f3bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a6b1006-ab11-4c9a-9c6d-05cb3bcf1698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7a804fb9-8708-4700-a675-bcfec869f15c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b4fd491-7de3-4a04-acd3-a233217b7c18",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e913a22-e033-487f-a0c0-384943f7c6ff"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c4516af-40be-4c61-ad6a-dde7e0a56ec0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c2f71510-a1af-4d4a-8b41-f4f9e68cad09"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5214bb51-f0f5-40cb-869f-5299f0c653b1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "180fa306-5326-4342-b9f5-618b7c8cbecc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fba16c7a-5ec7-4141-8468-57430e892c3e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0e9d5ffb-974f-4860-9816-8836feea8dd6"
            }
          }
        ]
      },
      {
        "id": "c162cf46-861f-43d4-aef1-1fa03012a36d",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1a44e165-306d-4708-8085-683671096f61",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "71148249-f5bd-48d5-ab63-7ba9fffb7989",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "1549f22b-0a06-4d46-9575-c380c955563b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da865e59-b63c-44e0-b0de-0ce0181e1d76",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a35960c4-cfbb-4996-b1d1-6fc0e513831f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 564,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 294
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 56.863475177304956,
      "responseMin": 5,
      "responseMax": 683,
      "responseSd": 31.82633749170502,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1707093319569,
      "completed": 1707093361760
    },
    "executions": [
      {
        "id": "79870155-e174-4e8b-adf6-cd36f9b07988",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "9859c17c-03cf-41f4-8d4a-b9a6a5e15766",
          "httpRequestId": "3e16bce6-e909-4167-87d2-0fdbd62e1c96"
        },
        "item": {
          "id": "79870155-e174-4e8b-adf6-cd36f9b07988",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "dceb8e1e-3a0a-4df0-a360-bb01d4559e44",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 0
        }
      },
      {
        "id": "49fc8e21-4f79-4a2c-8d89-ad8fc92a6a0d",
        "cursor": {
          "ref": "f68353ec-7070-4d87-a56e-ea84d235bcbc",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "05e90a31-5fb2-462c-9510-a63600b7d7b5"
        },
        "item": {
          "id": "49fc8e21-4f79-4a2c-8d89-ad8fc92a6a0d",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "fd7d4055-0ac5-4ccb-a66e-aba28f771816",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "f6a66323-7796-4e80-bb88-c9ee2c7582cf",
        "cursor": {
          "ref": "cff64f10-3a1e-46e1-98ec-2d748f16dd96",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "18a85b2b-7a8e-4ea4-a8d3-feae1235ef25"
        },
        "item": {
          "id": "f6a66323-7796-4e80-bb88-c9ee2c7582cf",
          "name": "did_json"
        },
        "response": {
          "id": "fe139c1b-1fa0-41bf-a76c-30d2871e34d7",
          "status": "OK",
          "code": 200,
          "responseTime": 683,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "746c8092-1ffb-49a3-930f-b0cc4e409595",
        "cursor": {
          "ref": "6dce70d3-2cae-4707-8f49-e7d4f0dee137",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4ee23b25-4d78-4576-bdc6-b9797770a174"
        },
        "item": {
          "id": "746c8092-1ffb-49a3-930f-b0cc4e409595",
          "name": "did:invalid"
        },
        "response": {
          "id": "e6999878-4911-4110-8d60-38aff6c19ead",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "746c8092-1ffb-49a3-930f-b0cc4e409595",
        "cursor": {
          "ref": "6dce70d3-2cae-4707-8f49-e7d4f0dee137",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4ee23b25-4d78-4576-bdc6-b9797770a174"
        },
        "item": {
          "id": "746c8092-1ffb-49a3-930f-b0cc4e409595",
          "name": "did:invalid"
        },
        "response": {
          "id": "e6999878-4911-4110-8d60-38aff6c19ead",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d308c95-584f-47f4-947c-bf08c5be9ee4",
        "cursor": {
          "ref": "fc0bd57d-a660-4e8b-a1fc-707c1b852d7b",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c107cfd6-8b0d-4527-baef-0936205c991c"
        },
        "item": {
          "id": "4d308c95-584f-47f4-947c-bf08c5be9ee4",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "aaf174ae-e704-4edd-aba1-320d7848bcdf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d308c95-584f-47f4-947c-bf08c5be9ee4",
        "cursor": {
          "ref": "fc0bd57d-a660-4e8b-a1fc-707c1b852d7b",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c107cfd6-8b0d-4527-baef-0936205c991c"
        },
        "item": {
          "id": "4d308c95-584f-47f4-947c-bf08c5be9ee4",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "aaf174ae-e704-4edd-aba1-320d7848bcdf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ce0e4de-34b3-4bae-9c34-9eadea510f57",
        "cursor": {
          "ref": "da13804a-a6d7-4843-b081-3f772af042d2",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f33e58a6-c43a-4217-ba9e-381deb1ca28d"
        },
        "item": {
          "id": "5ce0e4de-34b3-4bae-9c34-9eadea510f57",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "98d8ae7f-eb9e-46ed-8159-afed458702a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ce0e4de-34b3-4bae-9c34-9eadea510f57",
        "cursor": {
          "ref": "da13804a-a6d7-4843-b081-3f772af042d2",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f33e58a6-c43a-4217-ba9e-381deb1ca28d"
        },
        "item": {
          "id": "5ce0e4de-34b3-4bae-9c34-9eadea510f57",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "98d8ae7f-eb9e-46ed-8159-afed458702a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29dc3c82-073e-4032-9dd5-5d0437c4c947",
        "cursor": {
          "ref": "be96de6d-0310-4518-9e14-ba5f51de04fd",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "afc2b878-1cd0-4a43-a2b1-0a4b81bb309f"
        },
        "item": {
          "id": "29dc3c82-073e-4032-9dd5-5d0437c4c947",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "7029b69f-c660-4ddb-9b9c-f4316f930efa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29dc3c82-073e-4032-9dd5-5d0437c4c947",
        "cursor": {
          "ref": "be96de6d-0310-4518-9e14-ba5f51de04fd",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "afc2b878-1cd0-4a43-a2b1-0a4b81bb309f"
        },
        "item": {
          "id": "29dc3c82-073e-4032-9dd5-5d0437c4c947",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "7029b69f-c660-4ddb-9b9c-f4316f930efa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16c70589-c746-434e-86ba-eccb7846e708",
        "cursor": {
          "ref": "e4b0a1c7-a6d2-4727-b07c-4fcb32c11ac4",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "2a2a73c1-7435-4a2c-892c-ee6529edbcbc"
        },
        "item": {
          "id": "16c70589-c746-434e-86ba-eccb7846e708",
          "name": "identifiers"
        },
        "response": {
          "id": "18258576-ea04-4ed3-8792-d3de05f5b7bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "16c70589-c746-434e-86ba-eccb7846e708",
        "cursor": {
          "ref": "e4b0a1c7-a6d2-4727-b07c-4fcb32c11ac4",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "2a2a73c1-7435-4a2c-892c-ee6529edbcbc"
        },
        "item": {
          "id": "16c70589-c746-434e-86ba-eccb7846e708",
          "name": "identifiers"
        },
        "response": {
          "id": "18258576-ea04-4ed3-8792-d3de05f5b7bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "8f009752-d9d8-4977-8bd7-ad34fdfc338c",
        "cursor": {
          "ref": "d9191334-8d73-461a-b8cf-f228a98e3714",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "17136cb8-1fdd-4edb-ae83-3870eaeeafa8"
        },
        "item": {
          "id": "8f009752-d9d8-4977-8bd7-ad34fdfc338c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "86d091fa-c685-4114-a38a-a7560eec8ef3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f009752-d9d8-4977-8bd7-ad34fdfc338c",
        "cursor": {
          "ref": "d9191334-8d73-461a-b8cf-f228a98e3714",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "17136cb8-1fdd-4edb-ae83-3870eaeeafa8"
        },
        "item": {
          "id": "8f009752-d9d8-4977-8bd7-ad34fdfc338c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "86d091fa-c685-4114-a38a-a7560eec8ef3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b26ef2-728f-4b9f-98e7-0dcd1495ab46",
        "cursor": {
          "ref": "d5ad808c-debd-40ce-8ff2-0674782aa0ae",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "32e5834d-7a6f-4082-aadb-cdacd5cacef4"
        },
        "item": {
          "id": "95b26ef2-728f-4b9f-98e7-0dcd1495ab46",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "0b84ea5a-9146-42b2-a3ec-21493e414362",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b26ef2-728f-4b9f-98e7-0dcd1495ab46",
        "cursor": {
          "ref": "d5ad808c-debd-40ce-8ff2-0674782aa0ae",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "32e5834d-7a6f-4082-aadb-cdacd5cacef4"
        },
        "item": {
          "id": "95b26ef2-728f-4b9f-98e7-0dcd1495ab46",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "0b84ea5a-9146-42b2-a3ec-21493e414362",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a715208-fed3-449b-99c4-455d190a1317",
        "cursor": {
          "ref": "8d40aa24-ee6c-4dc1-9a15-c1cbadd863e1",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "36780d2a-b720-4abb-a7d5-dcec7e04c6ad"
        },
        "item": {
          "id": "9a715208-fed3-449b-99c4-455d190a1317",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "6e33eff1-36d0-4bd4-b6ba-4e40fbd00eee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a715208-fed3-449b-99c4-455d190a1317",
        "cursor": {
          "ref": "8d40aa24-ee6c-4dc1-9a15-c1cbadd863e1",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "36780d2a-b720-4abb-a7d5-dcec7e04c6ad"
        },
        "item": {
          "id": "9a715208-fed3-449b-99c4-455d190a1317",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "6e33eff1-36d0-4bd4-b6ba-4e40fbd00eee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71c1e575-b4b1-4114-a610-52a60db26cc5",
        "cursor": {
          "ref": "fa6d41d7-51b8-4adf-aa36-ef569f8eb0d7",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2c5e4227-960d-4566-8628-efb9d55994aa"
        },
        "item": {
          "id": "71c1e575-b4b1-4114-a610-52a60db26cc5",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "0380019d-7164-4a17-94a9-d73fc742bacd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71c1e575-b4b1-4114-a610-52a60db26cc5",
        "cursor": {
          "ref": "fa6d41d7-51b8-4adf-aa36-ef569f8eb0d7",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2c5e4227-960d-4566-8628-efb9d55994aa"
        },
        "item": {
          "id": "71c1e575-b4b1-4114-a610-52a60db26cc5",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "0380019d-7164-4a17-94a9-d73fc742bacd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1a522b3-84d5-418e-9f25-471738df0822",
        "cursor": {
          "ref": "36914714-6292-4eb8-90e7-432b6e4d843d",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "dfa6006c-0ea0-4f4e-9aa7-0172761b1faa"
        },
        "item": {
          "id": "a1a522b3-84d5-418e-9f25-471738df0822",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "60d4b914-8469-4c48-8c6d-a2b3e419d4c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1a522b3-84d5-418e-9f25-471738df0822",
        "cursor": {
          "ref": "36914714-6292-4eb8-90e7-432b6e4d843d",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "dfa6006c-0ea0-4f4e-9aa7-0172761b1faa"
        },
        "item": {
          "id": "a1a522b3-84d5-418e-9f25-471738df0822",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "60d4b914-8469-4c48-8c6d-a2b3e419d4c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43115034-f0b6-45af-9679-4c7e2d23df36",
        "cursor": {
          "ref": "86c0310c-e265-452a-a5cb-ec84d53e7dbd",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b3ae4e57-c94e-443e-966e-93aa7dbf9926"
        },
        "item": {
          "id": "43115034-f0b6-45af-9679-4c7e2d23df36",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c4d08b02-4067-4b52-9163-4001d8c3c966",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43115034-f0b6-45af-9679-4c7e2d23df36",
        "cursor": {
          "ref": "86c0310c-e265-452a-a5cb-ec84d53e7dbd",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b3ae4e57-c94e-443e-966e-93aa7dbf9926"
        },
        "item": {
          "id": "43115034-f0b6-45af-9679-4c7e2d23df36",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c4d08b02-4067-4b52-9163-4001d8c3c966",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0570fcc4-7390-44b4-9f28-1a1ed2624862",
        "cursor": {
          "ref": "6655a278-2b4e-408b-8223-9ee91421c8f6",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "cbc6de46-8f28-49fc-96bd-17a6d4dfe6f1"
        },
        "item": {
          "id": "0570fcc4-7390-44b4-9f28-1a1ed2624862",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "80e0bb56-1e3f-462c-b6d3-54722655645e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0570fcc4-7390-44b4-9f28-1a1ed2624862",
        "cursor": {
          "ref": "6655a278-2b4e-408b-8223-9ee91421c8f6",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "cbc6de46-8f28-49fc-96bd-17a6d4dfe6f1"
        },
        "item": {
          "id": "0570fcc4-7390-44b4-9f28-1a1ed2624862",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "80e0bb56-1e3f-462c-b6d3-54722655645e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01078dd1-19f6-4a97-9424-ef9679b008b7",
        "cursor": {
          "ref": "b65da974-2487-4440-bed5-410d406bdf26",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "894b06da-8750-47d1-9e3f-2941c6d666f8"
        },
        "item": {
          "id": "01078dd1-19f6-4a97-9424-ef9679b008b7",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e563b6fb-b84b-443f-a55f-59ff26eb4499",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01078dd1-19f6-4a97-9424-ef9679b008b7",
        "cursor": {
          "ref": "b65da974-2487-4440-bed5-410d406bdf26",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "894b06da-8750-47d1-9e3f-2941c6d666f8"
        },
        "item": {
          "id": "01078dd1-19f6-4a97-9424-ef9679b008b7",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e563b6fb-b84b-443f-a55f-59ff26eb4499",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "263c64f9-d2a1-4b29-b622-10bed3d25300",
        "cursor": {
          "ref": "94b980c6-8576-4394-816b-a68c35bdba04",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3d8c42ca-da86-4a68-9d7e-cdde1ed666ea"
        },
        "item": {
          "id": "263c64f9-d2a1-4b29-b622-10bed3d25300",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "2b97b0bc-c0b0-456b-a3e4-ff8b9fa443a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "263c64f9-d2a1-4b29-b622-10bed3d25300",
        "cursor": {
          "ref": "94b980c6-8576-4394-816b-a68c35bdba04",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3d8c42ca-da86-4a68-9d7e-cdde1ed666ea"
        },
        "item": {
          "id": "263c64f9-d2a1-4b29-b622-10bed3d25300",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "2b97b0bc-c0b0-456b-a3e4-ff8b9fa443a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57f70d39-c58d-4fbe-8bb9-a5237d77dbbc",
        "cursor": {
          "ref": "ea9b3f18-7f38-42fb-82bb-78da21e543de",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "dea967cf-ee7d-4bb9-b6b1-dba9e8b0f2f5"
        },
        "item": {
          "id": "57f70d39-c58d-4fbe-8bb9-a5237d77dbbc",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "3056ae8f-c47e-450c-b9bb-28d6b5e4fb9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57f70d39-c58d-4fbe-8bb9-a5237d77dbbc",
        "cursor": {
          "ref": "ea9b3f18-7f38-42fb-82bb-78da21e543de",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "dea967cf-ee7d-4bb9-b6b1-dba9e8b0f2f5"
        },
        "item": {
          "id": "57f70d39-c58d-4fbe-8bb9-a5237d77dbbc",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "3056ae8f-c47e-450c-b9bb-28d6b5e4fb9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70c832ef-20e5-4987-a928-f6067b9f670b",
        "cursor": {
          "ref": "671094d4-2c79-451b-9dcb-9140f1050498",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d63944a3-4d31-408f-8148-0fd5a32cdca5"
        },
        "item": {
          "id": "70c832ef-20e5-4987-a928-f6067b9f670b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c462c87f-1d56-4de9-89a7-7288b9b181f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70c832ef-20e5-4987-a928-f6067b9f670b",
        "cursor": {
          "ref": "671094d4-2c79-451b-9dcb-9140f1050498",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d63944a3-4d31-408f-8148-0fd5a32cdca5"
        },
        "item": {
          "id": "70c832ef-20e5-4987-a928-f6067b9f670b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c462c87f-1d56-4de9-89a7-7288b9b181f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a3d4bb3-6d99-4343-a949-f11d5be9c128",
        "cursor": {
          "ref": "ec262d76-40d0-4928-9d24-5f1895a97ffe",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "a1cc058b-2b3a-4f0a-8bfe-673248f1cd98"
        },
        "item": {
          "id": "1a3d4bb3-6d99-4343-a949-f11d5be9c128",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "23ea7968-e04b-43e4-8695-30d4fd2662ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a3d4bb3-6d99-4343-a949-f11d5be9c128",
        "cursor": {
          "ref": "ec262d76-40d0-4928-9d24-5f1895a97ffe",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "a1cc058b-2b3a-4f0a-8bfe-673248f1cd98"
        },
        "item": {
          "id": "1a3d4bb3-6d99-4343-a949-f11d5be9c128",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "23ea7968-e04b-43e4-8695-30d4fd2662ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90006e82-d28c-47f5-8f0c-3c510a9dfbf4",
        "cursor": {
          "ref": "828ab0a6-1282-4673-8561-804ff9f98ddd",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "1cbc3268-1390-40a2-a0dc-1757c9869cef"
        },
        "item": {
          "id": "90006e82-d28c-47f5-8f0c-3c510a9dfbf4",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "573f70b6-bdde-4306-ac49-2369a3b702fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90006e82-d28c-47f5-8f0c-3c510a9dfbf4",
        "cursor": {
          "ref": "828ab0a6-1282-4673-8561-804ff9f98ddd",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "1cbc3268-1390-40a2-a0dc-1757c9869cef"
        },
        "item": {
          "id": "90006e82-d28c-47f5-8f0c-3c510a9dfbf4",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "573f70b6-bdde-4306-ac49-2369a3b702fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e800d53-6edb-4e2a-8843-32e9a39b5c52",
        "cursor": {
          "ref": "02c3fbee-be4f-41b8-b404-aad0ec309c57",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b44e4c7a-d45d-4d99-a6c3-48a97ebcfb95"
        },
        "item": {
          "id": "4e800d53-6edb-4e2a-8843-32e9a39b5c52",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "559be8cd-a0f3-4123-8f43-0e29e99f2eeb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e800d53-6edb-4e2a-8843-32e9a39b5c52",
        "cursor": {
          "ref": "02c3fbee-be4f-41b8-b404-aad0ec309c57",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b44e4c7a-d45d-4d99-a6c3-48a97ebcfb95"
        },
        "item": {
          "id": "4e800d53-6edb-4e2a-8843-32e9a39b5c52",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "559be8cd-a0f3-4123-8f43-0e29e99f2eeb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da0694df-fe56-4435-8bff-9ceec83b8626",
        "cursor": {
          "ref": "afb9cfa6-faa3-4915-a00b-93f8c54dc00e",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "537e12f8-13bf-4344-ad0f-d68b323b9b85"
        },
        "item": {
          "id": "da0694df-fe56-4435-8bff-9ceec83b8626",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "f1d5e374-a99a-4d4b-8976-2364492b767f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da0694df-fe56-4435-8bff-9ceec83b8626",
        "cursor": {
          "ref": "afb9cfa6-faa3-4915-a00b-93f8c54dc00e",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "537e12f8-13bf-4344-ad0f-d68b323b9b85"
        },
        "item": {
          "id": "da0694df-fe56-4435-8bff-9ceec83b8626",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "f1d5e374-a99a-4d4b-8976-2364492b767f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65eb42a8-ae6e-4ba0-b0c0-efae3c345f03",
        "cursor": {
          "ref": "5a80394e-2fb6-4a94-8c9d-84dc67557c6c",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "800bee7d-9855-418a-9b1d-f34e9e9c69b8"
        },
        "item": {
          "id": "65eb42a8-ae6e-4ba0-b0c0-efae3c345f03",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "4b812b52-4fb7-4701-952e-954a12878e55",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65eb42a8-ae6e-4ba0-b0c0-efae3c345f03",
        "cursor": {
          "ref": "5a80394e-2fb6-4a94-8c9d-84dc67557c6c",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "800bee7d-9855-418a-9b1d-f34e9e9c69b8"
        },
        "item": {
          "id": "65eb42a8-ae6e-4ba0-b0c0-efae3c345f03",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "4b812b52-4fb7-4701-952e-954a12878e55",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac4eec01-bd45-4718-81ef-115c189db25a",
        "cursor": {
          "ref": "bf6af132-0095-43a9-b106-71159d6ee231",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c6e85118-eb8a-4de0-96e2-76400caad5ab"
        },
        "item": {
          "id": "ac4eec01-bd45-4718-81ef-115c189db25a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a25d8c6a-16e7-4526-87c3-2fa756647288",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac4eec01-bd45-4718-81ef-115c189db25a",
        "cursor": {
          "ref": "bf6af132-0095-43a9-b106-71159d6ee231",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c6e85118-eb8a-4de0-96e2-76400caad5ab"
        },
        "item": {
          "id": "ac4eec01-bd45-4718-81ef-115c189db25a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a25d8c6a-16e7-4526-87c3-2fa756647288",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5075140c-9e6f-4f2a-b18b-20ed6b95e295",
        "cursor": {
          "ref": "64a9f9b5-3d22-4bb8-885e-b8a5f4ef9374",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0d92716a-06b7-4e07-84da-249c19e0c069"
        },
        "item": {
          "id": "5075140c-9e6f-4f2a-b18b-20ed6b95e295",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6dc48af3-8e68-42c4-9b7b-00ad7fb544a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5075140c-9e6f-4f2a-b18b-20ed6b95e295",
        "cursor": {
          "ref": "64a9f9b5-3d22-4bb8-885e-b8a5f4ef9374",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0d92716a-06b7-4e07-84da-249c19e0c069"
        },
        "item": {
          "id": "5075140c-9e6f-4f2a-b18b-20ed6b95e295",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6dc48af3-8e68-42c4-9b7b-00ad7fb544a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a96c956-5cc1-4593-b2e9-c22c0817d85d",
        "cursor": {
          "ref": "ed0adde1-7014-4797-a03f-d4a0a4dcb678",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "572d2caf-41a4-4fa3-a052-cb483e6ac263"
        },
        "item": {
          "id": "6a96c956-5cc1-4593-b2e9-c22c0817d85d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "5485f30f-473e-4dda-ae80-31e780d91ef7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a96c956-5cc1-4593-b2e9-c22c0817d85d",
        "cursor": {
          "ref": "ed0adde1-7014-4797-a03f-d4a0a4dcb678",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "572d2caf-41a4-4fa3-a052-cb483e6ac263"
        },
        "item": {
          "id": "6a96c956-5cc1-4593-b2e9-c22c0817d85d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "5485f30f-473e-4dda-ae80-31e780d91ef7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9bb3666-a81d-45d2-b475-a4fa11c1e1bb",
        "cursor": {
          "ref": "0c35a955-608c-4432-940f-e51d5e0e62ec",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "98080943-cd42-498c-b919-f8c40253972f"
        },
        "item": {
          "id": "b9bb3666-a81d-45d2-b475-a4fa11c1e1bb",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "5b815706-3b97-4c1f-ae2f-adf2f3c3882f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9bb3666-a81d-45d2-b475-a4fa11c1e1bb",
        "cursor": {
          "ref": "0c35a955-608c-4432-940f-e51d5e0e62ec",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "98080943-cd42-498c-b919-f8c40253972f"
        },
        "item": {
          "id": "b9bb3666-a81d-45d2-b475-a4fa11c1e1bb",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "5b815706-3b97-4c1f-ae2f-adf2f3c3882f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0887f8b-a668-4ae8-b918-21780b5a230c",
        "cursor": {
          "ref": "7d94b330-2ca2-47d1-b9e0-b97963ae8b0e",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "ed3f5aa8-1142-419c-8701-d8e1cc00239e"
        },
        "item": {
          "id": "f0887f8b-a668-4ae8-b918-21780b5a230c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "d8efeb1f-45c6-4460-a037-fe79383eaa65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0887f8b-a668-4ae8-b918-21780b5a230c",
        "cursor": {
          "ref": "7d94b330-2ca2-47d1-b9e0-b97963ae8b0e",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "ed3f5aa8-1142-419c-8701-d8e1cc00239e"
        },
        "item": {
          "id": "f0887f8b-a668-4ae8-b918-21780b5a230c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "d8efeb1f-45c6-4460-a037-fe79383eaa65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c70603b-5b98-4f6f-b0f5-4fab037a78d7",
        "cursor": {
          "ref": "cb0c028d-4c60-46a2-b695-783d24ed782c",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5466762c-976a-4347-a93c-7f5db26426d9"
        },
        "item": {
          "id": "0c70603b-5b98-4f6f-b0f5-4fab037a78d7",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "eb98b3bc-5140-4abc-a94e-139dc6ff22f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c70603b-5b98-4f6f-b0f5-4fab037a78d7",
        "cursor": {
          "ref": "cb0c028d-4c60-46a2-b695-783d24ed782c",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5466762c-976a-4347-a93c-7f5db26426d9"
        },
        "item": {
          "id": "0c70603b-5b98-4f6f-b0f5-4fab037a78d7",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "eb98b3bc-5140-4abc-a94e-139dc6ff22f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "078aec83-faac-4622-929a-24413e1652c5",
        "cursor": {
          "ref": "745a45e5-56ee-4d54-8d0b-d588e99ea7b5",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a3a5ab8f-51a3-4187-9ab9-8c200a25f532"
        },
        "item": {
          "id": "078aec83-faac-4622-929a-24413e1652c5",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "7d1be711-5282-43bb-9284-9e7caafd7f60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "078aec83-faac-4622-929a-24413e1652c5",
        "cursor": {
          "ref": "745a45e5-56ee-4d54-8d0b-d588e99ea7b5",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a3a5ab8f-51a3-4187-9ab9-8c200a25f532"
        },
        "item": {
          "id": "078aec83-faac-4622-929a-24413e1652c5",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "7d1be711-5282-43bb-9284-9e7caafd7f60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea0b260e-425f-4236-8d45-d3113f21fa4d",
        "cursor": {
          "ref": "8f215d06-835d-41b1-97da-528a0abfd979",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e141b9aa-bbd4-4773-8a24-227ce913899f"
        },
        "item": {
          "id": "ea0b260e-425f-4236-8d45-d3113f21fa4d",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a9ef7398-9085-46e1-aeb3-fe0180ce175d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea0b260e-425f-4236-8d45-d3113f21fa4d",
        "cursor": {
          "ref": "8f215d06-835d-41b1-97da-528a0abfd979",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e141b9aa-bbd4-4773-8a24-227ce913899f"
        },
        "item": {
          "id": "ea0b260e-425f-4236-8d45-d3113f21fa4d",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a9ef7398-9085-46e1-aeb3-fe0180ce175d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8234153c-22e5-4766-b15e-54feb8ebe319",
        "cursor": {
          "ref": "38c025de-db3e-4cb5-8232-c10095999cbf",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a89ee780-a453-48d7-9778-1af728c9bd5f"
        },
        "item": {
          "id": "8234153c-22e5-4766-b15e-54feb8ebe319",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "85903f00-2a1c-4426-992a-3abc341d7b9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8234153c-22e5-4766-b15e-54feb8ebe319",
        "cursor": {
          "ref": "38c025de-db3e-4cb5-8232-c10095999cbf",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a89ee780-a453-48d7-9778-1af728c9bd5f"
        },
        "item": {
          "id": "8234153c-22e5-4766-b15e-54feb8ebe319",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "85903f00-2a1c-4426-992a-3abc341d7b9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fef87ea2-1b98-484d-b212-331f85cd6d27",
        "cursor": {
          "ref": "c7ad1cfe-536d-47a8-aef2-bab76f814c60",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5c7e0f74-bc50-4f05-a25e-436112b3fe10"
        },
        "item": {
          "id": "fef87ea2-1b98-484d-b212-331f85cd6d27",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "645812fb-4de7-4e5a-a675-b79dbc61deae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fef87ea2-1b98-484d-b212-331f85cd6d27",
        "cursor": {
          "ref": "c7ad1cfe-536d-47a8-aef2-bab76f814c60",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5c7e0f74-bc50-4f05-a25e-436112b3fe10"
        },
        "item": {
          "id": "fef87ea2-1b98-484d-b212-331f85cd6d27",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "645812fb-4de7-4e5a-a675-b79dbc61deae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba86166e-9177-4848-ae3d-9244ac2fd441",
        "cursor": {
          "ref": "dbb181ea-cf5d-4578-b3df-3fc02866b170",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3a31ba96-4fc4-4885-b624-b32da3c51410"
        },
        "item": {
          "id": "ba86166e-9177-4848-ae3d-9244ac2fd441",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "e20a09c7-bc74-440a-9c8f-eeef00728735",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba86166e-9177-4848-ae3d-9244ac2fd441",
        "cursor": {
          "ref": "dbb181ea-cf5d-4578-b3df-3fc02866b170",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3a31ba96-4fc4-4885-b624-b32da3c51410"
        },
        "item": {
          "id": "ba86166e-9177-4848-ae3d-9244ac2fd441",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "e20a09c7-bc74-440a-9c8f-eeef00728735",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ee8812-5c60-49b9-b0d7-96c5ac700abe",
        "cursor": {
          "ref": "5dce85b7-fa23-491e-99f1-d4629f9efff8",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c63ddfb1-2a19-4034-bea8-e57a51baf065"
        },
        "item": {
          "id": "42ee8812-5c60-49b9-b0d7-96c5ac700abe",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "9e72b436-8790-4264-b4e8-a36d835e9bfc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ee8812-5c60-49b9-b0d7-96c5ac700abe",
        "cursor": {
          "ref": "5dce85b7-fa23-491e-99f1-d4629f9efff8",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c63ddfb1-2a19-4034-bea8-e57a51baf065"
        },
        "item": {
          "id": "42ee8812-5c60-49b9-b0d7-96c5ac700abe",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "9e72b436-8790-4264-b4e8-a36d835e9bfc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4f9e03-df7b-40a3-8923-91d20c3476c2",
        "cursor": {
          "ref": "c4709554-9f6f-438e-bfa9-47cc8aad6551",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "bd5cd8f0-a5b5-4350-92d0-625a9be89ddd"
        },
        "item": {
          "id": "bc4f9e03-df7b-40a3-8923-91d20c3476c2",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "84808b5e-69fe-4e3f-9b64-c1cccd32e169",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4f9e03-df7b-40a3-8923-91d20c3476c2",
        "cursor": {
          "ref": "c4709554-9f6f-438e-bfa9-47cc8aad6551",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "bd5cd8f0-a5b5-4350-92d0-625a9be89ddd"
        },
        "item": {
          "id": "bc4f9e03-df7b-40a3-8923-91d20c3476c2",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "84808b5e-69fe-4e3f-9b64-c1cccd32e169",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00c7503d-e823-4abc-999e-8f3f62287e44",
        "cursor": {
          "ref": "5dd3f8ac-a3b1-4c30-b670-e7db15b34f4f",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2f3ee32a-e353-4222-97f2-1eb48aa9a55b"
        },
        "item": {
          "id": "00c7503d-e823-4abc-999e-8f3f62287e44",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "210f8d06-68a5-4d58-a307-8ae740a40be6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00c7503d-e823-4abc-999e-8f3f62287e44",
        "cursor": {
          "ref": "5dd3f8ac-a3b1-4c30-b670-e7db15b34f4f",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2f3ee32a-e353-4222-97f2-1eb48aa9a55b"
        },
        "item": {
          "id": "00c7503d-e823-4abc-999e-8f3f62287e44",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "210f8d06-68a5-4d58-a307-8ae740a40be6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "131e688e-ca1c-44c1-bad3-4e2e1b3c5156",
        "cursor": {
          "ref": "cb174b8f-5a48-4bc4-a48e-c31a6416dcd9",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3a27656a-4630-430d-ade3-76a8175a27c3"
        },
        "item": {
          "id": "131e688e-ca1c-44c1-bad3-4e2e1b3c5156",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "3a4a587a-9c7d-4d06-afaf-e28fda6962c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "131e688e-ca1c-44c1-bad3-4e2e1b3c5156",
        "cursor": {
          "ref": "cb174b8f-5a48-4bc4-a48e-c31a6416dcd9",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3a27656a-4630-430d-ade3-76a8175a27c3"
        },
        "item": {
          "id": "131e688e-ca1c-44c1-bad3-4e2e1b3c5156",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "3a4a587a-9c7d-4d06-afaf-e28fda6962c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0cc3531-1969-4ab0-91bb-da862147b07a",
        "cursor": {
          "ref": "1c768015-555a-4a30-8a2d-a95573b814ae",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "02a9d5b5-4c97-4e9d-a6cd-3fd335c3b3b5"
        },
        "item": {
          "id": "d0cc3531-1969-4ab0-91bb-da862147b07a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d46bf53a-a543-4fab-93d0-43dcc841100d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0cc3531-1969-4ab0-91bb-da862147b07a",
        "cursor": {
          "ref": "1c768015-555a-4a30-8a2d-a95573b814ae",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "02a9d5b5-4c97-4e9d-a6cd-3fd335c3b3b5"
        },
        "item": {
          "id": "d0cc3531-1969-4ab0-91bb-da862147b07a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d46bf53a-a543-4fab-93d0-43dcc841100d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9848f210-9c9b-493b-b209-169a9bdfa370",
        "cursor": {
          "ref": "b183a3c0-f2a8-401d-9ae0-e28eb6e49848",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "56486930-bee0-420c-8f65-f63bdb456249"
        },
        "item": {
          "id": "9848f210-9c9b-493b-b209-169a9bdfa370",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "d837062c-02d4-400d-b609-7cee69ef146b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9848f210-9c9b-493b-b209-169a9bdfa370",
        "cursor": {
          "ref": "b183a3c0-f2a8-401d-9ae0-e28eb6e49848",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "56486930-bee0-420c-8f65-f63bdb456249"
        },
        "item": {
          "id": "9848f210-9c9b-493b-b209-169a9bdfa370",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "d837062c-02d4-400d-b609-7cee69ef146b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1fad611-e14e-4909-9103-212614180915",
        "cursor": {
          "ref": "f569eb65-427b-4be8-8c19-67e490da6825",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "eccddfca-bae8-41ac-a1d5-1fb74dd70234"
        },
        "item": {
          "id": "e1fad611-e14e-4909-9103-212614180915",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "20851529-ac42-4cbc-9628-032946a3c13a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1fad611-e14e-4909-9103-212614180915",
        "cursor": {
          "ref": "f569eb65-427b-4be8-8c19-67e490da6825",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "eccddfca-bae8-41ac-a1d5-1fb74dd70234"
        },
        "item": {
          "id": "e1fad611-e14e-4909-9103-212614180915",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "20851529-ac42-4cbc-9628-032946a3c13a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee7d835-0fc8-4b70-9466-22291c2248a4",
        "cursor": {
          "ref": "5ffa4295-9105-4ddb-8935-1d15ceda8149",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "be1eaf8e-1894-4a94-a6be-9c3658a70ff1"
        },
        "item": {
          "id": "6ee7d835-0fc8-4b70-9466-22291c2248a4",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1dd8dfe4-3e71-495d-bad6-71d80ebf9575",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee7d835-0fc8-4b70-9466-22291c2248a4",
        "cursor": {
          "ref": "5ffa4295-9105-4ddb-8935-1d15ceda8149",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "be1eaf8e-1894-4a94-a6be-9c3658a70ff1"
        },
        "item": {
          "id": "6ee7d835-0fc8-4b70-9466-22291c2248a4",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1dd8dfe4-3e71-495d-bad6-71d80ebf9575",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "771acecb-9a4d-4087-b8b8-47ee6901785b",
        "cursor": {
          "ref": "13b24e4e-e1cd-4aab-ba74-c66f393ef495",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "7c1d9346-eb9b-41a7-a9b1-09ba72f70286"
        },
        "item": {
          "id": "771acecb-9a4d-4087-b8b8-47ee6901785b",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "97b26a23-4c21-42ba-9269-0f665fd54d0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "771acecb-9a4d-4087-b8b8-47ee6901785b",
        "cursor": {
          "ref": "13b24e4e-e1cd-4aab-ba74-c66f393ef495",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "7c1d9346-eb9b-41a7-a9b1-09ba72f70286"
        },
        "item": {
          "id": "771acecb-9a4d-4087-b8b8-47ee6901785b",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "97b26a23-4c21-42ba-9269-0f665fd54d0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fc969e8-7d7b-458f-a09d-b8707024c603",
        "cursor": {
          "ref": "a7eeba1b-e907-4cf7-aeae-dd73ba412c08",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "389c06db-1b3d-4912-9c12-ebd3f7ee4dbf"
        },
        "item": {
          "id": "2fc969e8-7d7b-458f-a09d-b8707024c603",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c88429a2-21c7-4fef-b8d8-5719eb1d6911",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fc969e8-7d7b-458f-a09d-b8707024c603",
        "cursor": {
          "ref": "a7eeba1b-e907-4cf7-aeae-dd73ba412c08",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "389c06db-1b3d-4912-9c12-ebd3f7ee4dbf"
        },
        "item": {
          "id": "2fc969e8-7d7b-458f-a09d-b8707024c603",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c88429a2-21c7-4fef-b8d8-5719eb1d6911",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad58799c-50bb-4427-81f8-858261004ee5",
        "cursor": {
          "ref": "02034007-e13e-4d23-80d8-a4319a2178b6",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c087dfad-69d9-46ef-bae4-e52c1f4253af"
        },
        "item": {
          "id": "ad58799c-50bb-4427-81f8-858261004ee5",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "03d0a20f-5b97-4e6c-a647-f6d93dc940c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad58799c-50bb-4427-81f8-858261004ee5",
        "cursor": {
          "ref": "02034007-e13e-4d23-80d8-a4319a2178b6",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c087dfad-69d9-46ef-bae4-e52c1f4253af"
        },
        "item": {
          "id": "ad58799c-50bb-4427-81f8-858261004ee5",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "03d0a20f-5b97-4e6c-a647-f6d93dc940c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5adf7891-d47b-4091-ace1-02eae6cf0c67",
        "cursor": {
          "ref": "682b90ec-0674-49d1-a94c-7520d56e17f0",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0cfc8441-7279-42f8-bce4-255e02c24c50"
        },
        "item": {
          "id": "5adf7891-d47b-4091-ace1-02eae6cf0c67",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e8cb75e0-7a45-48da-b5c0-6fcd370edba7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5adf7891-d47b-4091-ace1-02eae6cf0c67",
        "cursor": {
          "ref": "682b90ec-0674-49d1-a94c-7520d56e17f0",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0cfc8441-7279-42f8-bce4-255e02c24c50"
        },
        "item": {
          "id": "5adf7891-d47b-4091-ace1-02eae6cf0c67",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e8cb75e0-7a45-48da-b5c0-6fcd370edba7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ac2202-1a6e-44cd-b414-876e3b14c483",
        "cursor": {
          "ref": "4c1dad17-5df4-414f-8d5c-e8bf6191827a",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "bee5a822-39ad-4a1e-9c4c-d9235d0af683"
        },
        "item": {
          "id": "23ac2202-1a6e-44cd-b414-876e3b14c483",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "22607744-b5d3-470a-a038-3559fa7e48ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ac2202-1a6e-44cd-b414-876e3b14c483",
        "cursor": {
          "ref": "4c1dad17-5df4-414f-8d5c-e8bf6191827a",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "bee5a822-39ad-4a1e-9c4c-d9235d0af683"
        },
        "item": {
          "id": "23ac2202-1a6e-44cd-b414-876e3b14c483",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "22607744-b5d3-470a-a038-3559fa7e48ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c56c96a7-e782-49a8-ab2f-25c49b0b9367",
        "cursor": {
          "ref": "1fd40bb9-b9c1-473a-80ae-ccf94fa3d52e",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "89f7d55b-a280-48b2-9748-f6d53c94cfab"
        },
        "item": {
          "id": "c56c96a7-e782-49a8-ab2f-25c49b0b9367",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "db276fd5-3596-424b-91c8-728451a6e6f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c56c96a7-e782-49a8-ab2f-25c49b0b9367",
        "cursor": {
          "ref": "1fd40bb9-b9c1-473a-80ae-ccf94fa3d52e",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "89f7d55b-a280-48b2-9748-f6d53c94cfab"
        },
        "item": {
          "id": "c56c96a7-e782-49a8-ab2f-25c49b0b9367",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "db276fd5-3596-424b-91c8-728451a6e6f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db9c2cc-430e-4064-889d-bd403cb8f677",
        "cursor": {
          "ref": "3262343b-bf56-43e2-ab1a-3c810f8a1954",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "fe200e10-0297-4e37-9c1d-335d6f6c751c"
        },
        "item": {
          "id": "6db9c2cc-430e-4064-889d-bd403cb8f677",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "42a6db0b-fe0a-4b57-8bf6-0b91ec06f72f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db9c2cc-430e-4064-889d-bd403cb8f677",
        "cursor": {
          "ref": "3262343b-bf56-43e2-ab1a-3c810f8a1954",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "fe200e10-0297-4e37-9c1d-335d6f6c751c"
        },
        "item": {
          "id": "6db9c2cc-430e-4064-889d-bd403cb8f677",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "42a6db0b-fe0a-4b57-8bf6-0b91ec06f72f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93d5c865-380d-4095-a2e0-da4b29150e5b",
        "cursor": {
          "ref": "f3cc95d5-70ce-4841-9e62-9011b400aa83",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "848f0b4f-8819-463f-9d92-b082404bc21c"
        },
        "item": {
          "id": "93d5c865-380d-4095-a2e0-da4b29150e5b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "70d48a75-a3cd-4266-b11e-8f7a0af1eb65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93d5c865-380d-4095-a2e0-da4b29150e5b",
        "cursor": {
          "ref": "f3cc95d5-70ce-4841-9e62-9011b400aa83",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "848f0b4f-8819-463f-9d92-b082404bc21c"
        },
        "item": {
          "id": "93d5c865-380d-4095-a2e0-da4b29150e5b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "70d48a75-a3cd-4266-b11e-8f7a0af1eb65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f75711-8f94-484b-b30f-5c85c58338b7",
        "cursor": {
          "ref": "6ef6b3dc-7bfb-465d-9fc3-ecc2d451f1e8",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "60647f6a-6fcd-48c9-8212-c6c7b2d283ce"
        },
        "item": {
          "id": "77f75711-8f94-484b-b30f-5c85c58338b7",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e09edd46-8c94-4773-9c2b-f208ed7cd595",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f75711-8f94-484b-b30f-5c85c58338b7",
        "cursor": {
          "ref": "6ef6b3dc-7bfb-465d-9fc3-ecc2d451f1e8",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "60647f6a-6fcd-48c9-8212-c6c7b2d283ce"
        },
        "item": {
          "id": "77f75711-8f94-484b-b30f-5c85c58338b7",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e09edd46-8c94-4773-9c2b-f208ed7cd595",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab415a5e-79fb-450a-9f4f-45367733be8d",
        "cursor": {
          "ref": "5a4181f3-0081-4f03-b7ef-967d4ccda33a",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "55b2fed6-5174-4577-8158-6eab69675d79"
        },
        "item": {
          "id": "ab415a5e-79fb-450a-9f4f-45367733be8d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "81596fce-9fe8-4f92-b216-ef0b694c75f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab415a5e-79fb-450a-9f4f-45367733be8d",
        "cursor": {
          "ref": "5a4181f3-0081-4f03-b7ef-967d4ccda33a",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "55b2fed6-5174-4577-8158-6eab69675d79"
        },
        "item": {
          "id": "ab415a5e-79fb-450a-9f4f-45367733be8d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "81596fce-9fe8-4f92-b216-ef0b694c75f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d43856a7-ee59-4c2d-b8e4-d81fcfe265d6",
        "cursor": {
          "ref": "e4c43c0a-ddf6-4841-bb00-fa6cc57d5ef7",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e6df0387-9589-4078-8282-8bc8d26ccf0a"
        },
        "item": {
          "id": "d43856a7-ee59-4c2d-b8e4-d81fcfe265d6",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ea363a3c-1bc9-4968-b009-b445b098e678",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d43856a7-ee59-4c2d-b8e4-d81fcfe265d6",
        "cursor": {
          "ref": "e4c43c0a-ddf6-4841-bb00-fa6cc57d5ef7",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e6df0387-9589-4078-8282-8bc8d26ccf0a"
        },
        "item": {
          "id": "d43856a7-ee59-4c2d-b8e4-d81fcfe265d6",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ea363a3c-1bc9-4968-b009-b445b098e678",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4b3791c-2b76-4fa4-a6bf-e2c5ecab7794",
        "cursor": {
          "ref": "2ad5e4c4-590b-49b2-bc1d-d261d1032437",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "29116f8d-6777-41c1-855a-90c4fa6ff7f7"
        },
        "item": {
          "id": "d4b3791c-2b76-4fa4-a6bf-e2c5ecab7794",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c278822d-4ff0-4217-aa36-804523d7b44a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4b3791c-2b76-4fa4-a6bf-e2c5ecab7794",
        "cursor": {
          "ref": "2ad5e4c4-590b-49b2-bc1d-d261d1032437",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "29116f8d-6777-41c1-855a-90c4fa6ff7f7"
        },
        "item": {
          "id": "d4b3791c-2b76-4fa4-a6bf-e2c5ecab7794",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c278822d-4ff0-4217-aa36-804523d7b44a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d7b044-c4e5-4b29-8226-469ea5894ec5",
        "cursor": {
          "ref": "e98ea89f-1033-45a9-889d-dcc1046d5df0",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "647f5ed0-2537-406b-92ba-009b91e30cd6"
        },
        "item": {
          "id": "30d7b044-c4e5-4b29-8226-469ea5894ec5",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "07da17f6-ec89-4f1c-aa86-1c7093428063",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d7b044-c4e5-4b29-8226-469ea5894ec5",
        "cursor": {
          "ref": "e98ea89f-1033-45a9-889d-dcc1046d5df0",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "647f5ed0-2537-406b-92ba-009b91e30cd6"
        },
        "item": {
          "id": "30d7b044-c4e5-4b29-8226-469ea5894ec5",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "07da17f6-ec89-4f1c-aa86-1c7093428063",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37144453-9218-4315-b046-f26c2d7ae798",
        "cursor": {
          "ref": "4187e774-d956-44f4-8cbf-53a42a4d6b23",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a3061d37-e674-4e04-a029-2af822742af9"
        },
        "item": {
          "id": "37144453-9218-4315-b046-f26c2d7ae798",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1e929929-0178-443d-99ee-b462883f3964",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37144453-9218-4315-b046-f26c2d7ae798",
        "cursor": {
          "ref": "4187e774-d956-44f4-8cbf-53a42a4d6b23",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a3061d37-e674-4e04-a029-2af822742af9"
        },
        "item": {
          "id": "37144453-9218-4315-b046-f26c2d7ae798",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1e929929-0178-443d-99ee-b462883f3964",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25610d0e-0de4-4035-b5a3-3439eeaa276b",
        "cursor": {
          "ref": "ec1c51ed-9bd8-49ae-9f9d-e15e686e748f",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ce52b2f7-3739-430f-bac4-8010dc4c07ae"
        },
        "item": {
          "id": "25610d0e-0de4-4035-b5a3-3439eeaa276b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "217bfc8f-e1ab-446b-a59e-455e03a60abc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25610d0e-0de4-4035-b5a3-3439eeaa276b",
        "cursor": {
          "ref": "ec1c51ed-9bd8-49ae-9f9d-e15e686e748f",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ce52b2f7-3739-430f-bac4-8010dc4c07ae"
        },
        "item": {
          "id": "25610d0e-0de4-4035-b5a3-3439eeaa276b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "217bfc8f-e1ab-446b-a59e-455e03a60abc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae181a9-f510-4ade-a4dc-db02c871f506",
        "cursor": {
          "ref": "03c028a1-3b6d-4e26-b026-750d3cbe8176",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "699a2582-aba5-4ba5-9f8a-4c6ef65170d1"
        },
        "item": {
          "id": "5ae181a9-f510-4ade-a4dc-db02c871f506",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "aebe7305-e0f8-4b11-8071-0f70fc35ba29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae181a9-f510-4ade-a4dc-db02c871f506",
        "cursor": {
          "ref": "03c028a1-3b6d-4e26-b026-750d3cbe8176",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "699a2582-aba5-4ba5-9f8a-4c6ef65170d1"
        },
        "item": {
          "id": "5ae181a9-f510-4ade-a4dc-db02c871f506",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "aebe7305-e0f8-4b11-8071-0f70fc35ba29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b0699a9-33ee-4fda-9b58-f4bf7769126d",
        "cursor": {
          "ref": "73c07728-5597-4b0f-b829-1628807e77e3",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a7847ff8-c038-4fa1-abc3-d49ac1e81405"
        },
        "item": {
          "id": "9b0699a9-33ee-4fda-9b58-f4bf7769126d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "185514e7-4af8-4477-bed5-a45120e620e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b0699a9-33ee-4fda-9b58-f4bf7769126d",
        "cursor": {
          "ref": "73c07728-5597-4b0f-b829-1628807e77e3",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a7847ff8-c038-4fa1-abc3-d49ac1e81405"
        },
        "item": {
          "id": "9b0699a9-33ee-4fda-9b58-f4bf7769126d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "185514e7-4af8-4477-bed5-a45120e620e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e7ababd-a09e-43d0-96fe-5ff09d0513ef",
        "cursor": {
          "ref": "e4532a10-7acb-4295-bd69-9f18bfe707d9",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "00e19f23-b682-40ad-aca2-d547eeff9f7d"
        },
        "item": {
          "id": "8e7ababd-a09e-43d0-96fe-5ff09d0513ef",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "b6acecd6-4a0f-4d96-9256-d8cbf4dec602",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e7ababd-a09e-43d0-96fe-5ff09d0513ef",
        "cursor": {
          "ref": "e4532a10-7acb-4295-bd69-9f18bfe707d9",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "00e19f23-b682-40ad-aca2-d547eeff9f7d"
        },
        "item": {
          "id": "8e7ababd-a09e-43d0-96fe-5ff09d0513ef",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "b6acecd6-4a0f-4d96-9256-d8cbf4dec602",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b8765c5-7c31-439e-ae49-fa22ed534a40",
        "cursor": {
          "ref": "56ddf36b-54bd-464a-866e-97a6f43a5a2b",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b1c27e41-4280-4133-a81d-7d6915ef300f"
        },
        "item": {
          "id": "0b8765c5-7c31-439e-ae49-fa22ed534a40",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a9bbada8-5e6b-40b5-ad00-ea45052108f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b8765c5-7c31-439e-ae49-fa22ed534a40",
        "cursor": {
          "ref": "56ddf36b-54bd-464a-866e-97a6f43a5a2b",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b1c27e41-4280-4133-a81d-7d6915ef300f"
        },
        "item": {
          "id": "0b8765c5-7c31-439e-ae49-fa22ed534a40",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a9bbada8-5e6b-40b5-ad00-ea45052108f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9daee45b-9659-4997-a1d5-3615c97687fb",
        "cursor": {
          "ref": "00d1b96f-5ded-423d-b646-f3acf756d0bb",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "57a983ee-3147-4ab8-b801-cc0efc801cde"
        },
        "item": {
          "id": "9daee45b-9659-4997-a1d5-3615c97687fb",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "77edb486-b080-40f3-817d-eb6ff25721fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9daee45b-9659-4997-a1d5-3615c97687fb",
        "cursor": {
          "ref": "00d1b96f-5ded-423d-b646-f3acf756d0bb",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "57a983ee-3147-4ab8-b801-cc0efc801cde"
        },
        "item": {
          "id": "9daee45b-9659-4997-a1d5-3615c97687fb",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "77edb486-b080-40f3-817d-eb6ff25721fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a89d9302-132e-48bc-a6c2-585cfc6e66d3",
        "cursor": {
          "ref": "abc7f164-51ae-47d7-8a01-e86daa57c90d",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "9c2ca78b-530d-45d5-828b-584e6510ce22"
        },
        "item": {
          "id": "a89d9302-132e-48bc-a6c2-585cfc6e66d3",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "497a0c10-4e21-4892-a9d8-b456478c5d46",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a89d9302-132e-48bc-a6c2-585cfc6e66d3",
        "cursor": {
          "ref": "abc7f164-51ae-47d7-8a01-e86daa57c90d",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "9c2ca78b-530d-45d5-828b-584e6510ce22"
        },
        "item": {
          "id": "a89d9302-132e-48bc-a6c2-585cfc6e66d3",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "497a0c10-4e21-4892-a9d8-b456478c5d46",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd58e1c7-4630-447e-88c0-8a444700aee3",
        "cursor": {
          "ref": "63fce2f2-d34c-4f76-a163-c50829d8b3e1",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "ab7793cb-0fd0-4dd4-9fec-3df9527400ce"
        },
        "item": {
          "id": "dd58e1c7-4630-447e-88c0-8a444700aee3",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "013fc1f6-dc35-4a5d-a6d3-9a3fe1826ad6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd58e1c7-4630-447e-88c0-8a444700aee3",
        "cursor": {
          "ref": "63fce2f2-d34c-4f76-a163-c50829d8b3e1",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "ab7793cb-0fd0-4dd4-9fec-3df9527400ce"
        },
        "item": {
          "id": "dd58e1c7-4630-447e-88c0-8a444700aee3",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "013fc1f6-dc35-4a5d-a6d3-9a3fe1826ad6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6855c557-cda3-4cb8-ae23-36601dc581b0",
        "cursor": {
          "ref": "030b69f8-f4f6-4239-a4ed-a9c65fd66f5a",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b27e3176-924a-41ba-a621-1de392b4b3e6"
        },
        "item": {
          "id": "6855c557-cda3-4cb8-ae23-36601dc581b0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "9a8c6197-4109-4567-9bc6-c95797623791",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6855c557-cda3-4cb8-ae23-36601dc581b0",
        "cursor": {
          "ref": "030b69f8-f4f6-4239-a4ed-a9c65fd66f5a",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b27e3176-924a-41ba-a621-1de392b4b3e6"
        },
        "item": {
          "id": "6855c557-cda3-4cb8-ae23-36601dc581b0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "9a8c6197-4109-4567-9bc6-c95797623791",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a4b9bd4-5219-44a7-a45b-03184a15cfa5",
        "cursor": {
          "ref": "89d57e22-cc53-4d5f-b507-139df7b50547",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "3867abad-b26d-45df-a0c8-9060cd3f9526"
        },
        "item": {
          "id": "7a4b9bd4-5219-44a7-a45b-03184a15cfa5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "ce189e8f-074d-4fe0-9841-e308b012d2f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a4b9bd4-5219-44a7-a45b-03184a15cfa5",
        "cursor": {
          "ref": "89d57e22-cc53-4d5f-b507-139df7b50547",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "3867abad-b26d-45df-a0c8-9060cd3f9526"
        },
        "item": {
          "id": "7a4b9bd4-5219-44a7-a45b-03184a15cfa5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "ce189e8f-074d-4fe0-9841-e308b012d2f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45437a5c-ec43-410a-a28b-fc1a091a7c9e",
        "cursor": {
          "ref": "c6bfc3fa-5c02-4a33-aeba-6bc0c86f5ca0",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7f78e819-96ab-4691-8f10-fa8597f31b6a"
        },
        "item": {
          "id": "45437a5c-ec43-410a-a28b-fc1a091a7c9e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "89d8e5cb-dfbe-4c2f-a1f5-f3992e72f1ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45437a5c-ec43-410a-a28b-fc1a091a7c9e",
        "cursor": {
          "ref": "c6bfc3fa-5c02-4a33-aeba-6bc0c86f5ca0",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7f78e819-96ab-4691-8f10-fa8597f31b6a"
        },
        "item": {
          "id": "45437a5c-ec43-410a-a28b-fc1a091a7c9e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "89d8e5cb-dfbe-4c2f-a1f5-f3992e72f1ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb7c5bb1-8e91-43b3-8a1a-29d3681cbdd9",
        "cursor": {
          "ref": "0610ae0a-0a13-4118-882c-1fb7ea5cae78",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "49cafd2a-923f-4b20-8157-a05bb45f7c11"
        },
        "item": {
          "id": "cb7c5bb1-8e91-43b3-8a1a-29d3681cbdd9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "585e1025-be36-40c5-851a-b8535a284b72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb7c5bb1-8e91-43b3-8a1a-29d3681cbdd9",
        "cursor": {
          "ref": "0610ae0a-0a13-4118-882c-1fb7ea5cae78",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "49cafd2a-923f-4b20-8157-a05bb45f7c11"
        },
        "item": {
          "id": "cb7c5bb1-8e91-43b3-8a1a-29d3681cbdd9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "585e1025-be36-40c5-851a-b8535a284b72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d675f3c-2fe6-49d0-8526-09a5919cc591",
        "cursor": {
          "ref": "23409201-aabb-41c3-813a-3ee7ff95f562",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "54ff6bde-2b89-4cd1-924a-06c1b7123d89"
        },
        "item": {
          "id": "2d675f3c-2fe6-49d0-8526-09a5919cc591",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "33b08b1e-5515-405a-8a08-46ceaebb888a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d675f3c-2fe6-49d0-8526-09a5919cc591",
        "cursor": {
          "ref": "23409201-aabb-41c3-813a-3ee7ff95f562",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "54ff6bde-2b89-4cd1-924a-06c1b7123d89"
        },
        "item": {
          "id": "2d675f3c-2fe6-49d0-8526-09a5919cc591",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "33b08b1e-5515-405a-8a08-46ceaebb888a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ad3aa1a-e6a0-4dac-bd68-e6fd9eb4d373",
        "cursor": {
          "ref": "1d5d2690-9d17-4a0d-92bb-162071f76d78",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "28ada3af-327d-4bb1-af82-b1591da898d6"
        },
        "item": {
          "id": "1ad3aa1a-e6a0-4dac-bd68-e6fd9eb4d373",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "126a87ee-f717-4050-a7a5-b03804b94d52",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ad3aa1a-e6a0-4dac-bd68-e6fd9eb4d373",
        "cursor": {
          "ref": "1d5d2690-9d17-4a0d-92bb-162071f76d78",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "28ada3af-327d-4bb1-af82-b1591da898d6"
        },
        "item": {
          "id": "1ad3aa1a-e6a0-4dac-bd68-e6fd9eb4d373",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "126a87ee-f717-4050-a7a5-b03804b94d52",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fef0aad5-c5df-4eb9-80c2-2c24aab7a631",
        "cursor": {
          "ref": "003b83ac-24bc-4f85-9fcd-11ab6fa84458",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "ecea6049-7b9d-4614-9eda-9c7e3ec0c7a4"
        },
        "item": {
          "id": "fef0aad5-c5df-4eb9-80c2-2c24aab7a631",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "f1bdb4d3-4c52-4e6b-967f-6758dad5c208",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fef0aad5-c5df-4eb9-80c2-2c24aab7a631",
        "cursor": {
          "ref": "003b83ac-24bc-4f85-9fcd-11ab6fa84458",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "ecea6049-7b9d-4614-9eda-9c7e3ec0c7a4"
        },
        "item": {
          "id": "fef0aad5-c5df-4eb9-80c2-2c24aab7a631",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "f1bdb4d3-4c52-4e6b-967f-6758dad5c208",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910d6c40-1c6b-4703-a4dc-b7fdaf11d728",
        "cursor": {
          "ref": "fdbbc4d8-a2b2-4724-b163-5e28f41613f7",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "bb23a65b-79da-41f8-b22f-d1d6756eb6bd"
        },
        "item": {
          "id": "910d6c40-1c6b-4703-a4dc-b7fdaf11d728",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "18106048-c1ff-448f-8437-6acd3a7ab451",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910d6c40-1c6b-4703-a4dc-b7fdaf11d728",
        "cursor": {
          "ref": "fdbbc4d8-a2b2-4724-b163-5e28f41613f7",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "bb23a65b-79da-41f8-b22f-d1d6756eb6bd"
        },
        "item": {
          "id": "910d6c40-1c6b-4703-a4dc-b7fdaf11d728",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "18106048-c1ff-448f-8437-6acd3a7ab451",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44d32ba2-3ee3-482d-94b4-dfa292e9a590",
        "cursor": {
          "ref": "1b2a2ecf-fc02-4f24-8c7c-1cfe6f8ace34",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9380df3e-c8c2-4754-b182-c001ef9d6579"
        },
        "item": {
          "id": "44d32ba2-3ee3-482d-94b4-dfa292e9a590",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "66bafcfa-dacf-4e87-a6b6-51dae941940f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44d32ba2-3ee3-482d-94b4-dfa292e9a590",
        "cursor": {
          "ref": "1b2a2ecf-fc02-4f24-8c7c-1cfe6f8ace34",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9380df3e-c8c2-4754-b182-c001ef9d6579"
        },
        "item": {
          "id": "44d32ba2-3ee3-482d-94b4-dfa292e9a590",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "66bafcfa-dacf-4e87-a6b6-51dae941940f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0e3d4e9-3e8e-4b77-b9c0-d4a2d0479b89",
        "cursor": {
          "ref": "899ed552-d15a-41fb-a73f-a0e63e7074d6",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "4c1992af-ca1e-4ac4-ab87-7bb529d8a507"
        },
        "item": {
          "id": "b0e3d4e9-3e8e-4b77-b9c0-d4a2d0479b89",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "512eb37c-f503-4d19-8c91-231b7a45cd5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0e3d4e9-3e8e-4b77-b9c0-d4a2d0479b89",
        "cursor": {
          "ref": "899ed552-d15a-41fb-a73f-a0e63e7074d6",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "4c1992af-ca1e-4ac4-ab87-7bb529d8a507"
        },
        "item": {
          "id": "b0e3d4e9-3e8e-4b77-b9c0-d4a2d0479b89",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "512eb37c-f503-4d19-8c91-231b7a45cd5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d7ccf1e-7e2f-4894-abdd-622fc0e5c556",
        "cursor": {
          "ref": "e9b38286-a3ec-4b8a-8eb5-3d662e663a9e",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "53d22d7c-01fe-4fc2-a0d3-c15a6d80d465"
        },
        "item": {
          "id": "0d7ccf1e-7e2f-4894-abdd-622fc0e5c556",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e4a84ef4-73e6-45a0-aa83-697a76e59517",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d7ccf1e-7e2f-4894-abdd-622fc0e5c556",
        "cursor": {
          "ref": "e9b38286-a3ec-4b8a-8eb5-3d662e663a9e",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "53d22d7c-01fe-4fc2-a0d3-c15a6d80d465"
        },
        "item": {
          "id": "0d7ccf1e-7e2f-4894-abdd-622fc0e5c556",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e4a84ef4-73e6-45a0-aa83-697a76e59517",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cede292c-a510-43c3-8046-c55d4489da51",
        "cursor": {
          "ref": "a2e91106-9f49-4024-ac6c-9ed489b8e9e8",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "461c8379-4da7-433a-8bd5-a53a3ac4e370"
        },
        "item": {
          "id": "cede292c-a510-43c3-8046-c55d4489da51",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ad554ad1-8ecf-46f8-856b-572ac38b3e37",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cede292c-a510-43c3-8046-c55d4489da51",
        "cursor": {
          "ref": "a2e91106-9f49-4024-ac6c-9ed489b8e9e8",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "461c8379-4da7-433a-8bd5-a53a3ac4e370"
        },
        "item": {
          "id": "cede292c-a510-43c3-8046-c55d4489da51",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ad554ad1-8ecf-46f8-856b-572ac38b3e37",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f20794d-0525-4d73-b0eb-bdf3fd0b16ce",
        "cursor": {
          "ref": "8cfe8bd5-40a1-4edb-b1d9-50d54d45d493",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d69fe037-cf44-4a14-9790-659a08ce7d41"
        },
        "item": {
          "id": "9f20794d-0525-4d73-b0eb-bdf3fd0b16ce",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "9a0c243b-dd96-4ea3-bfc4-8078d49ef115",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f20794d-0525-4d73-b0eb-bdf3fd0b16ce",
        "cursor": {
          "ref": "8cfe8bd5-40a1-4edb-b1d9-50d54d45d493",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d69fe037-cf44-4a14-9790-659a08ce7d41"
        },
        "item": {
          "id": "9f20794d-0525-4d73-b0eb-bdf3fd0b16ce",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "9a0c243b-dd96-4ea3-bfc4-8078d49ef115",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c22cb9a-8c3b-4e69-be25-dcda007de326",
        "cursor": {
          "ref": "4bf20783-0fa5-4f55-b652-d0ae03a4adc1",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "500a2554-40be-4b43-b519-9b4d5715ada0"
        },
        "item": {
          "id": "2c22cb9a-8c3b-4e69-be25-dcda007de326",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "4006babc-6f1a-494f-91ec-475a525f0fbb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c22cb9a-8c3b-4e69-be25-dcda007de326",
        "cursor": {
          "ref": "4bf20783-0fa5-4f55-b652-d0ae03a4adc1",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "500a2554-40be-4b43-b519-9b4d5715ada0"
        },
        "item": {
          "id": "2c22cb9a-8c3b-4e69-be25-dcda007de326",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "4006babc-6f1a-494f-91ec-475a525f0fbb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a524846-5ad6-4290-99b1-2c471ecb8dcd",
        "cursor": {
          "ref": "94a25541-57f5-44b0-948d-884fd98e0e3e",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "be6f15d5-9ec0-4a95-b662-c2599675772c"
        },
        "item": {
          "id": "3a524846-5ad6-4290-99b1-2c471ecb8dcd",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b40531c5-5e1e-4b12-9b1e-ed79e2da3f25",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a524846-5ad6-4290-99b1-2c471ecb8dcd",
        "cursor": {
          "ref": "94a25541-57f5-44b0-948d-884fd98e0e3e",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "be6f15d5-9ec0-4a95-b662-c2599675772c"
        },
        "item": {
          "id": "3a524846-5ad6-4290-99b1-2c471ecb8dcd",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b40531c5-5e1e-4b12-9b1e-ed79e2da3f25",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a40642-d61f-4ea0-afcf-c136e095abf1",
        "cursor": {
          "ref": "3cfbd844-0aac-41f9-aaf2-c8d8559d4b94",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "19edc50d-e9bf-4326-aac7-a6d8d3388b0f"
        },
        "item": {
          "id": "d2a40642-d61f-4ea0-afcf-c136e095abf1",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e9b4527e-771e-4bf2-b1aa-3f517ba22ae2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a40642-d61f-4ea0-afcf-c136e095abf1",
        "cursor": {
          "ref": "3cfbd844-0aac-41f9-aaf2-c8d8559d4b94",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "19edc50d-e9bf-4326-aac7-a6d8d3388b0f"
        },
        "item": {
          "id": "d2a40642-d61f-4ea0-afcf-c136e095abf1",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e9b4527e-771e-4bf2-b1aa-3f517ba22ae2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7fc9c0b-4175-4874-9a46-a94c5973af59",
        "cursor": {
          "ref": "96220b30-a9ec-41d0-9f1f-12d0c18c9b2d",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e953441d-6ce3-46e2-8173-5c0f220d55ee"
        },
        "item": {
          "id": "c7fc9c0b-4175-4874-9a46-a94c5973af59",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "73fc3d23-4ba9-4c9e-9b89-d560c719451e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7fc9c0b-4175-4874-9a46-a94c5973af59",
        "cursor": {
          "ref": "96220b30-a9ec-41d0-9f1f-12d0c18c9b2d",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e953441d-6ce3-46e2-8173-5c0f220d55ee"
        },
        "item": {
          "id": "c7fc9c0b-4175-4874-9a46-a94c5973af59",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "73fc3d23-4ba9-4c9e-9b89-d560c719451e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8824a710-dc86-45d4-aa1e-83567e480217",
        "cursor": {
          "ref": "40e5c1e8-ab08-4d19-9ad8-83cb7c93d458",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "363c0570-d580-4ac3-a1e2-682032fb5160"
        },
        "item": {
          "id": "8824a710-dc86-45d4-aa1e-83567e480217",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "e02f65d5-8ecc-42ff-99e4-e8a6b47972c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8824a710-dc86-45d4-aa1e-83567e480217",
        "cursor": {
          "ref": "40e5c1e8-ab08-4d19-9ad8-83cb7c93d458",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "363c0570-d580-4ac3-a1e2-682032fb5160"
        },
        "item": {
          "id": "8824a710-dc86-45d4-aa1e-83567e480217",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "e02f65d5-8ecc-42ff-99e4-e8a6b47972c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5db8df-4ad1-41f1-a385-5bbd35b81e03",
        "cursor": {
          "ref": "4d894821-f8b1-4567-8c5c-4fcc7f54c420",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1beca38b-0518-4445-84fc-abb659e08261"
        },
        "item": {
          "id": "2f5db8df-4ad1-41f1-a385-5bbd35b81e03",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "e895f396-33f5-43a1-9f40-ca0800989e9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5db8df-4ad1-41f1-a385-5bbd35b81e03",
        "cursor": {
          "ref": "4d894821-f8b1-4567-8c5c-4fcc7f54c420",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1beca38b-0518-4445-84fc-abb659e08261"
        },
        "item": {
          "id": "2f5db8df-4ad1-41f1-a385-5bbd35b81e03",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "e895f396-33f5-43a1-9f40-ca0800989e9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e39b9915-c9fe-47f6-a500-b7eb6988b37a",
        "cursor": {
          "ref": "f8f5c0ef-95fe-49a2-8582-a492148aa725",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "3bf7a29e-30f7-497d-834c-dacf2a175961"
        },
        "item": {
          "id": "e39b9915-c9fe-47f6-a500-b7eb6988b37a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a0b382b7-e960-4fdb-b084-67d2d65e8493",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e39b9915-c9fe-47f6-a500-b7eb6988b37a",
        "cursor": {
          "ref": "f8f5c0ef-95fe-49a2-8582-a492148aa725",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "3bf7a29e-30f7-497d-834c-dacf2a175961"
        },
        "item": {
          "id": "e39b9915-c9fe-47f6-a500-b7eb6988b37a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a0b382b7-e960-4fdb-b084-67d2d65e8493",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bcde1b1-c377-4887-a2af-f8f82b6304e0",
        "cursor": {
          "ref": "40e307b8-0163-4d1a-b256-5ef94d21e2da",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "601e5b90-6b3b-4e82-8a72-d8405e72c831"
        },
        "item": {
          "id": "6bcde1b1-c377-4887-a2af-f8f82b6304e0",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "248bd342-cb8a-40b6-a16c-8aa63ff56524",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bcde1b1-c377-4887-a2af-f8f82b6304e0",
        "cursor": {
          "ref": "40e307b8-0163-4d1a-b256-5ef94d21e2da",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "601e5b90-6b3b-4e82-8a72-d8405e72c831"
        },
        "item": {
          "id": "6bcde1b1-c377-4887-a2af-f8f82b6304e0",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "248bd342-cb8a-40b6-a16c-8aa63ff56524",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b9ffcb1-c779-45b9-ae83-2b9f84617519",
        "cursor": {
          "ref": "52635867-da9c-4556-bfbe-1f328987b8c3",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "dce6cdcf-00eb-4a40-b507-2d8a7ce32b4c"
        },
        "item": {
          "id": "1b9ffcb1-c779-45b9-ae83-2b9f84617519",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "1d9d6613-4756-43d9-a22e-4239a4b8b758",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b9ffcb1-c779-45b9-ae83-2b9f84617519",
        "cursor": {
          "ref": "52635867-da9c-4556-bfbe-1f328987b8c3",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "dce6cdcf-00eb-4a40-b507-2d8a7ce32b4c"
        },
        "item": {
          "id": "1b9ffcb1-c779-45b9-ae83-2b9f84617519",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "1d9d6613-4756-43d9-a22e-4239a4b8b758",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3af5f5b3-ef03-49e0-b4b1-89c6d7e316f4",
        "cursor": {
          "ref": "d4812209-78b0-46d9-aba5-395f2531a661",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a64f05b2-87df-4f17-a094-8f0fb7125d12"
        },
        "item": {
          "id": "3af5f5b3-ef03-49e0-b4b1-89c6d7e316f4",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "6a391e6d-f019-4d95-b638-f742bd0ef324",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3af5f5b3-ef03-49e0-b4b1-89c6d7e316f4",
        "cursor": {
          "ref": "d4812209-78b0-46d9-aba5-395f2531a661",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a64f05b2-87df-4f17-a094-8f0fb7125d12"
        },
        "item": {
          "id": "3af5f5b3-ef03-49e0-b4b1-89c6d7e316f4",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "6a391e6d-f019-4d95-b638-f742bd0ef324",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80ae86ec-6e05-4ef8-9fb4-ddf292056f6f",
        "cursor": {
          "ref": "f6848c77-1312-4217-8d5a-59d19e0e0b38",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "660bb083-a050-46f1-bb71-5144af4ea2a9"
        },
        "item": {
          "id": "80ae86ec-6e05-4ef8-9fb4-ddf292056f6f",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b627799b-2ac7-4442-8a33-903eca73ec58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80ae86ec-6e05-4ef8-9fb4-ddf292056f6f",
        "cursor": {
          "ref": "f6848c77-1312-4217-8d5a-59d19e0e0b38",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "660bb083-a050-46f1-bb71-5144af4ea2a9"
        },
        "item": {
          "id": "80ae86ec-6e05-4ef8-9fb4-ddf292056f6f",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b627799b-2ac7-4442-8a33-903eca73ec58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f47946d9-3aac-4b3c-8360-c0ede483af0c",
        "cursor": {
          "ref": "73c43ec5-9ed5-4045-a2ca-64d5a0d08585",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "8178e635-053a-4030-a2a8-5e51956ee882"
        },
        "item": {
          "id": "f47946d9-3aac-4b3c-8360-c0ede483af0c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "fa7395af-7f14-41fd-ab66-ecc2deebfab3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f47946d9-3aac-4b3c-8360-c0ede483af0c",
        "cursor": {
          "ref": "73c43ec5-9ed5-4045-a2ca-64d5a0d08585",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "8178e635-053a-4030-a2a8-5e51956ee882"
        },
        "item": {
          "id": "f47946d9-3aac-4b3c-8360-c0ede483af0c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "fa7395af-7f14-41fd-ab66-ecc2deebfab3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c2f4ff-0ddb-47b8-9062-090c4e1b59ed",
        "cursor": {
          "ref": "2a81f6e8-2a5f-4822-a2ec-c8ef7a2f85b9",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "4c5d4ab9-87a2-4623-aaf5-67fad047b222"
        },
        "item": {
          "id": "b4c2f4ff-0ddb-47b8-9062-090c4e1b59ed",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5a0bb196-77ba-40d2-b3da-de6708553a03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c2f4ff-0ddb-47b8-9062-090c4e1b59ed",
        "cursor": {
          "ref": "2a81f6e8-2a5f-4822-a2ec-c8ef7a2f85b9",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "4c5d4ab9-87a2-4623-aaf5-67fad047b222"
        },
        "item": {
          "id": "b4c2f4ff-0ddb-47b8-9062-090c4e1b59ed",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5a0bb196-77ba-40d2-b3da-de6708553a03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e5ba438-1b93-4e1b-807d-3caaedb5ea92",
        "cursor": {
          "ref": "0448e914-400c-4f35-bf5f-e96e085aad7d",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "bf7c6f85-36f9-4960-969f-4d7dd31de274"
        },
        "item": {
          "id": "2e5ba438-1b93-4e1b-807d-3caaedb5ea92",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "32e07e04-7670-4aed-9cb6-a73daf025b8c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e5ba438-1b93-4e1b-807d-3caaedb5ea92",
        "cursor": {
          "ref": "0448e914-400c-4f35-bf5f-e96e085aad7d",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "bf7c6f85-36f9-4960-969f-4d7dd31de274"
        },
        "item": {
          "id": "2e5ba438-1b93-4e1b-807d-3caaedb5ea92",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "32e07e04-7670-4aed-9cb6-a73daf025b8c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82f1e221-1dbe-43d0-8984-72728700411a",
        "cursor": {
          "ref": "520cfecd-bc62-463c-9d27-d7b007bffc16",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a36de706-66fe-4681-90de-e6fad933fad8"
        },
        "item": {
          "id": "82f1e221-1dbe-43d0-8984-72728700411a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "02a0a190-ba00-4525-a304-d394d6827e63",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82f1e221-1dbe-43d0-8984-72728700411a",
        "cursor": {
          "ref": "520cfecd-bc62-463c-9d27-d7b007bffc16",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a36de706-66fe-4681-90de-e6fad933fad8"
        },
        "item": {
          "id": "82f1e221-1dbe-43d0-8984-72728700411a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "02a0a190-ba00-4525-a304-d394d6827e63",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c557830-4db0-473c-969f-753b37e9b6da",
        "cursor": {
          "ref": "0b169eba-21ae-4667-b06f-388dbaeaf508",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "526e2b61-df84-4a61-a80e-077c4d908a62"
        },
        "item": {
          "id": "9c557830-4db0-473c-969f-753b37e9b6da",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a88141c1-d9a2-43ce-9f10-36c9a7b94df8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c557830-4db0-473c-969f-753b37e9b6da",
        "cursor": {
          "ref": "0b169eba-21ae-4667-b06f-388dbaeaf508",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "526e2b61-df84-4a61-a80e-077c4d908a62"
        },
        "item": {
          "id": "9c557830-4db0-473c-969f-753b37e9b6da",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a88141c1-d9a2-43ce-9f10-36c9a7b94df8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ffcca9e-88a0-4596-8cc5-4f10d4e68390",
        "cursor": {
          "ref": "6ef93c71-da56-4920-b69f-f78c73914dad",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6d592f1c-cbb1-4537-ae01-eca0d906c3d9"
        },
        "item": {
          "id": "9ffcca9e-88a0-4596-8cc5-4f10d4e68390",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e2368b28-2775-4ae9-bcce-bec2e7ba735b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ffcca9e-88a0-4596-8cc5-4f10d4e68390",
        "cursor": {
          "ref": "6ef93c71-da56-4920-b69f-f78c73914dad",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6d592f1c-cbb1-4537-ae01-eca0d906c3d9"
        },
        "item": {
          "id": "9ffcca9e-88a0-4596-8cc5-4f10d4e68390",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e2368b28-2775-4ae9-bcce-bec2e7ba735b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c0108cf-0609-40e7-a6cb-466bb4b685a0",
        "cursor": {
          "ref": "572db3e3-550f-41b6-9d0c-238281916ba1",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "dc3b2470-02df-4900-8fb1-48312066620a"
        },
        "item": {
          "id": "0c0108cf-0609-40e7-a6cb-466bb4b685a0",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0c145194-ef94-4d32-81ba-c16a7fd83ff9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c0108cf-0609-40e7-a6cb-466bb4b685a0",
        "cursor": {
          "ref": "572db3e3-550f-41b6-9d0c-238281916ba1",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "dc3b2470-02df-4900-8fb1-48312066620a"
        },
        "item": {
          "id": "0c0108cf-0609-40e7-a6cb-466bb4b685a0",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0c145194-ef94-4d32-81ba-c16a7fd83ff9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8643cd33-5b94-4b31-82c2-aa1ad7898a78",
        "cursor": {
          "ref": "e2587e36-8131-4033-ad9a-81e91f94a434",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "0cad2867-e8c8-4419-a6be-e4c5d3d05d6d"
        },
        "item": {
          "id": "8643cd33-5b94-4b31-82c2-aa1ad7898a78",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "0a093894-b612-41bb-9804-2fe7ed5f4f47",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8643cd33-5b94-4b31-82c2-aa1ad7898a78",
        "cursor": {
          "ref": "e2587e36-8131-4033-ad9a-81e91f94a434",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "0cad2867-e8c8-4419-a6be-e4c5d3d05d6d"
        },
        "item": {
          "id": "8643cd33-5b94-4b31-82c2-aa1ad7898a78",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "0a093894-b612-41bb-9804-2fe7ed5f4f47",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e03bbf38-8c07-4b4b-9922-e7532a6daeb9",
        "cursor": {
          "ref": "9ff2a1b8-2c6d-4215-9db5-ff165ca3a4b7",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e40ef63d-71ca-4234-abe5-3926332dbd76"
        },
        "item": {
          "id": "e03bbf38-8c07-4b4b-9922-e7532a6daeb9",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "6faca5b0-23a0-454f-96b9-8c11d21f7e85",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e03bbf38-8c07-4b4b-9922-e7532a6daeb9",
        "cursor": {
          "ref": "9ff2a1b8-2c6d-4215-9db5-ff165ca3a4b7",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e40ef63d-71ca-4234-abe5-3926332dbd76"
        },
        "item": {
          "id": "e03bbf38-8c07-4b4b-9922-e7532a6daeb9",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "6faca5b0-23a0-454f-96b9-8c11d21f7e85",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39f64d8b-7fed-4beb-807a-c37636f287ce",
        "cursor": {
          "ref": "f75b7193-c31c-4f27-8e51-011cf28608e1",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "3f0f4dd0-bfb0-48f7-a3eb-e72989e64b25"
        },
        "item": {
          "id": "39f64d8b-7fed-4beb-807a-c37636f287ce",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "21069b82-fb25-47ea-bb03-54aef747a8ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39f64d8b-7fed-4beb-807a-c37636f287ce",
        "cursor": {
          "ref": "f75b7193-c31c-4f27-8e51-011cf28608e1",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "3f0f4dd0-bfb0-48f7-a3eb-e72989e64b25"
        },
        "item": {
          "id": "39f64d8b-7fed-4beb-807a-c37636f287ce",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "21069b82-fb25-47ea-bb03-54aef747a8ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b30e468c-f89c-43b3-bff0-c70bb3f6c307",
        "cursor": {
          "ref": "2035a310-5767-42ef-a6ec-f2888b0be482",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d5c4f7aa-2503-4cbb-b810-d5d501ba2204"
        },
        "item": {
          "id": "b30e468c-f89c-43b3-bff0-c70bb3f6c307",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f28d2c78-32ab-49b3-84c5-7065a8969517",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b30e468c-f89c-43b3-bff0-c70bb3f6c307",
        "cursor": {
          "ref": "2035a310-5767-42ef-a6ec-f2888b0be482",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d5c4f7aa-2503-4cbb-b810-d5d501ba2204"
        },
        "item": {
          "id": "b30e468c-f89c-43b3-bff0-c70bb3f6c307",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f28d2c78-32ab-49b3-84c5-7065a8969517",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15f81f0a-6e1e-44c5-a97c-131551d0dc4a",
        "cursor": {
          "ref": "288e4c19-3c3d-4975-9155-2f6b6ca87fec",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "6ae03f36-b2ab-4002-bb3f-c28c20ec778d"
        },
        "item": {
          "id": "15f81f0a-6e1e-44c5-a97c-131551d0dc4a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4a61c830-5264-4be5-9c5d-1cbbb905c9a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15f81f0a-6e1e-44c5-a97c-131551d0dc4a",
        "cursor": {
          "ref": "288e4c19-3c3d-4975-9155-2f6b6ca87fec",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "6ae03f36-b2ab-4002-bb3f-c28c20ec778d"
        },
        "item": {
          "id": "15f81f0a-6e1e-44c5-a97c-131551d0dc4a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4a61c830-5264-4be5-9c5d-1cbbb905c9a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acccbf3d-203a-4f75-a217-9894bb3c0444",
        "cursor": {
          "ref": "98655227-ac8f-4efc-8810-5117e791414a",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "30bbc213-dc32-4ef0-9421-d7c797818654"
        },
        "item": {
          "id": "acccbf3d-203a-4f75-a217-9894bb3c0444",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "4673d896-bd6a-4fc3-90c9-4ede4a83ff3a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "acccbf3d-203a-4f75-a217-9894bb3c0444",
        "cursor": {
          "ref": "98655227-ac8f-4efc-8810-5117e791414a",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "30bbc213-dc32-4ef0-9421-d7c797818654"
        },
        "item": {
          "id": "acccbf3d-203a-4f75-a217-9894bb3c0444",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "4673d896-bd6a-4fc3-90c9-4ede4a83ff3a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "74cc21b4-ef89-4f1a-9b08-6be655f4334a",
        "cursor": {
          "ref": "ce3e0d26-858d-4254-a54c-926ca4e11198",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0f707b81-f647-4fd2-887d-6ae90188a2e1"
        },
        "item": {
          "id": "74cc21b4-ef89-4f1a-9b08-6be655f4334a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "da082d5f-3e07-407f-8d63-b35031c3104f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "74cc21b4-ef89-4f1a-9b08-6be655f4334a",
        "cursor": {
          "ref": "ce3e0d26-858d-4254-a54c-926ca4e11198",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0f707b81-f647-4fd2-887d-6ae90188a2e1"
        },
        "item": {
          "id": "74cc21b4-ef89-4f1a-9b08-6be655f4334a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "da082d5f-3e07-407f-8d63-b35031c3104f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "4580c87d-1c48-496a-bbbe-a86d66e864b5",
        "cursor": {
          "ref": "c714f289-e40a-4603-a0fd-25885a240985",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "7eb839c1-1c1e-42dc-9c49-222cf350773d"
        },
        "item": {
          "id": "4580c87d-1c48-496a-bbbe-a86d66e864b5",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "deb130f4-4b14-4755-be9e-86f57375dea2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "4580c87d-1c48-496a-bbbe-a86d66e864b5",
        "cursor": {
          "ref": "c714f289-e40a-4603-a0fd-25885a240985",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "7eb839c1-1c1e-42dc-9c49-222cf350773d"
        },
        "item": {
          "id": "4580c87d-1c48-496a-bbbe-a86d66e864b5",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "deb130f4-4b14-4755-be9e-86f57375dea2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "62dd13c3-2810-446b-b715-85fdb5052252",
        "cursor": {
          "ref": "b95beae1-e04d-405e-bdb4-1fe36627e714",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ef958330-8a9e-4d4e-976f-72f507879f81"
        },
        "item": {
          "id": "62dd13c3-2810-446b-b715-85fdb5052252",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b6b5474c-c510-4af8-84cf-2cb80cdb5d10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "62dd13c3-2810-446b-b715-85fdb5052252",
        "cursor": {
          "ref": "b95beae1-e04d-405e-bdb4-1fe36627e714",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ef958330-8a9e-4d4e-976f-72f507879f81"
        },
        "item": {
          "id": "62dd13c3-2810-446b-b715-85fdb5052252",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b6b5474c-c510-4af8-84cf-2cb80cdb5d10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "0358343d-3e98-4adb-b549-bc675d836c24",
        "cursor": {
          "ref": "52a29222-df68-4a76-96d3-3eccda6d2f74",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "bca96307-87de-4f22-ba6c-86ca713379fb"
        },
        "item": {
          "id": "0358343d-3e98-4adb-b549-bc675d836c24",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "84b5530d-0500-4593-8b1b-27e2563ffb01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "0358343d-3e98-4adb-b549-bc675d836c24",
        "cursor": {
          "ref": "52a29222-df68-4a76-96d3-3eccda6d2f74",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "bca96307-87de-4f22-ba6c-86ca713379fb"
        },
        "item": {
          "id": "0358343d-3e98-4adb-b549-bc675d836c24",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "84b5530d-0500-4593-8b1b-27e2563ffb01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "ea433b6c-e15e-49bb-b933-48cfe8b4e42c",
        "cursor": {
          "ref": "4cf4f6ab-ab9c-4317-bb8b-dd1fda6b7288",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "4951c3de-af3e-4eeb-81c6-ea114d08e940"
        },
        "item": {
          "id": "ea433b6c-e15e-49bb-b933-48cfe8b4e42c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "6e6812e9-3edb-4906-81df-b55985ec8de1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "ea433b6c-e15e-49bb-b933-48cfe8b4e42c",
        "cursor": {
          "ref": "4cf4f6ab-ab9c-4317-bb8b-dd1fda6b7288",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "4951c3de-af3e-4eeb-81c6-ea114d08e940"
        },
        "item": {
          "id": "ea433b6c-e15e-49bb-b933-48cfe8b4e42c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "6e6812e9-3edb-4906-81df-b55985ec8de1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "2c5aec36-566b-41c9-979a-982b93ab468e",
        "cursor": {
          "ref": "af6ffb51-8a71-4fc2-bf18-904b24781c6d",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "9feea8fa-5d40-46ac-b6de-0f413d3a6abb"
        },
        "item": {
          "id": "2c5aec36-566b-41c9-979a-982b93ab468e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6fb68f34-6eb3-483c-a40d-2f0ef54aa482",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "2c5aec36-566b-41c9-979a-982b93ab468e",
        "cursor": {
          "ref": "af6ffb51-8a71-4fc2-bf18-904b24781c6d",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "9feea8fa-5d40-46ac-b6de-0f413d3a6abb"
        },
        "item": {
          "id": "2c5aec36-566b-41c9-979a-982b93ab468e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6fb68f34-6eb3-483c-a40d-2f0ef54aa482",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "a5ee8770-e55b-4c47-ba2f-811113dbb5a5",
        "cursor": {
          "ref": "71b72857-cd49-4413-96f2-bb656860fd10",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "d98369a4-8e93-4789-bed8-1d406e5d9fa8"
        },
        "item": {
          "id": "a5ee8770-e55b-4c47-ba2f-811113dbb5a5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1901ac6e-9f28-49a2-8dd9-17c99d026f7c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5ee8770-e55b-4c47-ba2f-811113dbb5a5",
        "cursor": {
          "ref": "71b72857-cd49-4413-96f2-bb656860fd10",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "d98369a4-8e93-4789-bed8-1d406e5d9fa8"
        },
        "item": {
          "id": "a5ee8770-e55b-4c47-ba2f-811113dbb5a5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1901ac6e-9f28-49a2-8dd9-17c99d026f7c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65d72bd9-eeaf-4118-a3e1-f23d36512d9e",
        "cursor": {
          "ref": "337b1605-7a24-4c12-a600-6a6180f08e2c",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "00d46207-4475-475c-bbcd-844d5cd5e7a4"
        },
        "item": {
          "id": "65d72bd9-eeaf-4118-a3e1-f23d36512d9e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f82e914b-9bda-4b2b-a0e5-8226acc6c2ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65d72bd9-eeaf-4118-a3e1-f23d36512d9e",
        "cursor": {
          "ref": "337b1605-7a24-4c12-a600-6a6180f08e2c",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "00d46207-4475-475c-bbcd-844d5cd5e7a4"
        },
        "item": {
          "id": "65d72bd9-eeaf-4118-a3e1-f23d36512d9e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f82e914b-9bda-4b2b-a0e5-8226acc6c2ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1772590b-1b27-487b-b45f-74725258162c",
        "cursor": {
          "ref": "75cca5ee-4375-4014-b9b2-cdb713dd9e01",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e2b428fb-865a-4c18-9600-0f5550b8aa83"
        },
        "item": {
          "id": "1772590b-1b27-487b-b45f-74725258162c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4fcbfdd5-84dc-4ded-a7b1-e53d80827368",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1772590b-1b27-487b-b45f-74725258162c",
        "cursor": {
          "ref": "75cca5ee-4375-4014-b9b2-cdb713dd9e01",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e2b428fb-865a-4c18-9600-0f5550b8aa83"
        },
        "item": {
          "id": "1772590b-1b27-487b-b45f-74725258162c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4fcbfdd5-84dc-4ded-a7b1-e53d80827368",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0c781ab-0400-4f85-b992-bec176a766f9",
        "cursor": {
          "ref": "d3c487f2-0018-46fd-aafe-7f0f69e6bfa1",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "4fd03718-be99-4525-8047-5b9d084abb30"
        },
        "item": {
          "id": "d0c781ab-0400-4f85-b992-bec176a766f9",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ca4a0698-5954-4f81-bcab-fdbdc59ed3e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0c781ab-0400-4f85-b992-bec176a766f9",
        "cursor": {
          "ref": "d3c487f2-0018-46fd-aafe-7f0f69e6bfa1",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "4fd03718-be99-4525-8047-5b9d084abb30"
        },
        "item": {
          "id": "d0c781ab-0400-4f85-b992-bec176a766f9",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ca4a0698-5954-4f81-bcab-fdbdc59ed3e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c639124c-32ae-428b-91f8-f6bbb1f7bb0d",
        "cursor": {
          "ref": "548cabc2-52a3-47ab-aa68-e793eb274cfc",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b6934391-6341-4a87-a1a6-5c9dc5960173"
        },
        "item": {
          "id": "c639124c-32ae-428b-91f8-f6bbb1f7bb0d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "76882da4-272e-47bd-9a59-0f7dc2e5437a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c639124c-32ae-428b-91f8-f6bbb1f7bb0d",
        "cursor": {
          "ref": "548cabc2-52a3-47ab-aa68-e793eb274cfc",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b6934391-6341-4a87-a1a6-5c9dc5960173"
        },
        "item": {
          "id": "c639124c-32ae-428b-91f8-f6bbb1f7bb0d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "76882da4-272e-47bd-9a59-0f7dc2e5437a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e40de9a5-25aa-4ee8-9b4a-c9a20da63983",
        "cursor": {
          "ref": "959e3141-eb6f-4566-928d-ee7acaa917fd",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7dd6c797-f65f-4c74-841d-9de3f1da9c55"
        },
        "item": {
          "id": "e40de9a5-25aa-4ee8-9b4a-c9a20da63983",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c2ae4476-cc8f-47f8-ac3c-5ee4a54fa4c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e40de9a5-25aa-4ee8-9b4a-c9a20da63983",
        "cursor": {
          "ref": "959e3141-eb6f-4566-928d-ee7acaa917fd",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7dd6c797-f65f-4c74-841d-9de3f1da9c55"
        },
        "item": {
          "id": "e40de9a5-25aa-4ee8-9b4a-c9a20da63983",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c2ae4476-cc8f-47f8-ac3c-5ee4a54fa4c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed80e1f2-439e-46b1-b82c-f2e2baf7eee5",
        "cursor": {
          "ref": "35e85712-b0d9-4379-913c-da559cf223cf",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7a01ebfb-2209-4445-9b1c-da776b903f95"
        },
        "item": {
          "id": "ed80e1f2-439e-46b1-b82c-f2e2baf7eee5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "16f1699c-4d49-414e-91b1-65788eba0d9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed80e1f2-439e-46b1-b82c-f2e2baf7eee5",
        "cursor": {
          "ref": "35e85712-b0d9-4379-913c-da559cf223cf",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7a01ebfb-2209-4445-9b1c-da776b903f95"
        },
        "item": {
          "id": "ed80e1f2-439e-46b1-b82c-f2e2baf7eee5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "16f1699c-4d49-414e-91b1-65788eba0d9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24d3958a-e47c-4d3a-801a-834169849fe7",
        "cursor": {
          "ref": "8e1f7652-d09f-46e2-b124-075a42c614ef",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "b0401321-0d27-4b98-9ad5-5d07357239a4"
        },
        "item": {
          "id": "24d3958a-e47c-4d3a-801a-834169849fe7",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e0ffdf6b-1840-4e69-b0bc-de747d4bbf5a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24d3958a-e47c-4d3a-801a-834169849fe7",
        "cursor": {
          "ref": "8e1f7652-d09f-46e2-b124-075a42c614ef",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "b0401321-0d27-4b98-9ad5-5d07357239a4"
        },
        "item": {
          "id": "24d3958a-e47c-4d3a-801a-834169849fe7",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e0ffdf6b-1840-4e69-b0bc-de747d4bbf5a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc650c97-6542-40f8-85be-948f359f0a29",
        "cursor": {
          "ref": "0fbadfb7-7357-4746-aa29-521166da7132",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "31eb1e46-4045-458d-aeee-06a54c1bb8c9"
        },
        "item": {
          "id": "cc650c97-6542-40f8-85be-948f359f0a29",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8f049541-bbb5-47e4-8b8e-37c434e11d4e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc650c97-6542-40f8-85be-948f359f0a29",
        "cursor": {
          "ref": "0fbadfb7-7357-4746-aa29-521166da7132",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "31eb1e46-4045-458d-aeee-06a54c1bb8c9"
        },
        "item": {
          "id": "cc650c97-6542-40f8-85be-948f359f0a29",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8f049541-bbb5-47e4-8b8e-37c434e11d4e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd1cd6d-ac5b-4edd-a571-f2be8413d110",
        "cursor": {
          "ref": "7d4a1eb3-e4d1-410b-98aa-eb3090ff132e",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "73c7d5ad-8fbf-4d0e-9c9c-cacb3370f8ad"
        },
        "item": {
          "id": "bdd1cd6d-ac5b-4edd-a571-f2be8413d110",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "539835b7-15f8-402a-9661-34a4dee39a7c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd1cd6d-ac5b-4edd-a571-f2be8413d110",
        "cursor": {
          "ref": "7d4a1eb3-e4d1-410b-98aa-eb3090ff132e",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "73c7d5ad-8fbf-4d0e-9c9c-cacb3370f8ad"
        },
        "item": {
          "id": "bdd1cd6d-ac5b-4edd-a571-f2be8413d110",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "539835b7-15f8-402a-9661-34a4dee39a7c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b22d2a54-0b11-4573-a0ff-ead08590681b",
        "cursor": {
          "ref": "8e1dc4c7-ba6b-460f-949c-1844b63bca27",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "c56c49cb-55c4-45d8-9928-1e53a2177f4a"
        },
        "item": {
          "id": "b22d2a54-0b11-4573-a0ff-ead08590681b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "080593c7-f537-47ad-94b1-f93f3d89a975",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b22d2a54-0b11-4573-a0ff-ead08590681b",
        "cursor": {
          "ref": "8e1dc4c7-ba6b-460f-949c-1844b63bca27",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "c56c49cb-55c4-45d8-9928-1e53a2177f4a"
        },
        "item": {
          "id": "b22d2a54-0b11-4573-a0ff-ead08590681b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "080593c7-f537-47ad-94b1-f93f3d89a975",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb9fd4cc-b1e5-4de6-ac78-9ccea279cbda",
        "cursor": {
          "ref": "897816ae-ddd4-470f-8eeb-fd58d3ca3ecf",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "9fa29e22-4fa7-4f5a-8200-06c5025bfb23"
        },
        "item": {
          "id": "fb9fd4cc-b1e5-4de6-ac78-9ccea279cbda",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "605d8732-c2fa-4c65-b6cf-f0e5e1de189e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb9fd4cc-b1e5-4de6-ac78-9ccea279cbda",
        "cursor": {
          "ref": "897816ae-ddd4-470f-8eeb-fd58d3ca3ecf",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "9fa29e22-4fa7-4f5a-8200-06c5025bfb23"
        },
        "item": {
          "id": "fb9fd4cc-b1e5-4de6-ac78-9ccea279cbda",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "605d8732-c2fa-4c65-b6cf-f0e5e1de189e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31a53650-c4b7-4570-ac2c-f31cf76a4f98",
        "cursor": {
          "ref": "dcefdc44-95d4-4c5c-b554-2790839e90a0",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "091dd5f5-158d-49b0-95aa-fb136bca681e"
        },
        "item": {
          "id": "31a53650-c4b7-4570-ac2c-f31cf76a4f98",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "93864ceb-f4b4-4d00-99ad-af9e8cb23d52",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31a53650-c4b7-4570-ac2c-f31cf76a4f98",
        "cursor": {
          "ref": "dcefdc44-95d4-4c5c-b554-2790839e90a0",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "091dd5f5-158d-49b0-95aa-fb136bca681e"
        },
        "item": {
          "id": "31a53650-c4b7-4570-ac2c-f31cf76a4f98",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "93864ceb-f4b4-4d00-99ad-af9e8cb23d52",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df8594be-392a-4834-b237-36b096fdd09b",
        "cursor": {
          "ref": "675eabf1-4626-406d-8095-33a5557e2b45",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "cdf28a54-33db-4dba-bd38-eb85ab690e58"
        },
        "item": {
          "id": "df8594be-392a-4834-b237-36b096fdd09b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3fa94ca1-a069-4610-952b-d9d96b8aae72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df8594be-392a-4834-b237-36b096fdd09b",
        "cursor": {
          "ref": "675eabf1-4626-406d-8095-33a5557e2b45",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "cdf28a54-33db-4dba-bd38-eb85ab690e58"
        },
        "item": {
          "id": "df8594be-392a-4834-b237-36b096fdd09b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3fa94ca1-a069-4610-952b-d9d96b8aae72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa8ad1de-dffc-4dc2-9642-1fba0f4fba6a",
        "cursor": {
          "ref": "db412849-7ee3-4482-b276-28e073c43635",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6cd833d3-ff73-4af8-b44d-8d43e313f057"
        },
        "item": {
          "id": "fa8ad1de-dffc-4dc2-9642-1fba0f4fba6a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "043d089d-a89b-48ec-9e0c-5c93f1fb2037",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa8ad1de-dffc-4dc2-9642-1fba0f4fba6a",
        "cursor": {
          "ref": "db412849-7ee3-4482-b276-28e073c43635",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6cd833d3-ff73-4af8-b44d-8d43e313f057"
        },
        "item": {
          "id": "fa8ad1de-dffc-4dc2-9642-1fba0f4fba6a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "043d089d-a89b-48ec-9e0c-5c93f1fb2037",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fcbc6e8-ffe4-4594-a189-4ab3e41c89f8",
        "cursor": {
          "ref": "0d411495-4cca-484d-8d59-1e081862bb5e",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "157e17ee-9d08-447d-8082-11ac1fb60c68"
        },
        "item": {
          "id": "9fcbc6e8-ffe4-4594-a189-4ab3e41c89f8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9988eedd-27f3-4bf2-ac3f-8f1ca616bdad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fcbc6e8-ffe4-4594-a189-4ab3e41c89f8",
        "cursor": {
          "ref": "0d411495-4cca-484d-8d59-1e081862bb5e",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "157e17ee-9d08-447d-8082-11ac1fb60c68"
        },
        "item": {
          "id": "9fcbc6e8-ffe4-4594-a189-4ab3e41c89f8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9988eedd-27f3-4bf2-ac3f-8f1ca616bdad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e88d585-aae3-4aaa-abc5-dc333db7cecd",
        "cursor": {
          "ref": "13552a3d-6ab8-4a30-9e08-5a040d718083",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "6e718a9c-4726-460e-8464-a2e68dca3e4b"
        },
        "item": {
          "id": "4e88d585-aae3-4aaa-abc5-dc333db7cecd",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "7a51e02e-0bf9-4a1d-8337-f4298d9a858f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e88d585-aae3-4aaa-abc5-dc333db7cecd",
        "cursor": {
          "ref": "13552a3d-6ab8-4a30-9e08-5a040d718083",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "6e718a9c-4726-460e-8464-a2e68dca3e4b"
        },
        "item": {
          "id": "4e88d585-aae3-4aaa-abc5-dc333db7cecd",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "7a51e02e-0bf9-4a1d-8337-f4298d9a858f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8de9f1db-270d-468e-b65b-41a6e7f631c8",
        "cursor": {
          "ref": "d33933fc-8ac3-4976-81e0-778d3e3bcc55",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "50e7bbbb-30af-4c87-8894-88bff32e0d71"
        },
        "item": {
          "id": "8de9f1db-270d-468e-b65b-41a6e7f631c8",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "cc8aa2ac-059d-4965-a8a3-c56af7220167",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8de9f1db-270d-468e-b65b-41a6e7f631c8",
        "cursor": {
          "ref": "d33933fc-8ac3-4976-81e0-778d3e3bcc55",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "50e7bbbb-30af-4c87-8894-88bff32e0d71"
        },
        "item": {
          "id": "8de9f1db-270d-468e-b65b-41a6e7f631c8",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "cc8aa2ac-059d-4965-a8a3-c56af7220167",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eae73ec6-4aa3-4c5c-9c8b-a898b5dc7597",
        "cursor": {
          "ref": "68601e4e-8f34-41d7-9f5b-651910789cf0",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e6cf1b0b-2f71-439d-93d0-c6cac301fb45"
        },
        "item": {
          "id": "eae73ec6-4aa3-4c5c-9c8b-a898b5dc7597",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b9f1f7a4-459b-4562-9b13-32f37e8da0e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eae73ec6-4aa3-4c5c-9c8b-a898b5dc7597",
        "cursor": {
          "ref": "68601e4e-8f34-41d7-9f5b-651910789cf0",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e6cf1b0b-2f71-439d-93d0-c6cac301fb45"
        },
        "item": {
          "id": "eae73ec6-4aa3-4c5c-9c8b-a898b5dc7597",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b9f1f7a4-459b-4562-9b13-32f37e8da0e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f0e1aa-d68e-4690-8765-5b9502d8cf0e",
        "cursor": {
          "ref": "7908c696-eb9f-4e0d-a0b4-6e51244e9313",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "8eac8778-78f6-4c2d-a203-661655994c27"
        },
        "item": {
          "id": "59f0e1aa-d68e-4690-8765-5b9502d8cf0e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "704f967e-acee-4775-a9ca-6e793debc628",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f0e1aa-d68e-4690-8765-5b9502d8cf0e",
        "cursor": {
          "ref": "7908c696-eb9f-4e0d-a0b4-6e51244e9313",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "8eac8778-78f6-4c2d-a203-661655994c27"
        },
        "item": {
          "id": "59f0e1aa-d68e-4690-8765-5b9502d8cf0e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "704f967e-acee-4775-a9ca-6e793debc628",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b404688d-6115-4edc-afb0-4581948068c4",
        "cursor": {
          "ref": "8a335aeb-7958-4182-abd6-0774b75d1a64",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f9086fbf-a6f5-44c4-8f8c-c87ec56c5610"
        },
        "item": {
          "id": "b404688d-6115-4edc-afb0-4581948068c4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6916bcf8-1b08-494e-a8d7-5474e3176891",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b404688d-6115-4edc-afb0-4581948068c4",
        "cursor": {
          "ref": "8a335aeb-7958-4182-abd6-0774b75d1a64",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f9086fbf-a6f5-44c4-8f8c-c87ec56c5610"
        },
        "item": {
          "id": "b404688d-6115-4edc-afb0-4581948068c4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6916bcf8-1b08-494e-a8d7-5474e3176891",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46194d63-70c3-4bf8-a455-f3323e8fa0e8",
        "cursor": {
          "ref": "74603ea5-e18b-4126-9965-30433c0cb89a",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "fdf4df59-8288-478e-9f8f-56397d7fc9c1"
        },
        "item": {
          "id": "46194d63-70c3-4bf8-a455-f3323e8fa0e8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "23609074-db0c-46d4-88c3-b489613d206a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46194d63-70c3-4bf8-a455-f3323e8fa0e8",
        "cursor": {
          "ref": "74603ea5-e18b-4126-9965-30433c0cb89a",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "fdf4df59-8288-478e-9f8f-56397d7fc9c1"
        },
        "item": {
          "id": "46194d63-70c3-4bf8-a455-f3323e8fa0e8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "23609074-db0c-46d4-88c3-b489613d206a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5d58dc1-31b6-4477-b564-f7c49a645028",
        "cursor": {
          "ref": "513cf9f2-5472-4cf2-bc1f-02f73114c56e",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "207e34f2-69cf-4baf-b75a-b518996f2a68"
        },
        "item": {
          "id": "c5d58dc1-31b6-4477-b564-f7c49a645028",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e364f5a4-2500-4afb-98f1-d5ebc05d2ee7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5d58dc1-31b6-4477-b564-f7c49a645028",
        "cursor": {
          "ref": "513cf9f2-5472-4cf2-bc1f-02f73114c56e",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "207e34f2-69cf-4baf-b75a-b518996f2a68"
        },
        "item": {
          "id": "c5d58dc1-31b6-4477-b564-f7c49a645028",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e364f5a4-2500-4afb-98f1-d5ebc05d2ee7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bff7b90-9961-46a8-9ff0-4e5e5c6d910b",
        "cursor": {
          "ref": "e0e614d1-3193-4eeb-80e5-6c6100a29235",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "30b42f65-1b9f-4a90-b4d0-0930fe46f666"
        },
        "item": {
          "id": "3bff7b90-9961-46a8-9ff0-4e5e5c6d910b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8e1657b1-1559-4f02-8f04-dc3787d35f47",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bff7b90-9961-46a8-9ff0-4e5e5c6d910b",
        "cursor": {
          "ref": "e0e614d1-3193-4eeb-80e5-6c6100a29235",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "30b42f65-1b9f-4a90-b4d0-0930fe46f666"
        },
        "item": {
          "id": "3bff7b90-9961-46a8-9ff0-4e5e5c6d910b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8e1657b1-1559-4f02-8f04-dc3787d35f47",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a96185-edf1-4c6f-b643-cb2efe3fb11e",
        "cursor": {
          "ref": "432020f2-539b-4e39-ae9e-e43b40f45919",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "0675097e-e079-497a-bd0e-3002354b330c"
        },
        "item": {
          "id": "45a96185-edf1-4c6f-b643-cb2efe3fb11e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7fbc9c10-193b-45b7-a2f2-62ba13f8d1a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a96185-edf1-4c6f-b643-cb2efe3fb11e",
        "cursor": {
          "ref": "432020f2-539b-4e39-ae9e-e43b40f45919",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "0675097e-e079-497a-bd0e-3002354b330c"
        },
        "item": {
          "id": "45a96185-edf1-4c6f-b643-cb2efe3fb11e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7fbc9c10-193b-45b7-a2f2-62ba13f8d1a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90feb373-2ef0-4733-a0af-5e37801103e9",
        "cursor": {
          "ref": "036351a1-d7ef-423e-9d8a-0670ea462359",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "bfa7a7e6-1898-4404-9d11-77c5da64887f"
        },
        "item": {
          "id": "90feb373-2ef0-4733-a0af-5e37801103e9",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e2833020-8654-42f9-b1b7-2bbcc14de72c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90feb373-2ef0-4733-a0af-5e37801103e9",
        "cursor": {
          "ref": "036351a1-d7ef-423e-9d8a-0670ea462359",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "bfa7a7e6-1898-4404-9d11-77c5da64887f"
        },
        "item": {
          "id": "90feb373-2ef0-4733-a0af-5e37801103e9",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e2833020-8654-42f9-b1b7-2bbcc14de72c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0a258e0-697c-47c2-9b1d-651e8abbcfad",
        "cursor": {
          "ref": "018eb85e-5a71-49dc-89de-86bf9aae2255",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "8222e378-9c65-4148-9a6c-2e81da37a6ec"
        },
        "item": {
          "id": "a0a258e0-697c-47c2-9b1d-651e8abbcfad",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "15ed67cb-e903-4ec5-b4c5-b3f864131363",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 135,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0a258e0-697c-47c2-9b1d-651e8abbcfad",
        "cursor": {
          "ref": "018eb85e-5a71-49dc-89de-86bf9aae2255",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "8222e378-9c65-4148-9a6c-2e81da37a6ec"
        },
        "item": {
          "id": "a0a258e0-697c-47c2-9b1d-651e8abbcfad",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "15ed67cb-e903-4ec5-b4c5-b3f864131363",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 135,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba73e84-d677-4280-bc31-226416c3ac99",
        "cursor": {
          "ref": "0d7c2ed0-22d0-4012-841a-58f085226331",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "33a9da44-7a38-494c-a0f9-13495b77c5b3"
        },
        "item": {
          "id": "eba73e84-d677-4280-bc31-226416c3ac99",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0c688605-f46a-4de5-9b20-9fb8cc67287e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba73e84-d677-4280-bc31-226416c3ac99",
        "cursor": {
          "ref": "0d7c2ed0-22d0-4012-841a-58f085226331",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "33a9da44-7a38-494c-a0f9-13495b77c5b3"
        },
        "item": {
          "id": "eba73e84-d677-4280-bc31-226416c3ac99",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0c688605-f46a-4de5-9b20-9fb8cc67287e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e558c3a7-be56-4b7b-a999-0f10a582dde3",
        "cursor": {
          "ref": "1a061e7f-c34e-4132-975d-77ae3327881c",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2ef1312c-8914-4f94-96e4-7af958a1f74f"
        },
        "item": {
          "id": "e558c3a7-be56-4b7b-a999-0f10a582dde3",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d5040f69-dd26-4088-a1d5-5144290c2207",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e558c3a7-be56-4b7b-a999-0f10a582dde3",
        "cursor": {
          "ref": "1a061e7f-c34e-4132-975d-77ae3327881c",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2ef1312c-8914-4f94-96e4-7af958a1f74f"
        },
        "item": {
          "id": "e558c3a7-be56-4b7b-a999-0f10a582dde3",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d5040f69-dd26-4088-a1d5-5144290c2207",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f75b675-6598-4e71-babc-1ce8d01c1a4a",
        "cursor": {
          "ref": "be4d677f-c52e-42e8-9d45-85fde1f4b6a9",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "46a8f785-7c5c-4f11-acc8-1d9782865f17"
        },
        "item": {
          "id": "8f75b675-6598-4e71-babc-1ce8d01c1a4a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "408f338d-dea2-4d7b-aa21-d1882ca71977",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f75b675-6598-4e71-babc-1ce8d01c1a4a",
        "cursor": {
          "ref": "be4d677f-c52e-42e8-9d45-85fde1f4b6a9",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "46a8f785-7c5c-4f11-acc8-1d9782865f17"
        },
        "item": {
          "id": "8f75b675-6598-4e71-babc-1ce8d01c1a4a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "408f338d-dea2-4d7b-aa21-d1882ca71977",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b25a9f-8037-4bd9-a857-d11f817bd556",
        "cursor": {
          "ref": "64c318f9-d675-4732-ad00-6a22def5cee4",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "198d7e25-a982-403d-8902-20436f3ede12"
        },
        "item": {
          "id": "87b25a9f-8037-4bd9-a857-d11f817bd556",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "af97a4ff-8525-4ded-be53-024d7c93920a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b25a9f-8037-4bd9-a857-d11f817bd556",
        "cursor": {
          "ref": "64c318f9-d675-4732-ad00-6a22def5cee4",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "198d7e25-a982-403d-8902-20436f3ede12"
        },
        "item": {
          "id": "87b25a9f-8037-4bd9-a857-d11f817bd556",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "af97a4ff-8525-4ded-be53-024d7c93920a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2822746-b14c-4eff-bdf0-64476b29b0cb",
        "cursor": {
          "ref": "1408904d-7f65-4a44-bd45-7716650ad7b5",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "abefdde7-ea1d-4880-8174-0bbf7082b45f"
        },
        "item": {
          "id": "a2822746-b14c-4eff-bdf0-64476b29b0cb",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "def756e4-e466-4e17-a166-def8dbf41f79",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2822746-b14c-4eff-bdf0-64476b29b0cb",
        "cursor": {
          "ref": "1408904d-7f65-4a44-bd45-7716650ad7b5",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "abefdde7-ea1d-4880-8174-0bbf7082b45f"
        },
        "item": {
          "id": "a2822746-b14c-4eff-bdf0-64476b29b0cb",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "def756e4-e466-4e17-a166-def8dbf41f79",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad42660c-b127-4c39-8236-28b7247ae627",
        "cursor": {
          "ref": "2f5088ed-9ec1-49c6-b518-7b3b6860bc9e",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "de3c1cc5-ed8c-4519-8a53-14cfd5393068"
        },
        "item": {
          "id": "ad42660c-b127-4c39-8236-28b7247ae627",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1bc98537-1d87-4edf-bc33-7265941f356a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad42660c-b127-4c39-8236-28b7247ae627",
        "cursor": {
          "ref": "2f5088ed-9ec1-49c6-b518-7b3b6860bc9e",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "de3c1cc5-ed8c-4519-8a53-14cfd5393068"
        },
        "item": {
          "id": "ad42660c-b127-4c39-8236-28b7247ae627",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1bc98537-1d87-4edf-bc33-7265941f356a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c308a2d6-81d4-4218-bc8c-c468bbeac130",
        "cursor": {
          "ref": "38abac62-2c18-4646-97cf-c9014d698d92",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "907a811d-53a3-4db6-b54b-e2020cebe0c3"
        },
        "item": {
          "id": "c308a2d6-81d4-4218-bc8c-c468bbeac130",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3306885f-c3cf-461c-8c8a-d9e537e8e2e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c308a2d6-81d4-4218-bc8c-c468bbeac130",
        "cursor": {
          "ref": "38abac62-2c18-4646-97cf-c9014d698d92",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "907a811d-53a3-4db6-b54b-e2020cebe0c3"
        },
        "item": {
          "id": "c308a2d6-81d4-4218-bc8c-c468bbeac130",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3306885f-c3cf-461c-8c8a-d9e537e8e2e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0ffa2a9-bfd2-43b4-8115-eb2cab559917",
        "cursor": {
          "ref": "762740d9-5198-432a-8ad0-073f0c01f884",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "fe7e89ed-5be6-4b6c-8db6-71b5be62142d"
        },
        "item": {
          "id": "a0ffa2a9-bfd2-43b4-8115-eb2cab559917",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "16bb5213-099f-4154-9dea-439105c98e08",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0ffa2a9-bfd2-43b4-8115-eb2cab559917",
        "cursor": {
          "ref": "762740d9-5198-432a-8ad0-073f0c01f884",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "fe7e89ed-5be6-4b6c-8db6-71b5be62142d"
        },
        "item": {
          "id": "a0ffa2a9-bfd2-43b4-8115-eb2cab559917",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "16bb5213-099f-4154-9dea-439105c98e08",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90b8992f-9de6-4799-b52a-5248ed6c05eb",
        "cursor": {
          "ref": "38ee2502-bc25-4dd4-9e69-b71962c49861",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "838c8e5c-7023-4ad3-a756-fc58d127349f"
        },
        "item": {
          "id": "90b8992f-9de6-4799-b52a-5248ed6c05eb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9a7fe2d0-f255-4b23-b2a4-ba3ba7fd6520",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90b8992f-9de6-4799-b52a-5248ed6c05eb",
        "cursor": {
          "ref": "38ee2502-bc25-4dd4-9e69-b71962c49861",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "838c8e5c-7023-4ad3-a756-fc58d127349f"
        },
        "item": {
          "id": "90b8992f-9de6-4799-b52a-5248ed6c05eb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9a7fe2d0-f255-4b23-b2a4-ba3ba7fd6520",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f51fed5-7ca1-4ad1-b8d4-03829153376d",
        "cursor": {
          "ref": "6acc7392-c470-46d1-a477-7a985255dcdb",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "88daad40-84e4-4cf5-ae86-d410cdc22e72"
        },
        "item": {
          "id": "7f51fed5-7ca1-4ad1-b8d4-03829153376d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "674cd054-32f9-43b8-840c-b060b5e6de32",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f51fed5-7ca1-4ad1-b8d4-03829153376d",
        "cursor": {
          "ref": "6acc7392-c470-46d1-a477-7a985255dcdb",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "88daad40-84e4-4cf5-ae86-d410cdc22e72"
        },
        "item": {
          "id": "7f51fed5-7ca1-4ad1-b8d4-03829153376d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "674cd054-32f9-43b8-840c-b060b5e6de32",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f864e6b5-850e-48f3-a3cd-7df211839487",
        "cursor": {
          "ref": "17f7bb38-2faf-4ba9-b599-b783159b0bd4",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "4d1f3db9-a6b0-4db1-9f78-149bcd6dd3d9"
        },
        "item": {
          "id": "f864e6b5-850e-48f3-a3cd-7df211839487",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "0e602f3f-65b2-4681-92c7-31fc2401934d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f864e6b5-850e-48f3-a3cd-7df211839487",
        "cursor": {
          "ref": "17f7bb38-2faf-4ba9-b599-b783159b0bd4",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "4d1f3db9-a6b0-4db1-9f78-149bcd6dd3d9"
        },
        "item": {
          "id": "f864e6b5-850e-48f3-a3cd-7df211839487",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "0e602f3f-65b2-4681-92c7-31fc2401934d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0851ce27-16e9-4554-b2e1-e31ebdeabae6",
        "cursor": {
          "ref": "f4ccbf6f-fc9f-4218-9272-39ff4b89b208",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "20902feb-ca7e-442d-836b-bbc1ec46e0d4"
        },
        "item": {
          "id": "0851ce27-16e9-4554-b2e1-e31ebdeabae6",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9b280570-e822-455f-96c5-a768f4771ef8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0851ce27-16e9-4554-b2e1-e31ebdeabae6",
        "cursor": {
          "ref": "f4ccbf6f-fc9f-4218-9272-39ff4b89b208",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "20902feb-ca7e-442d-836b-bbc1ec46e0d4"
        },
        "item": {
          "id": "0851ce27-16e9-4554-b2e1-e31ebdeabae6",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9b280570-e822-455f-96c5-a768f4771ef8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "413a6e7f-c334-428b-a180-c56577dd0887",
        "cursor": {
          "ref": "d9ffe950-0b29-4c9b-b540-295e12dd9c78",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4dd619b1-7a3e-4603-a3dc-72eb43e13677"
        },
        "item": {
          "id": "413a6e7f-c334-428b-a180-c56577dd0887",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "09a9ff71-0b5f-4825-93c8-efed9ff54a2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "413a6e7f-c334-428b-a180-c56577dd0887",
        "cursor": {
          "ref": "d9ffe950-0b29-4c9b-b540-295e12dd9c78",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4dd619b1-7a3e-4603-a3dc-72eb43e13677"
        },
        "item": {
          "id": "413a6e7f-c334-428b-a180-c56577dd0887",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "09a9ff71-0b5f-4825-93c8-efed9ff54a2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "217e29a0-0b54-4ab3-a669-65cc41a1fff0",
        "cursor": {
          "ref": "7405215d-3e90-44c6-a49b-4ac9121a598d",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "15fc13cf-124c-45ff-b64b-3bd824dc32d2"
        },
        "item": {
          "id": "217e29a0-0b54-4ab3-a669-65cc41a1fff0",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "037d2bdd-61c5-407a-bbe0-80b85533eee8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "217e29a0-0b54-4ab3-a669-65cc41a1fff0",
        "cursor": {
          "ref": "7405215d-3e90-44c6-a49b-4ac9121a598d",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "15fc13cf-124c-45ff-b64b-3bd824dc32d2"
        },
        "item": {
          "id": "217e29a0-0b54-4ab3-a669-65cc41a1fff0",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "037d2bdd-61c5-407a-bbe0-80b85533eee8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d3010eb-4d43-45ef-bccf-ac489331e717",
        "cursor": {
          "ref": "a02c3d9e-1acc-417a-8222-e04e90fd34a5",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "17982710-effa-41ca-818a-a9d8cf7d2d8f"
        },
        "item": {
          "id": "5d3010eb-4d43-45ef-bccf-ac489331e717",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "15979ecc-da79-4eb5-90f8-2044c55c5aa0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d3010eb-4d43-45ef-bccf-ac489331e717",
        "cursor": {
          "ref": "a02c3d9e-1acc-417a-8222-e04e90fd34a5",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "17982710-effa-41ca-818a-a9d8cf7d2d8f"
        },
        "item": {
          "id": "5d3010eb-4d43-45ef-bccf-ac489331e717",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "15979ecc-da79-4eb5-90f8-2044c55c5aa0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dfdf7b2-32b7-4f62-8ec5-6d619a8861e1",
        "cursor": {
          "ref": "af017211-38c7-4094-b5ea-286d22699408",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "842c2309-945e-4804-9073-74588ddad9ee"
        },
        "item": {
          "id": "3dfdf7b2-32b7-4f62-8ec5-6d619a8861e1",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8dd348d5-b993-468c-b991-5f430db88968",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dfdf7b2-32b7-4f62-8ec5-6d619a8861e1",
        "cursor": {
          "ref": "af017211-38c7-4094-b5ea-286d22699408",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "842c2309-945e-4804-9073-74588ddad9ee"
        },
        "item": {
          "id": "3dfdf7b2-32b7-4f62-8ec5-6d619a8861e1",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8dd348d5-b993-468c-b991-5f430db88968",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4966fff-a6a0-4c31-bfda-6419c1596161",
        "cursor": {
          "ref": "31ef5942-0576-41b5-b62b-763fbc7bfd5f",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b0b61a8b-e064-40eb-99a7-d5550d215b9d"
        },
        "item": {
          "id": "c4966fff-a6a0-4c31-bfda-6419c1596161",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "81df37ff-2ffb-4d1a-8d83-e8004bab02cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4966fff-a6a0-4c31-bfda-6419c1596161",
        "cursor": {
          "ref": "31ef5942-0576-41b5-b62b-763fbc7bfd5f",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b0b61a8b-e064-40eb-99a7-d5550d215b9d"
        },
        "item": {
          "id": "c4966fff-a6a0-4c31-bfda-6419c1596161",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "81df37ff-2ffb-4d1a-8d83-e8004bab02cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d493e422-f83f-4b78-b2c4-c0b832c019db",
        "cursor": {
          "ref": "c734a0b9-07ae-47a7-ad71-29d7426f06c2",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "58dffd53-7723-4674-b6ab-a588f7dd85fc"
        },
        "item": {
          "id": "d493e422-f83f-4b78-b2c4-c0b832c019db",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "bd98cce0-65b6-449c-8c68-a387f5d032cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d493e422-f83f-4b78-b2c4-c0b832c019db",
        "cursor": {
          "ref": "c734a0b9-07ae-47a7-ad71-29d7426f06c2",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "58dffd53-7723-4674-b6ab-a588f7dd85fc"
        },
        "item": {
          "id": "d493e422-f83f-4b78-b2c4-c0b832c019db",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "bd98cce0-65b6-449c-8c68-a387f5d032cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8909118-fb2b-435c-99c2-7a27208f6192",
        "cursor": {
          "ref": "b8cb8818-7933-4a26-828b-61c030b204b5",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e72dc0de-b989-4efe-afb3-9a6f706dd2cd"
        },
        "item": {
          "id": "e8909118-fb2b-435c-99c2-7a27208f6192",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "efee6ebc-401b-4420-8ba8-d3dd96c5055e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8909118-fb2b-435c-99c2-7a27208f6192",
        "cursor": {
          "ref": "b8cb8818-7933-4a26-828b-61c030b204b5",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e72dc0de-b989-4efe-afb3-9a6f706dd2cd"
        },
        "item": {
          "id": "e8909118-fb2b-435c-99c2-7a27208f6192",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "efee6ebc-401b-4420-8ba8-d3dd96c5055e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77040461-64d0-47d4-b3a1-cf5ba747d24b",
        "cursor": {
          "ref": "beb51d29-c680-469d-8a4f-a66dced23178",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "38b8c6ac-3ad6-45fd-a074-b4196bf0cb4e"
        },
        "item": {
          "id": "77040461-64d0-47d4-b3a1-cf5ba747d24b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "df3a032e-3a2f-4a13-844a-e93f6b852c03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77040461-64d0-47d4-b3a1-cf5ba747d24b",
        "cursor": {
          "ref": "beb51d29-c680-469d-8a4f-a66dced23178",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "38b8c6ac-3ad6-45fd-a074-b4196bf0cb4e"
        },
        "item": {
          "id": "77040461-64d0-47d4-b3a1-cf5ba747d24b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "df3a032e-3a2f-4a13-844a-e93f6b852c03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40cdbd4f-896a-462b-b393-5bdccb34f996",
        "cursor": {
          "ref": "6268eb01-75ba-4365-8eff-c3f1b5448362",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "5181bfe0-66bf-4799-b573-18bbbcb07eee"
        },
        "item": {
          "id": "40cdbd4f-896a-462b-b393-5bdccb34f996",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "7eae07af-1521-4b8d-a539-5e9fb3e6a4b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40cdbd4f-896a-462b-b393-5bdccb34f996",
        "cursor": {
          "ref": "6268eb01-75ba-4365-8eff-c3f1b5448362",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "5181bfe0-66bf-4799-b573-18bbbcb07eee"
        },
        "item": {
          "id": "40cdbd4f-896a-462b-b393-5bdccb34f996",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "7eae07af-1521-4b8d-a539-5e9fb3e6a4b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feafe020-520b-460e-b6eb-d278534b5c17",
        "cursor": {
          "ref": "dfe7e735-2f2b-499e-a71a-7db152b33f3a",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "7fa6ba45-596f-4dce-a10e-f3ecb053a686"
        },
        "item": {
          "id": "feafe020-520b-460e-b6eb-d278534b5c17",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b81cc16c-637f-4538-b087-043b42ea0c15",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feafe020-520b-460e-b6eb-d278534b5c17",
        "cursor": {
          "ref": "dfe7e735-2f2b-499e-a71a-7db152b33f3a",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "7fa6ba45-596f-4dce-a10e-f3ecb053a686"
        },
        "item": {
          "id": "feafe020-520b-460e-b6eb-d278534b5c17",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b81cc16c-637f-4538-b087-043b42ea0c15",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b904f958-30ca-4a54-b1c4-6ebb07fde7cf",
        "cursor": {
          "ref": "edfc2ef6-f4bd-4087-81ee-48e6c4faa436",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "14e2305e-8f6a-4741-821a-987429708639"
        },
        "item": {
          "id": "b904f958-30ca-4a54-b1c4-6ebb07fde7cf",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "76fd6ad9-8bfc-4281-86a1-b3f08f8c441e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b904f958-30ca-4a54-b1c4-6ebb07fde7cf",
        "cursor": {
          "ref": "edfc2ef6-f4bd-4087-81ee-48e6c4faa436",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "14e2305e-8f6a-4741-821a-987429708639"
        },
        "item": {
          "id": "b904f958-30ca-4a54-b1c4-6ebb07fde7cf",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "76fd6ad9-8bfc-4281-86a1-b3f08f8c441e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc963dc-9b75-4270-82b8-d57c075a8e55",
        "cursor": {
          "ref": "4a6c164a-7bec-4ac5-b448-6f3a93610c66",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "46616c12-ad07-4dc5-bf76-4e7bcbf70959"
        },
        "item": {
          "id": "dcc963dc-9b75-4270-82b8-d57c075a8e55",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "bd120c67-8b0e-4a07-985c-14339ffe0954",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc963dc-9b75-4270-82b8-d57c075a8e55",
        "cursor": {
          "ref": "4a6c164a-7bec-4ac5-b448-6f3a93610c66",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "46616c12-ad07-4dc5-bf76-4e7bcbf70959"
        },
        "item": {
          "id": "dcc963dc-9b75-4270-82b8-d57c075a8e55",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "bd120c67-8b0e-4a07-985c-14339ffe0954",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71639661-1cc2-4736-86de-8c48d786cb7d",
        "cursor": {
          "ref": "854a9b12-66de-4775-92aa-a18e0942d925",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "6f35402a-8391-47eb-84e3-72048a4ed3e8"
        },
        "item": {
          "id": "71639661-1cc2-4736-86de-8c48d786cb7d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "02176110-4a37-4fee-a62a-d46fe1bdfbe4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71639661-1cc2-4736-86de-8c48d786cb7d",
        "cursor": {
          "ref": "854a9b12-66de-4775-92aa-a18e0942d925",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "6f35402a-8391-47eb-84e3-72048a4ed3e8"
        },
        "item": {
          "id": "71639661-1cc2-4736-86de-8c48d786cb7d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "02176110-4a37-4fee-a62a-d46fe1bdfbe4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65badd46-5281-4704-b486-c5051b4b3434",
        "cursor": {
          "ref": "4cac7324-8592-41eb-9986-29c656a6259a",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "1b2214d5-c65b-4bb9-8d8a-7d812394ca17"
        },
        "item": {
          "id": "65badd46-5281-4704-b486-c5051b4b3434",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "fc59a79b-103c-4e50-9ad6-2d781cdcb072",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65badd46-5281-4704-b486-c5051b4b3434",
        "cursor": {
          "ref": "4cac7324-8592-41eb-9986-29c656a6259a",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "1b2214d5-c65b-4bb9-8d8a-7d812394ca17"
        },
        "item": {
          "id": "65badd46-5281-4704-b486-c5051b4b3434",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "fc59a79b-103c-4e50-9ad6-2d781cdcb072",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d5c58c0-ff1d-4045-b834-a5837e4f24d6",
        "cursor": {
          "ref": "0439a451-08ed-456b-8169-c9be6c207483",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e9bffc32-7340-45b8-ae11-e64646baf0d9"
        },
        "item": {
          "id": "4d5c58c0-ff1d-4045-b834-a5837e4f24d6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4491f094-e02b-4156-8606-3f9cca859824",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d5c58c0-ff1d-4045-b834-a5837e4f24d6",
        "cursor": {
          "ref": "0439a451-08ed-456b-8169-c9be6c207483",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e9bffc32-7340-45b8-ae11-e64646baf0d9"
        },
        "item": {
          "id": "4d5c58c0-ff1d-4045-b834-a5837e4f24d6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4491f094-e02b-4156-8606-3f9cca859824",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1623e896-a361-4030-8fec-65f9f714ec95",
        "cursor": {
          "ref": "1c0bcf61-2ef7-4e63-8e8c-eb12e37f7fa9",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "d7247547-7a9f-4360-9fcd-b70c17b87157"
        },
        "item": {
          "id": "1623e896-a361-4030-8fec-65f9f714ec95",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ddecc0c0-4710-4421-93af-c2a563fe66fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1623e896-a361-4030-8fec-65f9f714ec95",
        "cursor": {
          "ref": "1c0bcf61-2ef7-4e63-8e8c-eb12e37f7fa9",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "d7247547-7a9f-4360-9fcd-b70c17b87157"
        },
        "item": {
          "id": "1623e896-a361-4030-8fec-65f9f714ec95",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ddecc0c0-4710-4421-93af-c2a563fe66fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "193c85e0-dab3-41ac-b798-7d9e456c8f06",
        "cursor": {
          "ref": "842cca7f-edd0-4a7a-add4-9433da4c578f",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f791fae6-c276-4f9f-b3b6-5265824a9148"
        },
        "item": {
          "id": "193c85e0-dab3-41ac-b798-7d9e456c8f06",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d7153489-43a9-492c-b481-5f175da93941",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "193c85e0-dab3-41ac-b798-7d9e456c8f06",
        "cursor": {
          "ref": "842cca7f-edd0-4a7a-add4-9433da4c578f",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f791fae6-c276-4f9f-b3b6-5265824a9148"
        },
        "item": {
          "id": "193c85e0-dab3-41ac-b798-7d9e456c8f06",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d7153489-43a9-492c-b481-5f175da93941",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e3beada-a053-4a58-8f07-40903b987bb8",
        "cursor": {
          "ref": "ae3d914c-6d13-450d-9758-79680f089d2d",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b6e7c2d2-1781-4dc6-bb8c-c21fe15c2cc0"
        },
        "item": {
          "id": "4e3beada-a053-4a58-8f07-40903b987bb8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "27d2740f-6211-4baf-b55b-99459c608042",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e3beada-a053-4a58-8f07-40903b987bb8",
        "cursor": {
          "ref": "ae3d914c-6d13-450d-9758-79680f089d2d",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b6e7c2d2-1781-4dc6-bb8c-c21fe15c2cc0"
        },
        "item": {
          "id": "4e3beada-a053-4a58-8f07-40903b987bb8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "27d2740f-6211-4baf-b55b-99459c608042",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7607c97c-5295-4195-98e7-aafc691f0487",
        "cursor": {
          "ref": "c21a36be-dd92-4ebc-8bc1-06c03f001cff",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "76005eff-8466-4e8e-83e3-d9e42edf9306"
        },
        "item": {
          "id": "7607c97c-5295-4195-98e7-aafc691f0487",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0de64e94-d465-4fc5-a69c-488f5757f54e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7607c97c-5295-4195-98e7-aafc691f0487",
        "cursor": {
          "ref": "c21a36be-dd92-4ebc-8bc1-06c03f001cff",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "76005eff-8466-4e8e-83e3-d9e42edf9306"
        },
        "item": {
          "id": "7607c97c-5295-4195-98e7-aafc691f0487",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0de64e94-d465-4fc5-a69c-488f5757f54e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3c63e80-0d43-47aa-bb09-b569f5269dd1",
        "cursor": {
          "ref": "a882ed37-65e1-4b5f-8f15-691df5bbcebb",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "05008e12-4960-4600-83b8-63770e4099d7"
        },
        "item": {
          "id": "e3c63e80-0d43-47aa-bb09-b569f5269dd1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d3a7ec7b-eea7-44e1-afc6-c7c4abacb216",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3c63e80-0d43-47aa-bb09-b569f5269dd1",
        "cursor": {
          "ref": "a882ed37-65e1-4b5f-8f15-691df5bbcebb",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "05008e12-4960-4600-83b8-63770e4099d7"
        },
        "item": {
          "id": "e3c63e80-0d43-47aa-bb09-b569f5269dd1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d3a7ec7b-eea7-44e1-afc6-c7c4abacb216",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7010bfbb-5fce-47e6-81ea-fc073dd376b3",
        "cursor": {
          "ref": "c80f24ba-4d85-4684-9988-bd6bf7d4f1a1",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f603328d-e468-4d01-beb2-f60fcc40d8a8"
        },
        "item": {
          "id": "7010bfbb-5fce-47e6-81ea-fc073dd376b3",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3b19a8d8-2750-4fb1-a000-0d249c5c2cf1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7010bfbb-5fce-47e6-81ea-fc073dd376b3",
        "cursor": {
          "ref": "c80f24ba-4d85-4684-9988-bd6bf7d4f1a1",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f603328d-e468-4d01-beb2-f60fcc40d8a8"
        },
        "item": {
          "id": "7010bfbb-5fce-47e6-81ea-fc073dd376b3",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3b19a8d8-2750-4fb1-a000-0d249c5c2cf1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9b44f5a-102b-400f-a2be-d4c204dfcb35",
        "cursor": {
          "ref": "de6aa8d6-178c-4cd9-abbb-a52b6753896d",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "bc80e30d-7e02-4872-9c49-8b160e04d7f2"
        },
        "item": {
          "id": "a9b44f5a-102b-400f-a2be-d4c204dfcb35",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "dc2061ff-a95d-4d55-98d3-777345dbf8cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9b44f5a-102b-400f-a2be-d4c204dfcb35",
        "cursor": {
          "ref": "de6aa8d6-178c-4cd9-abbb-a52b6753896d",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "bc80e30d-7e02-4872-9c49-8b160e04d7f2"
        },
        "item": {
          "id": "a9b44f5a-102b-400f-a2be-d4c204dfcb35",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "dc2061ff-a95d-4d55-98d3-777345dbf8cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3657e1a1-d09e-41b5-8457-d984368b79cd",
        "cursor": {
          "ref": "d6ef8ee7-0bba-4474-a237-8ce35d007861",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c0ff72b6-d040-4169-817e-e1252875f18b"
        },
        "item": {
          "id": "3657e1a1-d09e-41b5-8457-d984368b79cd",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a737e566-03d7-45b5-b409-23f56ac56631",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3657e1a1-d09e-41b5-8457-d984368b79cd",
        "cursor": {
          "ref": "d6ef8ee7-0bba-4474-a237-8ce35d007861",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c0ff72b6-d040-4169-817e-e1252875f18b"
        },
        "item": {
          "id": "3657e1a1-d09e-41b5-8457-d984368b79cd",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a737e566-03d7-45b5-b409-23f56ac56631",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bcf9237-6fcf-43d6-80f2-4d02edbcfe40",
        "cursor": {
          "ref": "7f6168b4-b197-4a9c-b157-54ef8fed51b7",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b300a4a5-416c-4fb8-b006-46e4c5cee9ba"
        },
        "item": {
          "id": "2bcf9237-6fcf-43d6-80f2-4d02edbcfe40",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b0b2f9a5-1955-4e87-8b27-d0c2f055d71e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bcf9237-6fcf-43d6-80f2-4d02edbcfe40",
        "cursor": {
          "ref": "7f6168b4-b197-4a9c-b157-54ef8fed51b7",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b300a4a5-416c-4fb8-b006-46e4c5cee9ba"
        },
        "item": {
          "id": "2bcf9237-6fcf-43d6-80f2-4d02edbcfe40",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b0b2f9a5-1955-4e87-8b27-d0c2f055d71e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba178980-4447-4cd6-96f5-b0ef3a303c57",
        "cursor": {
          "ref": "34224e18-e1de-4131-bbb6-852d7156c03f",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "98ed33b1-60a3-482c-8c69-9ec4d45eed2c"
        },
        "item": {
          "id": "ba178980-4447-4cd6-96f5-b0ef3a303c57",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "52de118e-eab5-47a2-93ec-cc7495aab655",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba178980-4447-4cd6-96f5-b0ef3a303c57",
        "cursor": {
          "ref": "34224e18-e1de-4131-bbb6-852d7156c03f",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "98ed33b1-60a3-482c-8c69-9ec4d45eed2c"
        },
        "item": {
          "id": "ba178980-4447-4cd6-96f5-b0ef3a303c57",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "52de118e-eab5-47a2-93ec-cc7495aab655",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83db505c-5152-4d99-9f1c-e76c363b4dd0",
        "cursor": {
          "ref": "96539d58-0688-41b0-b123-0004909b2d18",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "892f5d22-a382-4f31-89b3-28ee2852fb72"
        },
        "item": {
          "id": "83db505c-5152-4d99-9f1c-e76c363b4dd0",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "9f210bbd-f88f-4e86-b264-76bcf6196c7b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83db505c-5152-4d99-9f1c-e76c363b4dd0",
        "cursor": {
          "ref": "96539d58-0688-41b0-b123-0004909b2d18",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "892f5d22-a382-4f31-89b3-28ee2852fb72"
        },
        "item": {
          "id": "83db505c-5152-4d99-9f1c-e76c363b4dd0",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "9f210bbd-f88f-4e86-b264-76bcf6196c7b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e092703-45d4-4f7e-bc52-3c8fbd66df8e",
        "cursor": {
          "ref": "c283fda3-d528-49ae-ba62-a4005a2ca04e",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "02af7328-fd25-46db-8b2c-e55a906d6760"
        },
        "item": {
          "id": "8e092703-45d4-4f7e-bc52-3c8fbd66df8e",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "74944a27-1ad7-4de3-9967-9ae72b65d0f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e092703-45d4-4f7e-bc52-3c8fbd66df8e",
        "cursor": {
          "ref": "c283fda3-d528-49ae-ba62-a4005a2ca04e",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "02af7328-fd25-46db-8b2c-e55a906d6760"
        },
        "item": {
          "id": "8e092703-45d4-4f7e-bc52-3c8fbd66df8e",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "74944a27-1ad7-4de3-9967-9ae72b65d0f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5791e4c3-8564-4998-be5c-6bbee568e09a",
        "cursor": {
          "ref": "78d08439-960a-4428-89dd-0e1c5c0e57c8",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a6750a4c-c535-4e36-8c20-8bd694506118"
        },
        "item": {
          "id": "5791e4c3-8564-4998-be5c-6bbee568e09a",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "f4055321-95d6-4396-b5bc-15a3cd490039",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5791e4c3-8564-4998-be5c-6bbee568e09a",
        "cursor": {
          "ref": "78d08439-960a-4428-89dd-0e1c5c0e57c8",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a6750a4c-c535-4e36-8c20-8bd694506118"
        },
        "item": {
          "id": "5791e4c3-8564-4998-be5c-6bbee568e09a",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "f4055321-95d6-4396-b5bc-15a3cd490039",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "602aa731-cd2a-418b-a849-d1d02362e29b",
        "cursor": {
          "ref": "64909b50-5fff-43d5-9be8-c7a17e862197",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "9f736e6d-6dd8-416f-9614-eecb4361283c"
        },
        "item": {
          "id": "602aa731-cd2a-418b-a849-d1d02362e29b",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "db9af8f5-2d8f-489d-965a-452ffedae21a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "602aa731-cd2a-418b-a849-d1d02362e29b",
        "cursor": {
          "ref": "64909b50-5fff-43d5-9be8-c7a17e862197",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "9f736e6d-6dd8-416f-9614-eecb4361283c"
        },
        "item": {
          "id": "602aa731-cd2a-418b-a849-d1d02362e29b",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "db9af8f5-2d8f-489d-965a-452ffedae21a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83695804-5a5e-491b-957b-38964e1b675b",
        "cursor": {
          "ref": "50564d1e-e8f1-45ce-8bf9-197297285d51",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "694d2502-ed31-45aa-9c9d-4fa72d72ef04"
        },
        "item": {
          "id": "83695804-5a5e-491b-957b-38964e1b675b",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "0181945c-d9fc-4b15-915d-6d0d8875fae1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83695804-5a5e-491b-957b-38964e1b675b",
        "cursor": {
          "ref": "50564d1e-e8f1-45ce-8bf9-197297285d51",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "694d2502-ed31-45aa-9c9d-4fa72d72ef04"
        },
        "item": {
          "id": "83695804-5a5e-491b-957b-38964e1b675b",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "0181945c-d9fc-4b15-915d-6d0d8875fae1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09a99beb-35c2-404f-9400-10ee63784966",
        "cursor": {
          "ref": "4f3a6ec0-3ddb-4656-ae4a-78463b55dc7c",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d88139f3-51c5-431e-8774-d40094967d9f"
        },
        "item": {
          "id": "09a99beb-35c2-404f-9400-10ee63784966",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "db8dcd2a-400a-49e2-b301-be3b3f7c9a9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09a99beb-35c2-404f-9400-10ee63784966",
        "cursor": {
          "ref": "4f3a6ec0-3ddb-4656-ae4a-78463b55dc7c",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d88139f3-51c5-431e-8774-d40094967d9f"
        },
        "item": {
          "id": "09a99beb-35c2-404f-9400-10ee63784966",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "db8dcd2a-400a-49e2-b301-be3b3f7c9a9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1350a0f6-103d-4e80-9e34-6624713ad800",
        "cursor": {
          "ref": "fd24cd1c-35bf-40cd-bfed-1506925ffe2e",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "fbd2fe9d-9c0d-4c36-b817-719aa6680098"
        },
        "item": {
          "id": "1350a0f6-103d-4e80-9e34-6624713ad800",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2b3d19ff-2d84-4a62-bc92-b388cc9122c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1350a0f6-103d-4e80-9e34-6624713ad800",
        "cursor": {
          "ref": "fd24cd1c-35bf-40cd-bfed-1506925ffe2e",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "fbd2fe9d-9c0d-4c36-b817-719aa6680098"
        },
        "item": {
          "id": "1350a0f6-103d-4e80-9e34-6624713ad800",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2b3d19ff-2d84-4a62-bc92-b388cc9122c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d44b749-d6ef-452c-8b00-68eae9127c9c",
        "cursor": {
          "ref": "4515173e-0775-4d47-b2fc-a489a744318c",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "e5b1ee35-8f87-4611-aed6-c4e54d9fa752"
        },
        "item": {
          "id": "9d44b749-d6ef-452c-8b00-68eae9127c9c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9a91395d-adef-4368-839d-ef5ec827de84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d44b749-d6ef-452c-8b00-68eae9127c9c",
        "cursor": {
          "ref": "4515173e-0775-4d47-b2fc-a489a744318c",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "e5b1ee35-8f87-4611-aed6-c4e54d9fa752"
        },
        "item": {
          "id": "9d44b749-d6ef-452c-8b00-68eae9127c9c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9a91395d-adef-4368-839d-ef5ec827de84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c7b74f4-5e86-4f7c-9a9c-cc79c26418af",
        "cursor": {
          "ref": "7bf73cfe-6f35-405f-986d-0cfe9372ad51",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "affb59fb-c02c-4e39-984a-beccbe57a887"
        },
        "item": {
          "id": "4c7b74f4-5e86-4f7c-9a9c-cc79c26418af",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "60372efe-e0a8-4ae6-b97c-46d81c72d2fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c7b74f4-5e86-4f7c-9a9c-cc79c26418af",
        "cursor": {
          "ref": "7bf73cfe-6f35-405f-986d-0cfe9372ad51",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "affb59fb-c02c-4e39-984a-beccbe57a887"
        },
        "item": {
          "id": "4c7b74f4-5e86-4f7c-9a9c-cc79c26418af",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "60372efe-e0a8-4ae6-b97c-46d81c72d2fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b5d23ad-0fb0-4eda-a0c7-e2cc035db480",
        "cursor": {
          "ref": "4504a234-5093-4cf2-b799-f395ec4c7855",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b3172b62-147c-4818-933a-9fc23e00f8ac"
        },
        "item": {
          "id": "8b5d23ad-0fb0-4eda-a0c7-e2cc035db480",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8e7721e4-0e24-4be0-93c7-23cd3f850de0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b5d23ad-0fb0-4eda-a0c7-e2cc035db480",
        "cursor": {
          "ref": "4504a234-5093-4cf2-b799-f395ec4c7855",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b3172b62-147c-4818-933a-9fc23e00f8ac"
        },
        "item": {
          "id": "8b5d23ad-0fb0-4eda-a0c7-e2cc035db480",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8e7721e4-0e24-4be0-93c7-23cd3f850de0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76188879-d718-48fd-9ae5-d6a479c2fb8d",
        "cursor": {
          "ref": "92e7f85e-ff51-4abf-b6b2-830e3a070578",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f9d9edb3-1088-46f3-ae77-dbcb6f95ed21"
        },
        "item": {
          "id": "76188879-d718-48fd-9ae5-d6a479c2fb8d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "25e2c014-2447-41ca-ae44-6e38e9e9c06a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76188879-d718-48fd-9ae5-d6a479c2fb8d",
        "cursor": {
          "ref": "92e7f85e-ff51-4abf-b6b2-830e3a070578",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f9d9edb3-1088-46f3-ae77-dbcb6f95ed21"
        },
        "item": {
          "id": "76188879-d718-48fd-9ae5-d6a479c2fb8d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "25e2c014-2447-41ca-ae44-6e38e9e9c06a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe8e781e-bdb6-4ee1-8449-dddee0d8f272",
        "cursor": {
          "ref": "394af790-cad4-4fd6-a012-11f79eb8757d",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "e879b4a6-f1d2-4aa9-bfb5-bf5f0f828b6b"
        },
        "item": {
          "id": "fe8e781e-bdb6-4ee1-8449-dddee0d8f272",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e5273823-3d8c-4410-aab7-a4d968bfc145",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe8e781e-bdb6-4ee1-8449-dddee0d8f272",
        "cursor": {
          "ref": "394af790-cad4-4fd6-a012-11f79eb8757d",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "e879b4a6-f1d2-4aa9-bfb5-bf5f0f828b6b"
        },
        "item": {
          "id": "fe8e781e-bdb6-4ee1-8449-dddee0d8f272",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e5273823-3d8c-4410-aab7-a4d968bfc145",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d0b184b-adbe-47ad-ad8e-3c1d09780748",
        "cursor": {
          "ref": "b37e3275-0409-47a2-b962-c950c3e18b0e",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "6631cbe5-5e4b-49f5-aeef-b25b1206a34b"
        },
        "item": {
          "id": "5d0b184b-adbe-47ad-ad8e-3c1d09780748",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8dde1ddb-61d6-4859-8a69-acefbf0a4dc4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d0b184b-adbe-47ad-ad8e-3c1d09780748",
        "cursor": {
          "ref": "b37e3275-0409-47a2-b962-c950c3e18b0e",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "6631cbe5-5e4b-49f5-aeef-b25b1206a34b"
        },
        "item": {
          "id": "5d0b184b-adbe-47ad-ad8e-3c1d09780748",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8dde1ddb-61d6-4859-8a69-acefbf0a4dc4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54b1449d-dfa2-4037-be4d-958295e2f8ad",
        "cursor": {
          "ref": "71462ebf-a175-43b9-ba97-1ab775fc6565",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "1283c14a-7d04-4527-a5d4-294ecd536163"
        },
        "item": {
          "id": "54b1449d-dfa2-4037-be4d-958295e2f8ad",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "27b6c715-1a93-498c-ac3e-4cf03abdaecf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54b1449d-dfa2-4037-be4d-958295e2f8ad",
        "cursor": {
          "ref": "71462ebf-a175-43b9-ba97-1ab775fc6565",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "1283c14a-7d04-4527-a5d4-294ecd536163"
        },
        "item": {
          "id": "54b1449d-dfa2-4037-be4d-958295e2f8ad",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "27b6c715-1a93-498c-ac3e-4cf03abdaecf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96e04e0a-fe1e-46a0-8e20-b6f693297659",
        "cursor": {
          "ref": "9a4e3b25-c21f-411c-a18b-ba1e690e8117",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e382a972-d05b-4a88-bd1d-8a8bad14c5f8"
        },
        "item": {
          "id": "96e04e0a-fe1e-46a0-8e20-b6f693297659",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "34b2c81e-8dfc-4b1f-9c6c-4f6d44fa7a24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96e04e0a-fe1e-46a0-8e20-b6f693297659",
        "cursor": {
          "ref": "9a4e3b25-c21f-411c-a18b-ba1e690e8117",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e382a972-d05b-4a88-bd1d-8a8bad14c5f8"
        },
        "item": {
          "id": "96e04e0a-fe1e-46a0-8e20-b6f693297659",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "34b2c81e-8dfc-4b1f-9c6c-4f6d44fa7a24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e251d92-d492-4e42-89c6-2b56e387a324",
        "cursor": {
          "ref": "baf76908-6ab6-4ce4-aac1-3ae3825c9485",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d1382003-223e-4ae2-8410-35d6b1cf13db"
        },
        "item": {
          "id": "8e251d92-d492-4e42-89c6-2b56e387a324",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c013d16e-c2d6-4b0b-ab42-bfc323cc0ec3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e251d92-d492-4e42-89c6-2b56e387a324",
        "cursor": {
          "ref": "baf76908-6ab6-4ce4-aac1-3ae3825c9485",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d1382003-223e-4ae2-8410-35d6b1cf13db"
        },
        "item": {
          "id": "8e251d92-d492-4e42-89c6-2b56e387a324",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c013d16e-c2d6-4b0b-ab42-bfc323cc0ec3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bc22489-2d26-4b8a-a470-f5f7f317e851",
        "cursor": {
          "ref": "19acae3f-0e69-4ece-adff-043120458f64",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "603d48a8-6598-4694-b7b5-0d8717e792b6"
        },
        "item": {
          "id": "6bc22489-2d26-4b8a-a470-f5f7f317e851",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "1e090b82-aae8-4ec1-bdb1-44bccac01cb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bc22489-2d26-4b8a-a470-f5f7f317e851",
        "cursor": {
          "ref": "19acae3f-0e69-4ece-adff-043120458f64",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "603d48a8-6598-4694-b7b5-0d8717e792b6"
        },
        "item": {
          "id": "6bc22489-2d26-4b8a-a470-f5f7f317e851",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "1e090b82-aae8-4ec1-bdb1-44bccac01cb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff6991f2-10f8-434c-8733-152c9a44e000",
        "cursor": {
          "ref": "3f8087a9-d162-4627-99ab-bd992a40384b",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "12dc412b-164e-47dc-9c0f-c50eedbabe0a"
        },
        "item": {
          "id": "ff6991f2-10f8-434c-8733-152c9a44e000",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "b705ea33-3e10-4fe2-9bde-97dc4ae801d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff6991f2-10f8-434c-8733-152c9a44e000",
        "cursor": {
          "ref": "3f8087a9-d162-4627-99ab-bd992a40384b",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "12dc412b-164e-47dc-9c0f-c50eedbabe0a"
        },
        "item": {
          "id": "ff6991f2-10f8-434c-8733-152c9a44e000",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "b705ea33-3e10-4fe2-9bde-97dc4ae801d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f496ae-1b26-4e91-9fc7-247724e1c7d4",
        "cursor": {
          "ref": "07653632-4325-41e6-a10a-e9845f86496c",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "fc31e110-a5ad-48db-8f5a-fedd9fcbf359"
        },
        "item": {
          "id": "f8f496ae-1b26-4e91-9fc7-247724e1c7d4",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "3647ab9b-9bd4-450b-99df-fb68cf35359d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f496ae-1b26-4e91-9fc7-247724e1c7d4",
        "cursor": {
          "ref": "07653632-4325-41e6-a10a-e9845f86496c",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "fc31e110-a5ad-48db-8f5a-fedd9fcbf359"
        },
        "item": {
          "id": "f8f496ae-1b26-4e91-9fc7-247724e1c7d4",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "3647ab9b-9bd4-450b-99df-fb68cf35359d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a79821f2-1fe7-44c2-bf51-49e9875b6293",
        "cursor": {
          "ref": "8319a020-9872-49d7-af59-88152d7326ea",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "93539884-0700-4e83-a8b5-d76727bb4a3c"
        },
        "item": {
          "id": "a79821f2-1fe7-44c2-bf51-49e9875b6293",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a3ee6f7e-f7f7-4ee2-9f44-8ffcdb713852",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a79821f2-1fe7-44c2-bf51-49e9875b6293",
        "cursor": {
          "ref": "8319a020-9872-49d7-af59-88152d7326ea",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "93539884-0700-4e83-a8b5-d76727bb4a3c"
        },
        "item": {
          "id": "a79821f2-1fe7-44c2-bf51-49e9875b6293",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a3ee6f7e-f7f7-4ee2-9f44-8ffcdb713852",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2afa5fd-9e32-4f81-a412-ab773d25d69f",
        "cursor": {
          "ref": "ca0f9ccd-ef1b-43c6-83f6-2250bd757612",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "6a6e6ab0-6d6a-483b-aa48-28b2491d7784"
        },
        "item": {
          "id": "d2afa5fd-9e32-4f81-a412-ab773d25d69f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "4dfad6bd-e2aa-46cf-848e-e454e0501645",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2afa5fd-9e32-4f81-a412-ab773d25d69f",
        "cursor": {
          "ref": "ca0f9ccd-ef1b-43c6-83f6-2250bd757612",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "6a6e6ab0-6d6a-483b-aa48-28b2491d7784"
        },
        "item": {
          "id": "d2afa5fd-9e32-4f81-a412-ab773d25d69f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "4dfad6bd-e2aa-46cf-848e-e454e0501645",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0484b928-73c7-4bb8-ba8e-3bbca11ea89b",
        "cursor": {
          "ref": "4f09afb2-1150-4a30-8153-ef3385dd8ea6",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "117b33b4-145f-4814-b938-5a1925410f47"
        },
        "item": {
          "id": "0484b928-73c7-4bb8-ba8e-3bbca11ea89b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a5522308-df91-463b-8a12-0787e14373bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0484b928-73c7-4bb8-ba8e-3bbca11ea89b",
        "cursor": {
          "ref": "4f09afb2-1150-4a30-8153-ef3385dd8ea6",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "117b33b4-145f-4814-b938-5a1925410f47"
        },
        "item": {
          "id": "0484b928-73c7-4bb8-ba8e-3bbca11ea89b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a5522308-df91-463b-8a12-0787e14373bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c649e422-2f98-49e4-b1c9-079e27c423af",
        "cursor": {
          "ref": "b0921223-ab48-44f9-a26e-6bf3b4fc3c96",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "fd41bfa5-7815-47be-a686-c7c97264d37d"
        },
        "item": {
          "id": "c649e422-2f98-49e4-b1c9-079e27c423af",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "76a8430f-758f-4cb3-87c1-2f30486be7c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c649e422-2f98-49e4-b1c9-079e27c423af",
        "cursor": {
          "ref": "b0921223-ab48-44f9-a26e-6bf3b4fc3c96",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "fd41bfa5-7815-47be-a686-c7c97264d37d"
        },
        "item": {
          "id": "c649e422-2f98-49e4-b1c9-079e27c423af",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "76a8430f-758f-4cb3-87c1-2f30486be7c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f49073-c60a-493e-bc50-13e369d91bd9",
        "cursor": {
          "ref": "c3a091c5-f05b-4a64-9edb-6c1001096712",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "54d71051-c3c0-469a-a23a-f86d54ab75f8"
        },
        "item": {
          "id": "12f49073-c60a-493e-bc50-13e369d91bd9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7e4ade43-ab62-4518-abfd-96aaf5884414",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f49073-c60a-493e-bc50-13e369d91bd9",
        "cursor": {
          "ref": "c3a091c5-f05b-4a64-9edb-6c1001096712",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "54d71051-c3c0-469a-a23a-f86d54ab75f8"
        },
        "item": {
          "id": "12f49073-c60a-493e-bc50-13e369d91bd9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7e4ade43-ab62-4518-abfd-96aaf5884414",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48da366e-b18d-46ac-bf2a-8244c781cf16",
        "cursor": {
          "ref": "6cd9c428-16ac-4d94-a137-afa98d121a9e",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "5dab3064-9db5-4de6-8bf1-54494fd834e4"
        },
        "item": {
          "id": "48da366e-b18d-46ac-bf2a-8244c781cf16",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "af1b5f2b-f9e6-4e2d-8eaf-382cde1ea0dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48da366e-b18d-46ac-bf2a-8244c781cf16",
        "cursor": {
          "ref": "6cd9c428-16ac-4d94-a137-afa98d121a9e",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "5dab3064-9db5-4de6-8bf1-54494fd834e4"
        },
        "item": {
          "id": "48da366e-b18d-46ac-bf2a-8244c781cf16",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "af1b5f2b-f9e6-4e2d-8eaf-382cde1ea0dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "618788a0-adfe-44ba-80c1-926136d1013a",
        "cursor": {
          "ref": "7a0cbe97-701b-449b-a159-e750e281532c",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "3e06dda2-a099-493d-970b-cc4d20167b48"
        },
        "item": {
          "id": "618788a0-adfe-44ba-80c1-926136d1013a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "0915a746-67e1-47f3-b6d4-adcc4d2dde1d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "618788a0-adfe-44ba-80c1-926136d1013a",
        "cursor": {
          "ref": "7a0cbe97-701b-449b-a159-e750e281532c",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "3e06dda2-a099-493d-970b-cc4d20167b48"
        },
        "item": {
          "id": "618788a0-adfe-44ba-80c1-926136d1013a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "0915a746-67e1-47f3-b6d4-adcc4d2dde1d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "591f2b69-abc6-4a34-a224-ea0a47e19e0e",
        "cursor": {
          "ref": "2bd5341d-2a67-4a6c-bf87-2635cd0ae230",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b4d2c240-aa8d-4b85-be54-7566415f60d6"
        },
        "item": {
          "id": "591f2b69-abc6-4a34-a224-ea0a47e19e0e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "d3148155-9324-410d-aba6-83497e2f7fa6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "591f2b69-abc6-4a34-a224-ea0a47e19e0e",
        "cursor": {
          "ref": "2bd5341d-2a67-4a6c-bf87-2635cd0ae230",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b4d2c240-aa8d-4b85-be54-7566415f60d6"
        },
        "item": {
          "id": "591f2b69-abc6-4a34-a224-ea0a47e19e0e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "d3148155-9324-410d-aba6-83497e2f7fa6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db39f16-4928-45a2-8112-6c34c3f02f19",
        "cursor": {
          "ref": "e5d1d93b-10c9-4801-ac56-c22af33cc366",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d44bcc77-7465-43f8-8591-99dd11f596b6"
        },
        "item": {
          "id": "0db39f16-4928-45a2-8112-6c34c3f02f19",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f8d399bb-c689-4495-b6b6-e67ef1f88695",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db39f16-4928-45a2-8112-6c34c3f02f19",
        "cursor": {
          "ref": "e5d1d93b-10c9-4801-ac56-c22af33cc366",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d44bcc77-7465-43f8-8591-99dd11f596b6"
        },
        "item": {
          "id": "0db39f16-4928-45a2-8112-6c34c3f02f19",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f8d399bb-c689-4495-b6b6-e67ef1f88695",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aaabfb6-bf00-43a8-813b-7c432e377fa2",
        "cursor": {
          "ref": "95f8a59f-47e4-43c0-8673-648fef43227a",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "183abea7-a916-4f70-947d-77e8f7d9ced4"
        },
        "item": {
          "id": "2aaabfb6-bf00-43a8-813b-7c432e377fa2",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "95558a1f-098a-4d86-86bd-f0db59b98116",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aaabfb6-bf00-43a8-813b-7c432e377fa2",
        "cursor": {
          "ref": "95f8a59f-47e4-43c0-8673-648fef43227a",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "183abea7-a916-4f70-947d-77e8f7d9ced4"
        },
        "item": {
          "id": "2aaabfb6-bf00-43a8-813b-7c432e377fa2",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "95558a1f-098a-4d86-86bd-f0db59b98116",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c33324e-1709-4026-8a27-20d0c9756b62",
        "cursor": {
          "ref": "284b5d01-8930-4183-97d8-e536cd3b7bad",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9fd0b0a3-af02-46ee-a4c0-f5cfb83abed3"
        },
        "item": {
          "id": "8c33324e-1709-4026-8a27-20d0c9756b62",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8decf53c-6e5f-44ce-8ef4-c99b2a0f66fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c33324e-1709-4026-8a27-20d0c9756b62",
        "cursor": {
          "ref": "284b5d01-8930-4183-97d8-e536cd3b7bad",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9fd0b0a3-af02-46ee-a4c0-f5cfb83abed3"
        },
        "item": {
          "id": "8c33324e-1709-4026-8a27-20d0c9756b62",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8decf53c-6e5f-44ce-8ef4-c99b2a0f66fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62cdb3eb-5319-4652-a6ac-096920f8ae9c",
        "cursor": {
          "ref": "634228a8-d894-4b76-b9b7-f0b17d140894",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7fc71652-0263-4589-90ad-b592f4ff8346"
        },
        "item": {
          "id": "62cdb3eb-5319-4652-a6ac-096920f8ae9c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ea46b864-7818-4b2d-871b-f65c1616477e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62cdb3eb-5319-4652-a6ac-096920f8ae9c",
        "cursor": {
          "ref": "634228a8-d894-4b76-b9b7-f0b17d140894",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7fc71652-0263-4589-90ad-b592f4ff8346"
        },
        "item": {
          "id": "62cdb3eb-5319-4652-a6ac-096920f8ae9c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ea46b864-7818-4b2d-871b-f65c1616477e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c88b0c3-5086-429e-9992-cdef086de991",
        "cursor": {
          "ref": "b7f9ba24-cba9-4fa2-9146-b733dc46cce9",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "450c91f7-0b94-450a-bff1-6fef25970865"
        },
        "item": {
          "id": "9c88b0c3-5086-429e-9992-cdef086de991",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "a14250b0-a4bc-43ce-9203-c39c22a104f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c88b0c3-5086-429e-9992-cdef086de991",
        "cursor": {
          "ref": "b7f9ba24-cba9-4fa2-9146-b733dc46cce9",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "450c91f7-0b94-450a-bff1-6fef25970865"
        },
        "item": {
          "id": "9c88b0c3-5086-429e-9992-cdef086de991",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "a14250b0-a4bc-43ce-9203-c39c22a104f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44cb317b-5850-44b5-85ef-f86452c23f09",
        "cursor": {
          "ref": "a1ca7a50-62aa-4423-a889-d2b2069fbcd3",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "3c5e79e7-ce2d-47cc-b281-5bc4d7380f6d"
        },
        "item": {
          "id": "44cb317b-5850-44b5-85ef-f86452c23f09",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f91bf567-34fa-4f7d-8460-db6893e84155",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44cb317b-5850-44b5-85ef-f86452c23f09",
        "cursor": {
          "ref": "a1ca7a50-62aa-4423-a889-d2b2069fbcd3",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "3c5e79e7-ce2d-47cc-b281-5bc4d7380f6d"
        },
        "item": {
          "id": "44cb317b-5850-44b5-85ef-f86452c23f09",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f91bf567-34fa-4f7d-8460-db6893e84155",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c098bdc-d7a1-4597-b518-1b55588ad635",
        "cursor": {
          "ref": "944196b0-3957-44d7-8497-b6c7df72274b",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "eda4b743-dae7-4f0a-8cfd-aab4b2616e80"
        },
        "item": {
          "id": "3c098bdc-d7a1-4597-b518-1b55588ad635",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "300641c1-92cd-4bf0-ac2f-d3c23e8b5f73",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c098bdc-d7a1-4597-b518-1b55588ad635",
        "cursor": {
          "ref": "944196b0-3957-44d7-8497-b6c7df72274b",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "eda4b743-dae7-4f0a-8cfd-aab4b2616e80"
        },
        "item": {
          "id": "3c098bdc-d7a1-4597-b518-1b55588ad635",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "300641c1-92cd-4bf0-ac2f-d3c23e8b5f73",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40637af2-d3ec-435b-865f-6cbbd5e9d3b4",
        "cursor": {
          "ref": "0f8cf1e9-6fa2-49a8-8f07-e25a02f67ef1",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e4c31ac0-dd19-49d9-b16d-1c76c991de83"
        },
        "item": {
          "id": "40637af2-d3ec-435b-865f-6cbbd5e9d3b4",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ee3deb9d-875b-42a7-9bc5-669c55c792d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40637af2-d3ec-435b-865f-6cbbd5e9d3b4",
        "cursor": {
          "ref": "0f8cf1e9-6fa2-49a8-8f07-e25a02f67ef1",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e4c31ac0-dd19-49d9-b16d-1c76c991de83"
        },
        "item": {
          "id": "40637af2-d3ec-435b-865f-6cbbd5e9d3b4",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ee3deb9d-875b-42a7-9bc5-669c55c792d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bce8313-5531-43e6-a49d-ee4b74960ca9",
        "cursor": {
          "ref": "5607c839-bca5-4263-958f-85479d51841d",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "97e1a109-ea79-4147-ad3a-975f4e88f335"
        },
        "item": {
          "id": "5bce8313-5531-43e6-a49d-ee4b74960ca9",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "3a9d4758-95dd-4312-9efe-d60ca8208932",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bce8313-5531-43e6-a49d-ee4b74960ca9",
        "cursor": {
          "ref": "5607c839-bca5-4263-958f-85479d51841d",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "97e1a109-ea79-4147-ad3a-975f4e88f335"
        },
        "item": {
          "id": "5bce8313-5531-43e6-a49d-ee4b74960ca9",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "3a9d4758-95dd-4312-9efe-d60ca8208932",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "132d3597-44bc-44ac-95b3-5255704b0c69",
        "cursor": {
          "ref": "244ca048-0a59-4c9f-9537-53fa9d452d4e",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0f3d6bcc-4096-4a1c-90f9-acd5007caed2"
        },
        "item": {
          "id": "132d3597-44bc-44ac-95b3-5255704b0c69",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "506b35bd-aeb9-4a57-8ad6-3b8b136c6341",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "132d3597-44bc-44ac-95b3-5255704b0c69",
        "cursor": {
          "ref": "244ca048-0a59-4c9f-9537-53fa9d452d4e",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0f3d6bcc-4096-4a1c-90f9-acd5007caed2"
        },
        "item": {
          "id": "132d3597-44bc-44ac-95b3-5255704b0c69",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "506b35bd-aeb9-4a57-8ad6-3b8b136c6341",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d45dc518-f9f4-400c-b382-1e5f7e5c5d4d",
        "cursor": {
          "ref": "c9f325c7-f6b5-4d3d-b169-cdae5ab6b86b",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d86a7124-3b94-46ff-bd89-56bd4fe3f23a"
        },
        "item": {
          "id": "d45dc518-f9f4-400c-b382-1e5f7e5c5d4d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a2d8bb43-7c47-43a9-887b-818b2b9e7117",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d45dc518-f9f4-400c-b382-1e5f7e5c5d4d",
        "cursor": {
          "ref": "c9f325c7-f6b5-4d3d-b169-cdae5ab6b86b",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d86a7124-3b94-46ff-bd89-56bd4fe3f23a"
        },
        "item": {
          "id": "d45dc518-f9f4-400c-b382-1e5f7e5c5d4d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a2d8bb43-7c47-43a9-887b-818b2b9e7117",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6b0aa6-2965-47a1-9319-92990f42b687",
        "cursor": {
          "ref": "7e5405e8-d531-471e-94ec-b9b0df855873",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d9ff7a70-05e0-402d-8dfc-5070ac1e21cd"
        },
        "item": {
          "id": "7b6b0aa6-2965-47a1-9319-92990f42b687",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ac40c40a-259c-414d-b389-2966765a7232",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6b0aa6-2965-47a1-9319-92990f42b687",
        "cursor": {
          "ref": "7e5405e8-d531-471e-94ec-b9b0df855873",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d9ff7a70-05e0-402d-8dfc-5070ac1e21cd"
        },
        "item": {
          "id": "7b6b0aa6-2965-47a1-9319-92990f42b687",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ac40c40a-259c-414d-b389-2966765a7232",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c08b08cc-8aad-45fc-b037-5995e415735b",
        "cursor": {
          "ref": "05619b8b-fd97-41fc-a32f-feb586a06250",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "3d0e1486-84e7-4380-a8da-b158b3ca8c95"
        },
        "item": {
          "id": "c08b08cc-8aad-45fc-b037-5995e415735b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "8c174669-e64d-4d02-ac73-251da2a4177d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c08b08cc-8aad-45fc-b037-5995e415735b",
        "cursor": {
          "ref": "05619b8b-fd97-41fc-a32f-feb586a06250",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "3d0e1486-84e7-4380-a8da-b158b3ca8c95"
        },
        "item": {
          "id": "c08b08cc-8aad-45fc-b037-5995e415735b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "8c174669-e64d-4d02-ac73-251da2a4177d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "700960a8-ecb0-4921-a1c5-6b446865ca10",
        "cursor": {
          "ref": "00d1cbf0-4d73-43b0-a2c7-264db8ffd1b6",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "367691c7-21de-45f0-905d-817a8f7fe103"
        },
        "item": {
          "id": "700960a8-ecb0-4921-a1c5-6b446865ca10",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "bec65c0d-019d-42ed-bd32-a518cbb39802",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "700960a8-ecb0-4921-a1c5-6b446865ca10",
        "cursor": {
          "ref": "00d1cbf0-4d73-43b0-a2c7-264db8ffd1b6",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "367691c7-21de-45f0-905d-817a8f7fe103"
        },
        "item": {
          "id": "700960a8-ecb0-4921-a1c5-6b446865ca10",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "bec65c0d-019d-42ed-bd32-a518cbb39802",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e614e265-234d-47c9-b037-4b6d9d730214",
        "cursor": {
          "ref": "b32cce17-bb5d-41fa-a997-7d2b8d9600bf",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a3218f4d-d32b-42a5-a52f-c94a09b53739"
        },
        "item": {
          "id": "e614e265-234d-47c9-b037-4b6d9d730214",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "153c92ca-a89e-4c74-9954-4638ed269716",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e614e265-234d-47c9-b037-4b6d9d730214",
        "cursor": {
          "ref": "b32cce17-bb5d-41fa-a997-7d2b8d9600bf",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a3218f4d-d32b-42a5-a52f-c94a09b53739"
        },
        "item": {
          "id": "e614e265-234d-47c9-b037-4b6d9d730214",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "153c92ca-a89e-4c74-9954-4638ed269716",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e15b56-9ee6-42f8-a877-fbcafb89e718",
        "cursor": {
          "ref": "b8296a27-b9ab-4819-814e-4cc04cd4d22e",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "9ff4fa52-9820-43c3-afdb-dc44982de12f"
        },
        "item": {
          "id": "30e15b56-9ee6-42f8-a877-fbcafb89e718",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c0dba33f-3552-46e5-940a-58fd39123c26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e15b56-9ee6-42f8-a877-fbcafb89e718",
        "cursor": {
          "ref": "b8296a27-b9ab-4819-814e-4cc04cd4d22e",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "9ff4fa52-9820-43c3-afdb-dc44982de12f"
        },
        "item": {
          "id": "30e15b56-9ee6-42f8-a877-fbcafb89e718",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c0dba33f-3552-46e5-940a-58fd39123c26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a44ce7ba-bfeb-4f19-8c83-b94f378afff4",
        "cursor": {
          "ref": "21ba35d4-5840-406e-a5c3-904232e46f23",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "2b683ae8-cb0a-4ad2-806e-4caff4f6ea18"
        },
        "item": {
          "id": "a44ce7ba-bfeb-4f19-8c83-b94f378afff4",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "452ca3da-de1a-4dd9-9e12-f142465b64fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a44ce7ba-bfeb-4f19-8c83-b94f378afff4",
        "cursor": {
          "ref": "21ba35d4-5840-406e-a5c3-904232e46f23",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "2b683ae8-cb0a-4ad2-806e-4caff4f6ea18"
        },
        "item": {
          "id": "a44ce7ba-bfeb-4f19-8c83-b94f378afff4",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "452ca3da-de1a-4dd9-9e12-f142465b64fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25d7d268-39c2-4f4a-b6dc-02d57c4d8ad5",
        "cursor": {
          "ref": "9fe8aea8-06da-4c26-8298-d8084b6903d0",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "df2d5b29-2f3b-41f2-b4c2-c2fa67250da3"
        },
        "item": {
          "id": "25d7d268-39c2-4f4a-b6dc-02d57c4d8ad5",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f8eaa00e-287a-4b29-96c0-cb19b0710b0b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25d7d268-39c2-4f4a-b6dc-02d57c4d8ad5",
        "cursor": {
          "ref": "9fe8aea8-06da-4c26-8298-d8084b6903d0",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "df2d5b29-2f3b-41f2-b4c2-c2fa67250da3"
        },
        "item": {
          "id": "25d7d268-39c2-4f4a-b6dc-02d57c4d8ad5",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f8eaa00e-287a-4b29-96c0-cb19b0710b0b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f525be-1ba5-4e5d-87b2-0bdf7b837953",
        "cursor": {
          "ref": "8d54e393-4a0c-4d57-bbbf-3cddfff06b14",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c104249d-bacf-4fe3-a98e-86d349c25037"
        },
        "item": {
          "id": "19f525be-1ba5-4e5d-87b2-0bdf7b837953",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "886f87c4-0f30-43b5-8062-13f3c2a6df25",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f525be-1ba5-4e5d-87b2-0bdf7b837953",
        "cursor": {
          "ref": "8d54e393-4a0c-4d57-bbbf-3cddfff06b14",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c104249d-bacf-4fe3-a98e-86d349c25037"
        },
        "item": {
          "id": "19f525be-1ba5-4e5d-87b2-0bdf7b837953",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "886f87c4-0f30-43b5-8062-13f3c2a6df25",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d82f3afe-2516-4317-b952-1206e2630d49",
        "cursor": {
          "ref": "0801d0ca-c03f-407f-a785-c9402c9128dc",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a62ddd73-d528-4d4b-a95a-c13be8fcb71f"
        },
        "item": {
          "id": "d82f3afe-2516-4317-b952-1206e2630d49",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "2e7ef3c6-3836-4cf1-86de-ed8253108b44",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d82f3afe-2516-4317-b952-1206e2630d49",
        "cursor": {
          "ref": "0801d0ca-c03f-407f-a785-c9402c9128dc",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a62ddd73-d528-4d4b-a95a-c13be8fcb71f"
        },
        "item": {
          "id": "d82f3afe-2516-4317-b952-1206e2630d49",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "2e7ef3c6-3836-4cf1-86de-ed8253108b44",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75109e78-1f4f-44e3-9063-d0ed808d8ab9",
        "cursor": {
          "ref": "0fc15da1-b752-4ee5-b2e9-0895bd1bbac2",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "5429af29-bc1d-47a0-9a93-cbf483fe4c34"
        },
        "item": {
          "id": "75109e78-1f4f-44e3-9063-d0ed808d8ab9",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "26d7fb98-ee3e-42d3-bdda-543a9056975b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75109e78-1f4f-44e3-9063-d0ed808d8ab9",
        "cursor": {
          "ref": "0fc15da1-b752-4ee5-b2e9-0895bd1bbac2",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "5429af29-bc1d-47a0-9a93-cbf483fe4c34"
        },
        "item": {
          "id": "75109e78-1f4f-44e3-9063-d0ed808d8ab9",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "26d7fb98-ee3e-42d3-bdda-543a9056975b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18c0a1f9-fd0f-445c-99bd-4cfc378f4eec",
        "cursor": {
          "ref": "b067f548-d475-4e24-ae7d-9f95dcc591fd",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d1521b63-8d8a-4d56-87e3-f09ee6e5143c"
        },
        "item": {
          "id": "18c0a1f9-fd0f-445c-99bd-4cfc378f4eec",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d83d2dde-9f4c-4b63-899d-68b4e52ca6ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18c0a1f9-fd0f-445c-99bd-4cfc378f4eec",
        "cursor": {
          "ref": "b067f548-d475-4e24-ae7d-9f95dcc591fd",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d1521b63-8d8a-4d56-87e3-f09ee6e5143c"
        },
        "item": {
          "id": "18c0a1f9-fd0f-445c-99bd-4cfc378f4eec",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d83d2dde-9f4c-4b63-899d-68b4e52ca6ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b479aa85-ac2d-4058-adf8-d418b7ace7eb",
        "cursor": {
          "ref": "f284a01f-8554-44ca-964b-83bc52038140",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "7efa1777-aeda-48eb-91f7-aaa6a3f556b1"
        },
        "item": {
          "id": "b479aa85-ac2d-4058-adf8-d418b7ace7eb",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "8824a799-fc02-4e74-b875-c3535e5032e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b479aa85-ac2d-4058-adf8-d418b7ace7eb",
        "cursor": {
          "ref": "f284a01f-8554-44ca-964b-83bc52038140",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "7efa1777-aeda-48eb-91f7-aaa6a3f556b1"
        },
        "item": {
          "id": "b479aa85-ac2d-4058-adf8-d418b7ace7eb",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "8824a799-fc02-4e74-b875-c3535e5032e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1572a329-8a10-46c4-bc73-001fb23d89f3",
        "cursor": {
          "ref": "f3e24214-d85b-47e7-8f7f-59a7fee96a23",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c353e051-8e83-4baf-a533-65351179e5ee"
        },
        "item": {
          "id": "1572a329-8a10-46c4-bc73-001fb23d89f3",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "4c47b4dd-7cd4-487d-94a5-1e430647e2c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1572a329-8a10-46c4-bc73-001fb23d89f3",
        "cursor": {
          "ref": "f3e24214-d85b-47e7-8f7f-59a7fee96a23",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c353e051-8e83-4baf-a533-65351179e5ee"
        },
        "item": {
          "id": "1572a329-8a10-46c4-bc73-001fb23d89f3",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "4c47b4dd-7cd4-487d-94a5-1e430647e2c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac8c714e-1254-41d3-87de-a88b97bb2956",
        "cursor": {
          "ref": "7c1cc66f-b260-423c-a46d-e30dff40d5b3",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "99e3d28b-6da4-4aa8-bb21-7bed22889ab8"
        },
        "item": {
          "id": "ac8c714e-1254-41d3-87de-a88b97bb2956",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e3eaf6f3-e5f6-4f2a-b778-0c9bee70627b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac8c714e-1254-41d3-87de-a88b97bb2956",
        "cursor": {
          "ref": "7c1cc66f-b260-423c-a46d-e30dff40d5b3",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "99e3d28b-6da4-4aa8-bb21-7bed22889ab8"
        },
        "item": {
          "id": "ac8c714e-1254-41d3-87de-a88b97bb2956",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e3eaf6f3-e5f6-4f2a-b778-0c9bee70627b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e0f0688-b1ea-4376-9654-298ffad9907a",
        "cursor": {
          "ref": "a616f592-5976-48de-8f48-20b4f5da1711",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a19c3fda-987c-4560-98ac-030ef9b302d8"
        },
        "item": {
          "id": "9e0f0688-b1ea-4376-9654-298ffad9907a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "854e7eb2-bacf-4f90-b06a-ef1af585de50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e0f0688-b1ea-4376-9654-298ffad9907a",
        "cursor": {
          "ref": "a616f592-5976-48de-8f48-20b4f5da1711",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a19c3fda-987c-4560-98ac-030ef9b302d8"
        },
        "item": {
          "id": "9e0f0688-b1ea-4376-9654-298ffad9907a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "854e7eb2-bacf-4f90-b06a-ef1af585de50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba66faa5-f383-4088-953b-df28cad036ef",
        "cursor": {
          "ref": "3e0f6754-e7c5-401b-9cb7-7fb28474c122",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "5976b613-05fd-45fe-a791-93b69e57bc48"
        },
        "item": {
          "id": "ba66faa5-f383-4088-953b-df28cad036ef",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "bc5d4416-4d41-4b27-a76d-c1607938056c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba66faa5-f383-4088-953b-df28cad036ef",
        "cursor": {
          "ref": "3e0f6754-e7c5-401b-9cb7-7fb28474c122",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "5976b613-05fd-45fe-a791-93b69e57bc48"
        },
        "item": {
          "id": "ba66faa5-f383-4088-953b-df28cad036ef",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "bc5d4416-4d41-4b27-a76d-c1607938056c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1015e95-abe8-45c3-ab59-3fa30d654265",
        "cursor": {
          "ref": "24c12736-4b5f-4220-b279-aefb5623313b",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5b18fb25-8eb3-42a1-b3bb-b74ef04f1203"
        },
        "item": {
          "id": "f1015e95-abe8-45c3-ab59-3fa30d654265",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e0f01c67-0684-4b5a-9919-75641aee67ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1015e95-abe8-45c3-ab59-3fa30d654265",
        "cursor": {
          "ref": "24c12736-4b5f-4220-b279-aefb5623313b",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5b18fb25-8eb3-42a1-b3bb-b74ef04f1203"
        },
        "item": {
          "id": "f1015e95-abe8-45c3-ab59-3fa30d654265",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e0f01c67-0684-4b5a-9919-75641aee67ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19850a98-731d-4911-957a-99ae76a4a456",
        "cursor": {
          "ref": "c77a9e2d-7c01-444e-80eb-d37e22c6c042",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "8bfdc635-c069-436b-81ba-cafa0e3d2eaa"
        },
        "item": {
          "id": "19850a98-731d-4911-957a-99ae76a4a456",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c61fdcab-34c1-4b5e-b1f6-f7070413aead",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19850a98-731d-4911-957a-99ae76a4a456",
        "cursor": {
          "ref": "c77a9e2d-7c01-444e-80eb-d37e22c6c042",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "8bfdc635-c069-436b-81ba-cafa0e3d2eaa"
        },
        "item": {
          "id": "19850a98-731d-4911-957a-99ae76a4a456",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c61fdcab-34c1-4b5e-b1f6-f7070413aead",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11324c71-04d6-48db-8973-3a22af73637d",
        "cursor": {
          "ref": "b5a47f79-fd73-40c3-aab9-a1c130c9a51f",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "eb3cdeef-559f-4525-9706-c314de8de1b9"
        },
        "item": {
          "id": "11324c71-04d6-48db-8973-3a22af73637d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "2fe46a3e-24ce-4874-a672-ffd41eb4491c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11324c71-04d6-48db-8973-3a22af73637d",
        "cursor": {
          "ref": "b5a47f79-fd73-40c3-aab9-a1c130c9a51f",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "eb3cdeef-559f-4525-9706-c314de8de1b9"
        },
        "item": {
          "id": "11324c71-04d6-48db-8973-3a22af73637d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "2fe46a3e-24ce-4874-a672-ffd41eb4491c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af3053c6-5549-4394-80b3-9c3d5d28c1c6",
        "cursor": {
          "ref": "fb7c7127-bd54-46f2-8d1e-e5ebc5599e44",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "677cb096-dfc6-44a7-9743-09fae8613146"
        },
        "item": {
          "id": "af3053c6-5549-4394-80b3-9c3d5d28c1c6",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2a6887a4-286c-4184-adfb-f8c6e45a2909",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af3053c6-5549-4394-80b3-9c3d5d28c1c6",
        "cursor": {
          "ref": "fb7c7127-bd54-46f2-8d1e-e5ebc5599e44",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "677cb096-dfc6-44a7-9743-09fae8613146"
        },
        "item": {
          "id": "af3053c6-5549-4394-80b3-9c3d5d28c1c6",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2a6887a4-286c-4184-adfb-f8c6e45a2909",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "309d629f-2004-4a20-a988-4171e3f99025",
        "cursor": {
          "ref": "e20ed19d-942a-4e36-89b8-65be3abd78c9",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2f4185aa-317e-45f4-8425-e44d3debdd54"
        },
        "item": {
          "id": "309d629f-2004-4a20-a988-4171e3f99025",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "562a0fec-11f9-412c-873b-0b2bb981a89a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "309d629f-2004-4a20-a988-4171e3f99025",
        "cursor": {
          "ref": "e20ed19d-942a-4e36-89b8-65be3abd78c9",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2f4185aa-317e-45f4-8425-e44d3debdd54"
        },
        "item": {
          "id": "309d629f-2004-4a20-a988-4171e3f99025",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "562a0fec-11f9-412c-873b-0b2bb981a89a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00481ef7-41f9-4483-96ef-43787601cbb3",
        "cursor": {
          "ref": "169f3216-6c45-48e3-aa68-634246c87b0b",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7303674d-6b1a-4fa0-9765-6dbac781547d"
        },
        "item": {
          "id": "00481ef7-41f9-4483-96ef-43787601cbb3",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2ebbea0b-68f7-4cdf-92dc-06284a4f422e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00481ef7-41f9-4483-96ef-43787601cbb3",
        "cursor": {
          "ref": "169f3216-6c45-48e3-aa68-634246c87b0b",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7303674d-6b1a-4fa0-9765-6dbac781547d"
        },
        "item": {
          "id": "00481ef7-41f9-4483-96ef-43787601cbb3",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2ebbea0b-68f7-4cdf-92dc-06284a4f422e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5b2b1bf-7907-4966-8e16-188a0e619339",
        "cursor": {
          "ref": "00f2820f-30d2-4771-bc5e-7c76b180d38b",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "fd707413-7dcf-4b0a-a527-5a405ecfb756"
        },
        "item": {
          "id": "e5b2b1bf-7907-4966-8e16-188a0e619339",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "58761ab4-9f3b-41f8-be68-e7c0909dd5b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5b2b1bf-7907-4966-8e16-188a0e619339",
        "cursor": {
          "ref": "00f2820f-30d2-4771-bc5e-7c76b180d38b",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "fd707413-7dcf-4b0a-a527-5a405ecfb756"
        },
        "item": {
          "id": "e5b2b1bf-7907-4966-8e16-188a0e619339",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "58761ab4-9f3b-41f8-be68-e7c0909dd5b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52883273-ded7-4de4-a7ba-09f753f9c4f4",
        "cursor": {
          "ref": "ec73a862-5514-42da-987c-4c4c6db332dd",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "b759bfc2-27a7-40b8-a96b-367058cf1d4b"
        },
        "item": {
          "id": "52883273-ded7-4de4-a7ba-09f753f9c4f4",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "698acbfe-a3ca-4664-a9b1-b6a703bb76cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52883273-ded7-4de4-a7ba-09f753f9c4f4",
        "cursor": {
          "ref": "ec73a862-5514-42da-987c-4c4c6db332dd",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "b759bfc2-27a7-40b8-a96b-367058cf1d4b"
        },
        "item": {
          "id": "52883273-ded7-4de4-a7ba-09f753f9c4f4",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "698acbfe-a3ca-4664-a9b1-b6a703bb76cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b25a59ab-4bd9-430c-b4e1-035817f441b4",
        "cursor": {
          "ref": "bd9be2a7-e839-4493-8ce5-3fb9bad8b08f",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e7f70c4f-29ed-4f79-be7f-1fb6d0bbb27e"
        },
        "item": {
          "id": "b25a59ab-4bd9-430c-b4e1-035817f441b4",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b457f56a-79dc-462d-a099-d37f7346830a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b25a59ab-4bd9-430c-b4e1-035817f441b4",
        "cursor": {
          "ref": "bd9be2a7-e839-4493-8ce5-3fb9bad8b08f",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e7f70c4f-29ed-4f79-be7f-1fb6d0bbb27e"
        },
        "item": {
          "id": "b25a59ab-4bd9-430c-b4e1-035817f441b4",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b457f56a-79dc-462d-a099-d37f7346830a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34cfb76f-402d-48e3-9716-ad00ff791ae5",
        "cursor": {
          "ref": "32cb0d3f-b4a8-4b09-baaa-eba6745a16f7",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "caf3244c-014b-45f3-b39d-0b2535998ee1"
        },
        "item": {
          "id": "34cfb76f-402d-48e3-9716-ad00ff791ae5",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "99381c84-f9f2-41d2-8085-32c95b4a428a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34cfb76f-402d-48e3-9716-ad00ff791ae5",
        "cursor": {
          "ref": "32cb0d3f-b4a8-4b09-baaa-eba6745a16f7",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "caf3244c-014b-45f3-b39d-0b2535998ee1"
        },
        "item": {
          "id": "34cfb76f-402d-48e3-9716-ad00ff791ae5",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "99381c84-f9f2-41d2-8085-32c95b4a428a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e83312-fced-4437-a62d-d9c54e3534e6",
        "cursor": {
          "ref": "8dc42ef3-1891-44b5-9d2b-e429792a0612",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "8a0f9a96-a7a3-44f8-aef1-e35506f7b56b"
        },
        "item": {
          "id": "54e83312-fced-4437-a62d-d9c54e3534e6",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "55304656-fce7-41fe-b767-ae7ec5cd6364",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e83312-fced-4437-a62d-d9c54e3534e6",
        "cursor": {
          "ref": "8dc42ef3-1891-44b5-9d2b-e429792a0612",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "8a0f9a96-a7a3-44f8-aef1-e35506f7b56b"
        },
        "item": {
          "id": "54e83312-fced-4437-a62d-d9c54e3534e6",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "55304656-fce7-41fe-b767-ae7ec5cd6364",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0794efd4-861d-4955-8204-522598e8eb53",
        "cursor": {
          "ref": "c4b14a9f-c244-4c5b-82d7-5008f1d975c9",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "876a2a62-b075-42fb-984e-4cdfc58e6ce0"
        },
        "item": {
          "id": "0794efd4-861d-4955-8204-522598e8eb53",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e72cb433-d764-4f49-a76e-8fe3c83270de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0794efd4-861d-4955-8204-522598e8eb53",
        "cursor": {
          "ref": "c4b14a9f-c244-4c5b-82d7-5008f1d975c9",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "876a2a62-b075-42fb-984e-4cdfc58e6ce0"
        },
        "item": {
          "id": "0794efd4-861d-4955-8204-522598e8eb53",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e72cb433-d764-4f49-a76e-8fe3c83270de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43d19a16-02f8-4ba6-8713-d57c209c0ae0",
        "cursor": {
          "ref": "a58a09fd-54bf-4d62-bc0e-8eefbc35f9e2",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "53fb4ce1-b5be-48c3-b0df-5f84f260577f"
        },
        "item": {
          "id": "43d19a16-02f8-4ba6-8713-d57c209c0ae0",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "51888598-3b06-405b-b76b-25b4127a0514",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43d19a16-02f8-4ba6-8713-d57c209c0ae0",
        "cursor": {
          "ref": "a58a09fd-54bf-4d62-bc0e-8eefbc35f9e2",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "53fb4ce1-b5be-48c3-b0df-5f84f260577f"
        },
        "item": {
          "id": "43d19a16-02f8-4ba6-8713-d57c209c0ae0",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "51888598-3b06-405b-b76b-25b4127a0514",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d54422b-b6ad-4d00-ac57-77bdd508a0a8",
        "cursor": {
          "ref": "8b670ad5-f5a9-43e5-a273-66cfa192c394",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "43191ec3-cf11-4434-a58d-9ee14f5247ef"
        },
        "item": {
          "id": "7d54422b-b6ad-4d00-ac57-77bdd508a0a8",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "194a9fee-87d3-4ab7-a8f7-898f7d164b8a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d54422b-b6ad-4d00-ac57-77bdd508a0a8",
        "cursor": {
          "ref": "8b670ad5-f5a9-43e5-a273-66cfa192c394",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "43191ec3-cf11-4434-a58d-9ee14f5247ef"
        },
        "item": {
          "id": "7d54422b-b6ad-4d00-ac57-77bdd508a0a8",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "194a9fee-87d3-4ab7-a8f7-898f7d164b8a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7edf22c6-40f7-4c30-94f1-08a289584ac0",
        "cursor": {
          "ref": "9bba2fd5-5520-49a1-be90-a6f23576cab2",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "12df1092-697e-423c-b312-c45ecdcf145b"
        },
        "item": {
          "id": "7edf22c6-40f7-4c30-94f1-08a289584ac0",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a3dd38a0-fd56-48d3-bcd6-39c15c21b211",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7edf22c6-40f7-4c30-94f1-08a289584ac0",
        "cursor": {
          "ref": "9bba2fd5-5520-49a1-be90-a6f23576cab2",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "12df1092-697e-423c-b312-c45ecdcf145b"
        },
        "item": {
          "id": "7edf22c6-40f7-4c30-94f1-08a289584ac0",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a3dd38a0-fd56-48d3-bcd6-39c15c21b211",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0a73409-878d-4bec-9675-b587ff169a30",
        "cursor": {
          "ref": "716a2d8e-a987-4ef6-bce5-6c4a930f8764",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "6343c51a-98c5-48f4-aab4-d1fdbc0a3207"
        },
        "item": {
          "id": "f0a73409-878d-4bec-9675-b587ff169a30",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ea95ac60-65b8-4d54-8b8d-872b6e4fba1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0a73409-878d-4bec-9675-b587ff169a30",
        "cursor": {
          "ref": "716a2d8e-a987-4ef6-bce5-6c4a930f8764",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "6343c51a-98c5-48f4-aab4-d1fdbc0a3207"
        },
        "item": {
          "id": "f0a73409-878d-4bec-9675-b587ff169a30",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ea95ac60-65b8-4d54-8b8d-872b6e4fba1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec544f04-a443-4dae-a4ea-c9d693137e87",
        "cursor": {
          "ref": "df4ac458-fd33-4bd1-ad26-8e3d0394e333",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "09a62845-c87a-40cc-ada1-ea25eeb1195d"
        },
        "item": {
          "id": "ec544f04-a443-4dae-a4ea-c9d693137e87",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "17bb27bf-6169-4789-b42f-7c1387983ae0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec544f04-a443-4dae-a4ea-c9d693137e87",
        "cursor": {
          "ref": "df4ac458-fd33-4bd1-ad26-8e3d0394e333",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "09a62845-c87a-40cc-ada1-ea25eeb1195d"
        },
        "item": {
          "id": "ec544f04-a443-4dae-a4ea-c9d693137e87",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "17bb27bf-6169-4789-b42f-7c1387983ae0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76a17260-619e-4b32-9904-f577d9a288bf",
        "cursor": {
          "ref": "3451c959-a327-4fc6-97fb-b2c278d7041d",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "ce135c5e-02cf-4e20-92d5-420bc3418a02"
        },
        "item": {
          "id": "76a17260-619e-4b32-9904-f577d9a288bf",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "265b1db3-de51-46cf-bad2-44d88b48bc3f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76a17260-619e-4b32-9904-f577d9a288bf",
        "cursor": {
          "ref": "3451c959-a327-4fc6-97fb-b2c278d7041d",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "ce135c5e-02cf-4e20-92d5-420bc3418a02"
        },
        "item": {
          "id": "76a17260-619e-4b32-9904-f577d9a288bf",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "265b1db3-de51-46cf-bad2-44d88b48bc3f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ece6e59-c73a-4bd7-8372-364d394a48b2",
        "cursor": {
          "ref": "77489fa8-b6e0-46c2-a341-26f72118fd34",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "24aaf5fe-95a3-43fb-9349-7d1c13dc1fb6"
        },
        "item": {
          "id": "5ece6e59-c73a-4bd7-8372-364d394a48b2",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9beb5476-0750-46a6-8694-bf2b035c274f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ece6e59-c73a-4bd7-8372-364d394a48b2",
        "cursor": {
          "ref": "77489fa8-b6e0-46c2-a341-26f72118fd34",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "24aaf5fe-95a3-43fb-9349-7d1c13dc1fb6"
        },
        "item": {
          "id": "5ece6e59-c73a-4bd7-8372-364d394a48b2",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9beb5476-0750-46a6-8694-bf2b035c274f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8f64c56-b5ab-4018-8e7d-368e76c92964",
        "cursor": {
          "ref": "5b6772a8-ffa2-4daa-abc1-9df58a6a5c84",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "802958d5-6165-474a-ad5a-b8182d45da89"
        },
        "item": {
          "id": "c8f64c56-b5ab-4018-8e7d-368e76c92964",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "118388fa-8e03-4042-961e-5ef038feb05f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8f64c56-b5ab-4018-8e7d-368e76c92964",
        "cursor": {
          "ref": "5b6772a8-ffa2-4daa-abc1-9df58a6a5c84",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "802958d5-6165-474a-ad5a-b8182d45da89"
        },
        "item": {
          "id": "c8f64c56-b5ab-4018-8e7d-368e76c92964",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "118388fa-8e03-4042-961e-5ef038feb05f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a21cc11-8563-4c8d-9929-6fffe4b84010",
        "cursor": {
          "ref": "b68c2cf5-aa68-41dd-a47f-921665224cc1",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d9e88e7d-f091-43da-b488-de554fc7963d"
        },
        "item": {
          "id": "5a21cc11-8563-4c8d-9929-6fffe4b84010",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "c707c30b-52c9-48a5-85f5-7db7c0bc3618",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a21cc11-8563-4c8d-9929-6fffe4b84010",
        "cursor": {
          "ref": "b68c2cf5-aa68-41dd-a47f-921665224cc1",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d9e88e7d-f091-43da-b488-de554fc7963d"
        },
        "item": {
          "id": "5a21cc11-8563-4c8d-9929-6fffe4b84010",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "c707c30b-52c9-48a5-85f5-7db7c0bc3618",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73e0393c-662a-4800-a6bf-0e946715ec2b",
        "cursor": {
          "ref": "2eba47ea-50f7-461b-b78f-262f9e97a826",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "22005e14-97c9-4144-b6c2-7471bf89a97c"
        },
        "item": {
          "id": "73e0393c-662a-4800-a6bf-0e946715ec2b",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "8dd78204-ebd0-4000-a5d5-808d83025432",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73e0393c-662a-4800-a6bf-0e946715ec2b",
        "cursor": {
          "ref": "2eba47ea-50f7-461b-b78f-262f9e97a826",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "22005e14-97c9-4144-b6c2-7471bf89a97c"
        },
        "item": {
          "id": "73e0393c-662a-4800-a6bf-0e946715ec2b",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "8dd78204-ebd0-4000-a5d5-808d83025432",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceedfea5-f589-403b-8a85-0e52965194b8",
        "cursor": {
          "ref": "eef99f1e-5ada-48d6-8669-3bdd6459597a",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c84c1b25-c193-4aeb-9984-8411ef2f5c24"
        },
        "item": {
          "id": "ceedfea5-f589-403b-8a85-0e52965194b8",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "dc3d0d05-9211-4cec-98a6-d9db7554b486",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceedfea5-f589-403b-8a85-0e52965194b8",
        "cursor": {
          "ref": "eef99f1e-5ada-48d6-8669-3bdd6459597a",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c84c1b25-c193-4aeb-9984-8411ef2f5c24"
        },
        "item": {
          "id": "ceedfea5-f589-403b-8a85-0e52965194b8",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "dc3d0d05-9211-4cec-98a6-d9db7554b486",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3caca43-22d2-4f41-a0b4-920c7a4b1adf",
        "cursor": {
          "ref": "c23b9e35-f005-4c83-ad6c-60405dbfb61f",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1cef8395-a9ea-4b91-80df-b7bc25575244"
        },
        "item": {
          "id": "c3caca43-22d2-4f41-a0b4-920c7a4b1adf",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "db0b53b4-baeb-4194-9038-ab6598988c22",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3caca43-22d2-4f41-a0b4-920c7a4b1adf",
        "cursor": {
          "ref": "c23b9e35-f005-4c83-ad6c-60405dbfb61f",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1cef8395-a9ea-4b91-80df-b7bc25575244"
        },
        "item": {
          "id": "c3caca43-22d2-4f41-a0b4-920c7a4b1adf",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "db0b53b4-baeb-4194-9038-ab6598988c22",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c43f2689-cbf3-4559-9a3d-c7fd121f5b8d",
        "cursor": {
          "ref": "603d34bd-17a6-4daa-805e-85a1c75728e4",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "346ba441-376f-4b9d-b8ea-4153cef338df"
        },
        "item": {
          "id": "c43f2689-cbf3-4559-9a3d-c7fd121f5b8d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "eafb064e-813d-402d-ab54-91789b3ee3d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c43f2689-cbf3-4559-9a3d-c7fd121f5b8d",
        "cursor": {
          "ref": "603d34bd-17a6-4daa-805e-85a1c75728e4",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "346ba441-376f-4b9d-b8ea-4153cef338df"
        },
        "item": {
          "id": "c43f2689-cbf3-4559-9a3d-c7fd121f5b8d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "eafb064e-813d-402d-ab54-91789b3ee3d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2adda4cb-38d7-46f0-886f-9634f551e64c",
        "cursor": {
          "ref": "ac696ad0-6940-48fc-8e15-a41143ff4327",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "b7a52210-a6d7-40ea-91d3-f7e74e81e731"
        },
        "item": {
          "id": "2adda4cb-38d7-46f0-886f-9634f551e64c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "88dd9bdf-696b-46c9-af8c-2a2fe094d565",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2adda4cb-38d7-46f0-886f-9634f551e64c",
        "cursor": {
          "ref": "ac696ad0-6940-48fc-8e15-a41143ff4327",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "b7a52210-a6d7-40ea-91d3-f7e74e81e731"
        },
        "item": {
          "id": "2adda4cb-38d7-46f0-886f-9634f551e64c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "88dd9bdf-696b-46c9-af8c-2a2fe094d565",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c7c9c9-90e0-428e-a860-4519f43614a5",
        "cursor": {
          "ref": "a51e4d84-c569-4c09-9430-39e651e0f31a",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "90bd7954-54ba-4884-8f60-a15acb2ba1e8"
        },
        "item": {
          "id": "30c7c9c9-90e0-428e-a860-4519f43614a5",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "34358aa3-9154-4702-bac1-7e4d851ffe46",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c7c9c9-90e0-428e-a860-4519f43614a5",
        "cursor": {
          "ref": "a51e4d84-c569-4c09-9430-39e651e0f31a",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "90bd7954-54ba-4884-8f60-a15acb2ba1e8"
        },
        "item": {
          "id": "30c7c9c9-90e0-428e-a860-4519f43614a5",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "34358aa3-9154-4702-bac1-7e4d851ffe46",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4989aff6-4819-4a1b-a13c-c0d6942f68f4",
        "cursor": {
          "ref": "4cc41c7b-d285-4344-89ed-272f82e55284",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "80548058-ad6b-4071-bcd8-ac820cc543bc"
        },
        "item": {
          "id": "4989aff6-4819-4a1b-a13c-c0d6942f68f4",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3b741bc0-6972-4931-912e-f15ce3b517f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4989aff6-4819-4a1b-a13c-c0d6942f68f4",
        "cursor": {
          "ref": "4cc41c7b-d285-4344-89ed-272f82e55284",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "80548058-ad6b-4071-bcd8-ac820cc543bc"
        },
        "item": {
          "id": "4989aff6-4819-4a1b-a13c-c0d6942f68f4",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3b741bc0-6972-4931-912e-f15ce3b517f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2472fd9a-30c8-472a-8b30-b2057308cc8e",
        "cursor": {
          "ref": "e169b3a4-0252-416a-89bb-83d16235c3f2",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "d36ae947-9965-4282-9edb-ef672880cd5b"
        },
        "item": {
          "id": "2472fd9a-30c8-472a-8b30-b2057308cc8e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "69b31d78-a15a-490e-9984-af835c922e8a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2472fd9a-30c8-472a-8b30-b2057308cc8e",
        "cursor": {
          "ref": "e169b3a4-0252-416a-89bb-83d16235c3f2",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "d36ae947-9965-4282-9edb-ef672880cd5b"
        },
        "item": {
          "id": "2472fd9a-30c8-472a-8b30-b2057308cc8e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "69b31d78-a15a-490e-9984-af835c922e8a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f403fe47-a631-4ec4-a282-376cec79ad77",
        "cursor": {
          "ref": "cc9419f7-9cc3-4f97-9c20-e47c198fdf4e",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "f541e1a7-74e9-40db-87c5-f337e8bc863a"
        },
        "item": {
          "id": "f403fe47-a631-4ec4-a282-376cec79ad77",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "d23cbad6-83f2-4f56-acac-0321f524c588",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f403fe47-a631-4ec4-a282-376cec79ad77",
        "cursor": {
          "ref": "cc9419f7-9cc3-4f97-9c20-e47c198fdf4e",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "f541e1a7-74e9-40db-87c5-f337e8bc863a"
        },
        "item": {
          "id": "f403fe47-a631-4ec4-a282-376cec79ad77",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "d23cbad6-83f2-4f56-acac-0321f524c588",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff747a05-41be-4ab5-8849-b27a4c8625d7",
        "cursor": {
          "ref": "c33f4c70-4d05-40c4-8405-f12b55f18654",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "37f783d3-171c-4264-b6f1-08ff80285d80"
        },
        "item": {
          "id": "ff747a05-41be-4ab5-8849-b27a4c8625d7",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "678ec728-0861-4630-a481-48d4a0b4f42d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff747a05-41be-4ab5-8849-b27a4c8625d7",
        "cursor": {
          "ref": "c33f4c70-4d05-40c4-8405-f12b55f18654",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "37f783d3-171c-4264-b6f1-08ff80285d80"
        },
        "item": {
          "id": "ff747a05-41be-4ab5-8849-b27a4c8625d7",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "678ec728-0861-4630-a481-48d4a0b4f42d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca6c0029-59f3-4fe8-8b19-e73b430bc1f8",
        "cursor": {
          "ref": "acc5dd7d-d07c-4662-af65-7120c6c4a49c",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "5883b45d-87ac-47b0-96cf-88b7f6e0e4c1"
        },
        "item": {
          "id": "ca6c0029-59f3-4fe8-8b19-e73b430bc1f8",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a6d4efe8-7b39-4828-b4db-1ec0d09261ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca6c0029-59f3-4fe8-8b19-e73b430bc1f8",
        "cursor": {
          "ref": "acc5dd7d-d07c-4662-af65-7120c6c4a49c",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "5883b45d-87ac-47b0-96cf-88b7f6e0e4c1"
        },
        "item": {
          "id": "ca6c0029-59f3-4fe8-8b19-e73b430bc1f8",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a6d4efe8-7b39-4828-b4db-1ec0d09261ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2601b87-0877-4dd1-9bbb-bbddda77b0f3",
        "cursor": {
          "ref": "73994639-3dee-43f0-ba2b-90bf4084deeb",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "7046ad17-f5b0-47a9-9587-fd4c15d89bd5"
        },
        "item": {
          "id": "e2601b87-0877-4dd1-9bbb-bbddda77b0f3",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "72a08781-80f3-4620-8572-a41cf3ed6bd6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2601b87-0877-4dd1-9bbb-bbddda77b0f3",
        "cursor": {
          "ref": "73994639-3dee-43f0-ba2b-90bf4084deeb",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "7046ad17-f5b0-47a9-9587-fd4c15d89bd5"
        },
        "item": {
          "id": "e2601b87-0877-4dd1-9bbb-bbddda77b0f3",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "72a08781-80f3-4620-8572-a41cf3ed6bd6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be7f4a0-5439-4f6d-ba59-ac60acbaa1ea",
        "cursor": {
          "ref": "94e7a84d-84f7-40d2-838b-647f3c016ae8",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "4be9d578-8b5d-4efd-8ea2-2359c566b565"
        },
        "item": {
          "id": "2be7f4a0-5439-4f6d-ba59-ac60acbaa1ea",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2589c0ae-9cc0-4320-ad6b-de11d21e75a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be7f4a0-5439-4f6d-ba59-ac60acbaa1ea",
        "cursor": {
          "ref": "94e7a84d-84f7-40d2-838b-647f3c016ae8",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "4be9d578-8b5d-4efd-8ea2-2359c566b565"
        },
        "item": {
          "id": "2be7f4a0-5439-4f6d-ba59-ac60acbaa1ea",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2589c0ae-9cc0-4320-ad6b-de11d21e75a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d31bcb7-41af-4bf2-978f-c9838a961525",
        "cursor": {
          "ref": "3b550613-4921-4e80-a7a1-e6d7cf340839",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "ed2b6c21-c2fc-4342-8796-eeae3cac8a82"
        },
        "item": {
          "id": "2d31bcb7-41af-4bf2-978f-c9838a961525",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5c725d3b-89c6-42c8-aa6c-702305e2910d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d31bcb7-41af-4bf2-978f-c9838a961525",
        "cursor": {
          "ref": "3b550613-4921-4e80-a7a1-e6d7cf340839",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "ed2b6c21-c2fc-4342-8796-eeae3cac8a82"
        },
        "item": {
          "id": "2d31bcb7-41af-4bf2-978f-c9838a961525",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5c725d3b-89c6-42c8-aa6c-702305e2910d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9c0eced-b111-4bca-8b30-24140ae95363",
        "cursor": {
          "ref": "6cbfac22-f2c6-44ce-9687-7aeeb908fc48",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "7555acc5-710e-42bf-954c-c4ea4bb7a3a2"
        },
        "item": {
          "id": "c9c0eced-b111-4bca-8b30-24140ae95363",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "3f51c6f1-a9e7-4aa8-aa73-fd92a5c4f479",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9c0eced-b111-4bca-8b30-24140ae95363",
        "cursor": {
          "ref": "6cbfac22-f2c6-44ce-9687-7aeeb908fc48",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "7555acc5-710e-42bf-954c-c4ea4bb7a3a2"
        },
        "item": {
          "id": "c9c0eced-b111-4bca-8b30-24140ae95363",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "3f51c6f1-a9e7-4aa8-aa73-fd92a5c4f479",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac655c9-fb13-4a8d-86eb-de8638cc70da",
        "cursor": {
          "ref": "db5e3b77-3302-4095-9122-87768a416fd3",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "fc7e65d4-7e6e-40a6-96f4-b23731c719eb"
        },
        "item": {
          "id": "bac655c9-fb13-4a8d-86eb-de8638cc70da",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "cbdd03ee-cb57-4a7a-85aa-815d6435a22e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac655c9-fb13-4a8d-86eb-de8638cc70da",
        "cursor": {
          "ref": "db5e3b77-3302-4095-9122-87768a416fd3",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "fc7e65d4-7e6e-40a6-96f4-b23731c719eb"
        },
        "item": {
          "id": "bac655c9-fb13-4a8d-86eb-de8638cc70da",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "cbdd03ee-cb57-4a7a-85aa-815d6435a22e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb8d19f-2463-48f2-9143-8aacfdb50af7",
        "cursor": {
          "ref": "76fec8d5-7cbc-464b-ac63-204c3dcb55dd",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "7f54d1ea-7907-4d7a-a1e0-b2e25bfec061"
        },
        "item": {
          "id": "efb8d19f-2463-48f2-9143-8aacfdb50af7",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e344b003-fb09-4975-8b0f-5bcf4da9628e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb8d19f-2463-48f2-9143-8aacfdb50af7",
        "cursor": {
          "ref": "76fec8d5-7cbc-464b-ac63-204c3dcb55dd",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "7f54d1ea-7907-4d7a-a1e0-b2e25bfec061"
        },
        "item": {
          "id": "efb8d19f-2463-48f2-9143-8aacfdb50af7",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e344b003-fb09-4975-8b0f-5bcf4da9628e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "108b8358-0031-4797-93ee-a99e871f25c2",
        "cursor": {
          "ref": "f6b3cd3f-aefe-4cf1-96b6-876cfbd3900c",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "9c9d8a4d-2563-4646-a085-a32c9a68ef5f"
        },
        "item": {
          "id": "108b8358-0031-4797-93ee-a99e871f25c2",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "14bb843d-1f6d-473c-9475-aaff459c074b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "108b8358-0031-4797-93ee-a99e871f25c2",
        "cursor": {
          "ref": "f6b3cd3f-aefe-4cf1-96b6-876cfbd3900c",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "9c9d8a4d-2563-4646-a085-a32c9a68ef5f"
        },
        "item": {
          "id": "108b8358-0031-4797-93ee-a99e871f25c2",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "14bb843d-1f6d-473c-9475-aaff459c074b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e13165de-6cce-4992-bed6-002ceed331e4",
        "cursor": {
          "ref": "798133e5-f9c6-4df8-87f9-2daa4a517615",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "d32b6ce9-4845-4a92-bea1-da00eba01f83"
        },
        "item": {
          "id": "e13165de-6cce-4992-bed6-002ceed331e4",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6596399a-e568-4f83-8b09-7ffd18bc62ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e13165de-6cce-4992-bed6-002ceed331e4",
        "cursor": {
          "ref": "798133e5-f9c6-4df8-87f9-2daa4a517615",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "d32b6ce9-4845-4a92-bea1-da00eba01f83"
        },
        "item": {
          "id": "e13165de-6cce-4992-bed6-002ceed331e4",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6596399a-e568-4f83-8b09-7ffd18bc62ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0760024f-5166-409b-b40a-78209af1946f",
        "cursor": {
          "ref": "022cbee8-a917-42ba-8f38-9321b7ecf250",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "1b4575a5-e3b1-4e81-b407-e92cbcbe8dbf"
        },
        "item": {
          "id": "0760024f-5166-409b-b40a-78209af1946f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "24e2a0ce-c191-443c-a580-706b2d28b8a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0760024f-5166-409b-b40a-78209af1946f",
        "cursor": {
          "ref": "022cbee8-a917-42ba-8f38-9321b7ecf250",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "1b4575a5-e3b1-4e81-b407-e92cbcbe8dbf"
        },
        "item": {
          "id": "0760024f-5166-409b-b40a-78209af1946f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "24e2a0ce-c191-443c-a580-706b2d28b8a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b08e14c-b03a-4445-8bcf-69806c416187",
        "cursor": {
          "ref": "c71dc0c6-8c1e-40e5-8e97-2a7958720881",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "f2b32ee5-84cd-4b85-ba81-6e738033dec8"
        },
        "item": {
          "id": "6b08e14c-b03a-4445-8bcf-69806c416187",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e84820bc-afe5-4fae-a67c-3fe2777781ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b08e14c-b03a-4445-8bcf-69806c416187",
        "cursor": {
          "ref": "c71dc0c6-8c1e-40e5-8e97-2a7958720881",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "f2b32ee5-84cd-4b85-ba81-6e738033dec8"
        },
        "item": {
          "id": "6b08e14c-b03a-4445-8bcf-69806c416187",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e84820bc-afe5-4fae-a67c-3fe2777781ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6e03ca0-488f-4bf6-9de6-3a4fa1ad80e9",
        "cursor": {
          "ref": "ffa0613c-33f5-435b-9734-253ff35d8d77",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "05dbb559-d73d-472d-8f9b-7c9a27063e6a"
        },
        "item": {
          "id": "e6e03ca0-488f-4bf6-9de6-3a4fa1ad80e9",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e40387e0-2d36-408e-ab33-20710d5a0826",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6e03ca0-488f-4bf6-9de6-3a4fa1ad80e9",
        "cursor": {
          "ref": "ffa0613c-33f5-435b-9734-253ff35d8d77",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "05dbb559-d73d-472d-8f9b-7c9a27063e6a"
        },
        "item": {
          "id": "e6e03ca0-488f-4bf6-9de6-3a4fa1ad80e9",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e40387e0-2d36-408e-ab33-20710d5a0826",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c2b7f4-09eb-4678-8970-9f305344ddd0",
        "cursor": {
          "ref": "81b5ff00-5266-41ca-9156-95e4e6f9fefb",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "827c3948-8501-4c0c-9ead-99cae52ef97b"
        },
        "item": {
          "id": "52c2b7f4-09eb-4678-8970-9f305344ddd0",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "3b17acd7-eb9f-4d61-a2f1-f69da7180d87",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c2b7f4-09eb-4678-8970-9f305344ddd0",
        "cursor": {
          "ref": "81b5ff00-5266-41ca-9156-95e4e6f9fefb",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "827c3948-8501-4c0c-9ead-99cae52ef97b"
        },
        "item": {
          "id": "52c2b7f4-09eb-4678-8970-9f305344ddd0",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "3b17acd7-eb9f-4d61-a2f1-f69da7180d87",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92aff6eb-4222-4620-aa61-a37b7e7e934b",
        "cursor": {
          "ref": "ec5a72d3-cb2b-4f80-8b59-68cde4ba9475",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "6093e9b7-c45b-4871-89bf-5212898c43b5"
        },
        "item": {
          "id": "92aff6eb-4222-4620-aa61-a37b7e7e934b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6efb4b9f-8d7c-4e7b-91eb-a7c4d1bd403f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92aff6eb-4222-4620-aa61-a37b7e7e934b",
        "cursor": {
          "ref": "ec5a72d3-cb2b-4f80-8b59-68cde4ba9475",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "6093e9b7-c45b-4871-89bf-5212898c43b5"
        },
        "item": {
          "id": "92aff6eb-4222-4620-aa61-a37b7e7e934b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6efb4b9f-8d7c-4e7b-91eb-a7c4d1bd403f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31bb8b12-62ee-4682-a7fc-58ceea79dab7",
        "cursor": {
          "ref": "eac96106-997e-43ca-9160-e9823f3bac25",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "6d1f4c77-7e47-4da9-be80-71918475bd6f"
        },
        "item": {
          "id": "31bb8b12-62ee-4682-a7fc-58ceea79dab7",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f27d8149-cd07-4cd0-b552-25cd492a248f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31bb8b12-62ee-4682-a7fc-58ceea79dab7",
        "cursor": {
          "ref": "eac96106-997e-43ca-9160-e9823f3bac25",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "6d1f4c77-7e47-4da9-be80-71918475bd6f"
        },
        "item": {
          "id": "31bb8b12-62ee-4682-a7fc-58ceea79dab7",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f27d8149-cd07-4cd0-b552-25cd492a248f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a1542c7-73ed-4b72-8c59-e67e9c5a0a42",
        "cursor": {
          "ref": "0ce4b330-0d86-4a66-bc0a-8598bf4d9ae8",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "ab1000f4-4f6b-4ecd-ad3d-1f4a53855994"
        },
        "item": {
          "id": "4a1542c7-73ed-4b72-8c59-e67e9c5a0a42",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "361214b1-dd6d-4baa-af14-772ede4807f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a1542c7-73ed-4b72-8c59-e67e9c5a0a42",
        "cursor": {
          "ref": "0ce4b330-0d86-4a66-bc0a-8598bf4d9ae8",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "ab1000f4-4f6b-4ecd-ad3d-1f4a53855994"
        },
        "item": {
          "id": "4a1542c7-73ed-4b72-8c59-e67e9c5a0a42",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "361214b1-dd6d-4baa-af14-772ede4807f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0b079c5-60d3-466f-9cdd-e706df1983ff",
        "cursor": {
          "ref": "f0dbeea7-460d-48ad-88fe-8a0d584c6de0",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "062c6c0b-a8e7-4e93-ad23-305ff1a73c51"
        },
        "item": {
          "id": "d0b079c5-60d3-466f-9cdd-e706df1983ff",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "9538e37b-7542-44bf-b867-6a533ed0aab1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0b079c5-60d3-466f-9cdd-e706df1983ff",
        "cursor": {
          "ref": "f0dbeea7-460d-48ad-88fe-8a0d584c6de0",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "062c6c0b-a8e7-4e93-ad23-305ff1a73c51"
        },
        "item": {
          "id": "d0b079c5-60d3-466f-9cdd-e706df1983ff",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "9538e37b-7542-44bf-b867-6a533ed0aab1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc24b371-981a-4085-8af6-2f2cad1fe956",
        "cursor": {
          "ref": "65890ebd-0bf3-4e71-8410-f034b7ca632e",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "81b9f96a-9a58-4591-8565-881c0990cf6f"
        },
        "item": {
          "id": "cc24b371-981a-4085-8af6-2f2cad1fe956",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "404c0549-7145-4ab2-ba74-f4fca8e710fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc24b371-981a-4085-8af6-2f2cad1fe956",
        "cursor": {
          "ref": "65890ebd-0bf3-4e71-8410-f034b7ca632e",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "81b9f96a-9a58-4591-8565-881c0990cf6f"
        },
        "item": {
          "id": "cc24b371-981a-4085-8af6-2f2cad1fe956",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "404c0549-7145-4ab2-ba74-f4fca8e710fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4823c57d-510f-43d2-8f93-06a01895c8c0",
        "cursor": {
          "ref": "7812e986-4359-4607-863f-4fb390674d69",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "e1ae2679-d4bd-4ea9-aee1-2be55ca1cf28"
        },
        "item": {
          "id": "4823c57d-510f-43d2-8f93-06a01895c8c0",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d48e0175-e0d3-45d6-9810-7e3b78f2043a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4823c57d-510f-43d2-8f93-06a01895c8c0",
        "cursor": {
          "ref": "7812e986-4359-4607-863f-4fb390674d69",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "e1ae2679-d4bd-4ea9-aee1-2be55ca1cf28"
        },
        "item": {
          "id": "4823c57d-510f-43d2-8f93-06a01895c8c0",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d48e0175-e0d3-45d6-9810-7e3b78f2043a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ac59968-8d9c-473a-a047-f3d058a563bd",
        "cursor": {
          "ref": "c930a72f-2774-49ef-b170-f985bcf69a96",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "d8438a33-5058-4a42-b81d-e4a6bcd10ce8"
        },
        "item": {
          "id": "6ac59968-8d9c-473a-a047-f3d058a563bd",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e166dc76-17b9-4cac-bbf1-2416aebcc816",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ac59968-8d9c-473a-a047-f3d058a563bd",
        "cursor": {
          "ref": "c930a72f-2774-49ef-b170-f985bcf69a96",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "d8438a33-5058-4a42-b81d-e4a6bcd10ce8"
        },
        "item": {
          "id": "6ac59968-8d9c-473a-a047-f3d058a563bd",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e166dc76-17b9-4cac-bbf1-2416aebcc816",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb41a0e5-cffa-47fe-a8ab-d9f2efbbeedf",
        "cursor": {
          "ref": "2a926ad2-c5ee-47b7-9a29-2a891b199676",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "ed4bb478-1564-49be-b727-97ae269b9d1f"
        },
        "item": {
          "id": "bb41a0e5-cffa-47fe-a8ab-d9f2efbbeedf",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "76f6308a-8588-44f7-833f-4cd579463d8c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "bb41a0e5-cffa-47fe-a8ab-d9f2efbbeedf",
        "cursor": {
          "ref": "2a926ad2-c5ee-47b7-9a29-2a891b199676",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "ed4bb478-1564-49be-b727-97ae269b9d1f"
        },
        "item": {
          "id": "bb41a0e5-cffa-47fe-a8ab-d9f2efbbeedf",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "76f6308a-8588-44f7-833f-4cd579463d8c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "2d5c2887-3207-42b1-bdc5-d64ae0146f0d",
        "cursor": {
          "ref": "e466fbcd-cf68-41f9-a5ef-3057fd620971",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "86481de7-b8e8-412a-a1fd-bad05eca2de4"
        },
        "item": {
          "id": "2d5c2887-3207-42b1-bdc5-d64ae0146f0d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "cf70d426-b564-4810-b240-1181432b3cef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "2d5c2887-3207-42b1-bdc5-d64ae0146f0d",
        "cursor": {
          "ref": "e466fbcd-cf68-41f9-a5ef-3057fd620971",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "86481de7-b8e8-412a-a1fd-bad05eca2de4"
        },
        "item": {
          "id": "2d5c2887-3207-42b1-bdc5-d64ae0146f0d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "cf70d426-b564-4810-b240-1181432b3cef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "a72726da-3372-4f68-a07c-c29c6509af2f",
        "cursor": {
          "ref": "06e9c941-c7d8-4766-a938-3a4b2dc95ee1",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "a690f773-e143-469d-9e7a-c7a2ace48623"
        },
        "item": {
          "id": "a72726da-3372-4f68-a07c-c29c6509af2f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e0482f84-7a9f-41aa-8e82-48077458c571",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "a72726da-3372-4f68-a07c-c29c6509af2f",
        "cursor": {
          "ref": "06e9c941-c7d8-4766-a938-3a4b2dc95ee1",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "a690f773-e143-469d-9e7a-c7a2ace48623"
        },
        "item": {
          "id": "a72726da-3372-4f68-a07c-c29c6509af2f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e0482f84-7a9f-41aa-8e82-48077458c571",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "0f26247a-1ccb-4704-b974-b6949a41d10a",
        "cursor": {
          "ref": "dd0b56ab-5f0c-40fb-8699-f1c2aa88e87a",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "7d75e2f0-64a7-41ec-9646-036b244ef012"
        },
        "item": {
          "id": "0f26247a-1ccb-4704-b974-b6949a41d10a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e3cf4b0b-39c2-462f-aefd-7c807f7144ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f26247a-1ccb-4704-b974-b6949a41d10a",
        "cursor": {
          "ref": "dd0b56ab-5f0c-40fb-8699-f1c2aa88e87a",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "7d75e2f0-64a7-41ec-9646-036b244ef012"
        },
        "item": {
          "id": "0f26247a-1ccb-4704-b974-b6949a41d10a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e3cf4b0b-39c2-462f-aefd-7c807f7144ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f26247a-1ccb-4704-b974-b6949a41d10a",
        "cursor": {
          "ref": "dd0b56ab-5f0c-40fb-8699-f1c2aa88e87a",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "7d75e2f0-64a7-41ec-9646-036b244ef012"
        },
        "item": {
          "id": "0f26247a-1ccb-4704-b974-b6949a41d10a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e3cf4b0b-39c2-462f-aefd-7c807f7144ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e02d91c-0c62-4cec-85f9-639192fc9aa1",
        "cursor": {
          "ref": "a289beab-b303-4276-b99f-c5f4aa086a12",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "f516f6c6-3d97-4fee-901b-69a6fe43602d"
        },
        "item": {
          "id": "7e02d91c-0c62-4cec-85f9-639192fc9aa1",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4b472600-ab03-4bb7-8857-c02227e539e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e02d91c-0c62-4cec-85f9-639192fc9aa1",
        "cursor": {
          "ref": "a289beab-b303-4276-b99f-c5f4aa086a12",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "f516f6c6-3d97-4fee-901b-69a6fe43602d"
        },
        "item": {
          "id": "7e02d91c-0c62-4cec-85f9-639192fc9aa1",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4b472600-ab03-4bb7-8857-c02227e539e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8450612-1f02-4929-a1ef-7d65ebead893",
        "cursor": {
          "ref": "f73ece5f-4969-4880-a5bd-cd1cac15d5fc",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "7530f7a1-e68c-4279-a968-2be784a9092b"
        },
        "item": {
          "id": "b8450612-1f02-4929-a1ef-7d65ebead893",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "56476fa0-bd97-428b-b33d-f9c883e49c65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8450612-1f02-4929-a1ef-7d65ebead893",
        "cursor": {
          "ref": "f73ece5f-4969-4880-a5bd-cd1cac15d5fc",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "7530f7a1-e68c-4279-a968-2be784a9092b"
        },
        "item": {
          "id": "b8450612-1f02-4929-a1ef-7d65ebead893",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "56476fa0-bd97-428b-b33d-f9c883e49c65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}