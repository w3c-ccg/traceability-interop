{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a1c73aca-be32-47f6-8c76-3b949a0d3322",
        "name": "Clear Cache",
        "item": [
          {
            "id": "e0971797-d138-41e7-ac15-e3d7a5289da6",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "33a28c7e-0fc6-41df-b642-56277a1cb608",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0b49d3e9-47c5-4149-aa7d-423633aee1d8"
                }
              }
            ]
          },
          {
            "id": "01c6c9f3-3b46-48e5-ae30-310980b7436c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "11c4b520-0166-44e7-9138-9ccf4ffa7001",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0ed9f2d5-5862-47c9-9ac5-2a4f4cf2e5ae"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "a84f8be3-5b4c-4981-8485-c14e596bd15f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d186ce36-5bec-4861-96ed-08e988af17c3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "81c56cc6-22c3-419e-a3b1-31351471c70c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d6c534b5-1f94-426c-bb6f-37facef12a4c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "34338125-5122-458d-b7bf-bd149c2e273d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3e2e8b74-153b-44a0-989c-bfd3bda8529e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "abc6dcde-5058-436f-994c-46c06975790f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dbabf580-e6a5-497f-b79c-6766699d4445",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "863cda77-c078-4723-8f36-3b2f589b4096"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "61055384-0c8b-4d95-9c93-8741059bfc92",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "cdfc3507-ae49-4029-81ce-0e79c0326e0f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dd6f86fa-e33a-4212-be19-ded3ddc9ae64",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "174c92b9-d5c7-4471-ba34-e8b458a96c5d"
            }
          }
        ]
      },
      {
        "id": "326d9dff-5ccf-4caf-8816-c302ac503016",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "32c9c98c-6cac-492e-81d5-ce2d7be80e8d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "092e14ee-8b64-4070-82c3-24bb7f6c85a9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "99a3cbf8-48af-40e5-aa41-d15faa6ac2df",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9945df03-dcc1-4ad0-be0a-9626292d2a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "222d2888-226c-48e0-89e6-98c4c3b8fdd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "475f843c-3e5a-42dc-9d1f-f00759cbafb1",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d520a5f5-4c56-4268-b8ce-8f8387a0a822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c2d75f4-f8bb-4e8b-8186-e45e494048d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8c514a1-f36a-4097-ae32-e5da25ba9385",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f44b468-09d8-4434-a4be-ce5f8f8da1fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43663d0e-fff5-44a2-be36-b3e4453fc535"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b7d738c1-98b2-42be-985a-9520af3b76e2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8506d560-d3d9-4d00-8cf5-38c8410b86ba",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e34b4076-648f-4233-b137-0ceb4ec3ca3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6ffcdae2-0350-4152-9c78-bd4348d50ba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d560ac40-5955-4331-80ae-14016239ff02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1792488-4153-4089-8258-f77b9217358d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "abfb4692-8312-426e-8bad-b82d469f7527",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6840098b-116d-42e2-8d3f-e60b5a5ad0bf",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "81bccd99-b3c5-4d5f-8b1f-973372d5d04e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b6e63191-d818-420a-91f4-ae687c46314a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6d82f114-2dac-4a74-9ff6-bdd00730ad61",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "d959bedc-f753-4860-b812-d0c52edee35b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "007de77c-c170-49d1-8967-282899869ae8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "165d2987-0ad3-4ee1-a382-b8100a36ff77"
            }
          }
        ]
      },
      {
        "id": "f783d509-77fd-46eb-b2b6-e5c7033636dc",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "7d126f1d-dcd4-4699-b5d0-c1b130111335",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3cf1324d-7bcd-4c17-99a1-31e5a517e180",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "fc1e3897-f4da-4c07-a85e-4d8aaf27136b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3263402f-2871-41d4-bc28-c2e96c9850e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de2a0466-8baa-404f-85f0-d3b9bcfbfe9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a44050b-c6d3-4cd2-b445-792be463b8a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c62025d6-ad44-4c69-99ee-15cf1912de31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fab963e-ebd0-4945-9285-4f4893f0c91f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a8722b4-5408-4863-85e1-803c532e43fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18a7e89e-6cd5-4971-92d1-b92195839cad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9260ca70-d9ff-464a-a041-8a906a958c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5df98867-8e02-466d-a49d-6c0cc41a61b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4982b8e5-947d-46d3-aa63-f07f26bef7af",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a4743d4-355a-4b84-a033-321fb792278d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "442d6147-8051-483f-9d79-b55a3a9a0ccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc2d916b-dab3-4d86-ab22-0957f4a123d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4987a17b-7742-42b8-beee-12fd81c4e369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d0f2d7-bbe0-4a1f-b24d-c15512105184",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d4fb74-fd47-4629-8156-22fd719b2b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8e7dc7d-5320-4f55-8d64-4245710fa9e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad29019-bad3-40bf-b10e-84ba4e573eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ecb6d20-15c0-4dd1-a1bb-e486e883f9af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77499061-f80b-44cd-a525-cadb3851ed7e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67723e6b-5566-4acb-85e4-fa65dcdc82bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30fda977-6647-4f03-97dc-b8aa91c2fe4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4afb861a-92f9-4ac2-8765-1ff1284ca25f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "56ad10c7-0a11-41e4-94f0-b49faa87bb0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c73508d-1ecb-4883-badf-ea04f53d9f0b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c46518f8-0c0e-4606-8ba1-8f6b3e745d4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2f55155-f83c-4a5c-b41f-f7451f40e19f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23a3d044-5ca4-4639-85ee-ae51e6432f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6313125d-67d9-4b27-9b84-0cbe48695c64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "397dc938-625c-477e-8014-dae53dc1ad72",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a97415a-9b7d-4ffa-b956-ecdc90c2dc1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c50081a3-8208-4758-b8ad-98fd50a41fe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f9239b2-7196-473d-8983-857f68dd6091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c29663e-7dbb-47c4-9bec-d7456501a7c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "613b483e-017e-4804-91f4-333b5d76623a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7abe17fe-78b6-4966-aa86-ff286db16878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c786c29-64cf-4585-af3d-6f58a9557f0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51de1be4-59dc-415b-8aca-1bf19a402fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a572b0b-27d9-4987-883c-284aa44b8c7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99b119aa-87dc-46cc-a4c8-52bab7000189",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7da549a-5fa7-44fa-bd00-127d5adf4fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fc13d86-eb77-4745-b4d4-722f9bb950a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4881465-62b8-4634-9a99-b11ef21c22fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e561c2b0-bed6-417e-975d-da7ee0cac937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d381a422-1b78-4339-aa60-681b149b6f8f",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d74ce11-a17a-46a4-8492-86e9ed8b0f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b36d09b-79b9-4db0-838b-473d9a17c96f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d69ee678-6c65-4d65-846d-9830dc7ad2b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a77dced-0305-46c9-9d4a-9aeb86574fd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8b9bf6b-8b75-4abd-ba5b-e98b5996ccdd",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c0783d3-f6cd-4282-a8b1-86b673cff601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80415d3b-e941-4e89-bff4-e449fb94fcb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e494831-b37e-439b-8e9e-2f8e744d7a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "888ebb2b-b94e-4acb-98a8-9877031660d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99fac6af-775d-43ec-a01c-85c10f27275f",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d96fa24-cd84-4cc3-a986-27860d6987f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32e621ca-63f6-4fc7-b004-a8b3911e30ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7da5bb9f-6883-4b0b-8fc7-9a3cd2a5ce27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "14f5f927-a8b2-4acf-ad70-21285f4d71ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f7b650-a1cb-4fdc-8544-92575a7bcc1d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c8af15-a255-47c4-a63a-dad22d9bb6c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d875500e-da1f-4fc8-9d89-6fc43c95d00f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b868b7f1-e3b4-4900-80f1-fb8b944fdf83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "375b9e64-9ed0-4808-9fa5-c107f78ff962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6efaf3e3-33e8-4e65-ad04-2a04adc1664a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb4e65c-5c8b-449a-b736-a8f343887c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2de208de-b4a6-4b6e-8276-00928a6868d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65e03067-1f02-40fd-81a3-0931a2a933d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "acac0c45-5c91-4a4e-a99f-631211a317ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0111f48f-e2e7-4f20-8da5-ee52d0d35e26",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f91c198a-ff88-4306-aec0-8b4dffd21538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e621294-62c5-4bf3-8157-622cfb2a826b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "642e28f4-3d78-484d-82ba-4dd4de317390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73a0fe3d-5e61-40ca-a953-89df80a1104b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41c7eee2-f31a-4c25-92e4-b48597cb3051",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd9fed72-c4a1-475b-a355-92ef3599e2ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b4f71c1-397e-4ca4-84b8-b0b42bb9b237"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00aafb88-7384-4c14-8af7-e5f490726e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9109285-7f07-4657-8a75-202961464412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e35a866-6c22-4271-b50a-d55ff5376e54",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab045e2-5ccb-432b-9af9-fef0c417ac7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21c4edcb-7da3-4544-a75c-82156bbce14b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33371a84-d429-408e-bedb-cfa9b49a4795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "632a5cad-b25f-42e0-9003-11e18a7683b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6711d637-350a-44d7-9cda-6919df6216db",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e386d7e9-75a8-4f7f-bdbe-2fbefbf31764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce166235-e8c1-4472-8afd-5568ac7b56b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fc92408-c24e-45cf-bfc6-8c80972b5ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d0befa0-0727-4f59-ab0e-70d23784019a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea6b9f75-14cd-4331-b521-05ab7d9c3bd7",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15422c7b-bb31-4d62-92f1-5e67fe5e206a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5640b2d1-1507-4c8a-94cc-cf6c6b01b3ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a414c2c-56e4-4803-ab3f-3af76a18d250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b510f34-0f0a-4257-9bc2-3eda4d76567a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b297d8c6-c273-4e71-a405-39e5c67f0687",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e10d791-7ad3-47d7-a713-aa1097ead7b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "097b856d-932e-4d05-9c36-f7637dbda7d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb89c845-3792-48b8-9db8-36f467f8dd51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a19daee5-d94d-46a1-b57d-195509ea41ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70d933d9-cc6d-4a85-a334-05e18f04d65e",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f095afb-1bc6-44bc-8a11-95a046195826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "219d6a48-1770-45c3-a614-7dbe9cd970ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f9fbc4e-3d96-4b4f-bbca-1fa6d17ebea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b344bf1-2cdf-4e22-ac85-f8062b382ac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaca35bf-1e81-44f4-8262-29f55a3d4e72",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04ec858c-a591-4abb-8b30-58579e2b6a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01e1050e-9289-430a-93be-c9cd9c7510e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d3370dd-263b-4d53-bfd0-3db82db213e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "120b94fc-d2e7-4c31-a3ea-afd98bbf6025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab24af1-b11c-4f84-aa24-93723a825662",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eb166fe-dcad-430f-aaf5-efb69bff1a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b40144b-e5ad-4f85-a914-63ab532df503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c706e56f-a7a7-46a3-b338-0e5c4bce1f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c1e3efef-6116-4044-ae4e-21091226e562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b052c7-cc26-4e82-a291-8e89bedcf063",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca8415d2-549e-4bfb-8fe1-f60116b2d704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e18583be-5beb-4173-a627-47baab18d1ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a52144f-e80d-446c-a82a-2a2904512a2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d14e0a57-1be8-438a-893c-12b7fcd5bc67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95cdcb89-e5ea-415b-b992-8e8f5f2c2690",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b90c99e-8bcf-4ffa-aab9-31ab3a199feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5debfa69-80bb-419b-bb2b-65b30959f3c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a6f529-8698-4dff-967a-7ccc7addcdc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b3fa73f-4a32-46b1-bada-3f59ae03f2d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dffed60f-a9fd-437b-8826-8e90af70b396",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cac9e0d5-d558-48cd-9c7b-1f80ea919402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "779f7f75-4314-40d5-ba5b-1d7ad350f144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b1323a9-45bb-4aa8-911f-97fa5d4a886c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d30904f-32e1-4a76-927b-d6dde5075d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e474a97-ca42-4473-b144-dbf312aae356",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab90616-8426-490b-8381-c0673f3c2e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6da99577-0154-426f-bb9c-5a9c87dea1df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d440f6-4697-4018-863b-d16f6f736412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7681a86e-494f-4c1e-afa6-7a66dede3c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "849cd8d5-ac68-43a0-ae05-6236c99c786d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18c6864b-3229-4cf6-84bd-a5069fad926a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7889123a-6c59-4d17-bf4c-fe74594f0a1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70eb9e2d-74c4-4a44-83dc-98e6953b9077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "be53894e-2d64-41d6-a18b-8ee83de3ea3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c095b63d-033c-4169-af44-78d5b060d0c5",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e33afa2c-8c03-4250-a857-22449d74c753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b54e3b16-cf99-4496-9ea6-2d5fc0f8cb61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e36fac-704b-449e-9a0a-ff9563b214fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa6761c4-84a3-413c-925a-cfc8917d62ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d67b576b-2ded-4be6-814e-cdd153be54e6",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "703c7d56-9e82-433d-8409-6e6d4c84c6d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d815b257-319e-4bfe-8bab-7f3cd858bf17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "922d3eeb-6f35-412b-8701-d744d5197fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e8f64f7-f142-4d82-9e4f-00264243c214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "998bdf2d-bfb5-401a-ab37-523412fc22b1",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f141af-6c3e-45a8-aa9f-eebb511410ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b96f623-ef7d-422b-99ba-a5f1987e8f6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b28bb3c1-c56f-4c5e-ab54-179354a34341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "05f30e60-c799-4b4f-b9af-9302aa367b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8e6c46b-6998-4c4a-8065-01aa16c6b9e9",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3c87523-01d1-438b-9424-d12134115a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c0eb5ea-f151-4a5f-927e-1ed035566a86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5fef747-5d14-4b10-b386-9adfad4b3b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8d9496f-32b3-4f93-9ff0-8700bf5ddcee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66d1b33b-7e67-4939-adf3-e3f7acfb5460",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33cff5c2-9eb3-47ff-8a6b-78a0bc9d9f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cad3f60-4c88-43f1-aba4-c775d6fb7f08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49cc3fe4-1ee6-4081-a97d-cd4f3d396d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "595a3cd3-7309-4469-8304-52c877ef0637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e8d4c6-aff0-4792-9bb5-226d7db8fbae",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6ba0ede-cbc6-452f-9ed4-0341789a13aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c46a4c72-7ca3-453c-9b52-7bd63d1d7b10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd572d8d-bb15-4213-8a1f-52b7716a8ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f4ab228-c4d8-4a12-aaa5-cd42cff1ef08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "583e3cfd-7641-4df6-b3ca-0da0c9c43b1f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2006954-f6e6-433f-82be-f1e69d27dc55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a719fc32-4883-4dd3-abc6-b4e5c9a6476b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "329d5e9e-0e3c-466d-9a09-56d41825864d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "29b1d7d4-c73f-41ff-90ed-22d6c7947394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d72351a-310b-4700-a15e-256e505700db",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6481ad9f-5977-4d21-9f97-dfc47319bdfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "688cd947-6380-4753-a6c7-fca135b3cec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9722e34a-7d9a-44d4-ba69-83f38f0eccc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "235c8b8f-f1b6-46d3-a067-2b813fe406be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ade4c31a-4ac5-4e19-97e4-cc8c5e8ab642",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d2a75fa-7411-483d-8c10-e8ce7860d929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04477430-9aba-40ff-9826-3721dcdf25fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a45969-f806-4bf6-a8ac-fc3448ba34e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "76d431ee-d8d3-43af-8de2-610f84304190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52118c19-c2b2-4a15-9769-98166dffa489",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af371af-d9d9-43d2-8323-982a2ba75c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c701f32-15f2-43c3-9967-a98dca7b6b84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61c9a5dc-4849-4d70-ab15-6d636d448ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d045597-383f-48be-8928-d20eb37794ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2cb6d0c-f5fd-4208-bbdb-c2f0fdc7995c",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b298f980-ae52-4dab-be53-486764f84e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ab9d970-f923-4a7a-9eb1-95da37250034"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49f60bfb-cdf3-4da3-95df-d4fc952fd0f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4914357c-07f4-4f95-a6c6-f2096b34249d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30bcf2fa-19f1-4868-978b-5e6d8806473c",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8053bc3-dd5d-4232-8f22-23166ce53491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37148e2b-a6c1-4281-94e2-1d2e85dee299"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6014b0bb-bc45-4758-ab4e-07c1fb46b396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "661d244a-c636-40fa-ae8e-c4f5eaabed00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "148518cd-98d5-42b6-a727-6981213c55d8",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef364de6-c01f-4e71-a65e-67f492f4e390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2693f03-d351-4703-a624-2971cad425b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ab379e1-0239-435a-af07-7db890f4c407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "09153af6-8a68-4453-99c1-9a3f5f78cc64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab239cea-d9da-45e1-a212-70b6d43cf898",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da87c2cc-91d7-4840-ac74-3e44219e0b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "833a310a-8036-4441-96db-8424a419287d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ee4c875-6908-49b0-a6c2-707450b8b96e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "37626ee8-697d-4165-ae3c-1439277e158a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e969bde0-922b-4b53-9ffd-20bc0cd2ea06",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7e64e5d-1d77-4fab-938a-abd1dcec38b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9861a0ab-782d-4af0-9302-864ed12257dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62aa8cd4-bcef-4b3d-bb29-286f79b64f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "12370c0b-77fb-41cf-a44f-5fe2b3fa78d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86203726-b90b-499e-bc89-bf44499ef3b2",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "980b6290-3cd5-4ebc-a21b-4537c017daf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7f3a6ab-e293-42d0-a797-d431dd9e0577"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5202e44-c3a7-451f-b235-33dbbb409978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd5393cc-7c40-43ad-a5b6-51ca1ab97cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62754b88-1671-4c40-b339-1dec371f4762",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52465df0-7788-4d40-b4c1-11cada5f5ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0140bbfd-419f-4433-9210-cf93ebf4fdd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "148ac92c-a248-4688-8246-7c40bf8e3617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ee5ba4b-46c5-4c8c-82a2-0b702e65943d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53497b71-2c8b-42bd-b450-7a019b839859",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7105541a-48c8-4b19-b767-680520374db2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daf696ac-c6cd-42d8-9b7a-d12e7d7db05c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa5bc56c-6f00-45a1-919d-a7867bbeaed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "db13b830-fab3-4df5-96c2-e7b5c7763664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b1508fa-6f53-4836-8a80-ee86e27e5cd6",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f14f8eee-07da-44e1-962a-2ac9337fafad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1c2d174-50e2-4b9f-b175-8e94527bbf20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f06183-7e73-40d3-bcd7-9fb48e59dd9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f39a818a-b4fe-481d-9c36-d5ee07a45bb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4b9547-22f6-452d-95b0-dca993e860b3",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b80e406a-0f65-4b51-8005-0808739fa563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7db7ac4b-ac06-4880-9446-897335e47f14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff53dade-0a66-4a16-9a38-31dab3f6c799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ccb2b9c-cfc7-42b4-8b58-7cb1e1c46f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a8574c-4f50-4b44-b0cd-74a2cea09a58",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae7bb484-d976-4a55-8b4c-3e2ad9e666fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e558accb-e1d4-4322-8335-0639e03da4c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f44c7085-5fc7-4252-b203-b5c2433919a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0a7163d-93c2-4e7b-82c6-38a0ba7de511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c35b42-0d42-4502-82f0-2208865c15ff",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa75cb3-827c-4755-935a-8b345803bc88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c55a6da-f43a-4785-ab21-bc62c91b912b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0a8e668-baee-434a-bfef-da62a8ebaecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ff601ec0-45c4-4b9a-9b00-b3b962321409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae0eb0ef-8afa-4be3-82eb-c43d70c19e6e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7c755e-ff51-4bd7-a5ca-7a2bb9e8a5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfc60941-da51-4a96-8cad-0f2b904ce51c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de501df6-7090-4892-b6ac-8d18764c198f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "48220428-ddab-4e9d-bada-aeb33f808740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f8c78b1-8e87-43a0-8306-544fe98f3312",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e1a01d-29e4-47b2-840d-1073b93d3967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff1950a6-b14f-4c1c-a307-061618ddb6c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac4861c-d318-46da-90d9-72d4440d928d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "53ae0cf7-07bc-470b-b00d-6fcce0a67196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb0f127-c420-485a-8066-424032fe1081",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba98b65-34e0-4466-8065-c65e1d3bcd15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40d681ac-3330-40a0-adbd-c6798e354a7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e1fb5b0-1f73-4794-8308-3f14e528510f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "10766218-418a-4be3-a236-ec000c18a124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "654797e0-a99d-4726-bc88-814eafbf2516",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3c87900-07ff-4c1b-bffd-949d7a586566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c024d17f-684e-442b-89c7-798a95af2838"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8f07b72-7695-4e90-bdca-852806ed6ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce9c3939-9db9-45cd-949f-5325504bdc85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a225979-cc5a-41a4-8630-141733ac2569",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7234acef-938c-46fe-82c9-82759d56664a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33cc260f-193e-4dd4-9acc-e3361285a1aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "515a52e9-ef50-404c-aa0d-d41f84caf2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b4d1dec-fc3f-4d29-99fa-76745e615aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "956c350c-da23-48d0-89d5-b62adfb26314",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92e81fd5-5f4b-4454-92d3-5ec4e6eaa019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fddfbead-481e-405c-abeb-efd7280252ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c8d0596-02e6-4401-b798-9a3fc1c65e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "18e899f8-7102-40bc-8a58-229e6366f1e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21a0ff59-79f1-4e03-abf0-5443e954c636",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d08919e4-8173-4595-9186-7478f1647c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99a58bdc-517a-499a-b45b-574a22b65830"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a84b20e9-4c89-44bc-87ad-4903185306d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "396f6971-3d54-4eb5-80aa-966d316143a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca294f7-7972-4e52-b3f5-f5d0fc74e123",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1697402-2298-4ddc-b162-e22443a03875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d0ee58c-4053-4006-84e9-46ef7792184c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62d86e8d-4125-4e9c-9e0f-34d16e99e7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "16679e2d-166b-4c0d-82a0-9435b24b3ccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6934ff1-2cb9-477f-a9fc-aef90c6155a9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce1947ce-e483-43f0-b12a-2b85dc5a64e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f553f3ee-6c9c-413f-95f6-0abe19f94c31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa141e3a-2336-456b-a3ac-c938abd07e92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1611388b-0d3b-43f6-9ace-9e77b98fd57c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a137b2a1-4f60-47f5-8271-a65486e6d37e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aefea98-75a4-4853-a1ad-06fb78c67f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18364104-ad50-41e5-81c9-ccd90be237ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04d21645-d5e9-45fd-bb99-99925ba11abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "db48d4b7-6122-4329-ae14-109bb9218952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ad3d6aa-966e-49e9-8527-28299e4acbd9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0978866-fae2-4c68-a799-44fe7501a177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "953b2ad5-d6bb-48c9-8721-84b966336e36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a17c016e-f0c1-4d88-bfe6-ab3c30be8164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3fd504c-4d49-43cb-a4cd-7f1f9c154a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "824468af-369d-4b4c-8a43-411d9eb64e48",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc7b283-c273-4af8-8d9c-b54d145790dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4089aad3-0b5f-4465-91c8-7cf067205895"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdac136a-35b8-468e-89d0-488cbe2356ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "03c15206-ada5-425f-a5ab-2b59a993139e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e735b5-af65-41ad-90b8-9fdca2f16d84",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "656beeaa-6955-43c5-bdc7-5065389c2c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a43f80d-2cd1-469f-bbd8-1a4aa5b1afd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d915bcb7-5a5d-4c1d-93d1-a7a20ddddbce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f2e09a7-35a1-4f53-816e-9a2557578e5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1370a1d6-4be5-4101-9768-4c2a7f0cb4da",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df63308b-5261-4188-8b5b-0fe6d96de4d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cde69ba-991b-4177-b78d-a81cb3f82490"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98013c69-e4c7-4e0a-876a-0bace11eb604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f3e3b23-3cc8-4ce5-8fc5-85293eb43700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25fe9d18-5245-46db-bf18-e304557de7b1",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39934c51-3df2-474f-ac56-4847fbd23b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ee791cc-0d5e-4f7e-a6a9-836cb7e976a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdaaeec3-2d39-4441-84b6-341f81c8c2cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1f640ff-0027-46ed-a34c-73925bff4555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa194e1b-6aea-4b29-852b-eeec4c2b6fa9",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8713edbc-643f-497b-a062-dc1d007f45bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2af9106-5948-4d7a-a145-0c613378eabc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e359e3-6768-49f4-8386-4f5d0f46e09c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "575ce720-3462-4fe6-8152-e899d7913f3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04ac081-aa24-4a39-bd37-48b94d57907d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b2b748-306f-4bbb-860a-454f64d01895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e10092fc-a98f-4a1e-b983-9e4e96da12e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "820cffd2-3dbe-4d37-987f-52de94fca532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8c6f95a3-d87b-4b17-88d3-7e0f54247fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4faf9ea5-e28a-4c0e-8dfc-e4a8cb89754b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ae608c-23dc-47bd-972c-30f21a9a1bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4e68a35-dac5-4c80-9758-c9a2ad14c93a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8e03e2b-fb7d-4922-b470-ff1aeaff20f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "22bfc177-bbbf-4083-90e0-c0b079168e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a71d6d1b-0bb2-46ad-80ab-ebd3fc14c09e",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afbabe85-34c4-414c-8976-c732024d28eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77c9e627-b57a-4a31-8f81-116a34ff1fa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26614e8a-b58c-4aea-bdb2-80cfad32f8a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "20967677-3255-498b-8747-ab038d297b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "748b2510-f3e9-424e-b43d-486621761319",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b01983c-b412-4462-ad81-902a8cf3710e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24a30fb7-db3f-441d-bb26-c4347f7f9d74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aacd276-3ecc-4da2-a77f-77b85595c3d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9bde5c4-5681-486e-8f04-b46fa7bc8e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "478ef864-c6db-4364-ba3b-c0b285f16f14",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b52f489-d52c-4fe2-b31b-389f81c3ce66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10369f77-0915-43e3-92d5-152eb181635b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52fb8010-c9b9-48f0-baa6-707145e031b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd88dfe5-0670-4bae-8167-84ee9d5202e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53297dd1-6492-4a1c-abe9-7cfda8c19a64",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af6998e5-3106-4511-9420-2d4dce64eaf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4381b934-a2bc-447e-853e-cbb1ce1dfc8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7aeab42-3f63-4c74-97af-b4c51875da2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0c72054-4e3d-4c99-9457-e57c3211dfcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7432ce0-8ce8-4151-923a-79191361c6f9",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c65abe3-88f5-450b-b06d-bb81c65b4299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "937ccd96-face-40f4-86b5-5effeee5daf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a71d70b2-3444-4034-835a-8660a21f07bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "014e3ee1-4836-4dc2-b1ac-93dce02bc2e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7329cab-4b31-47eb-a537-81eccc12acf2",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4df9cd3c-2908-4732-9da6-7215d645a2b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90f3dd58-16c8-4f3b-bdb2-e65f06fa125a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5401b90a-ca72-4c3d-8c0f-6691b14ba4a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "901ed4ce-7078-43b8-9582-2852ffd580a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ec3ead-f558-402a-9952-5ec02e4d2c25",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f047e647-1300-4006-a5f2-0566d9e0b226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2e95775-3e2d-43ed-b830-6ef8e86d823c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "504cc315-05f3-40eb-afd0-dd9ea3a2e5fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef645084-de25-4cb8-b147-8ef2e188f4a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec857578-0586-4a0a-91d4-e5a831a5d63d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f0c7a7-3707-4125-a8ec-b8e6dfaf5844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf026590-726e-4434-9af4-df99c4b63f20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bcd8b69-f178-4660-8884-cddb1a25bc93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb10b871-2f3d-49ba-907e-8ba674effb53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3653414c-ffec-4156-9d8e-b2ff84be8599",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35263461-7fa6-4a0b-9f5c-c49a5a172dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08348c87-6e3e-4ef5-b775-4a4de6dbc8ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24001ff4-e4c5-4c4e-890b-f721cc6d4383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e0f9c75-bbd2-4726-8f42-5337f7ebe7c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c31c76d-c1d5-4564-bb4c-bc4158c124ef",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "651af323-fa03-48a2-9226-7af80d55d6c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1401ffb2-da58-4c64-9dd0-7cf4d1305457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1872697-40ee-4f97-ac7d-4830550d4621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1931ceb1-662c-4c26-b17a-3a4c6052101f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "874d533b-0759-4453-a009-f2533f2b68dd",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6beda109-cd66-469f-afe2-5ace9e295dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c915363f-14f6-4464-a5b2-643b86cac222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d2aafc-037d-40c1-a7de-36df72c7263c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8deb8632-7ca8-4df3-b5ec-3b713e05a848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25474cd1-b0c7-49b4-9eea-24f25b79eeda",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa8b94f3-bfec-4d3a-ac6b-c266d407a798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24622800-2a5b-4882-8845-665287ccd5e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2983959f-1e3f-4e9f-b398-d662c4fed432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b20187f6-3ee3-4fc6-a0ed-ab062ab73541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9a11c5d-ad06-4253-9058-bdb0fb27c272",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "661b9c76-7600-4e4d-93d7-19009e111445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bc681bb-0b9a-45ad-b3e3-2c41df925b4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af916c3-2d5f-494e-8801-b28e2f00c72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3d2138d-0d98-4950-9ffc-3d9928211358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1754d5a-27e9-4e77-bae9-aeb38345fb14",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b424a9-ab12-4436-b6e7-de263a33583a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a5058d4-fc04-45bd-8c98-185529c54fe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "399cc45f-3abd-42ee-8e19-14920308f67f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8505103-8904-4fae-99d1-1595b0e7525e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20b2bf13-18d8-4b1a-b6fb-3851db21d49c",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "914a84c6-8454-4636-9968-506762750e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "337bc636-3197-4194-91ad-75665269cdd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82d6512-5cd0-4140-abc5-b4bd71d8f00d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "01117367-76ab-453c-a1c6-89bf91f66dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa0243c8-5beb-4686-b715-f6bb84721868",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a98cb6ff-2629-4e2e-bd48-441c2dc40068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a78c9468-e16a-411c-9347-8f5ac1ae33b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05283aa9-9235-4750-90f7-d0a684ff776a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "88aca430-1a94-4143-9771-56ab981223e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16ba3b3c-bcc9-42ab-b042-eeaa1d19eee7",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "469b8cb8-b604-4de7-a22e-4bfacd6fbc2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed50c531-26b7-4180-b535-7cba7c9f6911"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae911d9f-a7ec-45c6-8423-3d855ef55db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dc871401-4116-4539-8a9d-cea3dde0e86f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c067debc-e95d-4126-9b48-2eb9dd1be956",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07e8f43f-f488-4e64-bbed-92dc9c45eed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67a10a62-7c54-4601-86e2-01a55a46cacc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96cbf579-6720-4f97-b4df-afb5487dda74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a928648d-7707-4bfb-8266-579075aeb798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f22ad7a5-d677-4dbb-a2f4-329d9a0353de",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e61e61-a9a4-4e33-8d6a-c6c09f60b3ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60efb672-c509-44ed-b7c6-66f5b7c3349d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d424ff6-7e44-4f05-b8e6-af45711bae64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "90ffe068-8807-469d-b271-178b001d32cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d8d07a5-18b5-42e9-b3e8-1c70475f5e3c",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f09b30dc-5a7f-4748-933c-58deb9e56b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b382bd60-8578-4310-8e0e-19f20f569f90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c337e19-545b-4b96-992f-17152340e0cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d394b9ca-0ce3-4e48-aef4-24fb219112be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd7976d8-898f-4d12-8366-a4cc7c232bdb",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7664ed96-cb3d-411d-b26f-50c2e6eefd82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e508977-f19e-44a7-9332-241a55395efe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "367cd0c3-c941-49c6-8697-15ced9b6a2f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "138454c1-409a-416f-b7ce-ac8be4bc4f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c8488ca-a27e-4a64-9778-b261508f5484",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f307694-e3dd-4453-844c-a1c3715d7093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac4df935-052e-46ec-87a8-4c95dd1c0aa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c68f867-f874-4611-aef1-7e486ea815c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d69bd865-c8ee-408f-bed0-49b342668d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae39ba5d-4536-4cc0-918c-05e9fbe446b5",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd9ae3f3-4a3f-4520-92fa-01dfa3d0c2cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e836e32-765e-4f26-a73b-fdf9d5e453c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b647144-2823-48f0-936d-4e1cd637bdf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce0ca2e3-02db-4556-9593-f4d7628916f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "689cec31-1e33-4339-beb1-42dd669f3e94",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f8c3a6-9f2d-4250-aaf3-b12181134dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ff5d380e-127a-4952-883b-ec75053746b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e4d270-dd53-44ea-bbef-96d6069689d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "beeb7fb5-7045-4c6f-b46a-f3a956c22577"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "73be6a45-2686-4a70-a94f-ee7fda972551",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b16b5099-7265-4882-9997-d417ddbf6057",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "506c547c-b484-4d96-be01-709e9883a4d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ca04d23-abb3-41ce-87c9-1bcfcb8af48f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab0410b8-0b03-4e7a-bc58-a75fec027ea9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29b20c66-67fa-498a-8613-e3041e0f2492"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "192b9964-8297-4bdc-a9a2-9030cceb767e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a6eb598-2536-488f-a412-0532e5673aac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2268c037-10be-4e0b-ab47-886e7e46c6bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b2346a2-c62a-4010-b8d4-9e002b7e95c5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1284b5a7-0d3b-48f3-ac07-0d0dc2e0eb6f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bab9fe45-813e-407d-b268-95e697a017d7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "71bd0c7e-aabb-4fef-8c0f-130aa4273406",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "13f6c419-0099-49f5-84b1-2721df6f36b8"
                }
              }
            ]
          },
          {
            "id": "cf89be0c-efa9-43a6-b13b-2062530175da",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1210ae01-b39b-486d-b347-169820ff0e3e",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "81524ec7-f09d-44af-a887-af224112f704",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "511a28b1-ed50-4dee-825c-797e650d7bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c936de8f-7a90-494f-9cd7-15f9985f2c87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "778db4a9-2ed5-4eee-9512-9a3fde964e2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56c23021-5cc2-4fa6-a197-951b4a78ac4d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4ace61ce-46ea-455b-a815-2a69100ca4d1",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8da89930-b111-4643-bd68-aeeb9b037d96",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "26ea58b5-e4ac-49b9-9eb9-d49c55b58c99"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5514247-5430-4229-bf14-22fe6e267220",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "67bedd68-469f-44af-9b66-5463af61057f"
                    }
                  }
                ]
              },
              {
                "id": "716d9a08-02f4-4056-bdc7-857de7ea6e05",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca330d9a-a5d7-451a-9c25-8c868ec37f5d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "965de555-0852-48cd-afe5-48a180ed4c4f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2bd65538-dc4f-4137-9fdf-8c2621d5c70f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4b59ae1b-08e3-4879-a374-285c087adb44"
                    }
                  }
                ]
              },
              {
                "id": "b59a837b-749d-4518-938e-e4459b5b1bcc",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c95e4e4f-4d82-44af-a296-9700d1285f78",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "16c0057b-5e40-4d29-9814-46b9da4dbebe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "39e781f7-f30a-47c6-80fb-4c4e68c6a076",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "68413cc8-4044-48d8-9f16-b0e0aded033e"
                    }
                  }
                ]
              },
              {
                "id": "af330175-60ee-45b2-8eb9-5cf1dacb7d62",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "41461058-15cc-43a6-a60c-6251bedc0107",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "53585203-7948-4966-8dec-eebda2e7a4f7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "605ad5d1-7816-43d0-bcaf-2abf2741b305",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "08bf08ee-f1fd-4706-98ab-f3891318e3b7"
                    }
                  }
                ]
              },
              {
                "id": "a8f5a260-451c-4686-953f-a03857af62da",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bdba7c12-1a76-4f3e-9ed2-bd3de88b9193",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ae70c0eb-fbee-429a-aa42-a34b10a449dc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec4e2423-9fd2-49ea-a07d-9b17b64ba6d0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2d67eea6-a270-4fe9-a68c-917465ef694e"
                    }
                  }
                ]
              },
              {
                "id": "df0f4897-adf6-4e9f-9770-2e52b0a30bb6",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "31299255-cba7-4c86-8cff-563e8b643650",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7656b247-c2c7-4f1b-8ce0-a20c2cfcb147"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3fecdea5-854d-43fe-a46b-0426263633ff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "04c17ed7-b3d1-491d-ba6c-88187df33db7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1e80326e-3263-479e-b4eb-f547b6b16783",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6ed7f09c-917b-4464-a41f-1e6450d65f5c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "faa1f085-5367-437e-a901-936b1b225f32",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5ce8f02a-d3e5-498a-be25-74815a53ae77"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "98e0e101-c6d9-4290-812d-39772bc5310a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "859ff81f-ad9d-44d3-9937-44dfd6aaf056"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bcf42287-d41a-4d24-a4c5-af7df78049fd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "645318ac-d753-49eb-999d-10cb99e9a00d"
            }
          }
        ]
      },
      {
        "id": "a9f2634b-20f9-4442-837d-90dd70a03040",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "50dc1371-e8df-49bf-8c9f-a468bc3d4de6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cc1f17bc-9c2a-44b0-b1cb-5456f608a141",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6a7b6ee6-9271-44af-a11a-1a14b908d188",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bc9578c-0f69-4657-988c-b6a1806639a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b790324-4e56-43ca-b936-0126ffa47231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ebf443-7e02-44f3-8f4f-3c2c4e2fc76e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a94abf10-75f4-4bf0-9dcd-055caa126107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "018071c5-a6f2-417b-9496-1c94ce3f6921",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3956b18d-af5e-4f94-9160-75c1be519242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2514f5ab-c37a-470d-a309-b4b208dc0c9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fdb0dac-b224-4b6a-a14a-5675b78a1dac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6957fea-03d0-411f-be6d-0b5a52e53a23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bcd46a3-cf8e-4c2a-b68a-099b9b7d9de1",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28337641-1dfa-4aae-974a-9f7e41bffd48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "716e39b2-8862-4ab5-a2ff-95258da395fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19223a6f-9fd7-4f73-af2b-47cb6cc9057c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c262993f-3c7a-4b8e-8736-5056777f3656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ca1bb2f-6bec-4d9e-bff8-42b8bcf1c3a3",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9534f2a2-8ae3-4d8b-b3db-a9c653e55078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "812a5243-5f44-4aa6-8057-5b61484a7519"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b4d91a7-b026-4cde-a14b-0d9d2b582b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6888294-17c5-4813-9b78-85dbb103dfda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b86ff1b-cf9b-4155-af48-9d6dab86fe04",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da8a61f-840f-44a5-816d-3e2907a5a60b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4f1b3a3-3753-4fe4-8fad-529cdbfc7689"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f15ab3-2037-4644-9618-c2ab7823a6ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2049738d-db57-4a16-9048-4840bc5027d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d31263a-8d2c-4d7d-9e0c-a65e9338d78b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e0ef38-c5d1-419e-bb2a-1c2c8ac30a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6adcdf08-dfc3-477f-bebb-edddd7d7ee36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c88c7c24-150c-425e-ba21-f128a5de4994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c50c9059-b878-423a-8c69-8dd4ca285b8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4634c5a-5d11-476f-aa85-d8e39018195d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbb28ef3-4854-4ca0-971b-d5f76d74acde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5177b8de-6d0e-431e-818f-cc118fefbd5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f07919ff-9cee-4f09-bcdd-70bad7f3c433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddf15bd0-a859-49a4-9ffa-035939deb6f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e35a2d0-ab4f-4edc-b56f-759dda81b22d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a8f0f12-10fd-4e36-8e22-22b072fd49f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee22086f-d23a-408c-ba7f-2075c905c77e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5436266f-c24f-4bdd-af3e-d56f7b973e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e3009c6-42d1-49e5-b706-6b908ca6b78f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4838842-04af-4f94-93cd-c07d32a0eb0b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ddde75b-63cf-4ca8-b0cf-6dbd19d63c69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dd88169-ee3d-46a7-961f-1f8a652412d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "718e9c58-0236-44c3-9ecf-a320bd8608bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "139a599d-1c4b-49b6-a663-c96df75391c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de8b4bcb-868f-46f0-bec9-421bd11f4284",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d2e4132-42cc-44c8-85c2-152e3d461b9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7660c876-bc8d-4e43-9dcb-51ad086c3dc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf3f86c-4a26-42ae-ae71-74c1c7a24bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "779d7626-85be-4dae-af26-61eb68fae67e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b812062-5a64-4ec2-a533-224f3ca360bc",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624773cc-f15d-4f92-b574-0e8a8a4542f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ca7ee31-d3ec-4369-ad52-91a5753acaf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6dec2fb-f4be-4ecc-8f69-e88c40bcc1b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ea3f76bf-d41c-45dd-8a32-d806f5af8264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3706cdca-2aeb-42e6-bb6d-2b92cb6fd951",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0afdfa15-9286-4476-8b14-5a1e7e724a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46150107-0856-4796-ad6a-77e157916a57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce598cd0-bc42-4962-b8d9-a5eccf445c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b404f088-bbb9-4b6b-b8e4-f3d105b2b122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17527bec-bf03-45f3-94b0-fe7c12ce9619",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "908c5de3-1a05-43d9-9c59-9087abf775c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7afae1e-175b-4139-86d6-fa7c915b4226"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c6b784d-08c5-46c0-8aff-ff5f526077cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bc08302-4c1c-47f0-be0d-6d5d3dad718f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f4eb48f-8ba8-4e6d-8305-dc0a59e25668",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e0bece0-520c-428f-b09e-dab3e2aee975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdac3efe-88ba-46b0-a799-f1bbfb48f090"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "378f460f-5ef7-43ac-952c-a46408764184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5cc1edf-da0d-4b55-b625-6633f46402f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d77420e-737d-410c-849b-ac09b129df2c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b2017b7-c6db-4b41-8bda-90dd203b0b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a468b7e-6bb2-44c3-808c-6422975a577c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5efa8483-f6f5-4efe-9a93-4586a99d8f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0fcb3b5-9dd1-4ef7-a7bd-75dacbd131d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d17c60fb-7e05-4a2d-84a2-bf14627d6a87",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50fdcffa-753a-4c89-8f04-6c8aec25ddbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45e7f422-faeb-43ec-8740-4d2fed037536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51585db2-d443-4c28-b336-844a21257995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "70290c13-a14b-425b-83b4-403014a41488"
                        }
                      }
                    ]
                  },
                  {
                    "id": "704762d0-a750-41a3-87b7-c4b082a8878b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6586d9d7-d6a2-44b0-86e5-53efce17c177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc316e4c-3ead-4e93-a1c3-4f98314b754f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca9b8ed-0e24-40c7-ae76-f0ba072dff39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "26948b6b-b3f8-4ac3-ace4-67d5f2be12a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "956a8d90-bfae-4fcc-9fc9-60de610047d9",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11479039-a0f9-4320-b8b8-888d75ca8456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aed34f8-3676-454e-9aed-0bcdc9bd6e90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6c6a059-14a1-454c-84f6-a263703a2404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa1f85be-c4ac-4a5f-8c48-f5f960bc9f3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfc16d9f-c12c-4084-86a7-255c269ec560",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "547b03c1-f961-4e1b-a486-ed960f4c08fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9b57cb4-4283-4527-bc67-014e472bf61b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad9760f1-7048-41ea-9b94-ad7651391885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47bce0a2-5d5f-4f38-9af5-8a3f6d1a198f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d6425d1-aa37-46ff-b83a-7a28178b17ee",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62aea5f3-8199-4916-86d5-161d52cd7614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92732a8b-9034-47ac-9379-5fd558881947"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f32d60-6e80-4d6e-a1ce-2c1320f9a287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a45afaa-f97f-46dc-a367-ebc39cb0ca5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "527dcee4-091f-47c1-be65-3bc559904004",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f632cb-c52a-4df1-b5bf-9e0c6cdf33b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e8d8855-6c27-48e0-ba5e-f855f0ac5249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b163a30c-e391-4dea-8fda-931f5b485b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d552976-3f60-4ffc-a8aa-e60ad5ec2261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb12877d-01e4-44a5-b727-f8c8f7f8f7da",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83cc559c-ff50-4816-bd9b-d82abb8c0654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3c45a9e-559b-4a1b-b8f8-bd27e3ffe132"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dd833d7-c2c8-4b1f-a1d0-bca1616fd255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8cd383f-e7c0-4251-b5e5-9f2d183d08fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1949bd96-c943-4ce8-aa45-3fe5614e0de7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a15c9cd2-9705-41f0-809d-874e303c141d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0a27f27-4ee9-4522-b87a-0f295ccdaa80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7887030-bba3-483d-b05d-e8929bbb9471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88361e5e-2732-4c2a-affa-eaac8e6f805d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e2e1d7b-2b18-42d9-bc66-64b33dfb40f8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f65bc2b5-76f4-4a34-98dd-d19509e5f0ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bcfc8d7-24a5-4564-9916-5a3393319f25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b31c0f-171c-415e-a8d4-dfd9d50c8eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cdb4cb2-e0d2-4710-9fee-57ce8eb2722c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f282b45c-bc45-4f8c-8998-88ef71f42840",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6932993c-664f-49b5-b5b6-616c4f93286c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fb473ca-2fea-4f64-a76e-77724aefd4d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f019bbfc-eb93-4ddb-931b-76c9d5d8887b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a4c9af5-36fa-4cf0-88f6-14c5229cdc06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28179877-6091-4160-8cb3-f08d7550d147",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4817adb6-52af-44af-876b-c58c2c675713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6303be67-eed2-4834-ba57-30b35d6f708e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ac34035-991f-4fed-8f45-4bbe9484cd62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "933f94a8-e0ed-4d03-9f46-6c07a32fc0af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94dc16a7-e004-4958-a401-44afc17e8f8f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a141f77f-ed3b-43f6-bf83-0249244e1829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d17f1454-0dd3-4284-a5f5-48d947d109bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3730bf51-582f-497a-a411-64a81b3a4407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3796053a-08f6-47bc-b2b3-108f9f0279b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "908453c0-1900-4e63-8202-9cbca7589243",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f4b3482-3e4a-4cdf-b166-60d3e7921a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8219e21-cc58-4501-8666-72c888e44c24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0507d9a-b854-4aa6-ab07-d67173983f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ecd1e39-b3ab-4d71-a50e-58c6c8ac9e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa1fb8e-5cd7-4b07-92e8-2efd59f10159",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e3f7a9-8484-4397-b893-07091e4f8cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ce56b00-ef57-402a-bd21-3d6dcea38be5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ce79b9-0a14-4e0e-9111-809b0cab2f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00cb20ad-a790-41dc-a88e-ad273ad01723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa44d7e8-3be5-4790-a6bf-fab31f89beab",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d32845-5dd1-4c2d-a5bc-4c95a9d6e4ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91975444-0d4c-45ea-bc7f-8cc957d90fbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a7187b7-3889-427b-889d-b5ba021e0deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32874e88-8968-46f3-bfb7-e4183d722cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "714c3a06-20f6-44a0-80cc-9f23204f9e61",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48578e4b-32a7-4082-ac4a-bade0851bd3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e934823-0f27-4e7c-8588-05fda307b74b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdbbc168-d854-4eba-9906-f4ae7be7570b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b3723f6-01c9-47c7-8aa6-04af93bd8700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f533ba-16c4-4d15-856c-020c8d110059",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "907b6d3b-4c62-4126-bce5-64b5b6fc827b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff9023c9-11c4-4d93-ace9-8e9b68e18eb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b057fc-89cd-4754-b6a6-9e8271ea4837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3530fa20-3475-43d7-aec8-71529955b4e0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2484d1ea-45aa-4305-84f2-3bc28497bc07",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d836a785-2baa-4ccb-8fa7-47d9a4ae7917",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edc40267-49cd-4863-8243-e0c1d9f565d9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "04415cec-e2a4-4eef-a32f-4a03b1c590f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc9b9ef4-79b6-42c8-acb2-95c524c35ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc726386-70c9-431c-a15f-c42db2b5b8e7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "703e06e8-6995-421f-9c8f-c3cc71bb4e5c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "576f5d0f-482e-4090-836c-eeaeaba19850"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea800f0f-1840-4188-ba76-2f660e7d9d76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f25cf0b9-4a2d-438e-8421-7057cd896e8c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ed4708e4-d633-4a66-9f0c-cadf07a10d26",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "55c6ec13-ef3f-46cc-8537-720b7d38d366"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9f7f22d6-0c79-4846-b0ef-55d5ad10f853",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2efb681a-7b01-40e6-b439-cf81a0549056"
            }
          }
        ]
      },
      {
        "id": "f0be69cd-ba6c-4d14-8797-d92184bc57a5",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "7ec963eb-78fc-41e6-aff2-761d6ffbc5ff",
            "name": "Negative Testing",
            "item": [
              {
                "id": "112a1cfd-c1fb-4052-bc80-4e84328623ce",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ae6370ff-8795-4835-831f-2708e40b0bec",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e301b25d-121a-415e-8a38-85ebc1419ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b03c7bf3-7087-40f0-99f9-5413f881ab28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e4d6408-b66b-431a-94c6-2022c3f582e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "925a19dc-9abb-4163-ae79-325fe07d6127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efc7e6c6-1b97-49f6-a0e0-08271ae3e7eb",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78cfbc7d-1488-4e20-ba36-146193ab6272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26f001db-ee38-4815-a363-713ba98869b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd0bbbf3-4dd7-4916-83d3-f5e4fd86e9b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "539285b3-e398-4f5d-a3a9-cba7076681c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fd2b801-eaa7-48f5-b512-f7ee5f68bae9",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27d6f404-d208-49ee-9877-50c3163d56c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "741f27d8-967a-4e82-a0d6-29ab31554ea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce408988-28bb-4b85-a55c-dfe2ed08c5a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "52b8765e-3b48-4694-b08b-f231143b72df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa45c0b-71de-4b75-9550-2ec08d8bccf6",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a1c1ac6-736e-489f-ad49-c7e5651db409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ff9e7b1-6121-4218-a654-fbc7685a4492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec72495-d372-445e-b0fa-cef3c5c6648a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ead29d96-ae94-40b3-875a-9c07c55cc679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f372689b-343c-4a6f-955b-2968c66e3144",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8adf5e52-2179-42a4-93c4-2400cf9aa3c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dff1517c-da0c-4ad2-8477-fc7773b1c919"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54958f1f-4f7e-4d56-8267-0c5669e60041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a75319a-f534-418c-aef5-ffbe6bebedbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bf44b73-e76d-494e-84cc-d750d0e3cd6e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed2df193-3caf-4606-84f3-d9ad6ea82da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28426d2e-030a-44bc-9ff0-5176d6e7333a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2deeabb-40c3-481a-afc8-94c7148793d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a3fc3c0-92dc-470f-bc4e-6804d937bd70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f48a54-2e4d-4500-80b5-00bc62803741",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85801839-1145-467f-9433-173e511dd49e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf957141-63b4-45bd-8569-2738247aa6c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77fa7eef-cc05-4ea0-8856-3f90820456e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6c57b65-ddff-4d9b-9caf-e49247095f3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "861eea52-5cc5-47fa-b794-ff7d8664f23f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb993e6a-abbc-4af0-9e85-ef7d0b2950f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7d0b35a-b873-4b99-afad-a83e673067e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fa1e23f-161d-46fb-99fe-cf78fed85d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c0e6108-e54b-4ac2-aec1-312eb69c43b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e562ba9c-d589-4272-b3a7-69dce4eda92c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b66cfa6-24ba-4649-ac3a-c24e5d26ea5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a236a1c-71a7-492e-90ab-0f1d7ccf1aa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48884f98-4a4d-4c06-89c9-3f7740030384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf4163fc-b68e-44ab-9b2e-054f11562c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d569f87-5d45-46ef-801b-02979cda2496",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3921ab1d-a155-4312-83e4-f4cced2a1033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "861c6852-beb5-456b-9d76-e2ec583fbd43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a1772cb-9d4a-4133-a429-731e32c15bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "affaecac-b200-4f02-bd80-c14f0213c6cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa412f13-981d-4e23-aa4e-c0c28dae5d43",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e32f8b59-dc0e-4c70-988d-ca8a595d8dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5299b169-cf9f-4296-aa1d-1c86401ceefa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c29c63c-9c74-4be8-a0c4-b907fbcb3643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8d3b9861-c211-4bd5-b304-3637290fa174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1efeef4-d239-432d-bcfe-4dfa5f7ca217",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df575bc-e970-4e85-a65d-542e2fb1b2f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b32e84b4-7b2d-4370-801b-83fd7e9fed5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdee187d-442d-4b1c-8b73-f953954793ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6f43a4e1-7c6b-4515-8183-34309ea0fb78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25bbb4c2-5755-4b1b-abf3-cdefc5de7bda",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "327aa7a7-aea4-46bf-8101-ada655dd8606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6628fb4b-f15e-4c9c-8562-25792243b0f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ed7ec4-1d44-4d13-a488-b1f7f9175eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "13f7ea9c-9f18-491c-be72-56ba164ec8c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "883277ef-0c8a-4a45-9ca6-e255170193c1",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b1fe1f-fb6c-4798-9277-b9d0b241f669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c55c210f-c302-462a-a2d4-7f8cb04fdc99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aff921f-f851-45b6-8d1c-cb1af9ddd6a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b4284ed-194d-43d2-bc67-62c6af2699b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "223d79cf-de2a-41e9-beb1-42a1075685a7",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41574c5-7c06-4a5c-aac4-db9366d17200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "969c4555-4f95-4816-a8b2-f5a4960d22b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad373700-8805-468c-a35e-ad8829a736c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "efb00e99-a335-4756-9606-40b3d6b9a04f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39134490-a548-4138-86d3-ec4187e15ac3",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f84baf39-685a-4d8a-b54c-f5f11abd2ac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e78db550-92fa-4e31-b958-a5d0f150ff54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42ce7799-abc3-4346-ba0a-a5a9c24d7e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5eff817a-56fa-44a5-ae86-561822e4dba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75745827-8b54-492e-b3ac-8bef92ce4f9a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a5ed1ff-9909-4e87-90a7-ad74c97e8750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "255e9619-7dad-47f3-97a7-22e40cfc7b22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d65e770-e381-4521-b899-e9dddb991201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d14cc12-3749-4cf9-9991-5557b9e014da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff0e74a7-9e92-4392-8266-dd6c0907385c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4d4f39-ccb4-4996-8329-32e9e942931c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8d98788-c006-43e7-8585-30c3db082f0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef4e454-84a8-4514-acf8-61730e0e6d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "144ca2dd-bfae-4432-8ac4-bd0c42dd74d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "337a1918-1b31-4bd0-9b3a-3732a2354e5f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a91578-98d2-4baa-b62a-250a07ae6b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27027215-6dc4-4186-b1a6-69b9d7bdfad5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065c2534-caeb-4f07-bec9-b8a710359343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e146cc24-c55e-4ff0-9105-b260f70edb88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "591017f1-bd0c-4c85-a888-892e2e11d928",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5bd3a9e-a8ca-472e-bbe9-ef14a89ffce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb823650-f620-4d41-a2f8-dcbd0f10aa72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c031156-6b75-4147-9069-f0c459779a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "436329bd-3e98-4d3d-a01b-a6283cea26c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b29c48f-d1cc-4eaa-971f-585e9694a2dd",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ebbaa0-4777-4529-8ad3-f5dda44914c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7060a2fb-07a0-415c-a84d-e0a8e4600b87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "909d7d8e-68de-41be-8041-f0f2f937b554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e235ebea-e762-4979-9bf0-07f231276bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52db787c-5448-46e7-8806-dcfddf1a519d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc17cb0b-0571-4469-8c5e-a80bba2846e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0985837d-b29e-4f83-809d-d62a4663cf88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d0261e-709c-4917-90af-8589877372bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "113bea76-c5c3-465e-bcfe-ce5341ca952e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70a0bdb1-54a0-4857-90b5-ba7e6af957ac",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c4434c9-4b4b-4ba9-9c7d-d798f5442589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ce1b40e-03d6-49e9-a010-da6dc9620530"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fbe9227-7a54-4a03-9f90-933d2318fc11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "febfc380-50e0-4c6d-a200-801d7aaee514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4dbff69-2452-44e3-8335-431f5b44cb37",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fed55ee7-bfe6-4671-9007-8c84e5d8c070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c07e965-845d-4269-926d-e0db591d5745"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20709cad-c3bb-40b2-aecb-0a18741a65d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f97dfab0-4047-430a-859c-34d196ac1d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57102247-692d-4769-b34f-bddd36211ea4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73957167-742a-423d-a15b-e7b20f84a6e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99cc4597-b1c7-440d-9731-fb3826a173a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3dd0099-dedc-4d70-90cf-a2558f7b6687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b37f8ac0-bd15-4870-8ea1-3186a1d372c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96d17e23-cbf9-4da0-8c66-5c1fefdd0772",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da2edc4-0b67-4eff-ad1c-4f546ad97516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f38a4abd-6c45-46c3-bd1e-25b5bf7b134b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79b87c05-df93-4f21-8ba0-8f417930332c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4598e8c-ae5c-46c5-a5bc-e9dd1e4769c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8524290-913f-4e2b-aaf5-6c5231221a8d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f62410fe-9386-4c31-b1f2-d99879c418c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5920512c-e494-4cac-96cd-f2d464276ddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d2f3b6-2930-4328-b115-e640c58dab32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b048ad37-18ef-483f-b2bd-c0c922c2b809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9b993ba-5e70-4f2c-9783-07172e92c3ba",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea5ef70-944c-40db-b0f1-fd4feae649f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf293d65-14e3-4721-b96e-30b6945c2e25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0885b290-cc84-4971-b4da-8908205e548e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a1a6cdd-0867-49ac-88f8-699fdaa484ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d38d689-ee79-4b0a-9113-0ef392999448",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1516018-a9c7-40fd-84cb-826f7113a9b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4239ded-2773-4d1c-a618-cc1687e80e42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eed70a67-8a83-46d4-a22c-4753d3001bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d846fa3b-99f3-4553-bbb3-b503e986881c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa7b56bc-6e14-4b9d-8b95-da584784ce3f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2709707c-c32c-4d9d-93b3-9eb91ac188cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd59ec99-e8c8-449e-9894-f164589d6003"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5689e502-46a3-4722-b9bd-b6d1b2957c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d73a4769-e5d0-48a2-8ad0-217294b55484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d017868a-aadc-415a-9b19-b0acbc543a55",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec17c70-4945-443b-96f9-271f073c1dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69749ac4-5aa3-4dee-a960-4b18349e1525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f32fc8-4297-4e32-ae98-ec069d908b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f760a9e-ce5f-432a-bf71-53819f2534d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "052e9418-8784-464f-b613-58e3da869fc2",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f7909f-3e79-4d2c-8be9-5dee8131da5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0026ec04-e8a5-4487-a6fe-7188c988a7b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdbad452-af7a-4a22-a5f3-47ebfc46531e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4d1ee47-fdc3-4347-9290-6208f6e6ed51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb277f40-85ca-4d0d-bb41-fbecf59ee377",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b9dab9-21d6-40a7-bfc8-77094a85b8ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3bef169-d1d5-4716-ab09-dd04a70add96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef4be42-1140-4b8f-a5f8-8b7e9b62a9ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccc7e2dd-4f2f-4f70-a908-4e11d1523a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6cb1e60-e4df-4603-b0f4-e46503bfa952",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7572eae0-cc5c-4de2-a05d-06b83ca24806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d171889-fb78-4b58-a84f-6a4ff4626915"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47458697-1e16-470b-bd4d-9a579d7f9921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8336bffd-e5d2-4f38-8751-f76e44cd26c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0dc36a8-f1ea-4e2e-b8bd-54137a6f9813",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a88a92-76cf-4ad6-a746-52bbc9159e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89b69e76-9179-4326-85ad-d6283da56f55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bae6297-cccf-4a56-aa0a-2e546fcfab62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab4a38db-3098-44d2-8246-1e7c0a736201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "794b0983-8f65-447d-bbbb-920fd3c8d189",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d1b178-7efe-4134-99a2-7b1d624a8368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51899176-4916-49ea-a2ba-18c399e7d9bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2746012-03b7-48f2-b2be-f89326738fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "abb5f5a1-416f-46d7-a2b9-41cfd6fe3334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6116248f-d8e9-4303-bd5e-d174b2b2253e",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7da03f80-3be2-4922-bf01-b35bc83408a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49d5b234-a3cd-4628-b4a6-2d1db38f3562"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "894565b9-6210-4eaf-a65e-d8e9cde0a06e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b18125a6-f285-469d-9836-5fed2ee3d453"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "54db196a-0193-4c02-a573-260567515ef8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0dd866a0-3547-43be-ad2f-b7f70f8ac1ca",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec6fe0e-6099-456d-8be8-dbcd03ebecdd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c32d6ced-f34a-4bb0-9fcc-ec8a3de3fb90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13b69864-3824-420e-b130-5b1965b39c7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "484f1466-7e4e-4257-b9bd-cef866783846"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a0a2639b-5a7a-4021-ba22-7ae1048750c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb5bf1ea-146d-4490-a3c9-e46e57733719"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "26614b84-c317-4caa-9439-fedef4dc3e14",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af77f85d-9c66-4e53-aaf1-644f082db344"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7ab43534-2569-421f-bf87-87372a8b769a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "60b1a057-4eed-4c53-a553-cd35f9ba358c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "61a2e04b-4bfd-43e3-b37f-1259ffd14b75",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "099b6932-8576-4316-b0c2-7a8c1c17b623"
            }
          }
        ]
      },
      {
        "id": "fbc29c03-5da0-4f07-bef6-85d6a67550b6",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "169fbccf-fea6-4d88-9488-d3fbd238d25e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "37150c73-5669-491c-a4eb-9cc4e9a669e2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "61db0cb9-d10a-42f0-b7ff-49e7d02cc8c2",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2450ea43-a9fb-42b6-aab5-9d8cdf269ca1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01b9f367-08a2-408b-bd5c-a0b929c07c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7366437b-51a3-46b3-a657-9fd49039331b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ad584e-f6e7-4652-9ef7-db1fd70fd1e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07a27ffb-2a09-435d-8435-b1eaa950ca66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "109da51a-814e-49f0-9d9b-14e1966cca2c",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02eb37a2-cded-4730-8feb-826290e4762f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78b84216-bcbf-4123-8174-fe535d89d68a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "166d0dc4-86c4-4756-ac2a-54de60c0c474",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72098ebd-1f3f-475b-8042-dc29b85f012a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6f8e8ee-bf67-45fd-aa3f-7a3893ce9618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca83778-50e8-412f-af46-572c9bc88406",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cbd5634-44d0-42ea-90a9-a3f6f005412d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9df8363-8319-4265-9b1e-1cf033b857a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4322cffc-a605-45cf-b0c0-7ffc98b2560e",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00ab7ac7-3eed-46f4-849e-b1c920f1d51f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3304fd78-248d-4c95-b488-74e85541952d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "434976eb-7860-4a6f-b66b-e46eda6cf949",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1580e4b-07bf-4297-8c23-ee82877b90b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "758728d5-5d51-4441-83da-721cd4c382f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd0010b-e74e-48f4-8048-7e49b7b7008a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1183c1e9-7346-4477-84e7-f59e7523429f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dec9bfc-c37b-4c3e-8b04-e47fc038a87c",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43b8a251-bf04-4577-8fa4-47570a2fc60a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d69d3968-99c9-44e0-a626-89c28116a342"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "935a2bce-2323-4f54-afe9-78c9d32fc658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "304bb555-c159-42e4-bb9c-af4879fd751c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b59f8f-8989-4534-99ee-a78b7e8c2664",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a90aee-6070-41f0-8997-d4fc96a8f11e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5b396b7-5d00-4d78-bffd-ba63eb69f2ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49fe6b46-b047-4e0f-8015-3a3bfb661554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e324fb5f-3deb-4b92-906d-20b34269e92f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c25854b4-2962-47c0-bd1e-2f64de9c4368",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed1d962-404a-4f4c-a7d3-b72baf9de7e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93dc6348-71fd-471c-b729-1aee50a50282"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb471cb-5863-44da-8b8d-196acfa1207c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47f2d4c9-7dab-4b4d-8314-d06cca2479ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "772d6b76-0c0b-4ab4-a6bf-dcdfeb5f4a1f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15db4443-6a5e-4538-a62f-d5348c0314e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc6a8db3-c935-4294-b6c1-606be08bfa8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70eef4be-2932-4ba3-88a6-7595a1ae7b5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d7e4582-913d-433d-8a7b-e88e6607126d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c21d520-7dbd-4584-bb1f-baba8c530013",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed467bb2-a697-40a2-8909-d99451d96e94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6043f91-344f-4d97-b319-c41db0d4b62c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "911de2e1-7637-4e4e-b5d8-7dcb7469d9f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d96fedcb-2e20-4711-b465-2806b89b6075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40bc5b67-895b-4629-9e19-9e2bf7be1840",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e32a836e-e5c0-452b-8e2a-56df2c778b14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "890cdef0-bf16-4ca6-9ad6-6193ec8950a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba7b4fa4-7487-43f0-b7f1-57be6d8518bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbfe8ff7-9cdb-4e87-9142-21a63b2d2cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09981ae0-5108-41da-8db2-d4463aa2ff83",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "390d077e-cae6-40f9-b819-fd8734041aa6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b787102e-c0fd-4bb7-b314-33a5c0ce4447"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "064ed631-7945-4575-b39b-7ce5aa55c31a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c474a32e-41b4-40fa-9820-9c50e9157172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f1d5e91-8e55-4584-96ae-a964b3698eab",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd6b69c-902a-4f59-a1a8-25cfc23b9a43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8faf24dc-c689-4519-b252-bab13e72a9e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a0382f-3cbf-4ee3-8b41-2b9c23c88624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a3235b5-879b-4809-9b0a-875663723de9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceab0889-4ae3-4824-98e1-8ef10ec62db3",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf113f8c-f0aa-400e-9317-b209dd4d9ee9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42c4661a-96b2-4369-ab01-672f91abf6b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31ed3ac7-5d16-4b53-a2c5-88f2d20694a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7ee975e-5fad-4240-bb45-8e046f631013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e58d1a7c-7dcb-41cc-9b46-80d36562865d",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a3a6d4-6f6a-4b0b-b509-de2f69577751",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23979be6-a52b-40bf-a9fc-652e473ea2e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "860332b9-61a5-41c0-b457-419d6723f273",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a52476d-2360-4394-9e0e-f17b96771a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcff5ba4-4bb6-4976-ae72-4a1bb5006ff7",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b43a24-e73f-4545-881d-8940d5360b3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4621f9fc-02c1-46f5-a409-4444f449a9ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d272341-6fae-481c-904d-cac5d84ae0a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cfe7ac9-abc1-4f40-9654-7ab3f635d00f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef23a2a8-9eac-4c7c-94d5-68fb2fae802b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34e42b69-3657-403e-baff-2ace2af361a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90aa056a-f4d3-4ab6-8af7-7cae64537455"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e54583bd-68e0-45d4-b0e7-55e699ea4f0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e33e702-c26b-4c80-a9f9-65ad85bb1d57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61f331b4-a5fb-4860-a245-eff86ae87e25",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a76352b-867c-4956-98a0-25e43e9fb5a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e916aa91-7118-4a70-9c17-82ed7d796eb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96e3397-34df-4d00-b870-4da4d1d3200c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4d254a3-22dc-491e-8995-000d29a4d968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbd6c246-25e9-4273-b7fc-81ecf4bb4b99",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71958ab7-0714-42c2-b334-39db0dadd6cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13f8c38b-4414-4c39-9025-b1ff73ad7b9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b63b02a-b7ac-4b95-9094-15dfc1445bb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39b53197-939f-4552-b51f-7fe433bdd333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da6ebb0e-f5f0-4070-8092-361e296a93ba",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abb30f34-ebe0-430a-955f-d5d3daeea9ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1347f787-0d12-4bdf-89f0-16a0acb2f37a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bff4e08-316c-4528-a415-f71ae49c5f0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d76bb4c-d051-4339-8c61-c8c4c7463265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fcb46dc-1925-42b9-8201-79b8a2540148",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c5be56-42f7-47e6-818b-82efcfe93ef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6286e3f-d82b-4f36-9cbe-a26d5a799dbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "394322f9-de4a-4cbc-81eb-ba72077db221",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2066d177-e5c6-448c-af5f-8ded20e6a05c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c0e382c-27ff-4d3f-8da9-031bc4c6169c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857a36c2-2644-4212-997d-02585c081f9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bab68c3d-9bba-45ff-b4ad-bf1da0c3a0d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0578d1ed-45c2-4e66-9cfd-55be73b56f4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d15dd04-811f-4370-ac8d-3ac9ffb80877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d4bf764-ff0c-40d1-923f-29ea609aad1f",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cebd5c27-482b-4574-9d98-9c69b2a0f23a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12fa032e-5331-4eb1-bf7b-7701f21afd44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce81866e-12ad-4df1-8c69-de935f5b8f7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e53cdab-240f-401f-8410-724610bd549b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2bc1f17-0cc7-461e-a692-ae90ac70312f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4088f2e8-0adf-4eb7-b60d-b5a7038e2c36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13ca8960-3367-4f1d-a705-63b7e23e496a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f74790-de2e-446e-8505-39e162575463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "109852eb-c0ea-4f5b-8370-82d75958b283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2258b2d-4360-470e-ab4e-a39b406369d0",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e5c90d6-7f76-4c40-a0a9-331fb0d56a73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7aa399e-0cf0-4c35-80b7-cd29942e932e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f99a762-3046-44b1-a10f-081242a1e14b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88d39ebb-d9fd-489c-9298-8fcb5bf339ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "460e57ca-5e92-4396-be0f-fe62cc4e7e73",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62aebc2-1d79-435d-964c-d69432ee5298",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fb34bd2-c88b-4221-9685-f8056ee396de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07bf53de-c545-49eb-b9b7-6a730e89b194",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b5ce6f0-72ca-4993-ad43-d3105a4368c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "614e9110-ef02-480b-9630-9a8da3f88c76",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35001bed-a8a9-459c-9e52-55ff19edf92f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0c9e540-0ea7-4a99-b36f-f76d255f04ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b5d851-f55d-452d-8095-7af3a22af285",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2c03060-ce2b-4459-bfda-90506ca69245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd78b02d-3d78-4d0c-a60b-a2a3899d3cfe",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4200be84-e9dc-49a7-b9b8-2a685d42003e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b70ab0d-1e59-4dbc-ab71-1f41d23a5d84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69168537-54e6-4847-8eae-3cc87e574725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1650e301-8554-49a7-897a-fd8f621205e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19ee4e56-f0e5-47f1-b9c7-f34130ac6b7c",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51334375-68d4-4b5c-9d47-b1d2f624237d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58e11891-eb29-4a34-9cf5-37dfbd6dbdaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a844ae6-3929-47bb-a150-76e6456f4d01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9474097-c3ae-47f4-accd-31664ff243ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4300f3fb-2c14-458c-a410-c96ac01602e8",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c5b94ca-6013-4917-946c-4f8f93ca1e92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24410350-2bab-4dbe-8051-a027c7bc8b24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06f382d6-c822-4f0b-aeca-776ed116e802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7389c2f-0f3f-4aa1-9fdd-31d6ddd60590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a01cdb9-0f6a-4658-aca8-0dbba4ff8625",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a8bbfb4-f09d-468a-bf51-b45690ab23c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afd7c078-d414-41f3-a7bd-e1e1bdcd9a69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc5e7d92-f492-487b-bebb-4245b8c71303",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31be78c9-50fc-4ab0-80d2-c6eff66f8154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af30a482-65db-4fd7-b1a7-c669c64434c8",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb616163-b2b7-45c3-8eea-37bada2b2e44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2c31d2e-b296-4d56-b802-d075ef3d0952"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a203b0-c290-4b7a-8b85-f05002be5d50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14f949d0-59b5-41d9-8dbe-fed0c42c8f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0bf4083-5e4a-4339-9069-b4d54d06b111",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475563f7-3066-4544-bd12-5b1ba830d63a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6d2117c-1c65-4064-9d68-8d86bd71ed26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ebf34c2-21ca-484c-89e8-722b9fc39875",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0410e55d-c300-49b1-88a3-b40993053470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47a9a481-6970-43d6-9d51-93983dcef0de",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d0d30b8-039f-46b3-99fe-4c94386ec411",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc82d09f-8beb-484a-ab9f-58f4d7ac6461"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f1a1509-c961-49cc-9957-010619a104d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4888592f-575c-438f-837b-cb241661ba68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e731dd2-0b33-435c-9e7e-a42fdcee6529",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c94e70f-5224-4e37-a182-870f1d77df28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c138c202-2703-4b29-b171-3fac2667126a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "724da960-5e55-4eb7-b3da-67a51a03b394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "730dfcf4-4304-4ab0-9009-66c210d125f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11deec65-b833-4df5-a30d-271bc4ce5139",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f696f10-884f-46cd-8ed7-e20d200c71f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d3d5fae-2a72-4c90-9dad-8d0ccbabdef4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d09353ef-1168-4a4f-a3f2-8740b53a2c80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa412034-a33f-4d35-a329-503aaee1a774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ea7cbb-9729-46f0-aac4-cba10c1b2d5e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73cc8a17-3754-419e-a1a2-4ffdbd0b759e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b1c0ed1-dce9-4622-8a77-a66c6d20f586"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a268e0-fbd3-4ccc-94a3-40f4a940c4ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebb90ceb-f403-436d-a0b8-a76bc12385d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ced394b5-8d7b-4932-8178-25a30afefff3",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64434481-462b-400b-9b7c-aa428e7234c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ac97e17-f589-4f45-a175-0148101f3319"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "747b9cf6-5831-4b5f-bf77-ce0e7a53b273",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f6da0cf-9213-46e8-9127-8436183fc0a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dedacb6-6b71-41b7-ba45-1c4965fecd27",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5edb6bbf-822b-48c7-bd58-b56579e10b31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82562621-d719-4877-aaf3-c665eb090315"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2db2db8-9a60-4d6d-984a-6a31614873eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65e1286c-30ec-4aa5-bf6b-2d43a8923153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fef2756-5692-41ce-b6f9-aa8b9aa85eec",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ccb8c4-cdc3-4d26-bd1b-972bbe3a2352",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec732b40-07a9-46d0-a5eb-629c165828dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b4fc7c-746b-4a3b-9872-1d32ca305137",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d5ce7e9-637c-4d1f-acfe-3a891178cba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3ab3d82-bce3-48af-92eb-26969ee16214",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2a9d330-61d6-4808-bd53-6a7e6db287ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "379be19e-9a66-4e40-bc2c-066ac3e51211"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1690e3ae-9b7c-4d67-b8e1-171f8000b9fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8170ce4-73f4-4f00-aabf-13e9b88b3c36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3237417a-9168-4e5c-95af-715a7aa36c8b",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34a2bf6d-dfda-4c09-88fa-01f53e8ddd31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a78ae01c-9d55-4dde-b5a7-003f51e45409"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a72467a-d011-46cd-9cbc-8848018a736e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3847a918-6226-45c1-82cb-bb6b671f02cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5b447db-d7df-4fcc-9f45-9ecf2c35e4d8",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14fd8d1f-270b-4ea4-ab98-f83ace3f480c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82785c00-1e6e-4fb8-a9fb-82c9f61c80d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c711c0-1845-4ab9-827d-3bae3f497e49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11c3bbb8-b935-4841-bfd3-63e958088874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f9487c-7b8f-4f66-b539-1a99f548f00e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ddbaffc-0f92-48e2-be6d-865ef49708da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a7cc438-a639-418b-a7ae-a9571b7e6cb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cafef943-366d-43b7-80ea-ba6d525dd463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f27e00d-c6dc-493f-bc47-c0db30863bcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52e9ab62-dbe5-44ad-a984-681d1bb2df51",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e4f1cfc-d8b4-4139-a810-5f35f1831107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9811e03a-403d-466f-8af0-bae86239ee04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6e2c9d3-075f-4e3e-99a5-469d02ae74c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa12307e-dde0-4424-9791-e73e3fbfc678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e7d1e86-a0dc-4398-956d-e0c4712dca8f",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bed317e-7330-4dfc-99c0-73cd7cca4f29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9af1a92f-246e-43b0-a1ad-303d4bf08207"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d440892b-39f0-4c56-af7a-de4c584c7ce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e08af05e-c398-4717-9d60-9add6ed7a030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e28b756-76be-4a3f-9fbf-2e98889ee81c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8781063a-2366-4e1d-b06b-1370b15acb00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78e9217a-efc2-4e10-b3ef-c4ff53a64fe1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e0e8afd-99b5-4f0a-afa7-62100a7ea26d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16a58bf4-de4c-4f35-ae93-9d3dd4c65d3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "678fdaac-e77d-411d-b032-3647c39f49e3",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92eae0ce-bc0e-45cb-9229-b79c122abdc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f79054f-067e-45a8-a1ac-30f36b1a804d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ee8ee6-6278-40ad-b11f-921bfd041332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "927f158e-2c97-4218-9c5f-1eb5caabff0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b91c12-8704-4962-93fc-df6e98aaa6b6",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b892fc48-977d-4d6e-bfa9-cdfa70fc1b5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a6bc9cc-59cb-4d9f-b21c-30ec60ba5feb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f32775a-f523-4a3f-8c61-f1274709354f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "374dd5a5-48c7-4b12-b0a9-ddca313c0188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11bccc1e-91e8-4afa-9b7c-90aa01d294fd",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e4378a-3df3-4310-89a7-06345273c7a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f567dfa-cc22-4677-9399-d04689a564c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "559489ea-c159-4b33-9cf1-a35818cb7c62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63989b9d-e83f-4160-8c4e-759412e8e494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a2f5ee-b357-492e-8aa7-c3d429feb616",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7448373d-752a-4453-a3be-129f3a314090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "044de5d8-2d9f-436f-abd5-b8cf393c3a62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c61537-8cfb-450c-b935-f3b4c1fd5b73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f103a7e-3623-4930-b164-81cf8001684f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eff2150-ed2b-4b6e-8219-075a085e21e7",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f30560b3-6126-48f8-8a3b-f677e521e4df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5ce3e51-4ffe-4de9-8eb0-14e33c7504a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3fc314-5022-48ba-93f9-3e3f260786ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab1b4279-ac87-4e60-b86a-d5545c2db69d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43006729-76b8-445c-8f92-9653db1fb4b6",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1820339a-36d0-4503-9fb5-bc18fce3ea5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fcd67de-6aba-449f-9e8c-e8edb7d41c55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d186b57f-fd2e-4e0c-87a8-09c45df83a7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ac1ce32-5884-49b6-b8b4-f0349555ec33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc18a113-74f0-4f7b-af40-fe42f7967356",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4323486a-1319-47d2-98d2-f416ec986f3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0fb5704-b2ea-4307-b663-b5b9b70517ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f763df-c7f4-4495-b970-ffffbce10e4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a9b35a7-6c9b-41ab-8e08-4044a728e459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "043d0e7a-6125-4396-b418-8442e2674708",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de92a43-73ca-4289-84a9-31b5925493c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4e926c1-a70a-438c-92ed-4b926064148d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "969e31e5-4cb7-42eb-ac43-da3d56fe9d20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dec0724-9760-45e4-889c-ca371d01c7a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2759932e-75a0-4b3b-aa55-f2472330841c",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca3568e-27bd-4b06-9114-76b40219748a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e05b0012-f93b-4451-b3af-4b86fbb64ac0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96419916-c8a5-4e5b-8d43-d1bcaffd554a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c262c88-27ba-4545-b5ad-6142417d17db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d0c0345-61aa-4263-aa31-8aff7f5f25bb",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "078eda4a-3e59-41a1-a5aa-8d8288ad8686",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "052a43fc-9a4c-4d74-8785-557a6c66f527"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b57205b4-b464-42c3-8c7d-1955884fce0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "040efcf6-088c-4bf8-8d35-e6a1b99f3664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8191a05-2c03-4d6b-907d-ba41dd3916c6",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc7931d-509b-40e5-9e53-906faf1aaba6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2bdf95c-b3d8-4383-98df-491c38b218c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6488309-3b39-4c96-af18-d48da7775d89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43cd6e60-a046-4c2c-8a23-d6be921ef8f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f9db65f-8dc1-4e73-9f17-f00ed67dce2f",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111c9ef6-6fcb-482f-984b-b5363e14f19f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "107a71cb-3d55-470a-b4c7-830f67264d1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8e0ccaa-7df5-4c8a-a9b4-eb22bb294b3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11ff77dd-d63f-45e5-a56d-511cddc590d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c28cf58d-c781-49ee-9117-50a9e66fef5a",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a4252c7-86cb-434a-98c9-0caafcedfdb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1246ef9-8a58-4887-9f50-96794213bdc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e0eca88-244b-4358-b43e-0e57b12a96d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "358017ff-7bdf-4b8b-894c-ba49ed9ba482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8653c000-e97a-4100-92f0-4f6d7e483f1d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01009ca-0773-4ae4-a485-04a4b920b18e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a1d3e79-c64a-4e23-862c-b8b5ec46975f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a32c63a9-025e-44ce-8959-489253b39840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc6e4330-4834-467b-a6c2-a49b228218ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a607d4-fe50-49be-8f44-1cb53e889a96",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76bb3cba-256c-4cb5-9b8a-4d0ca000d024",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "991e35ac-c468-4344-9801-248a0ab0757e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e2fa048-59d4-4202-9788-d405cb8e9634",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db613812-f365-43e7-bea7-1fa79745898d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95ce3b9b-6a82-481a-8e16-5df5ce37b4b2",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "425cb295-4c86-4275-aa43-683bba992702",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7118c405-3717-43ac-ae9d-f009cfbe4230"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4062ccb-7a93-4822-864a-a77fdaf06b15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd259288-1142-4642-afac-8100b05f27a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "190ae19d-5b3f-45de-a558-c1e1547f06a6",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bc73b83-ec7e-4beb-bb71-dc96739a5809",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f3423c9-dd2a-4ca0-bcf0-fd34a6022e72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0442f4e1-f9c6-4de5-a51c-42c07587bee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3a5cf05-d446-4ede-a6c2-c326c33a04e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a061fa5-5098-4dfe-bc93-e8fbd63f4c70",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f42778-4900-4b4f-8434-90572d1f1042",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b68a0a81-fb90-4ba2-9c73-bfd069174d35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72ac1810-6bd5-4bdb-b48c-f8fe3219f0e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee87f80d-3f08-4812-aebc-53598c8f9162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9caceb4c-86f2-49d6-9efe-d751636f99ee",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76547298-1fa6-499e-b975-836d27d6d26d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0e4b4d1-1ee9-41f7-928b-6d803d717c2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a9a2e83-856b-4606-b994-3432a2e3f055",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "319f4588-f101-4e53-ab2a-327a6a777cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0a52345-e958-4e16-9d45-f346cecf1811",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27e11863-4934-4ea3-bdf8-ca135f103355",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15ae6e84-a1f1-4ef7-898a-c8e2dfe2cec6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47f2c09b-d4cf-41ba-87e5-ae2dd764414f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18ca51bc-8789-4e88-949f-8e6c68018046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1e86621-6b35-4fb7-99e5-6d39723c8efe",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee193cba-0a3f-44b4-920a-0cd1b20d0873",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3964f309-cca3-4da7-b52f-f061ca619972"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6a94492-a509-4a07-abf8-ed53d579cf3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33b8a491-e826-4bb5-8461-1ee185f13099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e656dbfe-0c9e-4383-92de-b3daedfc782b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b06b8df5-9f9a-4569-a902-579eac135d6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cf425b4-fd35-4c33-ac3c-371ae80a53c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fafb9a4-0f0d-44a5-a73a-347b40aa77a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0abae71d-32a5-49b6-aabf-0328c5051a35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b403464-d93c-4e2a-8454-73a787e1f1fb",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada23942-cac4-4667-8336-d234d959d70e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af637b8a-c0ea-400c-a2cb-5076d275e4ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cea1187-570b-404d-ab7b-378a5b1f6bef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "479f5945-076f-42d3-8290-adcffa27dfa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4890b553-801f-4b62-999d-f4e916a6301c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "926de074-eafc-40c1-b0db-5c8656c4eae7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "401c7155-3f82-480a-8eb2-46a66cad2e2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "501d05b2-8377-4886-b675-08abfd4fcb8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03a238d4-047e-4ba0-8f56-65861f2a9c85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d038d3be-2c46-487d-b8ab-f36b21a2d941",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c2ff937-2fad-4aa5-b0d6-de9f43eed54e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6949261e-0749-4d2f-aec9-56c4a2b97cbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c780148-5cd8-43e7-87af-6ea5b244288d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9500a50-793a-440b-9771-47c81d0f20a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b27256f-b7e7-4b18-96c4-d4f0d585b731",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c9bc823-ddd7-428e-be34-2e589236a750",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0471c03-0cda-4cae-a7ad-08bb00e7d6e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ae09079-c0ab-408d-a6ae-a773f4ace982",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2185a4f-a48f-43d6-89d1-c15dfbc4eaa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa9d0794-f345-4781-875e-5d664c195245",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffbdd6de-1057-414f-b716-153751bfa438",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd4e6f71-421e-42aa-a90c-45229486ab76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bd7d88f-b5a0-4733-b770-423ce9568ee1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de3e0dfa-e0d7-4b03-8417-9970e378364c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8342e32-b03b-40f3-8013-c100b0030b43",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65422b60-c9e3-4676-9304-dea64adab9df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "427d1d1c-3895-44ff-96bf-90fc2a1f2922"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dbdd98b-574a-4834-8813-50dbf0996c1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00590e71-26df-4f44-b593-507c10238bf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0513ece7-ff9d-4130-8082-ddc8f11ddd7b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea137d7c-5e45-4f99-a728-72da4aaf7a70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93241c1d-5045-41a7-8536-ee69a7293503"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a6c818-64c8-4538-aab1-6adaf6919dbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1e2bbfd-15b0-462f-9d79-efe6c1e0f0b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3250a5e7-dcd8-4abd-9281-a9e61b1b833c",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d359a64a-bb81-4852-8ffb-bf2a612461e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc9388b4-9d80-4717-a671-1b20d200dfd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e36143-3566-4c97-9859-1d0732be9479",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0103fc50-c300-4c71-a27c-8c85c34e4603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3169ef70-0372-42ad-8593-c77f02dd3d33",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c4771f9-86a9-464a-9881-6aa12a79cb87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8589824b-edbc-4576-9221-97e3fb553c7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c98a9c8-28e3-420e-93b9-57a2213a0d62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7ba51e7-fea5-4d75-bdab-e7d403e8a7e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c229e7d4-c91f-4b7c-a4a7-50b18c7165df",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "698c581d-eb2f-419a-a6e2-f9b7b7ae36e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "640cc708-f359-4f1d-8a56-4e7d80df459e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01bb5424-d59e-4ae4-9d76-637caecc930c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11f1908a-d878-4740-a108-4854929432a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a5915b9-a91e-4623-9e7e-0698dbf57020",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586ec137-f82b-4890-95c3-1f32bc1773a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cb4cc35-b809-4593-86e7-056873dea199"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a5fdb0-30e2-4847-b63f-6243f279fc95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09027155-1de7-48fc-bc2f-147da85561f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f39df14e-97df-4bd3-a2ae-52cd04616ec2",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f7b8d8-7873-4f0d-be57-ffbd5cbb90aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67069158-ec11-474d-8f10-e69507a0abc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adca4050-2ded-49c9-8b05-003c50dd0f12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95c4ffed-81ae-4d53-bded-819bbb56a639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d29d606a-e5a3-4f03-a8f3-0b345b94619a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e97b3ee-a0f2-4e2d-a480-772cde27abb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e054da2d-ab97-48af-a276-1118693bfc72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "905ddd8b-7726-4eab-adca-c82f5e7c1712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3d249c6-941c-4f3b-9af4-0b8e5b2e6f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fd36e6b-2dc3-4d29-8723-72d3834e4fb9",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e34219-254c-434d-a7bf-376c740cdafa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a51d42d-23ec-4b7a-8fa5-33f65fc8ac0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b2e5b3-6972-4c50-aed5-b3ccda6bc464",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf04b56e-b496-49aa-93e5-2c0dcc525a1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "255c9a9e-d37d-425c-be8c-4917149d001b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5710c155-5689-444c-8ea0-63b9f670f4dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcb9ce3c-7dd7-49fe-a7dc-ce3c8497622a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bc4759d-7c6e-408b-99b6-5698a01635e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0c875a0-459f-4914-8dd3-89d754a4dd29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ff2ad2-47d8-45f4-942f-e6bb72ef35eb",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28ae76bc-5e81-4d72-948f-4bbce0e43765",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0049bf5e-ba2d-4f1a-a7e3-14f2117bbf4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8292679-b849-4d28-8e62-35c57385a46c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "938f5636-bf3d-48c1-976d-8a867205983b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4203ad34-5a51-4962-b346-295651d0b51f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c8421f1-2dbd-4f61-ac94-904f28c9434c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13637952-a51a-41f3-bd54-f518ee615e9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff6381b7-43b0-402f-88ab-8ee389b53852",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19187ab6-c07a-4936-a3c3-9ab7887e666f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4e417a-1f4b-4ab2-bdbc-182c43146de9",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2d40b5-cde8-4dc9-98da-b09a199c53e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8397095c-7d30-474f-8782-e3d7262cd24c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da21d6d-f561-4ee7-9885-5cbc0a1ea6de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aafb00e-2015-4af5-8000-675a7b0cef7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c3aba4-745f-4b17-b9ad-c5b220f9209c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd82c657-4d6d-4d1e-89eb-f5a0667c1da0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f44e25f1-6585-4210-b5ff-c6f386357fba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41c347e6-1798-472c-a423-acc1a2bd3339",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "109c654b-9c25-434a-ac1a-a2f8e0c1bd29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24ba3819-68e1-4c70-8277-d9478e8f7839",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94d665f5-1940-4581-b9b9-0ce17c78e2c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fdc09e8-17ed-4597-beaf-db7443b8c6ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57321f7c-c796-42e3-b84a-8b340df1d64c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11ad75ee-029a-442c-8bc1-255c8c617667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e792450-8348-4e68-b2ff-c2277d6dcd3c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a04545b-19d2-487a-bcf0-758fb7b4cbcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80092684-dee2-47ec-b060-912e1e4b2bf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb262509-c459-4dcd-88dc-27bcb0a01ad2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eb711a7-d12c-4e6c-98ad-56b3b52b69f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c94cf5-d63c-4fa4-ad51-5c6c647ecae8",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad2fac93-af77-4f23-8749-7e248e9ce18c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c00dee8-d524-4d53-a2c7-4075ef98f837"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d2e5bd-1cfc-4fba-bcfc-7eb756c87d60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36fa692b-baad-4c8e-a218-c530bb8d3c00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e559e548-4305-4204-be6c-3971d6bb45e6",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05932781-468e-4b81-ad7a-628e62829f44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60a75e2e-c33b-4606-a388-fd4f67ac7fad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f95bc229-b88f-406a-81b6-138c5a434ac5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcf83903-66b5-4cc9-8d1d-41e99eecbe8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e7bedc7-6815-4c2f-931b-432e6d1524e1",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "685bbd88-bb55-4bb0-841d-0260177b1a76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84554706-1f6b-41db-be91-c90467ca7a94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa5d84be-c8de-4fdf-84ab-d2384c41baae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06a7bbab-9d01-43c2-9b23-07657ad5005c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd6ca99-5813-4121-8054-05d769a58914",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42a6263b-9960-4bc5-85c5-31b92de7a677",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec7687e6-76dd-43c8-b4c7-bfc2788b6ccb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caaebb7a-13c9-4117-a6ba-6d553104f418",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "817e41b9-d323-4869-bdf8-5c3ab5287c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33cb876d-1581-48dc-b638-f3bc1c9a7a85",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f94bc4-3f5f-4a1e-a54e-da6a0364d359",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7eae4b3-f303-4656-a268-2f205841abc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1add3940-6de8-438d-b703-08ce86029c38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a362069a-60ca-4c6c-aebd-8e9ff25caee4"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec148fc7-9609-482b-afd4-cddb7c171420",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9fbca45b-65a0-4bc9-a826-c1f148df8375"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "487d9793-e336-4b7b-800a-d6e6b50749be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8d225b6f-1e66-4775-9597-42e9a9c536c9"
                    }
                  }
                ]
              },
              {
                "id": "0a7d749a-d12e-4dfe-8630-2ceebb8ea0af",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c4c10e7d-fe46-4716-b841-8bc2ab9e908d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "176ce9d1-5b56-4750-9b1f-43e96f3a7b38",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f967e17e-1cd4-4c1a-aec3-d1a06dee4d3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6eedabd-41fb-4b0d-83ec-47cfa6b4bd6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87c04e4a-7b0c-422b-bf64-7ec42ace40a7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa05e58e-c2c6-44e2-a2fb-6ebd6e0dfbdb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c98cfc89-c7d1-49e5-a594-cfbf143dac5d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec65bebf-d4c5-4418-b897-0c5c478dc7c4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "57526f89-ad95-4662-884b-0d2275cdd4bc"
                    }
                  }
                ]
              },
              {
                "id": "e0c148cb-a84f-4cc2-981a-040ccbd039b3",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "9c16afad-911f-4154-b631-f45a6590a785",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e2a409-9a90-411d-bfff-a73b7b835cac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "8439b35d-8fef-4e3c-b222-68a20006d925"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e2b1287-f41e-4ff9-a472-661a6305346f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d046bdad-bb45-48e3-bf3b-75f588f2c0d5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "69256e3c-c58c-45b7-b77f-f3acbd4c314c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "936e4691-ef0c-406c-bde6-5d7a4b269235",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "77a5a626-cecb-48eb-ad39-2497255fc261",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "bf2aa238-c26c-482d-8904-c875cfe2f142"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "058ebafc-2b05-451c-9dd8-1569343cf013",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94d6eb6a-6947-4ecd-9026-54bc4846139e"
                    }
                  }
                ]
              },
              {
                "id": "106e47a1-d353-49ac-a50f-bc8bcf293bbd",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e258d107-7f05-484b-a479-e956571859ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "02b649a3-8965-45d8-8e8f-7ed5730147d3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d12c3560-0171-4769-b9d5-bf53bd1eface",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "275b75d7-563f-44a3-95a3-1fae5fb22293"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "179d47d0-86a1-4980-b311-360163577402",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e5e5b5ac-5824-472c-94a9-a73215cc6a92"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "273bbea3-e7ad-48ff-9124-262ea57a5087",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b33d0b61-8df4-4217-b97b-93611c9c09c6"
            }
          }
        ]
      },
      {
        "id": "311f8dd5-21d6-4b51-b1de-51f03a4d378d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "16659c24-d952-453e-ace7-619977b5aa16",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1ac73b7b-4a3f-4b81-9f81-3ea58e999f4c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "64c9046a-bcea-4088-b7ac-78d763f2b2cc",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea315ee-eac8-420c-9bab-422f0227a1ad",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1e153f12-4a04-42f6-802d-c074f94ae033"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce7ed0b-3390-47e0-84a9-cba7224013a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6975cc55-208c-490a-a469-6799ff365386"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4764a94-788a-4935-93f5-b0881d6c296e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0e6c6acf-16ce-4dae-a8ba-063e36ca1f92"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "15360213-fa17-461e-b155-5310ac84bc39",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "960192c4-cf64-4b11-8533-ea0772bbe526"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "063d858b-9d4c-4d7a-a61f-0c4193458ae6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d5a48e3e-5ba9-4afd-b474-1b9c48a1fda4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fa7904ea-45d3-4f6f-8e6c-e65ada926ed3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "51048ca0-fbd0-4efb-927b-006b0d2ceef2"
            }
          }
        ]
      },
      {
        "id": "17637c31-3632-421a-9937-a4f862e9c4ea",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "08dbd132-0ed0-4a71-a93f-50e74112598b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0b3fb646-e22f-41a0-8b13-efe60486b499",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b663299a-a9ca-4570-acea-c8bd39421a6d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b9662e4-0635-4765-ab9b-f0e0ec6ec76b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc406af2-3e59-41c5-a7b1-bb93e52e1737"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2bdb773-1311-4430-b1f4-c45d6e7f382e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d7f7e0ab-e393-46bb-847a-76654f6ec627"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "524d9153-8caa-4a27-9ab6-ca392fbf054f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8dbcb9c5-c7b2-469e-ac75-82faa1608fdd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e894693a-d459-44ce-bcd2-22fc051e1b37",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f7170371-29bc-4bcf-9512-bd986ce2e1cc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fc746200-f758-43f5-a124-d9f876d8dcb4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2e2130a1-c12b-4754-aac0-95daae8ab772"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0c8819c7-092f-4622-a842-c01e37d9c9f5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c619ca22-ec12-4839-9cec-4ce7be7faa39"
            }
          }
        ]
      },
      {
        "id": "00d0e9e1-fb06-4de9-8cc3-ee641bad255b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "ca160e37-dad7-42c6-9463-78957ac741b1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bcdb97cb-0232-405d-a8b4-06de5553d5e9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a566e45b-5a4f-4c35-9551-f9a0e60f25a7",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e2eff86-3b5a-4fdb-8c1f-3346ee4498ce",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47901067-4eaf-44ff-af82-a418e827c516"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be93ce9e-26a1-494b-a9c6-296a2eb44ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e356193b-4bca-4b91-b55f-c9d8792a4633"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67ad0def-2a25-42c2-a3ea-c4823964fde3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b6b0f61-f57c-44fc-a2bd-b76d8da4b744"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ba0d369-f99a-4347-9dc4-2af89ff11ed7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5d03e05-789e-4fcd-a86e-e158316237e8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cedd2251-ebab-4605-92c1-9e0226719d57",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "edce003b-fce4-49e2-bd56-d0a48d1a380b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aa0ba9a4-7797-45e7-b80d-eee8b5ae4946",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eff9eca9-0ffc-48e0-83fa-86bb23993e49"
            }
          }
        ]
      },
      {
        "id": "2257fee0-afd4-4652-95c6-8910940bdbdb",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "54407acd-c81b-4568-a264-66ddfa198b6b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4bd4b454-5c60-4fbc-a97c-ba54f961b184",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "fe21856a-9084-46fb-8fea-ad1980fb7bd9",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "27c87cb7-935f-42b8-a158-467d23988bb6",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "075a96ea-491d-462a-ab99-a25ce21517b7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 118.99999999999994,
      "responseMin": 21,
      "responseMax": 657,
      "responseSd": 85.12360465919802,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1707093324170,
      "completed": 1707093367874
    },
    "executions": [
      {
        "id": "e0971797-d138-41e7-ac15-e3d7a5289da6",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "8721f131-e69c-4206-a15a-6ab770fbdae7",
          "httpRequestId": "53e5beb4-6500-47d0-af0e-152204d46535"
        },
        "item": {
          "id": "e0971797-d138-41e7-ac15-e3d7a5289da6",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ac82ab53-7de9-4e96-85ae-c9f2fe8bfcda",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 0
        }
      },
      {
        "id": "01c6c9f3-3b46-48e5-ae30-310980b7436c",
        "cursor": {
          "ref": "6a2618a4-c2ca-4e98-a811-7c96fe185e20",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "bb24827c-962c-400a-ac21-7d015f56c320"
        },
        "item": {
          "id": "01c6c9f3-3b46-48e5-ae30-310980b7436c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f6129917-b09b-4780-93cf-3858eeb93108",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "81c56cc6-22c3-419e-a3b1-31351471c70c",
        "cursor": {
          "ref": "1337af89-cb0b-47e6-be64-537c77b5f615",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a9b4cf41-61a7-48a6-88ce-65a2469d0e5b"
        },
        "item": {
          "id": "81c56cc6-22c3-419e-a3b1-31351471c70c",
          "name": "did_json"
        },
        "response": {
          "id": "d15bcfc9-0ad7-48c9-992f-fc129accad26",
          "status": "OK",
          "code": 200,
          "responseTime": 540,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a3cbf8-48af-40e5-aa41-d15faa6ac2df",
        "cursor": {
          "ref": "2262ef76-19dc-4f1a-a269-361d08f29024",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6ded33aa-25fd-4c5a-8469-08f2b0423edc"
        },
        "item": {
          "id": "99a3cbf8-48af-40e5-aa41-d15faa6ac2df",
          "name": "did:invalid"
        },
        "response": {
          "id": "267f62ee-4fc4-4998-a342-2ceefb2f355f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a3cbf8-48af-40e5-aa41-d15faa6ac2df",
        "cursor": {
          "ref": "2262ef76-19dc-4f1a-a269-361d08f29024",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6ded33aa-25fd-4c5a-8469-08f2b0423edc"
        },
        "item": {
          "id": "99a3cbf8-48af-40e5-aa41-d15faa6ac2df",
          "name": "did:invalid"
        },
        "response": {
          "id": "267f62ee-4fc4-4998-a342-2ceefb2f355f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "475f843c-3e5a-42dc-9d1f-f00759cbafb1",
        "cursor": {
          "ref": "f8ba243d-d618-4aae-abb4-0a8c522f564f",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9d203f3a-874d-4f39-aef1-6891a025f0c5"
        },
        "item": {
          "id": "475f843c-3e5a-42dc-9d1f-f00759cbafb1",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "cff76b5a-1d47-4d91-898b-83e399663e4a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 153,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8c514a1-f36a-4097-ae32-e5da25ba9385",
        "cursor": {
          "ref": "d0eb0c43-efd5-4ff5-8fba-ca5eff96cfd1",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "249871a0-8cf7-49e9-ace5-a40d52147993"
        },
        "item": {
          "id": "c8c514a1-f36a-4097-ae32-e5da25ba9385",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ebd78e5a-0609-4403-9708-ab7e5e95cb7e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 94,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8506d560-d3d9-4d00-8cf5-38c8410b86ba",
        "cursor": {
          "ref": "a7958b0e-611e-4ae9-befe-787286dcfc51",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "51afe5c2-5d0b-48be-bb0a-1106697a81e3"
        },
        "item": {
          "id": "8506d560-d3d9-4d00-8cf5-38c8410b86ba",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "fd173262-2879-414b-a928-45cbd45df2fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6840098b-116d-42e2-8d3f-e60b5a5ad0bf",
        "cursor": {
          "ref": "b83daafc-3059-4c35-bf46-2e58955f1aa2",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "fc571541-960a-48f7-9d9a-a4b1d9d0ae96"
        },
        "item": {
          "id": "6840098b-116d-42e2-8d3f-e60b5a5ad0bf",
          "name": "identifiers"
        },
        "response": {
          "id": "4dbb5db2-a22d-47c4-b7c6-04639cd5d45d",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1e3897-f4da-4c07-a85e-4d8aaf27136b",
        "cursor": {
          "ref": "59f1c5fc-ac1d-4663-a878-85272baf216f",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e5cc754b-702b-49c2-93ed-26b197828b57"
        },
        "item": {
          "id": "fc1e3897-f4da-4c07-a85e-4d8aaf27136b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6644620c-f69f-48d5-a944-f5130e5e80a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fab963e-ebd0-4945-9285-4f4893f0c91f",
        "cursor": {
          "ref": "4baaa243-beae-4946-afc2-e4a44673fc7f",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "af639ed4-965e-4ced-b9fc-745c35efbe55"
        },
        "item": {
          "id": "0fab963e-ebd0-4945-9285-4f4893f0c91f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "5d8db72d-8b3b-4ffb-be3d-4c054e2eab40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4982b8e5-947d-46d3-aa63-f07f26bef7af",
        "cursor": {
          "ref": "56b6bfac-2db0-4485-993e-4d94beca5e66",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8c0f5e79-e10c-4d8e-8cb3-976fc484bed1"
        },
        "item": {
          "id": "4982b8e5-947d-46d3-aa63-f07f26bef7af",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c9da0735-2d7b-430b-bdf5-664923d7ab3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d0f2d7-bbe0-4a1f-b24d-c15512105184",
        "cursor": {
          "ref": "7dd4bd80-fbcc-4316-b069-301b2d15ac27",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "81681a24-241c-4bc7-9f1a-6e72e610988d"
        },
        "item": {
          "id": "55d0f2d7-bbe0-4a1f-b24d-c15512105184",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "467bc0bb-9a7d-4178-b532-00ca5ffe8308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77499061-f80b-44cd-a525-cadb3851ed7e",
        "cursor": {
          "ref": "2923595f-ebfe-459f-a882-5c137a188866",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "fc3602aa-fd75-4b39-9840-c007b8794bcf"
        },
        "item": {
          "id": "77499061-f80b-44cd-a525-cadb3851ed7e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "bf9f7abc-65b6-4334-a2de-16c8926dbbe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c73508d-1ecb-4883-badf-ea04f53d9f0b",
        "cursor": {
          "ref": "4445dec5-700b-49d9-b1d3-330b5398fa5e",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a44db674-066d-4d40-887a-bd01540778b1"
        },
        "item": {
          "id": "4c73508d-1ecb-4883-badf-ea04f53d9f0b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "6dfd6f83-510d-4163-81df-e2a320c5ed56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "397dc938-625c-477e-8014-dae53dc1ad72",
        "cursor": {
          "ref": "aa857644-b72a-4b89-a839-75dd7f1b1d63",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c1e36702-1a03-4a43-80ee-88f2cc78a7a2"
        },
        "item": {
          "id": "397dc938-625c-477e-8014-dae53dc1ad72",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "9f88f50e-1cf1-4898-ab60-b4051d47aa6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "613b483e-017e-4804-91f4-333b5d76623a",
        "cursor": {
          "ref": "34dfd265-aee4-4e0f-a927-6e326774cdd8",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "e2d2c3f7-c018-47c3-aa0c-57fff46aeba5"
        },
        "item": {
          "id": "613b483e-017e-4804-91f4-333b5d76623a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "eec15b38-ea40-4461-9ceb-c262f59bf6c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99b119aa-87dc-46cc-a4c8-52bab7000189",
        "cursor": {
          "ref": "f01a5808-0e3e-48be-9fb5-c4cde14c49c5",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e6f1d0fd-93a2-448f-b968-b4f0d69440a8"
        },
        "item": {
          "id": "99b119aa-87dc-46cc-a4c8-52bab7000189",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "0601f799-164e-4178-a875-8fef875f0e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d381a422-1b78-4339-aa60-681b149b6f8f",
        "cursor": {
          "ref": "3f7b2b02-e4a7-4f8b-8e0e-334ed5c20462",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "739961e3-a1f4-42b7-838e-1b7725c44d11"
        },
        "item": {
          "id": "d381a422-1b78-4339-aa60-681b149b6f8f",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "c12b6f5e-a33f-4ef3-828b-e854eea2eecb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8b9bf6b-8b75-4abd-ba5b-e98b5996ccdd",
        "cursor": {
          "ref": "63bf4aa9-13e6-4681-a108-116a1020a4ab",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "5c106e16-6a15-4c72-a627-af433bc86cc3"
        },
        "item": {
          "id": "c8b9bf6b-8b75-4abd-ba5b-e98b5996ccdd",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "05fdb12d-c1f4-4772-b957-b08a2c914b8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99fac6af-775d-43ec-a01c-85c10f27275f",
        "cursor": {
          "ref": "ab0f5d29-3e12-49cc-8aef-11b3576a9846",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "6376ccee-9e3c-4af5-81b0-7609888205ef"
        },
        "item": {
          "id": "99fac6af-775d-43ec-a01c-85c10f27275f",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "1f7568a1-0eb0-42c7-862a-ae64e2824254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87f7b650-a1cb-4fdc-8544-92575a7bcc1d",
        "cursor": {
          "ref": "e6f97e5d-1ff0-4384-bb4c-90701e6582de",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "752632bd-086f-4952-b6a0-5995d17b24ed"
        },
        "item": {
          "id": "87f7b650-a1cb-4fdc-8544-92575a7bcc1d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "4ca20401-0a6b-4202-90f2-92bd3b0d882c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6efaf3e3-33e8-4e65-ad04-2a04adc1664a",
        "cursor": {
          "ref": "6d694606-3f31-4fb4-a631-9218054d8bc3",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b25f71dd-8982-4c2f-95ba-dfe1266f091f"
        },
        "item": {
          "id": "6efaf3e3-33e8-4e65-ad04-2a04adc1664a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "8b4bd46c-41a5-49d4-8b3a-a084dd20fa57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0111f48f-e2e7-4f20-8da5-ee52d0d35e26",
        "cursor": {
          "ref": "510d2552-2604-4e81-abf1-53b698beb774",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d25e7ab2-5c80-4253-bb66-000323123973"
        },
        "item": {
          "id": "0111f48f-e2e7-4f20-8da5-ee52d0d35e26",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "556b9cca-ce2b-4ab8-8c67-806f0c8ebec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41c7eee2-f31a-4c25-92e4-b48597cb3051",
        "cursor": {
          "ref": "9404cd7e-c915-4670-a7b6-a9010a7395c7",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "53e0bc75-de86-483e-a4a1-e03225bf3b55"
        },
        "item": {
          "id": "41c7eee2-f31a-4c25-92e4-b48597cb3051",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "84829b41-d95c-417b-b362-089402b2d749",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e35a866-6c22-4271-b50a-d55ff5376e54",
        "cursor": {
          "ref": "055f1105-8e68-47ca-8ae2-d3da9ed7813a",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e92e22f7-f51a-4374-b554-44da0e392257"
        },
        "item": {
          "id": "0e35a866-6c22-4271-b50a-d55ff5376e54",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "25e86933-c28f-4819-a27c-a1f590086ec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6711d637-350a-44d7-9cda-6919df6216db",
        "cursor": {
          "ref": "0548195e-8abe-46dd-b487-c49cb1c36f04",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "5b10e11c-ff4a-4b3d-98e2-914925f92a61"
        },
        "item": {
          "id": "6711d637-350a-44d7-9cda-6919df6216db",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "4f1190e9-c54b-4ec3-be48-5a1070908fac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea6b9f75-14cd-4331-b521-05ab7d9c3bd7",
        "cursor": {
          "ref": "c7bb4026-73d9-4469-899b-b2d0a19f6d79",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "84e7d3bb-ae5b-49b3-a8a9-472d50676863"
        },
        "item": {
          "id": "ea6b9f75-14cd-4331-b521-05ab7d9c3bd7",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c7d0e933-d5d5-4ef9-ba04-d76d3cd2bb5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b297d8c6-c273-4e71-a405-39e5c67f0687",
        "cursor": {
          "ref": "6a54a040-4dd0-4bbb-afa4-e34ba3ea4279",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "fb57e38b-47cd-4375-8464-68b2ac10bc1f"
        },
        "item": {
          "id": "b297d8c6-c273-4e71-a405-39e5c67f0687",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "901dc28f-bdc7-41aa-8a5f-54d65e06a594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70d933d9-cc6d-4a85-a334-05e18f04d65e",
        "cursor": {
          "ref": "d35a324a-af40-4adc-87be-b895336aaed7",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "35afd121-53bd-4bf1-a8e1-52a0f943e511"
        },
        "item": {
          "id": "70d933d9-cc6d-4a85-a334-05e18f04d65e",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "612b8a93-ef1f-4763-a039-372374e429c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaca35bf-1e81-44f4-8262-29f55a3d4e72",
        "cursor": {
          "ref": "7f0e9174-b5e3-404d-a597-5a601f6cda38",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "7a3708f6-0edb-4d26-a2f5-8ee4279b5045"
        },
        "item": {
          "id": "aaca35bf-1e81-44f4-8262-29f55a3d4e72",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "8c83d716-0bb1-4fcb-911d-6d30e6de8d26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab24af1-b11c-4f84-aa24-93723a825662",
        "cursor": {
          "ref": "9cbc09de-0351-4110-8bf1-a79866aa5db8",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9ba042af-dba2-4ce1-8177-27dad2e972d4"
        },
        "item": {
          "id": "2ab24af1-b11c-4f84-aa24-93723a825662",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d28181fc-ada0-4901-bfa9-951d28fdcb74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30b052c7-cc26-4e82-a291-8e89bedcf063",
        "cursor": {
          "ref": "e7733fb7-a2ab-46a7-a0da-b554fe70c69a",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4af4da5d-b915-4445-916d-45340c93dba2"
        },
        "item": {
          "id": "30b052c7-cc26-4e82-a291-8e89bedcf063",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "29e389e5-b61d-404f-8541-46bef3ce8f3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95cdcb89-e5ea-415b-b992-8e8f5f2c2690",
        "cursor": {
          "ref": "04a3efb9-7edd-4904-82af-725b6ce1906b",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "21541647-ffc3-4481-9d2a-7ced037434bc"
        },
        "item": {
          "id": "95cdcb89-e5ea-415b-b992-8e8f5f2c2690",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "ff038bec-63ab-4476-ac48-e413d7f5a2f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dffed60f-a9fd-437b-8826-8e90af70b396",
        "cursor": {
          "ref": "6fbb774f-82d9-4799-8463-5e29fc245049",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "981043c4-c291-4c03-b389-6d2e2c1355bd"
        },
        "item": {
          "id": "dffed60f-a9fd-437b-8826-8e90af70b396",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e390d290-44b2-4bc0-a648-773fab515c7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e474a97-ca42-4473-b144-dbf312aae356",
        "cursor": {
          "ref": "93e2485b-e2a4-4d23-808f-a8e559b23f2d",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "6749b089-c80f-4e73-9582-04bdec51ea47"
        },
        "item": {
          "id": "4e474a97-ca42-4473-b144-dbf312aae356",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d90661af-11a7-4bee-a22c-d4f0520610c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "849cd8d5-ac68-43a0-ae05-6236c99c786d",
        "cursor": {
          "ref": "6a62369a-bc14-4331-8b72-b9e20a0520a6",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1fdfcbdd-af06-48cb-aca5-82120252ce94"
        },
        "item": {
          "id": "849cd8d5-ac68-43a0-ae05-6236c99c786d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "a431adee-2047-4b1a-9d4e-88cf070a741f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c095b63d-033c-4169-af44-78d5b060d0c5",
        "cursor": {
          "ref": "41c3cfc2-0cf5-48cb-ad09-14cbb47e303f",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "dee69947-533e-4a30-8ad9-bd503ea5fc41"
        },
        "item": {
          "id": "c095b63d-033c-4169-af44-78d5b060d0c5",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "a2e255c5-9b90-4bc9-9dd8-b8543a3fda98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d67b576b-2ded-4be6-814e-cdd153be54e6",
        "cursor": {
          "ref": "d944df23-e965-472f-880e-94579dbd86bd",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "20bc587b-9b43-477d-b9b6-17cb29cce50e"
        },
        "item": {
          "id": "d67b576b-2ded-4be6-814e-cdd153be54e6",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a46a8423-401b-4b30-95da-d2b956734a37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "998bdf2d-bfb5-401a-ab37-523412fc22b1",
        "cursor": {
          "ref": "37b01b09-f018-4908-8a68-69ccc4a2212a",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "8b9a5109-26cc-4121-9f90-c1b64aab7db2"
        },
        "item": {
          "id": "998bdf2d-bfb5-401a-ab37-523412fc22b1",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "49f9e42e-3a88-4644-94c8-542a5fabbd36",
          "status": "Created",
          "code": 201,
          "responseTime": 657,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "d8e6c46b-6998-4c4a-8065-01aa16c6b9e9",
        "cursor": {
          "ref": "bf1a351c-461e-4612-a305-bf91f3bb539d",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "bb5d4bc0-d55d-4d06-8732-929afdb7e052"
        },
        "item": {
          "id": "d8e6c46b-6998-4c4a-8065-01aa16c6b9e9",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e810a9ca-2169-4208-b2c7-37dd9ecb09a0",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "66d1b33b-7e67-4939-adf3-e3f7acfb5460",
        "cursor": {
          "ref": "c1cdef8a-ce68-4463-89d0-66af05baa1a0",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "300dd4bf-321c-4b24-87e8-e1b0dcf14e6f"
        },
        "item": {
          "id": "66d1b33b-7e67-4939-adf3-e3f7acfb5460",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "339febe6-4484-4715-a57b-cd57241f2fd7",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "c0e8d4c6-aff0-4792-9bb5-226d7db8fbae",
        "cursor": {
          "ref": "0e7540ab-240b-4bde-b5f6-958f67bf7643",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "9342a7cd-90db-4098-8b65-67f573775531"
        },
        "item": {
          "id": "c0e8d4c6-aff0-4792-9bb5-226d7db8fbae",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "d97507eb-6134-4368-969e-466d1187e547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "583e3cfd-7641-4df6-b3ca-0da0c9c43b1f",
        "cursor": {
          "ref": "367ce246-0f0f-4c00-bd63-7eb26c67cb0c",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "19f860a8-f8bf-4444-a442-5d47678584b1"
        },
        "item": {
          "id": "583e3cfd-7641-4df6-b3ca-0da0c9c43b1f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "54d90108-0dbc-4b46-95ce-a2cba36e9acb",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "9d72351a-310b-4700-a15e-256e505700db",
        "cursor": {
          "ref": "ab1e9e95-55f0-450d-801a-61ddc2815ace",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6aa4ab4d-7c0c-4395-aa02-eb4bc7a0ae7f"
        },
        "item": {
          "id": "9d72351a-310b-4700-a15e-256e505700db",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "32077309-279a-4687-9212-fd6556f3f2cd",
          "status": "Created",
          "code": 201,
          "responseTime": 356,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "ade4c31a-4ac5-4e19-97e4-cc8c5e8ab642",
        "cursor": {
          "ref": "d215f63f-c73e-48fa-894e-4e3f9a8d050d",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b6df4d60-0c4c-423c-a2fa-b08fc1d42511"
        },
        "item": {
          "id": "ade4c31a-4ac5-4e19-97e4-cc8c5e8ab642",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6db2d6c2-c12d-41e8-a161-09b431b121ec",
          "status": "Created",
          "code": 201,
          "responseTime": 326,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "52118c19-c2b2-4a15-9769-98166dffa489",
        "cursor": {
          "ref": "b8a16a16-eada-4475-a4fe-43a9917ef97b",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "aec36a2c-392a-41cb-8934-0863063328ca"
        },
        "item": {
          "id": "52118c19-c2b2-4a15-9769-98166dffa489",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "489154b7-53ce-4ca6-83ff-71baa61e20e4",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "a2cb6d0c-f5fd-4208-bbdb-c2f0fdc7995c",
        "cursor": {
          "ref": "04833353-782e-478a-bc10-d9dac6ac075a",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a7f5e77d-1e1f-474d-8c38-789669133230"
        },
        "item": {
          "id": "a2cb6d0c-f5fd-4208-bbdb-c2f0fdc7995c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "cdf8e3ea-1a23-4f12-ad90-0504033ba0fa",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "30bcf2fa-19f1-4868-978b-5e6d8806473c",
        "cursor": {
          "ref": "849fbf0e-7d0a-475d-acdc-889dd46dc1c0",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "96d0dab3-d786-4a52-8e0e-052502ddab59"
        },
        "item": {
          "id": "30bcf2fa-19f1-4868-978b-5e6d8806473c",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "0096610e-85d9-4343-98ee-715a754f68a9",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "148518cd-98d5-42b6-a727-6981213c55d8",
        "cursor": {
          "ref": "a9c48eb7-7799-4611-a316-f39211df6def",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e3d2e9c4-69c4-4c85-b81a-79765af60374"
        },
        "item": {
          "id": "148518cd-98d5-42b6-a727-6981213c55d8",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "f4c1967a-d7f4-46b8-92ce-37917abd3ec4",
          "status": "Created",
          "code": 201,
          "responseTime": 329,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "ab239cea-d9da-45e1-a212-70b6d43cf898",
        "cursor": {
          "ref": "29b0dd41-8e12-401a-aec8-d49a56a1a043",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0bbb51c5-8dae-4c92-a1c1-7e2e781b3e9f"
        },
        "item": {
          "id": "ab239cea-d9da-45e1-a212-70b6d43cf898",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "493c13cd-f5d8-4dfd-b744-e616ac95030e",
          "status": "Created",
          "code": 201,
          "responseTime": 348,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "e969bde0-922b-4b53-9ffd-20bc0cd2ea06",
        "cursor": {
          "ref": "492345cb-871a-47c2-aa41-2eacaecf254f",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2cf9d9cc-8793-496d-aa25-d2034a4c2e04"
        },
        "item": {
          "id": "e969bde0-922b-4b53-9ffd-20bc0cd2ea06",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4628db40-bf06-4e0f-9855-fa3734e08729",
          "status": "Created",
          "code": 201,
          "responseTime": 354,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "86203726-b90b-499e-bc89-bf44499ef3b2",
        "cursor": {
          "ref": "255f0be8-4941-4a21-ab10-db3e0906775a",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a20477f8-a488-4bf5-9375-b167abf9dd04"
        },
        "item": {
          "id": "86203726-b90b-499e-bc89-bf44499ef3b2",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "99bde6a5-7aa3-461c-a2d2-4380dbe4f4ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62754b88-1671-4c40-b339-1dec371f4762",
        "cursor": {
          "ref": "6aba7b5b-48a4-4013-a8c7-5423a6b06031",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "988759e7-5d6d-4eee-8e69-b1a2a8f3a094"
        },
        "item": {
          "id": "62754b88-1671-4c40-b339-1dec371f4762",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "8455c033-769e-4ee2-8f51-b75fca3eb507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53497b71-2c8b-42bd-b450-7a019b839859",
        "cursor": {
          "ref": "4a800e9f-9a1a-4ae2-b6e8-406829217dc4",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "fdfab7b7-4780-4c8b-a080-fe7d14148239"
        },
        "item": {
          "id": "53497b71-2c8b-42bd-b450-7a019b839859",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "302913fd-e83e-4141-9b3d-3974f9b6ed79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b1508fa-6f53-4836-8a80-ee86e27e5cd6",
        "cursor": {
          "ref": "8013203b-d26d-46a0-b055-78e37a3de4cf",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "95baf8db-9f5f-462a-8264-2dd63e806628"
        },
        "item": {
          "id": "2b1508fa-6f53-4836-8a80-ee86e27e5cd6",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "330f9f69-64f6-4c67-b2db-af0c1c70f52a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e4b9547-22f6-452d-95b0-dca993e860b3",
        "cursor": {
          "ref": "1374fa9a-0e6d-4da6-8301-98d6b0f823b7",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "137dbf7e-9189-4c60-a3bd-177b639bc92f"
        },
        "item": {
          "id": "0e4b9547-22f6-452d-95b0-dca993e860b3",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "62a4e481-a08d-414e-ace5-55b29b5cbf25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48a8574c-4f50-4b44-b0cd-74a2cea09a58",
        "cursor": {
          "ref": "b8a14618-d94c-4873-834f-809e1feb64c3",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "bb62b1c3-03a1-4850-83c2-9c1cd19bbacb"
        },
        "item": {
          "id": "48a8574c-4f50-4b44-b0cd-74a2cea09a58",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b78946a9-584e-4035-b2e4-9e9905ec69b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c35b42-0d42-4502-82f0-2208865c15ff",
        "cursor": {
          "ref": "09e4233c-caaa-4707-8b26-d73f932c798a",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "933f0aaa-45ae-4c14-82e6-1a37514bcff8"
        },
        "item": {
          "id": "72c35b42-0d42-4502-82f0-2208865c15ff",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d34dfebf-8083-42fa-84b6-21c6bbb93fae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae0eb0ef-8afa-4be3-82eb-c43d70c19e6e",
        "cursor": {
          "ref": "a28ef94c-bf2d-4a90-9daf-0ca3eee59ad8",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "978680e1-52bd-411d-9ea0-736ee991652d"
        },
        "item": {
          "id": "ae0eb0ef-8afa-4be3-82eb-c43d70c19e6e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ac25747b-86ad-40a2-9c3f-dc7280741df7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f8c78b1-8e87-43a0-8306-544fe98f3312",
        "cursor": {
          "ref": "583619bb-3ac1-43e2-82f5-cb8c2b463379",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "08a0be01-7376-4f4f-adc0-caa41a59cbfd"
        },
        "item": {
          "id": "4f8c78b1-8e87-43a0-8306-544fe98f3312",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "314eed57-af04-4d5d-97ec-5d78a35d187e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddb0f127-c420-485a-8066-424032fe1081",
        "cursor": {
          "ref": "120c61fb-8620-43d3-a8e3-2bf0c8e6076d",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "10cfb69d-72d7-42b0-b4ea-2057b610af18"
        },
        "item": {
          "id": "ddb0f127-c420-485a-8066-424032fe1081",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "c5475211-bd84-4b57-b87e-1917105e93bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "654797e0-a99d-4726-bc88-814eafbf2516",
        "cursor": {
          "ref": "df8476b1-7890-4b0b-8798-f5b404eb0305",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8f380ea5-074b-4cec-8ac5-a8f02995e354"
        },
        "item": {
          "id": "654797e0-a99d-4726-bc88-814eafbf2516",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "951ff346-4915-4371-b455-4f3f287985de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a225979-cc5a-41a4-8630-141733ac2569",
        "cursor": {
          "ref": "0fad3800-e6ed-4d30-9204-21a5bab1712f",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "287d8303-f30b-4145-bc73-91c79b3f5eef"
        },
        "item": {
          "id": "8a225979-cc5a-41a4-8630-141733ac2569",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "91e44bf2-9b63-42a9-9a94-9f517b19d16e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "956c350c-da23-48d0-89d5-b62adfb26314",
        "cursor": {
          "ref": "acf80ca6-0df7-4a5b-8b8e-4c6b419fcf30",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "7402900a-a96d-4ea5-8825-820820b2dcf4"
        },
        "item": {
          "id": "956c350c-da23-48d0-89d5-b62adfb26314",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "403d1bbf-cba2-4c86-9a3e-041d4d90fa37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21a0ff59-79f1-4e03-abf0-5443e954c636",
        "cursor": {
          "ref": "d5a77d91-a3f1-4cc0-95f1-a2cee7deb97c",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "f5c31def-bfd7-43ec-a447-8b446e91e703"
        },
        "item": {
          "id": "21a0ff59-79f1-4e03-abf0-5443e954c636",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "9cee9ceb-d8be-4518-bcd6-5f1087d3b544",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "eca294f7-7972-4e52-b3f5-f5d0fc74e123",
        "cursor": {
          "ref": "8f9a6a41-bfc8-49e3-b54e-f4bcbdcebbba",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "48b1a227-c639-41ca-9119-f520e38f23c3"
        },
        "item": {
          "id": "eca294f7-7972-4e52-b3f5-f5d0fc74e123",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "25b4eeed-6362-4c00-b056-29d87c38b03d",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "a6934ff1-2cb9-477f-a9fc-aef90c6155a9",
        "cursor": {
          "ref": "12e228b4-226f-4c51-8828-5b52118673ca",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "f821e126-4596-41eb-bfce-53dfbf357f21"
        },
        "item": {
          "id": "a6934ff1-2cb9-477f-a9fc-aef90c6155a9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "075ee62e-e008-4f66-8ee1-d6815bc87440",
          "status": "Created",
          "code": 201,
          "responseTime": 453,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "a137b2a1-4f60-47f5-8271-a65486e6d37e",
        "cursor": {
          "ref": "56a55c41-83e8-4468-9a8c-3128a90125d3",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b288899a-2a51-4e13-94b6-d9f6efe8f70b"
        },
        "item": {
          "id": "a137b2a1-4f60-47f5-8271-a65486e6d37e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "9d9a07eb-05c5-4fd0-9dc0-2fdee0cafe96",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "4ad3d6aa-966e-49e9-8527-28299e4acbd9",
        "cursor": {
          "ref": "b41a0432-52bd-4367-86d3-8c9cafa9c2c4",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "770cb9bb-751d-49fe-b3f2-d065b5631da1"
        },
        "item": {
          "id": "4ad3d6aa-966e-49e9-8527-28299e4acbd9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "b0c423f9-e047-40fc-998e-38c72cd27455",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "824468af-369d-4b4c-8a43-411d9eb64e48",
        "cursor": {
          "ref": "575bc4cc-d650-4fd1-987c-65203d0ff9fe",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c767ad6e-a536-468d-acd8-02ad83b60393"
        },
        "item": {
          "id": "824468af-369d-4b4c-8a43-411d9eb64e48",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "89d11407-e3e7-400e-8334-65fbbaa85e98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e735b5-af65-41ad-90b8-9fdca2f16d84",
        "cursor": {
          "ref": "316b73d4-e6ef-4cb7-9e04-f924d19aa3bc",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "1b2a1ad4-4106-4a54-bce0-51eb1cee9e2b"
        },
        "item": {
          "id": "d3e735b5-af65-41ad-90b8-9fdca2f16d84",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "6f40bbf1-9705-4699-bff2-8d4ffeb478d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1370a1d6-4be5-4101-9768-4c2a7f0cb4da",
        "cursor": {
          "ref": "6e0738b9-43db-4748-af26-d6f6d004d646",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1be6df2d-beb3-4aad-a83e-31d907148e0b"
        },
        "item": {
          "id": "1370a1d6-4be5-4101-9768-4c2a7f0cb4da",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "c6a4b3e4-baba-42d4-9b9c-b93441d86055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25fe9d18-5245-46db-bf18-e304557de7b1",
        "cursor": {
          "ref": "2bf6d82d-2e09-4f81-bea2-55d4bbe88cd3",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "355af29c-b306-447c-91cd-f913f0d371c5"
        },
        "item": {
          "id": "25fe9d18-5245-46db-bf18-e304557de7b1",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e7342327-fc69-43c4-8aad-21646ff90ba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa194e1b-6aea-4b29-852b-eeec4c2b6fa9",
        "cursor": {
          "ref": "49ff0c84-04d7-43a4-bfe4-44c6877aa881",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b135b1e3-5d62-4eef-a912-9c36a1c0640f"
        },
        "item": {
          "id": "aa194e1b-6aea-4b29-852b-eeec4c2b6fa9",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "493d50c4-faea-4d8f-8ff4-4d727d9e3c29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a04ac081-aa24-4a39-bd37-48b94d57907d",
        "cursor": {
          "ref": "91511d61-7f8b-44bd-a9bf-bf4917cde8ef",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "19be886c-31ca-4942-a58a-28297be81e6c"
        },
        "item": {
          "id": "a04ac081-aa24-4a39-bd37-48b94d57907d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "8c729f6a-016c-401d-a465-d46d45c14f18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4faf9ea5-e28a-4c0e-8dfc-e4a8cb89754b",
        "cursor": {
          "ref": "b8900278-9314-49b6-b62d-7c7f513a3f1e",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "831b9c48-e719-4607-be0b-06305a600ab6"
        },
        "item": {
          "id": "4faf9ea5-e28a-4c0e-8dfc-e4a8cb89754b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "4b566cb7-3238-487e-9bff-4cfc0b8a8b38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a71d6d1b-0bb2-46ad-80ab-ebd3fc14c09e",
        "cursor": {
          "ref": "7b80e7d4-eb08-447c-b931-27a93074afb4",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "ff567254-1982-4ce4-9454-7371ae8aaaba"
        },
        "item": {
          "id": "a71d6d1b-0bb2-46ad-80ab-ebd3fc14c09e",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "af381f66-31d0-4779-a900-4c1ce4c97bf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "748b2510-f3e9-424e-b43d-486621761319",
        "cursor": {
          "ref": "1e505521-979c-4520-b91b-580c07d67748",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "2f6a5532-92e3-421b-ad0c-f693db219c88"
        },
        "item": {
          "id": "748b2510-f3e9-424e-b43d-486621761319",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "7c29f59a-43b6-4acd-a82c-ff9676ecd864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "478ef864-c6db-4364-ba3b-c0b285f16f14",
        "cursor": {
          "ref": "4af3de17-5fab-4a71-bdaf-44d892f84c08",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "3a9dc35b-969e-40b3-a19e-7edf480b834d"
        },
        "item": {
          "id": "478ef864-c6db-4364-ba3b-c0b285f16f14",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "cb1a6faf-844b-4c51-95d6-cae87074e56c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53297dd1-6492-4a1c-abe9-7cfda8c19a64",
        "cursor": {
          "ref": "a52ef46b-0271-4787-a6ac-76774db48be1",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "49b2f6a3-0361-4cec-9d48-68161dac8b98"
        },
        "item": {
          "id": "53297dd1-6492-4a1c-abe9-7cfda8c19a64",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "99419ea2-4ee4-420e-bca3-cb780c7414d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7432ce0-8ce8-4151-923a-79191361c6f9",
        "cursor": {
          "ref": "bcaecb16-196f-4e67-9c9b-4ac4641e5c67",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "d23afd47-3c0f-48c6-a1b3-c25397540ccc"
        },
        "item": {
          "id": "f7432ce0-8ce8-4151-923a-79191361c6f9",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ab7ee0b3-97c1-43e7-b005-05f9b0eb7069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7329cab-4b31-47eb-a537-81eccc12acf2",
        "cursor": {
          "ref": "d1011f4c-54e0-42bb-b520-73ea3f0cc446",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "516d76a4-4c61-4688-875a-509c2888d206"
        },
        "item": {
          "id": "c7329cab-4b31-47eb-a537-81eccc12acf2",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9cac7682-04eb-470b-9242-b6111bc85ce1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ec3ead-f558-402a-9952-5ec02e4d2c25",
        "cursor": {
          "ref": "74517918-dc79-4613-a83e-d9884eae480c",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "51caf10d-d0f6-4685-8d26-f473824155df"
        },
        "item": {
          "id": "47ec3ead-f558-402a-9952-5ec02e4d2c25",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "e0018fa5-1c38-4ef2-bda4-503d09892d40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec857578-0586-4a0a-91d4-e5a831a5d63d",
        "cursor": {
          "ref": "43544e94-9f3a-4f75-b069-e7b23b0c64e5",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c1a737fa-c91a-466c-8e41-dece448832f0"
        },
        "item": {
          "id": "ec857578-0586-4a0a-91d4-e5a831a5d63d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "c63ee8bd-a3db-4f17-aeb2-5c003184630b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3653414c-ffec-4156-9d8e-b2ff84be8599",
        "cursor": {
          "ref": "0c171df6-ef79-4772-b943-0b12d4cf9eee",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "e91b33d0-34ad-4bd1-86c2-b8a847db5a59"
        },
        "item": {
          "id": "3653414c-ffec-4156-9d8e-b2ff84be8599",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f00efe5f-b29e-4d88-99d8-70f0418347bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c31c76d-c1d5-4564-bb4c-bc4158c124ef",
        "cursor": {
          "ref": "78c4718a-2f0b-4f98-9899-efd2208fcd9d",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "37146669-d872-4260-bce8-c5f0db91d85e"
        },
        "item": {
          "id": "9c31c76d-c1d5-4564-bb4c-bc4158c124ef",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "e75f9703-bdd8-4b38-9ac5-0f24c94d6b6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "874d533b-0759-4453-a009-f2533f2b68dd",
        "cursor": {
          "ref": "d17727ab-8295-4566-a22c-9d87919ec455",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8bc31bcf-c801-4eaf-9980-d5c493d5deec"
        },
        "item": {
          "id": "874d533b-0759-4453-a009-f2533f2b68dd",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c2fa18d8-fe99-439e-a718-2820e4cfb4cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25474cd1-b0c7-49b4-9eea-24f25b79eeda",
        "cursor": {
          "ref": "79788fba-730e-4e2d-8256-8169c1c90d8d",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a63538ad-c6f7-4be2-8191-f9f9b05e4c85"
        },
        "item": {
          "id": "25474cd1-b0c7-49b4-9eea-24f25b79eeda",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "70e6086a-6966-4dc9-9a6d-625bbb26047b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9a11c5d-ad06-4253-9058-bdb0fb27c272",
        "cursor": {
          "ref": "7939e8c4-8a48-4e12-9e64-6048c941f58c",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "2404efc2-27cb-49b7-8392-86ebbb6ed0d0"
        },
        "item": {
          "id": "c9a11c5d-ad06-4253-9058-bdb0fb27c272",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5b8699d5-403c-438a-9650-cf9a403dd4f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1754d5a-27e9-4e77-bae9-aeb38345fb14",
        "cursor": {
          "ref": "8aaa7f14-0ddb-4390-b17a-7e3d7603e236",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4aa80d7f-4c3c-4533-9304-4e8abde4283b"
        },
        "item": {
          "id": "a1754d5a-27e9-4e77-bae9-aeb38345fb14",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "65b881b9-ca73-4429-90a6-e3ae0906f185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20b2bf13-18d8-4b1a-b6fb-3851db21d49c",
        "cursor": {
          "ref": "dd78833c-261f-4d52-b165-580f31935243",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f2f5a0c4-91ab-4cd8-818a-7518a80fcdb7"
        },
        "item": {
          "id": "20b2bf13-18d8-4b1a-b6fb-3851db21d49c",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f9e10001-645c-45b2-aeb0-054afb0d293e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa0243c8-5beb-4686-b715-f6bb84721868",
        "cursor": {
          "ref": "babdb894-8501-48de-af59-c54d601b35ef",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c9480740-e25e-43b7-8923-2fa05bd37d84"
        },
        "item": {
          "id": "aa0243c8-5beb-4686-b715-f6bb84721868",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "3ad74de9-f3e4-4cdc-9994-a90ae2dc768a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16ba3b3c-bcc9-42ab-b042-eeaa1d19eee7",
        "cursor": {
          "ref": "35b880f6-227f-4419-93ae-700aa9dcae89",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0782db33-0b71-496a-b369-6110ee19876b"
        },
        "item": {
          "id": "16ba3b3c-bcc9-42ab-b042-eeaa1d19eee7",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "2d696d32-cb3c-451b-806f-ddef12f4b0ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c067debc-e95d-4126-9b48-2eb9dd1be956",
        "cursor": {
          "ref": "c6c73e2c-35a2-4f5a-aa76-6cfca6657c39",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "865744e8-159b-48d2-9bf9-27897b1481c2"
        },
        "item": {
          "id": "c067debc-e95d-4126-9b48-2eb9dd1be956",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c6937d11-0e73-4f29-bbf4-4a5e89792ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f22ad7a5-d677-4dbb-a2f4-329d9a0353de",
        "cursor": {
          "ref": "2588f244-191f-41f5-86f8-c46fc64c0f9c",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "01f16406-a98d-4f59-b888-53170250574d"
        },
        "item": {
          "id": "f22ad7a5-d677-4dbb-a2f4-329d9a0353de",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "fbd6ba6f-c9f6-46cd-995b-6d8c85673a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d8d07a5-18b5-42e9-b3e8-1c70475f5e3c",
        "cursor": {
          "ref": "1ee45809-fe0d-474a-a05b-2b20e8c53f44",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "af22f752-931e-427e-87e4-389a701542a3"
        },
        "item": {
          "id": "9d8d07a5-18b5-42e9-b3e8-1c70475f5e3c",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4a2b1b9b-cc27-48f2-93ad-59719bdb162d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd7976d8-898f-4d12-8366-a4cc7c232bdb",
        "cursor": {
          "ref": "898d6a65-e94c-44e0-9719-f9ce4b84e5e4",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "9f6c3ed6-3a7d-4c7b-8b5d-166ca3fb6bac"
        },
        "item": {
          "id": "bd7976d8-898f-4d12-8366-a4cc7c232bdb",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "8ac72ee0-62d4-42c6-991e-c4da20a2914b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c8488ca-a27e-4a64-9778-b261508f5484",
        "cursor": {
          "ref": "fa22fada-b746-4dd9-b723-dd9ba6671d80",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d4499449-1597-4bde-8155-c6cc4facd08c"
        },
        "item": {
          "id": "0c8488ca-a27e-4a64-9778-b261508f5484",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "74f13801-ecad-417c-ac6a-1759c80fd441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae39ba5d-4536-4cc0-918c-05e9fbe446b5",
        "cursor": {
          "ref": "2cf90a92-34c2-4aae-aef1-51bb0c8efd84",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "48bb23cd-e3ee-4ef7-b197-68493cf4c87a"
        },
        "item": {
          "id": "ae39ba5d-4536-4cc0-918c-05e9fbe446b5",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "ffe3012d-bb3e-4485-abe0-1380857bcef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "689cec31-1e33-4339-beb1-42dd669f3e94",
        "cursor": {
          "ref": "efcbed05-a155-45f7-8ad5-9bced8110218",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "98cd4d1d-0398-47d0-aa3e-d890e455660a"
        },
        "item": {
          "id": "689cec31-1e33-4339-beb1-42dd669f3e94",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "8d8ec8be-55d2-4aa7-a14d-00186b32675d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b16b5099-7265-4882-9997-d417ddbf6057",
        "cursor": {
          "ref": "3739c7d5-c520-42f7-8958-40276a2ac2cc",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c03d7822-ff5a-4414-8ec7-df51366f4ad2"
        },
        "item": {
          "id": "b16b5099-7265-4882-9997-d417ddbf6057",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "59e9712c-b3fb-41f5-a4e3-8acb0cb246f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81524ec7-f09d-44af-a887-af224112f704",
        "cursor": {
          "ref": "cf2722d6-5d9a-4692-98ff-8065642c890a",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "89db5278-4796-42cb-b78e-b1895879bd01"
        },
        "item": {
          "id": "81524ec7-f09d-44af-a887-af224112f704",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "32d8be5b-1d8e-4126-8de5-2b9c32b4f5be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "4ace61ce-46ea-455b-a815-2a69100ca4d1",
        "cursor": {
          "ref": "64be199c-bb75-46cd-bdb6-38581b99597a",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "9cb8b452-68dc-4ff5-a9ac-3c1a9ef1cc08"
        },
        "item": {
          "id": "4ace61ce-46ea-455b-a815-2a69100ca4d1",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e7c5c79c-5eee-4f6c-9a92-e32b5c93e75e",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "716d9a08-02f4-4056-bdc7-857de7ea6e05",
        "cursor": {
          "ref": "ed88ca7e-a4b6-48cd-a1c0-ba003b994c17",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "5b7df3ea-1947-47d0-805f-1db0a6a0b223"
        },
        "item": {
          "id": "716d9a08-02f4-4056-bdc7-857de7ea6e05",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d4cb624e-c195-4be2-884e-81b3795ef46a",
          "status": "Created",
          "code": 201,
          "responseTime": 357,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b59a837b-749d-4518-938e-e4459b5b1bcc",
        "cursor": {
          "ref": "0ab0b016-27f3-4e09-84da-15748c2014a7",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "981b589a-d695-4bc8-8681-ae1678f9e418"
        },
        "item": {
          "id": "b59a837b-749d-4518-938e-e4459b5b1bcc",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d1ef2da3-3c1b-4081-801c-bc423b653c82",
          "status": "Created",
          "code": 201,
          "responseTime": 500,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "af330175-60ee-45b2-8eb9-5cf1dacb7d62",
        "cursor": {
          "ref": "f382e936-bd84-4f71-8119-bf4c3f1d6709",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f12f81bb-3405-4e5a-a202-0049179a571d"
        },
        "item": {
          "id": "af330175-60ee-45b2-8eb9-5cf1dacb7d62",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "051bcec2-340d-4b82-931f-be34b1487649",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f5a260-451c-4686-953f-a03857af62da",
        "cursor": {
          "ref": "5b0bf126-b0a1-4d6c-980f-2d29fdd9f409",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "337b1871-9211-480f-97ed-80480dfe7684"
        },
        "item": {
          "id": "a8f5a260-451c-4686-953f-a03857af62da",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "451d5a1a-426c-4799-9277-73756a254a79",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-02-05T00:35:44.185Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-02-05T00:35:44.185Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "df0f4897-adf6-4e9f-9770-2e52b0a30bb6",
        "cursor": {
          "ref": "419219e8-925a-4597-bba7-d093a52416c9",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "84a73eab-4444-483b-98b4-45b7fe5a77c1"
        },
        "item": {
          "id": "df0f4897-adf6-4e9f-9770-2e52b0a30bb6",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0c7aae0d-90ae-426a-8733-ad22932f89dc",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a7b6ee6-9271-44af-a11a-1a14b908d188",
        "cursor": {
          "ref": "f30c1b82-a5ad-4313-a07f-d3e9be692840",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ba70791a-59e0-4d99-8382-5664702de519"
        },
        "item": {
          "id": "6a7b6ee6-9271-44af-a11a-1a14b908d188",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d403322d-4b0a-491f-8f67-788b5098fbdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "018071c5-a6f2-417b-9496-1c94ce3f6921",
        "cursor": {
          "ref": "711c84b6-6aff-4cb9-87ba-ae1e73cd5c69",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "09b557a3-107e-4efe-8341-a66bebad2b74"
        },
        "item": {
          "id": "018071c5-a6f2-417b-9496-1c94ce3f6921",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8859811b-ffa9-4900-ab26-781fbf25d31a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bcd46a3-cf8e-4c2a-b68a-099b9b7d9de1",
        "cursor": {
          "ref": "111ac2ab-08d7-40e0-9e82-1a7651b24d8d",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "630163cc-05e0-4c64-bfb6-59aa67cd912d"
        },
        "item": {
          "id": "3bcd46a3-cf8e-4c2a-b68a-099b9b7d9de1",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e361a208-9fa9-4c83-8826-5c016c98d6f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ca1bb2f-6bec-4d9e-bff8-42b8bcf1c3a3",
        "cursor": {
          "ref": "f297e228-e955-442f-b894-8448cc29a58e",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "7a448a8e-2ce9-4401-bacb-08ae837b0fd5"
        },
        "item": {
          "id": "4ca1bb2f-6bec-4d9e-bff8-42b8bcf1c3a3",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "46960f33-4160-498a-81ee-5ef2ad160961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b86ff1b-cf9b-4155-af48-9d6dab86fe04",
        "cursor": {
          "ref": "201ea76d-b72d-4730-b1a1-c89b5538f76a",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b2b12193-75f1-4c9b-b20d-0c8df711f70a"
        },
        "item": {
          "id": "1b86ff1b-cf9b-4155-af48-9d6dab86fe04",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ecbe97c9-dfab-44d6-b740-22b09e7f3056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d31263a-8d2c-4d7d-9e0c-a65e9338d78b",
        "cursor": {
          "ref": "34ee5be0-e9f6-4ba1-ba9e-48246955d233",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "14608832-8733-43d4-8f59-2bcf2864f4a5"
        },
        "item": {
          "id": "2d31263a-8d2c-4d7d-9e0c-a65e9338d78b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0c58d3b8-1e68-4c42-bf9e-7a8edd43afa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4634c5a-5d11-476f-aa85-d8e39018195d",
        "cursor": {
          "ref": "9b109ed2-609f-44e2-b435-56b9a98f5c2d",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "dff7e6a3-d2ab-4244-b198-61d2d3090096"
        },
        "item": {
          "id": "c4634c5a-5d11-476f-aa85-d8e39018195d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "fda5c09e-e495-42bf-aa21-617eb07df073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e35a2d0-ab4f-4edc-b56f-759dda81b22d",
        "cursor": {
          "ref": "f1d57c97-4387-4248-8bf6-2010903318ae",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "73ab5c59-2f87-4d75-8131-3aa841870443"
        },
        "item": {
          "id": "3e35a2d0-ab4f-4edc-b56f-759dda81b22d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c22a15bf-00e2-4f6e-8206-6419bd80a39f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4838842-04af-4f94-93cd-c07d32a0eb0b",
        "cursor": {
          "ref": "f5b68ffe-227e-494b-a81f-9837ce900bf7",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "bbf14b08-a22b-46e0-b8a1-9614b567c57d"
        },
        "item": {
          "id": "f4838842-04af-4f94-93cd-c07d32a0eb0b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b288557e-f968-4262-baee-138a74ac2718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de8b4bcb-868f-46f0-bec9-421bd11f4284",
        "cursor": {
          "ref": "b232f0a5-e504-464f-b234-c64edadb620a",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "619f34f4-4eaa-421f-b858-257a53028c48"
        },
        "item": {
          "id": "de8b4bcb-868f-46f0-bec9-421bd11f4284",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b05b5697-888e-4fee-b96e-d98ee281217d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b812062-5a64-4ec2-a533-224f3ca360bc",
        "cursor": {
          "ref": "47f7d299-c068-47cb-9cdd-a23213322161",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "2c6f7d29-1c36-4d63-9c5e-53709e4044d9"
        },
        "item": {
          "id": "1b812062-5a64-4ec2-a533-224f3ca360bc",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "59bd2de3-1a13-4fb3-9d74-612bedad5e48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3706cdca-2aeb-42e6-bb6d-2b92cb6fd951",
        "cursor": {
          "ref": "9030627b-596c-47ab-84b3-f906a86e7b60",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "81d35086-ee4e-4a91-a007-11102af3c69f"
        },
        "item": {
          "id": "3706cdca-2aeb-42e6-bb6d-2b92cb6fd951",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d4f4e9ef-9d62-408e-9a6b-c9e3fe91105c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17527bec-bf03-45f3-94b0-fe7c12ce9619",
        "cursor": {
          "ref": "f3dd9ac7-8021-491c-9773-126898e7b7a6",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "411d5227-0c53-43a9-8833-889a54301269"
        },
        "item": {
          "id": "17527bec-bf03-45f3-94b0-fe7c12ce9619",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f47a60e0-54c3-401c-aa7e-1bca47b412fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 126,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "8f4eb48f-8ba8-4e6d-8305-dc0a59e25668",
        "cursor": {
          "ref": "e2a838c0-7617-4fca-9a44-8799cb4a9c37",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "cba40c42-6561-4ab5-900a-689c3b137708"
        },
        "item": {
          "id": "8f4eb48f-8ba8-4e6d-8305-dc0a59e25668",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "79eaaa1a-1aee-4e5a-a46e-27bc61f681a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 151,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "5d77420e-737d-410c-849b-ac09b129df2c",
        "cursor": {
          "ref": "289ac25c-d91f-4904-aa80-0489e1fb4d52",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "99d6255d-d63d-422d-8e3d-e244d94bbb44"
        },
        "item": {
          "id": "5d77420e-737d-410c-849b-ac09b129df2c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "91141573-b218-49a3-b029-1e9c15a1b3ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d17c60fb-7e05-4a2d-84a2-bf14627d6a87",
        "cursor": {
          "ref": "b83f9907-b3f1-487d-8a4d-eee34410659c",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "1847fdce-20e5-47ce-ad9e-e59989299dd3"
        },
        "item": {
          "id": "d17c60fb-7e05-4a2d-84a2-bf14627d6a87",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "43d9dbba-82e7-4106-a8ac-b877cb273d01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "704762d0-a750-41a3-87b7-c4b082a8878b",
        "cursor": {
          "ref": "b210941e-eb36-4136-a96f-79dad3ed5405",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "136e58e5-e100-4d87-8992-d535b1022d56"
        },
        "item": {
          "id": "704762d0-a750-41a3-87b7-c4b082a8878b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "110b00f3-bc66-407f-9ab2-1a4eb915b373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "956a8d90-bfae-4fcc-9fc9-60de610047d9",
        "cursor": {
          "ref": "d1050115-927b-4404-82d6-731ed5ff7604",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b76b17c4-d6f4-43b0-b0bd-7b90840844a6"
        },
        "item": {
          "id": "956a8d90-bfae-4fcc-9fc9-60de610047d9",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8d0682d8-45a0-4d32-9369-efd208befe85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfc16d9f-c12c-4084-86a7-255c269ec560",
        "cursor": {
          "ref": "6fe11953-2467-4c43-a9a2-44d950cdedfb",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ebd331a1-0365-4cbd-8be9-ac2ac3878902"
        },
        "item": {
          "id": "bfc16d9f-c12c-4084-86a7-255c269ec560",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "675280f2-ebb0-480d-bb89-459854d350dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d6425d1-aa37-46ff-b83a-7a28178b17ee",
        "cursor": {
          "ref": "8ba16c13-4fee-4b56-9db4-36964615d55f",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "5ee66f08-7c14-498a-b3c5-77e5bea05a26"
        },
        "item": {
          "id": "4d6425d1-aa37-46ff-b83a-7a28178b17ee",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "565dd37a-e284-4ba0-9981-4df9996dac3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "527dcee4-091f-47c1-be65-3bc559904004",
        "cursor": {
          "ref": "49471a43-b090-4d56-bd76-579981a9771b",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b3f9ae31-754c-438d-86ab-68aaa5f1149d"
        },
        "item": {
          "id": "527dcee4-091f-47c1-be65-3bc559904004",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "916544b6-0e0b-4ac5-8a43-19d139e2fca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb12877d-01e4-44a5-b727-f8c8f7f8f7da",
        "cursor": {
          "ref": "05c5ccd1-fe05-400f-b4e4-3b25dc211632",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "8479f152-4a4c-4c17-995f-5306a1dcd617"
        },
        "item": {
          "id": "bb12877d-01e4-44a5-b727-f8c8f7f8f7da",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4e757535-9265-4a3e-a621-7f112dcc280c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1949bd96-c943-4ce8-aa45-3fe5614e0de7",
        "cursor": {
          "ref": "8640b496-2ed4-4719-b614-1712476ecff0",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "63b66177-cb6b-4271-ad60-c7ae9f2ac859"
        },
        "item": {
          "id": "1949bd96-c943-4ce8-aa45-3fe5614e0de7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d311123b-96d2-4353-85fe-23ea605466ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e2e1d7b-2b18-42d9-bc66-64b33dfb40f8",
        "cursor": {
          "ref": "2a8b6538-b7a3-4dce-b6a3-27c3d3a9e7af",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "410cd9f4-debd-49f4-9ec9-21f12cb7db84"
        },
        "item": {
          "id": "2e2e1d7b-2b18-42d9-bc66-64b33dfb40f8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e588f5bd-0ecf-4846-87fd-9fbd5bdea427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f282b45c-bc45-4f8c-8998-88ef71f42840",
        "cursor": {
          "ref": "dcb1ff5a-f254-4b1a-9ecc-e128b72a1ee7",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "0010b794-0070-4235-a9ae-24cfd3e8a88b"
        },
        "item": {
          "id": "f282b45c-bc45-4f8c-8998-88ef71f42840",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "050e2ac8-bb3b-4ae9-81a3-1bfd6af4e87d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28179877-6091-4160-8cb3-f08d7550d147",
        "cursor": {
          "ref": "185260cb-906f-4085-9eb5-6ac8a16ec0c1",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "2acbc2f0-9ef7-433c-bf6e-ed6b09e0aeea"
        },
        "item": {
          "id": "28179877-6091-4160-8cb3-f08d7550d147",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7c62bf07-9b57-4b83-9b73-8c7811211758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94dc16a7-e004-4958-a401-44afc17e8f8f",
        "cursor": {
          "ref": "908ce0e4-1c37-460e-b729-27224fdc6195",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1e62373b-373d-4984-8a06-c43b4959c806"
        },
        "item": {
          "id": "94dc16a7-e004-4958-a401-44afc17e8f8f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "08d8808b-8297-4f1c-861a-17bc40fcedab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "908453c0-1900-4e63-8202-9cbca7589243",
        "cursor": {
          "ref": "3bb6715f-2635-4e9b-875c-81def1e38b1e",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "c5ac5899-6591-44bc-ab30-e3015feaf700"
        },
        "item": {
          "id": "908453c0-1900-4e63-8202-9cbca7589243",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f567a277-2639-44f4-b50d-7151b6aead09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa1fb8e-5cd7-4b07-92e8-2efd59f10159",
        "cursor": {
          "ref": "3dd642e0-c7b3-4bfa-b300-8d8a0a759121",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "fc7d0ffc-1e87-4b87-99bf-da3928243284"
        },
        "item": {
          "id": "3aa1fb8e-5cd7-4b07-92e8-2efd59f10159",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7085d3a1-d963-4aed-b105-21cf26c873bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa44d7e8-3be5-4790-a6bf-fab31f89beab",
        "cursor": {
          "ref": "9a225a06-5a9e-4f2f-85de-f17c7377180d",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b43a659d-6163-44c0-8b77-e2c601b11d34"
        },
        "item": {
          "id": "fa44d7e8-3be5-4790-a6bf-fab31f89beab",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "150ef79e-0f82-4140-ac8b-fa0b9ea5ec17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "714c3a06-20f6-44a0-80cc-9f23204f9e61",
        "cursor": {
          "ref": "47787e54-8e20-490f-a3e4-034d9e93a42f",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "188e0908-78ea-45cd-9bb6-be5aee7d6bf7"
        },
        "item": {
          "id": "714c3a06-20f6-44a0-80cc-9f23204f9e61",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7f78949e-c2b8-405f-a015-cdf290b9ab53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f533ba-16c4-4d15-856c-020c8d110059",
        "cursor": {
          "ref": "2fbab6dc-93d8-4c0e-a12e-4a66c66403c6",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "07eef7fd-eefe-41ee-8aeb-66fd45c6176f"
        },
        "item": {
          "id": "12f533ba-16c4-4d15-856c-020c8d110059",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "6f35a6d0-014f-4cba-a544-8756b3de2703",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 134,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "d836a785-2baa-4ccb-8fa7-47d9a4ae7917",
        "cursor": {
          "ref": "a2a27bf6-2d95-429b-8ab1-126566fca267",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "09698702-248e-4022-b6f5-ba4c3bf43e93"
        },
        "item": {
          "id": "d836a785-2baa-4ccb-8fa7-47d9a4ae7917",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0eaa87fb-a146-4b70-a743-f7820640a096",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae6370ff-8795-4835-831f-2708e40b0bec",
        "cursor": {
          "ref": "5828d988-fc39-4245-9da9-0a434be62b85",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b6e35a87-b761-4313-bcd8-47112f582343"
        },
        "item": {
          "id": "ae6370ff-8795-4835-831f-2708e40b0bec",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f0db447c-84ae-4e81-b710-e1c197c0e352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efc7e6c6-1b97-49f6-a0e0-08271ae3e7eb",
        "cursor": {
          "ref": "65e1464a-50e9-4815-89d4-3a84513a5c11",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ccfde63d-7257-45e8-bd25-cff224b6520c"
        },
        "item": {
          "id": "efc7e6c6-1b97-49f6-a0e0-08271ae3e7eb",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b4019cee-2984-4fac-86b1-6ea96d7714ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fd2b801-eaa7-48f5-b512-f7ee5f68bae9",
        "cursor": {
          "ref": "8d54cfd2-cd71-4941-9ec9-7c5c253a108a",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8704a65f-2abd-4992-8f69-0dbe83c69c6b"
        },
        "item": {
          "id": "7fd2b801-eaa7-48f5-b512-f7ee5f68bae9",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "bce5f0d1-d80e-4898-93c6-9e674ec56845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa45c0b-71de-4b75-9550-2ec08d8bccf6",
        "cursor": {
          "ref": "9335b884-2803-4166-916a-5cd0288f6dc7",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "58c38a8f-a7f6-44e2-b960-7d2b1110a0ea"
        },
        "item": {
          "id": "dfa45c0b-71de-4b75-9550-2ec08d8bccf6",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "87ff99d9-9627-401b-b372-634c25774e32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f372689b-343c-4a6f-955b-2968c66e3144",
        "cursor": {
          "ref": "c5b2b513-fc53-4f1e-afbe-46bdaf05ff27",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "44ae903d-85c1-486c-a828-6257496b27a4"
        },
        "item": {
          "id": "f372689b-343c-4a6f-955b-2968c66e3144",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "99fa980e-e291-43d2-bb13-3b3657d5ea39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bf44b73-e76d-494e-84cc-d750d0e3cd6e",
        "cursor": {
          "ref": "01603191-ac5d-4824-8492-527377bfa891",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "68db1801-d555-4809-8cc3-eefd840fa0cf"
        },
        "item": {
          "id": "0bf44b73-e76d-494e-84cc-d750d0e3cd6e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cd52623b-64c6-4709-aebe-50ceaee83b55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04f48a54-2e4d-4500-80b5-00bc62803741",
        "cursor": {
          "ref": "c3140599-0cee-4e95-a380-10475894c0f0",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4f2df590-95b1-4ed9-bd3b-c8d22e83d40f"
        },
        "item": {
          "id": "04f48a54-2e4d-4500-80b5-00bc62803741",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "494aaee6-fd85-4483-9477-b55a24d4a853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "861eea52-5cc5-47fa-b794-ff7d8664f23f",
        "cursor": {
          "ref": "4507091e-7c79-4d3c-b5e0-faf1da6f3f48",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "01d73393-e2c4-4698-b46c-d2ca5a4f1efb"
        },
        "item": {
          "id": "861eea52-5cc5-47fa-b794-ff7d8664f23f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7637d9e7-2953-47d6-9973-5dda4afe5602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e562ba9c-d589-4272-b3a7-69dce4eda92c",
        "cursor": {
          "ref": "8c3b1e4b-32fc-442d-a178-36ea6ba8a3b0",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "3e804312-7547-44d0-95f8-802873f98bd0"
        },
        "item": {
          "id": "e562ba9c-d589-4272-b3a7-69dce4eda92c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "aed287f2-dacd-44cc-9f8d-0fdd47e1a1f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d569f87-5d45-46ef-801b-02979cda2496",
        "cursor": {
          "ref": "e40401b0-cfe4-44c9-a826-d92a835a4ee9",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f88a909d-aa34-48c0-ab5f-42bbfb40fda0"
        },
        "item": {
          "id": "3d569f87-5d45-46ef-801b-02979cda2496",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "bbf77184-ec03-4e75-b313-8e353a874816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa412f13-981d-4e23-aa4e-c0c28dae5d43",
        "cursor": {
          "ref": "6321e494-17c5-4fc0-b759-0b43dd6d6540",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e9bd2192-da3f-4e3a-83f9-1a2c4a10acbd"
        },
        "item": {
          "id": "aa412f13-981d-4e23-aa4e-c0c28dae5d43",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "96e48750-85f9-44a7-8ebc-584e58b056cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1efeef4-d239-432d-bcfe-4dfa5f7ca217",
        "cursor": {
          "ref": "9e96804b-156a-4822-b620-e1cffcc095cf",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "091ca982-1f11-4c9f-a1f3-1f073d2dc1cb"
        },
        "item": {
          "id": "e1efeef4-d239-432d-bcfe-4dfa5f7ca217",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3b56ec25-e178-4c64-84f2-2e2c8d20b610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25bbb4c2-5755-4b1b-abf3-cdefc5de7bda",
        "cursor": {
          "ref": "a1e3ea70-be0f-43c7-baf6-fe7b52ed14c1",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "3a73f13a-cc0b-4da8-bc8b-f34bf3a92555"
        },
        "item": {
          "id": "25bbb4c2-5755-4b1b-abf3-cdefc5de7bda",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e1e14515-e455-45d5-804a-3f9368156567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "883277ef-0c8a-4a45-9ca6-e255170193c1",
        "cursor": {
          "ref": "d96d9391-4f5d-42a3-a870-b5a78df0ab38",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b0602d32-299f-403b-90d9-d03643ef4713"
        },
        "item": {
          "id": "883277ef-0c8a-4a45-9ca6-e255170193c1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "04cc52b3-b4e2-463a-9f09-b3e5ef7b435d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 135,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "223d79cf-de2a-41e9-beb1-42a1075685a7",
        "cursor": {
          "ref": "df45c0b8-1d73-4d9e-8696-c983d000d75c",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "2d9f1608-0fdc-45aa-b196-1d2201369a4e"
        },
        "item": {
          "id": "223d79cf-de2a-41e9-beb1-42a1075685a7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "72a2e412-e8b9-4f3e-8693-0bfd21d31f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39134490-a548-4138-86d3-ec4187e15ac3",
        "cursor": {
          "ref": "0db53c8e-9175-4906-88c8-54f5c6d18b4b",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "71dcfc47-cf7e-47ed-9ffb-c19eba36c61a"
        },
        "item": {
          "id": "39134490-a548-4138-86d3-ec4187e15ac3",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3cd84d48-51f1-47dd-a3b0-35e0fd1f82e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75745827-8b54-492e-b3ac-8bef92ce4f9a",
        "cursor": {
          "ref": "5f6941bb-90c2-48f5-a308-a22eb8836417",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "517966ef-6c83-47a5-80d9-0b5d53482460"
        },
        "item": {
          "id": "75745827-8b54-492e-b3ac-8bef92ce4f9a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4e92de1e-e47f-4a91-a8d4-6a3af4eaf3ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff0e74a7-9e92-4392-8266-dd6c0907385c",
        "cursor": {
          "ref": "bda260da-7189-44fc-870a-18b321eb34f3",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "03c03f67-9e33-4f95-b6d9-1c7d42b9fa96"
        },
        "item": {
          "id": "ff0e74a7-9e92-4392-8266-dd6c0907385c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e494d58c-7527-41d3-8fe1-02620c8abd16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "337a1918-1b31-4bd0-9b3a-3732a2354e5f",
        "cursor": {
          "ref": "14b6e03d-86d1-475e-a33d-03dac519d480",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "5391b503-50bc-468c-9bd5-7cfef758ed05"
        },
        "item": {
          "id": "337a1918-1b31-4bd0-9b3a-3732a2354e5f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "284e1e61-bada-4e08-bb2b-11b13e58f77a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "591017f1-bd0c-4c85-a888-892e2e11d928",
        "cursor": {
          "ref": "fcfe5a51-5b03-4834-ac9c-4c03bfc710c1",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ef204533-0618-4205-9413-186c1aabc371"
        },
        "item": {
          "id": "591017f1-bd0c-4c85-a888-892e2e11d928",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "11a534f4-1222-4190-b213-c7c10d502029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b29c48f-d1cc-4eaa-971f-585e9694a2dd",
        "cursor": {
          "ref": "e9e49af2-8a84-41db-9b39-fb9bfc6c9aea",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "0f25c64e-0256-42ba-9338-1db9a21feaee"
        },
        "item": {
          "id": "1b29c48f-d1cc-4eaa-971f-585e9694a2dd",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d823a791-ed69-482b-9597-aed2a41bf1a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52db787c-5448-46e7-8806-dcfddf1a519d",
        "cursor": {
          "ref": "86f45f88-697c-4ce8-8199-671b70c8801b",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "54a08093-ef4b-4165-9370-7e0c9e7496ed"
        },
        "item": {
          "id": "52db787c-5448-46e7-8806-dcfddf1a519d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "fb281285-dc87-4aac-8829-aac3b1ba1c54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70a0bdb1-54a0-4857-90b5-ba7e6af957ac",
        "cursor": {
          "ref": "1ba63fe3-aea5-4588-a4b8-84cb27896ebb",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "a5ac5adb-446f-4bd4-bf92-d6f458066089"
        },
        "item": {
          "id": "70a0bdb1-54a0-4857-90b5-ba7e6af957ac",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "60f798d1-2b2b-473f-918b-b4e259fbf32d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4dbff69-2452-44e3-8335-431f5b44cb37",
        "cursor": {
          "ref": "830daf9a-e63a-4554-b7e7-2f8353b67bb7",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e65f0ffb-9e9b-4560-9324-b469f273b962"
        },
        "item": {
          "id": "c4dbff69-2452-44e3-8335-431f5b44cb37",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b006bcf7-8f69-4656-add9-2e3ca3b56462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57102247-692d-4769-b34f-bddd36211ea4",
        "cursor": {
          "ref": "da4d9cfa-2baa-4ef1-af87-1e3f06778dc1",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "333e2c9f-6e94-40a7-825f-b62fce4c2872"
        },
        "item": {
          "id": "57102247-692d-4769-b34f-bddd36211ea4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8a1b6c35-2b97-48eb-b89d-9cd68de87866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96d17e23-cbf9-4da0-8c66-5c1fefdd0772",
        "cursor": {
          "ref": "9150d08c-4496-43a4-9923-a7d58e45b61d",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "c8b2f890-3bf9-4b34-8d5a-efb3d589e5da"
        },
        "item": {
          "id": "96d17e23-cbf9-4da0-8c66-5c1fefdd0772",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "63d8298d-bae9-462f-b464-0d73fe09e73c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8524290-913f-4e2b-aaf5-6c5231221a8d",
        "cursor": {
          "ref": "43f99ba4-68f0-450c-b5e6-43c29ef9949b",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "56e54c27-0222-4cca-897f-4a408ab53bb5"
        },
        "item": {
          "id": "c8524290-913f-4e2b-aaf5-6c5231221a8d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f6a8f57f-67d1-45d5-a2eb-e5e1fd703b9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9b993ba-5e70-4f2c-9783-07172e92c3ba",
        "cursor": {
          "ref": "10a84bbc-c3de-4ace-a753-2095e1fe81a3",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d6ab848f-3d7a-4139-b483-b1f7af5f03b7"
        },
        "item": {
          "id": "a9b993ba-5e70-4f2c-9783-07172e92c3ba",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "baf8b74b-b0c3-4989-8bc6-cb025a021058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d38d689-ee79-4b0a-9113-0ef392999448",
        "cursor": {
          "ref": "1a01d5d5-449c-4e95-8eee-7a5c6bfa3012",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6a74d8fd-eaf7-451b-b1ea-c3174085ad84"
        },
        "item": {
          "id": "0d38d689-ee79-4b0a-9113-0ef392999448",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "956c8ef8-02eb-4669-b5af-ce79db6bd7c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa7b56bc-6e14-4b9d-8b95-da584784ce3f",
        "cursor": {
          "ref": "0ff4490a-5e67-4f61-a3de-8200c214481e",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "aa5e4ecc-2543-4755-95fa-7b5743fd3f16"
        },
        "item": {
          "id": "aa7b56bc-6e14-4b9d-8b95-da584784ce3f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3c218722-8ec0-487f-864a-5faba2a4897a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d017868a-aadc-415a-9b19-b0acbc543a55",
        "cursor": {
          "ref": "c2ca63a7-1e25-41d5-9ce5-cd13fc932f00",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "39ca61e8-b7f4-4bbe-909c-3801930b4e4f"
        },
        "item": {
          "id": "d017868a-aadc-415a-9b19-b0acbc543a55",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ad7c44d4-b26a-4d3f-8fa9-31458977fdd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "052e9418-8784-464f-b613-58e3da869fc2",
        "cursor": {
          "ref": "0400ce31-ab1c-4545-9374-ecd735bbff91",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "9924d83c-469c-4c59-a6b2-301d0f40fb2f"
        },
        "item": {
          "id": "052e9418-8784-464f-b613-58e3da869fc2",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "2a831b4c-4596-426f-a1a3-f996e0b68b39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb277f40-85ca-4d0d-bb41-fbecf59ee377",
        "cursor": {
          "ref": "18830629-2f29-4b81-a4c5-284ff99ab8b5",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "2c8708f8-e4d0-4f86-8432-05b698392dba"
        },
        "item": {
          "id": "bb277f40-85ca-4d0d-bb41-fbecf59ee377",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "802093e2-134d-4a69-8185-5a2ff432419c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6cb1e60-e4df-4603-b0f4-e46503bfa952",
        "cursor": {
          "ref": "a788e724-6592-41dd-ae29-1f965640dc2c",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2f9bbdfe-b62c-4093-bd2a-6c7645cf61aa"
        },
        "item": {
          "id": "e6cb1e60-e4df-4603-b0f4-e46503bfa952",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "19f411ae-af75-44ae-81fc-ec539dad08ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0dc36a8-f1ea-4e2e-b8bd-54137a6f9813",
        "cursor": {
          "ref": "9411dac9-02b4-417d-8b5d-230fed6a29ad",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "baa0e4d7-71d4-49b5-9ac0-26d82455fa2e"
        },
        "item": {
          "id": "e0dc36a8-f1ea-4e2e-b8bd-54137a6f9813",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "ff33ac7e-a0e3-438a-9315-9d092f06fa95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "794b0983-8f65-447d-bbbb-920fd3c8d189",
        "cursor": {
          "ref": "5421c11e-0511-4bd3-8d31-ce7b9a53166c",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "9e0c6fe8-c65a-4665-9c1b-8085c937bd9d"
        },
        "item": {
          "id": "794b0983-8f65-447d-bbbb-920fd3c8d189",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "a064498f-6ed6-4f3d-b21c-38a443b02f20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6116248f-d8e9-4303-bd5e-d174b2b2253e",
        "cursor": {
          "ref": "db5b2480-cacd-4e1a-9b1a-b75b00345397",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "15cccb19-7b2c-47f5-8f08-d5d4981ba9cd"
        },
        "item": {
          "id": "6116248f-d8e9-4303-bd5e-d174b2b2253e",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "4fe41473-a54b-4cd3-bd47-67b73de901eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dd866a0-3547-43be-ad2f-b7f70f8ac1ca",
        "cursor": {
          "ref": "7f6b6256-0167-480e-b7ea-e114ddb29cbc",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "d185cf0f-deae-46cd-a313-1ed8e7e90cd2"
        },
        "item": {
          "id": "0dd866a0-3547-43be-ad2f-b7f70f8ac1ca",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1025ff7d-26c8-4c8a-9e3e-85df1deb97b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61db0cb9-d10a-42f0-b7ff-49e7d02cc8c2",
        "cursor": {
          "ref": "83399c5b-f8d7-43f4-a666-7abff4682f9e",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8d392ee7-034f-43b9-a557-d865ae01ff6f"
        },
        "item": {
          "id": "61db0cb9-d10a-42f0-b7ff-49e7d02cc8c2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2dedc978-31a5-4d06-bdb4-61fa18196263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7366437b-51a3-46b3-a657-9fd49039331b",
        "cursor": {
          "ref": "601ffed7-5c4b-49d6-9ab4-44cdd67e0d2d",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "434f9d69-29f9-446d-8d36-5c63ac5889bf"
        },
        "item": {
          "id": "7366437b-51a3-46b3-a657-9fd49039331b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "9d7577bf-c375-4b07-835e-04a606aa9ce2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "109da51a-814e-49f0-9d9b-14e1966cca2c",
        "cursor": {
          "ref": "9ed63f7e-2610-4435-8345-9f5443b81b7e",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "389de567-10d0-4da6-a005-e622848505a4"
        },
        "item": {
          "id": "109da51a-814e-49f0-9d9b-14e1966cca2c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "4797c31f-a51c-41e7-8663-a4fea74c7cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "166d0dc4-86c4-4756-ac2a-54de60c0c474",
        "cursor": {
          "ref": "b070b360-c761-46bd-ac3a-66959e62bfe0",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "a98496d1-3c1e-4e97-9352-66c9322a0e4c"
        },
        "item": {
          "id": "166d0dc4-86c4-4756-ac2a-54de60c0c474",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "fe593aff-164e-44a1-8bbd-1e328b366c74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca83778-50e8-412f-af46-572c9bc88406",
        "cursor": {
          "ref": "ab799023-58e7-4c08-9d9d-9721e922ca4f",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "245190ff-f368-4f85-8d41-ed3f7bc211d2"
        },
        "item": {
          "id": "9ca83778-50e8-412f-af46-572c9bc88406",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "931cc272-7bf7-41f0-a6ac-1545979c57f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4322cffc-a605-45cf-b0c0-7ffc98b2560e",
        "cursor": {
          "ref": "6d84a93d-b4e1-487b-8d2d-068f4512a760",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8b73b7a4-200d-4560-8a0a-8bc0b1996a4e"
        },
        "item": {
          "id": "4322cffc-a605-45cf-b0c0-7ffc98b2560e",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "1bfea73f-3072-45eb-9722-63df36be1ef2",
          "status": "OK",
          "code": 200,
          "responseTime": 187,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "434976eb-7860-4a6f-b66b-e46eda6cf949",
        "cursor": {
          "ref": "3feae3b1-7c47-4551-8064-99e366e8fa54",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "79b15a07-1fe0-4733-882c-8461b7fb8870"
        },
        "item": {
          "id": "434976eb-7860-4a6f-b66b-e46eda6cf949",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "0b7737a7-35b2-438a-86a0-e9a8e976b621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dec9bfc-c37b-4c3e-8b04-e47fc038a87c",
        "cursor": {
          "ref": "62b3abed-ba0b-4dcf-846d-c587657d8855",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "d51ceab3-8759-4dde-95aa-59940dad5478"
        },
        "item": {
          "id": "1dec9bfc-c37b-4c3e-8b04-e47fc038a87c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "067d5865-a663-4c1c-8fb6-1185b5cbdf87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b59f8f-8989-4534-99ee-a78b7e8c2664",
        "cursor": {
          "ref": "f1e6d1c0-ab5d-4e00-bca0-4cab84bf2bc7",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b18d24b4-2631-44de-9535-585f87a57100"
        },
        "item": {
          "id": "47b59f8f-8989-4534-99ee-a78b7e8c2664",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c581caed-e0d5-44d2-8a32-e8ee9d5cf388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c25854b4-2962-47c0-bd1e-2f64de9c4368",
        "cursor": {
          "ref": "7fd4bd0b-85ba-4e3f-92fc-88d5087cc079",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ce861b80-5071-4243-b5f9-1f866d1a1891"
        },
        "item": {
          "id": "c25854b4-2962-47c0-bd1e-2f64de9c4368",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "8aaed5c0-828d-4878-b31e-b8166be777d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "772d6b76-0c0b-4ab4-a6bf-dcdfeb5f4a1f",
        "cursor": {
          "ref": "8d799382-a91f-4851-8c13-ff7feb8bae06",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "4ea50890-c6d1-4545-aebd-064eb083c565"
        },
        "item": {
          "id": "772d6b76-0c0b-4ab4-a6bf-dcdfeb5f4a1f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "28e6a0ff-4792-4c0b-9e1b-ee4422c33071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c21d520-7dbd-4584-bb1f-baba8c530013",
        "cursor": {
          "ref": "f0a7b165-a390-4887-b26a-4f3918b306a6",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "2b785aeb-6d8d-49e5-b026-6f1cc0a4f4c2"
        },
        "item": {
          "id": "9c21d520-7dbd-4584-bb1f-baba8c530013",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "eb48130d-f574-4d37-a943-dafd56d43d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40bc5b67-895b-4629-9e19-9e2bf7be1840",
        "cursor": {
          "ref": "bd1770eb-79d1-402a-9d2e-28e4af321162",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "cce373fb-db1e-4817-b654-99f2157d9e4d"
        },
        "item": {
          "id": "40bc5b67-895b-4629-9e19-9e2bf7be1840",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a84a9c48-fc29-4b46-a401-d6de36c7aa20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09981ae0-5108-41da-8db2-d4463aa2ff83",
        "cursor": {
          "ref": "4ed16d4d-d635-4a06-b3f2-6d81cc4fad95",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "5a36553a-2274-4bb1-99bd-ab6dc43438fc"
        },
        "item": {
          "id": "09981ae0-5108-41da-8db2-d4463aa2ff83",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f833c02f-c84e-4680-bc29-c1dd4b22c3a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f1d5e91-8e55-4584-96ae-a964b3698eab",
        "cursor": {
          "ref": "ecbacf13-b478-4c0c-aa04-2e23dade6b15",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "63d7d675-bdb0-4cbf-9dd8-6eb1ba81134e"
        },
        "item": {
          "id": "5f1d5e91-8e55-4584-96ae-a964b3698eab",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "586d3a8e-7ac1-4a01-832e-b3405e721128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceab0889-4ae3-4824-98e1-8ef10ec62db3",
        "cursor": {
          "ref": "4e4b362f-15b9-4505-a89f-e5260b135300",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "fd7b1e0d-be5b-446c-b33d-87f9a6c0ab0c"
        },
        "item": {
          "id": "ceab0889-4ae3-4824-98e1-8ef10ec62db3",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "cb39d489-2245-44d3-a025-30a244290e4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e58d1a7c-7dcb-41cc-9b46-80d36562865d",
        "cursor": {
          "ref": "f6912361-d40c-4a33-8b75-171af08b413b",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2c5803b5-5c88-4ee2-bf1f-37ab29ca420a"
        },
        "item": {
          "id": "e58d1a7c-7dcb-41cc-9b46-80d36562865d",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b17c0c56-d158-485c-a1a4-2fa7a385161d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcff5ba4-4bb6-4976-ae72-4a1bb5006ff7",
        "cursor": {
          "ref": "79818c2d-c93d-4d5f-b7ac-84400872273d",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "262b46d4-3ddb-405d-85d8-04e22ed1ca95"
        },
        "item": {
          "id": "dcff5ba4-4bb6-4976-ae72-4a1bb5006ff7",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "70cb7c05-11c4-452b-bb36-9df32001c281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef23a2a8-9eac-4c7c-94d5-68fb2fae802b",
        "cursor": {
          "ref": "5859df18-4844-4f01-a404-cd15644739c9",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "cc97e4be-c836-4a33-bce6-b46d6d5dd2af"
        },
        "item": {
          "id": "ef23a2a8-9eac-4c7c-94d5-68fb2fae802b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3ccaef14-56bd-4a32-87b9-268077d12f53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61f331b4-a5fb-4860-a245-eff86ae87e25",
        "cursor": {
          "ref": "776388d6-e5b8-4072-804f-b27d09de4768",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ec55f785-53f9-4c2f-8097-d4bfc9b4e78d"
        },
        "item": {
          "id": "61f331b4-a5fb-4860-a245-eff86ae87e25",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "17f37ad4-18d4-4dcd-8302-df560e0955f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbd6c246-25e9-4273-b7fc-81ecf4bb4b99",
        "cursor": {
          "ref": "512fd155-ffd4-4d87-a3c6-0dcdafedbe88",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a08b69a6-05d7-4227-b5c1-4d5bc5ddea51"
        },
        "item": {
          "id": "bbd6c246-25e9-4273-b7fc-81ecf4bb4b99",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "6973faad-c360-42a4-a184-3b8f085b5143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da6ebb0e-f5f0-4070-8092-361e296a93ba",
        "cursor": {
          "ref": "1c43c5b6-e946-4193-aa48-c677a1201758",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d9a50953-b0f3-42f9-86ed-718346b64d79"
        },
        "item": {
          "id": "da6ebb0e-f5f0-4070-8092-361e296a93ba",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "12254bad-4186-4a34-9f22-e45481595f17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fcb46dc-1925-42b9-8201-79b8a2540148",
        "cursor": {
          "ref": "36ee51e8-1536-4385-9dc6-fb877bf3986c",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "8b481e4b-8602-414c-a3e7-29134b2d6895"
        },
        "item": {
          "id": "9fcb46dc-1925-42b9-8201-79b8a2540148",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "4ed4980d-b78e-4e95-b6b2-f37413b13b01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c0e382c-27ff-4d3f-8da9-031bc4c6169c",
        "cursor": {
          "ref": "fb01bdcb-73da-4955-9828-97865caefc57",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "6848f372-b250-44d9-8ffc-1791a5eb64f8"
        },
        "item": {
          "id": "4c0e382c-27ff-4d3f-8da9-031bc4c6169c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e150b8da-bbab-4daa-a1b8-44ce0f804aff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d4bf764-ff0c-40d1-923f-29ea609aad1f",
        "cursor": {
          "ref": "5ca038ab-0f16-4846-b67d-9cd2248b99af",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "bf64a9d6-bca6-4376-8346-37534894e973"
        },
        "item": {
          "id": "4d4bf764-ff0c-40d1-923f-29ea609aad1f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "942dacca-38b8-40ea-b763-5f622f591e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2bc1f17-0cc7-461e-a692-ae90ac70312f",
        "cursor": {
          "ref": "7a42c51c-d968-4af6-8539-e7aadf2b1c3a",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "0c1482a9-9781-49b5-94eb-2794cf7c66da"
        },
        "item": {
          "id": "e2bc1f17-0cc7-461e-a692-ae90ac70312f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "936c726e-e7b0-44d3-bcf1-66c89a63db98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2258b2d-4360-470e-ab4e-a39b406369d0",
        "cursor": {
          "ref": "abde85d5-3860-4486-93fd-543a5f21df20",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "9df933db-ec2c-43f1-a77c-9cfd90cd9a7c"
        },
        "item": {
          "id": "b2258b2d-4360-470e-ab4e-a39b406369d0",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3e53754c-c4a2-459b-8f28-fb3b430a49de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "460e57ca-5e92-4396-be0f-fe62cc4e7e73",
        "cursor": {
          "ref": "7011357d-1437-47d3-97f3-3e55448e84d7",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a5208ac3-84a8-4843-9e8b-827b9eecaaa4"
        },
        "item": {
          "id": "460e57ca-5e92-4396-be0f-fe62cc4e7e73",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "67bc3477-454c-490a-9e6e-c0204409fd3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "614e9110-ef02-480b-9630-9a8da3f88c76",
        "cursor": {
          "ref": "fa74d4c0-a308-498b-8f50-0017ff2e2913",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "87bd0ead-479a-4cb8-97c3-735268abfc83"
        },
        "item": {
          "id": "614e9110-ef02-480b-9630-9a8da3f88c76",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "0e7d8d7e-c6ef-4d0e-8b6f-b135454f290f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd78b02d-3d78-4d0c-a60b-a2a3899d3cfe",
        "cursor": {
          "ref": "6c224ac4-0eb2-4a50-9b17-94a41626906e",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1a1cd446-33f0-4e96-8eb4-670881291016"
        },
        "item": {
          "id": "cd78b02d-3d78-4d0c-a60b-a2a3899d3cfe",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "8f5207f7-c7ab-4a1c-9c5f-e0d57e29ec82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19ee4e56-f0e5-47f1-b9c7-f34130ac6b7c",
        "cursor": {
          "ref": "6475b79d-a568-46ec-a304-7392e56b0e64",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "04389b5e-bb03-473c-b1a9-95f4b16d29d0"
        },
        "item": {
          "id": "19ee4e56-f0e5-47f1-b9c7-f34130ac6b7c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "af71e766-d70c-4b16-bfff-f17376b572c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4300f3fb-2c14-458c-a410-c96ac01602e8",
        "cursor": {
          "ref": "1a0b35b3-47d9-4932-8de9-2c55a9f564be",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d62fc655-18fa-4b40-b86b-295a37fb3691"
        },
        "item": {
          "id": "4300f3fb-2c14-458c-a410-c96ac01602e8",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "79b8faad-84e7-436f-8419-b1cbeb39f959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a01cdb9-0f6a-4658-aca8-0dbba4ff8625",
        "cursor": {
          "ref": "fc7e2add-5ca9-4270-abaa-0d66e2bf44db",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f69d1d8a-90bd-4ec5-8d48-b66b241ea525"
        },
        "item": {
          "id": "2a01cdb9-0f6a-4658-aca8-0dbba4ff8625",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "84393cfd-d1cb-47ac-89c5-f3a0a8d709c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af30a482-65db-4fd7-b1a7-c669c64434c8",
        "cursor": {
          "ref": "377c58bf-ff11-4e07-bee1-58b5cab1cdc6",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "30ca1978-1809-4c87-be12-81a7130b803d"
        },
        "item": {
          "id": "af30a482-65db-4fd7-b1a7-c669c64434c8",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "92b6275d-8559-42f4-aa48-e7ca83031971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0bf4083-5e4a-4339-9069-b4d54d06b111",
        "cursor": {
          "ref": "2a135012-aed7-4517-b66b-fb24a32069a4",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "01301bcf-7547-48b1-b72d-e2fc2d364513"
        },
        "item": {
          "id": "b0bf4083-5e4a-4339-9069-b4d54d06b111",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1b85f8c6-affc-49c9-a50c-6f4e4c60f0ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47a9a481-6970-43d6-9d51-93983dcef0de",
        "cursor": {
          "ref": "deb611da-be2f-4645-88bd-06799abf1982",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "136cf12c-b5a0-4793-bf93-cfbd6276fabb"
        },
        "item": {
          "id": "47a9a481-6970-43d6-9d51-93983dcef0de",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ba69a7c7-c9ab-4b7e-8aa0-4ddd155334e6",
          "status": "OK",
          "code": 200,
          "responseTime": 292,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "4e731dd2-0b33-435c-9e7e-a42fdcee6529",
        "cursor": {
          "ref": "1830c0b6-8ab5-4d0c-90bc-1ff667acdeca",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b8f74d7c-200d-4d86-9cb6-7349b5fedaf7"
        },
        "item": {
          "id": "4e731dd2-0b33-435c-9e7e-a42fdcee6529",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "dbce8a5d-fbba-4dd8-a4fc-0ba3db2e1da3",
          "status": "OK",
          "code": 200,
          "responseTime": 178,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "11deec65-b833-4df5-a30d-271bc4ce5139",
        "cursor": {
          "ref": "727aaab1-8e83-4323-89d6-c102b9d6b710",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e06c09c3-e6a8-45e7-89c5-a551b509c689"
        },
        "item": {
          "id": "11deec65-b833-4df5-a30d-271bc4ce5139",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "89b47348-6345-4290-858f-d241efedf048",
          "status": "OK",
          "code": 200,
          "responseTime": 247,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "e1ea7cbb-9729-46f0-aac4-cba10c1b2d5e",
        "cursor": {
          "ref": "08f5e9a1-66be-4344-8b9d-9720838915da",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c195c9b3-06cf-4089-8ffa-ebd190da63be"
        },
        "item": {
          "id": "e1ea7cbb-9729-46f0-aac4-cba10c1b2d5e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "70b468ba-351d-48a2-8bae-11df39198019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ced394b5-8d7b-4932-8178-25a30afefff3",
        "cursor": {
          "ref": "5fdfac9d-2391-4dfa-8ed1-bc4896a5805e",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d09b3c00-d24e-4d86-adb6-ae165041a6d4"
        },
        "item": {
          "id": "ced394b5-8d7b-4932-8178-25a30afefff3",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "75308850-d94f-4444-807f-b9f57f4b6e04",
          "status": "OK",
          "code": 200,
          "responseTime": 186,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "1dedacb6-6b71-41b7-ba45-1c4965fecd27",
        "cursor": {
          "ref": "b25943ca-8ddb-4862-8475-1b470939b01e",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "75a856b3-3573-4941-8d7d-3cefecfc48a0"
        },
        "item": {
          "id": "1dedacb6-6b71-41b7-ba45-1c4965fecd27",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "058483f2-4625-4dcb-91ea-ef462a2a0c6f",
          "status": "OK",
          "code": 200,
          "responseTime": 247,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "5fef2756-5692-41ce-b6f9-aa8b9aa85eec",
        "cursor": {
          "ref": "99971cc3-acfd-4e43-a821-d47e7272c835",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "117740bb-e56b-473d-a7fc-bf9e51e95067"
        },
        "item": {
          "id": "5fef2756-5692-41ce-b6f9-aa8b9aa85eec",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "0901231f-eaae-4d98-a03f-73c16bd0c91f",
          "status": "OK",
          "code": 200,
          "responseTime": 185,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "a3ab3d82-bce3-48af-92eb-26969ee16214",
        "cursor": {
          "ref": "164cf0b4-da68-40a3-b917-caeefd436644",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b52bf17f-d2da-4c80-9942-4020c58c3ee3"
        },
        "item": {
          "id": "a3ab3d82-bce3-48af-92eb-26969ee16214",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5aefed62-bff6-49ea-a21f-63674fec9ebc",
          "status": "OK",
          "code": 200,
          "responseTime": 193,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "3237417a-9168-4e5c-95af-715a7aa36c8b",
        "cursor": {
          "ref": "21aff21f-9b90-4df3-a940-a9793ee50df8",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "8f902ebb-04bb-4e38-ac31-52da860ab40c"
        },
        "item": {
          "id": "3237417a-9168-4e5c-95af-715a7aa36c8b",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e5ed8047-d7d4-4b9c-9aaf-fc8311b90266",
          "status": "OK",
          "code": 200,
          "responseTime": 190,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "b5b447db-d7df-4fcc-9f45-9ecf2c35e4d8",
        "cursor": {
          "ref": "07d7e86f-3123-4a9f-b61b-11a6a623d663",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0add5c30-acde-4098-b129-8264f08f2c52"
        },
        "item": {
          "id": "b5b447db-d7df-4fcc-9f45-9ecf2c35e4d8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b54e593b-5201-43b0-bdde-3a17f1ecf74c",
          "status": "OK",
          "code": 200,
          "responseTime": 187,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "11f9487c-7b8f-4f66-b539-1a99f548f00e",
        "cursor": {
          "ref": "02c44cc8-9176-4054-9b41-5d047d634807",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2a03523c-e775-45dc-94ac-2ab5e23612db"
        },
        "item": {
          "id": "11f9487c-7b8f-4f66-b539-1a99f548f00e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d5aca828-1b4a-467c-872e-4987d2ae6906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52e9ab62-dbe5-44ad-a984-681d1bb2df51",
        "cursor": {
          "ref": "00713694-20fb-4b32-bde8-df000bbe25ac",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "8ef912fe-3c27-4b64-84b0-ace60a370968"
        },
        "item": {
          "id": "52e9ab62-dbe5-44ad-a984-681d1bb2df51",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "abcc2240-1b10-495b-b399-5a6b815dcc02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e7d1e86-a0dc-4398-956d-e0c4712dca8f",
        "cursor": {
          "ref": "707f8343-3c1d-4bf9-860e-7c179b3944af",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "dc58d842-abb2-4df0-b031-a6276318951d"
        },
        "item": {
          "id": "5e7d1e86-a0dc-4398-956d-e0c4712dca8f",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "2161d757-d213-48d4-8fc6-bc7771d2ca84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e28b756-76be-4a3f-9fbf-2e98889ee81c",
        "cursor": {
          "ref": "03d7635f-2a3e-4270-9761-c73d5c854ebb",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7b214477-b935-464a-82f5-e9ee277aa73c"
        },
        "item": {
          "id": "9e28b756-76be-4a3f-9fbf-2e98889ee81c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f0c6263c-f5c8-4f09-ba7e-6a8c1b9bee93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "678fdaac-e77d-411d-b032-3647c39f49e3",
        "cursor": {
          "ref": "2ced720b-8595-4c5d-9da8-87a4b2c89a53",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "65c03824-9975-4da6-b591-831b88f50c38"
        },
        "item": {
          "id": "678fdaac-e77d-411d-b032-3647c39f49e3",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "73336f77-9b7b-4e5f-a2c4-30e260aa5848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b91c12-8704-4962-93fc-df6e98aaa6b6",
        "cursor": {
          "ref": "742ac1ab-09b6-44f6-947a-117557ff7596",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "61a05155-c5ad-4ed0-a19d-44acb3c1a733"
        },
        "item": {
          "id": "65b91c12-8704-4962-93fc-df6e98aaa6b6",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f1ffe8c5-e6b8-4d1b-9350-ebbe5333a277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11bccc1e-91e8-4afa-9b7c-90aa01d294fd",
        "cursor": {
          "ref": "ee35cd29-7202-4409-bae5-d0a05d3ca724",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c35c93e1-ce8a-41af-ad7f-f7f1df80a7b8"
        },
        "item": {
          "id": "11bccc1e-91e8-4afa-9b7c-90aa01d294fd",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b6d13bf5-054d-4478-8dc4-1c669fe078b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3a2f5ee-b357-492e-8aa7-c3d429feb616",
        "cursor": {
          "ref": "7c02ae44-b986-4a7e-99ba-fb82f432d7e7",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "41281234-31fb-4a9d-aa37-a05d7798dc76"
        },
        "item": {
          "id": "d3a2f5ee-b357-492e-8aa7-c3d429feb616",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2dda384f-2c94-45a6-8b24-9fdbe284d501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eff2150-ed2b-4b6e-8219-075a085e21e7",
        "cursor": {
          "ref": "0ee2d6c1-9a05-4894-906c-dc76a6ff5a58",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "92885863-ad13-44f4-92fa-f48eb8b689f9"
        },
        "item": {
          "id": "3eff2150-ed2b-4b6e-8219-075a085e21e7",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "5ce5be6f-4e6f-4ca1-8879-08f2e6e2387d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43006729-76b8-445c-8f92-9653db1fb4b6",
        "cursor": {
          "ref": "9c71e2fa-ad59-4ec4-928b-bbf60e89133c",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "eb17c9a9-9bd7-44a6-8fd1-e0a408587f30"
        },
        "item": {
          "id": "43006729-76b8-445c-8f92-9653db1fb4b6",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "09929a20-98cc-44fe-b1e3-f44bb534514e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc18a113-74f0-4f7b-af40-fe42f7967356",
        "cursor": {
          "ref": "bfdda617-149c-4247-aaab-8fe1a7c3aafc",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "9e94db16-594a-4feb-88f5-d26c242965d7"
        },
        "item": {
          "id": "fc18a113-74f0-4f7b-af40-fe42f7967356",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d1c9d48f-cb3c-4655-9548-5a1f58a810fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "043d0e7a-6125-4396-b418-8442e2674708",
        "cursor": {
          "ref": "e77e4add-1290-45d4-a6f9-22c90638be1d",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "11547a65-392f-4c9d-89c5-7921b0a2f2f3"
        },
        "item": {
          "id": "043d0e7a-6125-4396-b418-8442e2674708",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "499d7398-d046-4875-940d-5549c727ec7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2759932e-75a0-4b3b-aa55-f2472330841c",
        "cursor": {
          "ref": "57ae1617-c3d6-4d43-a83f-ef54f004ab20",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "61613ab6-fbde-4672-9dd0-9ac0fd62395c"
        },
        "item": {
          "id": "2759932e-75a0-4b3b-aa55-f2472330841c",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "d9aca278-855b-4b25-9050-058bfe9ffd5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d0c0345-61aa-4263-aa31-8aff7f5f25bb",
        "cursor": {
          "ref": "aa4be2b2-96b3-421a-9411-5e5a2753fb69",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "157dd6a3-358f-4406-b046-2562005d1e12"
        },
        "item": {
          "id": "2d0c0345-61aa-4263-aa31-8aff7f5f25bb",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "0fd68e7c-03b0-40bc-829c-2b031d972691",
          "status": "OK",
          "code": 200,
          "responseTime": 188,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "f8191a05-2c03-4d6b-907d-ba41dd3916c6",
        "cursor": {
          "ref": "797150a8-6af1-4956-b6c6-f3bc1df0bfd9",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "01b41c36-dc38-4f04-abd0-28f8af6f24c1"
        },
        "item": {
          "id": "f8191a05-2c03-4d6b-907d-ba41dd3916c6",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b029c613-8965-4d8b-91ab-882a6867cbb3",
          "status": "OK",
          "code": 200,
          "responseTime": 258,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "2f9db65f-8dc1-4e73-9f17-f00ed67dce2f",
        "cursor": {
          "ref": "78b54164-a094-483f-9b79-c5497be0beff",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "0148c895-9372-4ac1-b666-d8786a3ab9bf"
        },
        "item": {
          "id": "2f9db65f-8dc1-4e73-9f17-f00ed67dce2f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "2159cec6-3986-4d41-870c-6e700a00dc92",
          "status": "OK",
          "code": 200,
          "responseTime": 175,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "c28cf58d-c781-49ee-9117-50a9e66fef5a",
        "cursor": {
          "ref": "79dac337-cb31-43fd-a878-8c3f62e4c18b",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "97b39079-7f5d-4ca3-b25c-0cb823004bde"
        },
        "item": {
          "id": "c28cf58d-c781-49ee-9117-50a9e66fef5a",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a0c569aa-14d9-419d-afa7-ea9c48e6d549",
          "status": "OK",
          "code": 200,
          "responseTime": 184,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "8653c000-e97a-4100-92f0-4f6d7e483f1d",
        "cursor": {
          "ref": "e4e5652a-6ca8-420e-9040-9f5b242e4173",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "159e9190-6d75-4eff-bf0c-9bf86d5e011b"
        },
        "item": {
          "id": "8653c000-e97a-4100-92f0-4f6d7e483f1d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "456deaca-4577-4ad7-9f66-0f4cd6104ff0",
          "status": "OK",
          "code": 200,
          "responseTime": 179,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "b3a607d4-fe50-49be-8f44-1cb53e889a96",
        "cursor": {
          "ref": "532e3eb8-05fa-49be-a4ec-25ff4d989b49",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ec909522-a545-4725-b869-98a53bad7a26"
        },
        "item": {
          "id": "b3a607d4-fe50-49be-8f44-1cb53e889a96",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e24f1db7-c249-4939-bdca-76a77233093c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95ce3b9b-6a82-481a-8e16-5df5ce37b4b2",
        "cursor": {
          "ref": "a039a3d7-b49a-4489-a60b-badda597a192",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "bd1e97f1-f791-458a-bf04-b9dd7a320542"
        },
        "item": {
          "id": "95ce3b9b-6a82-481a-8e16-5df5ce37b4b2",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "802af732-a708-48b0-91a7-a7d7e1723190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "190ae19d-5b3f-45de-a558-c1e1547f06a6",
        "cursor": {
          "ref": "8c443341-0009-43b4-8aa0-7e2381a6dd0a",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6eec989a-5210-4d70-98ed-b9bab43727bc"
        },
        "item": {
          "id": "190ae19d-5b3f-45de-a558-c1e1547f06a6",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1543ecd3-0b64-4ab3-b140-e7011b5d1eac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a061fa5-5098-4dfe-bc93-e8fbd63f4c70",
        "cursor": {
          "ref": "47bba6e6-2ca7-4339-8e1b-d3fb47bf8397",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e4d94018-74af-4ee1-8276-496375d1d331"
        },
        "item": {
          "id": "0a061fa5-5098-4dfe-bc93-e8fbd63f4c70",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "8416178c-e2e9-49ed-a29d-45102577b1b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9caceb4c-86f2-49d6-9efe-d751636f99ee",
        "cursor": {
          "ref": "c1dcb91d-5ee5-4e7c-995b-55dd53fb2d46",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a9489f94-60f4-45cf-8d32-14ed7aa86222"
        },
        "item": {
          "id": "9caceb4c-86f2-49d6-9efe-d751636f99ee",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2449f420-ad6b-402a-aafb-9b123dcf7eb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0a52345-e958-4e16-9d45-f346cecf1811",
        "cursor": {
          "ref": "cbdbef6d-a347-4d69-a984-9f6e0bf410d6",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ed4d0d76-48fa-420b-8442-631f5d9a1cff"
        },
        "item": {
          "id": "c0a52345-e958-4e16-9d45-f346cecf1811",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "508ef524-ffcd-44c9-a02d-750959376e16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1e86621-6b35-4fb7-99e5-6d39723c8efe",
        "cursor": {
          "ref": "61a4ee7e-068f-4a32-be35-ecdc1655dfc2",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "643e7755-56f5-4b33-9506-94b659638dd0"
        },
        "item": {
          "id": "f1e86621-6b35-4fb7-99e5-6d39723c8efe",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "78842501-c136-4135-a699-1bc6fca15a2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e656dbfe-0c9e-4383-92de-b3daedfc782b",
        "cursor": {
          "ref": "a48f5db2-8042-459b-8928-e7250aeb6986",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "854ce8fe-c418-4b3a-a996-2f99108e7ff3"
        },
        "item": {
          "id": "e656dbfe-0c9e-4383-92de-b3daedfc782b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "44077881-351e-472d-b865-7b3f1e8fcc03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b403464-d93c-4e2a-8454-73a787e1f1fb",
        "cursor": {
          "ref": "fbc86b52-fb3d-4529-99f7-618506ec5e2b",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "17cc19bd-ddf3-47f0-b25f-5c54d207dc21"
        },
        "item": {
          "id": "2b403464-d93c-4e2a-8454-73a787e1f1fb",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "5dbdab28-2bda-4dcc-8635-27c281593a8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4890b553-801f-4b62-999d-f4e916a6301c",
        "cursor": {
          "ref": "fd149ff0-c807-4a80-95d7-4b3d3b0c837f",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "f46eb091-d66b-4b6f-ae29-038f334d1ca1"
        },
        "item": {
          "id": "4890b553-801f-4b62-999d-f4e916a6301c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e4bcd5da-59e5-4636-a81b-14502e4e7194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d038d3be-2c46-487d-b8ab-f36b21a2d941",
        "cursor": {
          "ref": "32063395-1c79-4163-9ce6-2090bcf44627",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "26e8809c-2cae-406b-b146-fed895eb502f"
        },
        "item": {
          "id": "d038d3be-2c46-487d-b8ab-f36b21a2d941",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "253c869b-4499-453e-b26d-bfa276963837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b27256f-b7e7-4b18-96c4-d4f0d585b731",
        "cursor": {
          "ref": "facfb8a9-ea05-4b44-8caa-bcb1758b424d",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "3df43097-b1c1-4257-81b2-4b9f8b90ad2c"
        },
        "item": {
          "id": "5b27256f-b7e7-4b18-96c4-d4f0d585b731",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "ef9aa254-5d24-4822-b84b-17780eed3ea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa9d0794-f345-4781-875e-5d664c195245",
        "cursor": {
          "ref": "35069b21-6a38-49ec-8dab-c2804e0568f2",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "a5391427-6d05-46a8-b25a-90489287b451"
        },
        "item": {
          "id": "aa9d0794-f345-4781-875e-5d664c195245",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "55034cae-91ae-4836-a6eb-a4597cc4fa0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8342e32-b03b-40f3-8013-c100b0030b43",
        "cursor": {
          "ref": "789df631-7aa9-45b9-b39a-91ec0136e7f9",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "35197a4c-daa6-4c8f-bf3f-d48f59c0b728"
        },
        "item": {
          "id": "b8342e32-b03b-40f3-8013-c100b0030b43",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "bb3a106f-e406-42c5-bdc5-fd51f9b8d342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0513ece7-ff9d-4130-8082-ddc8f11ddd7b",
        "cursor": {
          "ref": "6d518528-824c-498f-9532-6ae9d374741b",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "24089bd2-2f87-4dc1-8ced-38382b73a58e"
        },
        "item": {
          "id": "0513ece7-ff9d-4130-8082-ddc8f11ddd7b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "bd343be4-7dfb-4f15-b34e-e073aa91aa70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3250a5e7-dcd8-4abd-9281-a9e61b1b833c",
        "cursor": {
          "ref": "9626c215-aa51-4389-8e90-167f41c3fd7a",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "ebd9173c-7203-4bee-8bd7-e262a7d99b5a"
        },
        "item": {
          "id": "3250a5e7-dcd8-4abd-9281-a9e61b1b833c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "87710fca-1864-4f58-a50a-798cdc370522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3169ef70-0372-42ad-8593-c77f02dd3d33",
        "cursor": {
          "ref": "a07fd5e6-5609-4b1e-8172-badd761f7e67",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "60d20653-3bec-4fb5-8eab-e2d22279073f"
        },
        "item": {
          "id": "3169ef70-0372-42ad-8593-c77f02dd3d33",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5b9070e1-d6e1-4b9f-9224-898e3d0e68ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c229e7d4-c91f-4b7c-a4a7-50b18c7165df",
        "cursor": {
          "ref": "88d8fa09-6ad7-4170-8d80-ffd0dacd6a02",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "a66707bd-b821-4625-925a-899e19601e13"
        },
        "item": {
          "id": "c229e7d4-c91f-4b7c-a4a7-50b18c7165df",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "14b07eeb-346d-4cd4-a990-62bde17fd513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a5915b9-a91e-4623-9e7e-0698dbf57020",
        "cursor": {
          "ref": "a501de3d-b694-456b-af0c-e613adafa579",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "52cebbd8-8fa9-485c-bb9a-4bb56b0e92d8"
        },
        "item": {
          "id": "4a5915b9-a91e-4623-9e7e-0698dbf57020",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "8639de6b-104b-4c67-a6f8-1115c79a9560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f39df14e-97df-4bd3-a2ae-52cd04616ec2",
        "cursor": {
          "ref": "d0386b14-6404-422a-b1d2-e4ef80c67c05",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "dee5ef49-2aae-40b4-a7c9-d1f8c31055d4"
        },
        "item": {
          "id": "f39df14e-97df-4bd3-a2ae-52cd04616ec2",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "97b6d9e0-881d-4640-8ab2-199d0373093b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d29d606a-e5a3-4f03-a8f3-0b345b94619a",
        "cursor": {
          "ref": "47314acd-6de6-4635-9bdb-d967c722eb5a",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "517d3674-2035-4e31-856b-251e61e1c33f"
        },
        "item": {
          "id": "d29d606a-e5a3-4f03-a8f3-0b345b94619a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8b30a597-7df3-4fae-9fb0-efc3f5326d49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fd36e6b-2dc3-4d29-8723-72d3834e4fb9",
        "cursor": {
          "ref": "4a1d2cc2-7382-402c-91c1-47d409c73e23",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "f45de79b-04b2-4508-aaf6-104f41722645"
        },
        "item": {
          "id": "9fd36e6b-2dc3-4d29-8723-72d3834e4fb9",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "cd057279-3bf8-4752-b329-bbcc6cfe7a08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "255c9a9e-d37d-425c-be8c-4917149d001b",
        "cursor": {
          "ref": "8e7b1cb0-d868-4e10-8368-79a9250e6517",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "4a4e81d7-ead3-4d44-9697-427cb27ffe43"
        },
        "item": {
          "id": "255c9a9e-d37d-425c-be8c-4917149d001b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "52d2fc76-6a20-436e-a697-0625b530f2d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ff2ad2-47d8-45f4-942f-e6bb72ef35eb",
        "cursor": {
          "ref": "b7b4cf37-8be2-4029-b720-640f6c25e72e",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "5fa7c538-e265-4f94-99f8-40333debfeb4"
        },
        "item": {
          "id": "15ff2ad2-47d8-45f4-942f-e6bb72ef35eb",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "7cafb60b-9648-468f-bb48-adf160f9db14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4203ad34-5a51-4962-b346-295651d0b51f",
        "cursor": {
          "ref": "e10bdc3e-b4b5-479a-bfc4-0668e3d376ac",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "049b284c-0c98-4794-b133-e383d38aa1ac"
        },
        "item": {
          "id": "4203ad34-5a51-4962-b346-295651d0b51f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d6d92297-1d35-4cdd-a2bf-2203bc0bafe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4e417a-1f4b-4ab2-bdbc-182c43146de9",
        "cursor": {
          "ref": "2cd579c0-d42b-478a-94f6-684352de1d9e",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "8fbfd8bb-d2b9-411f-b70e-67b3a7575611"
        },
        "item": {
          "id": "bc4e417a-1f4b-4ab2-bdbc-182c43146de9",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "dc59f2c3-b215-4081-a3bf-5cdd73f400f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c3aba4-745f-4b17-b9ad-c5b220f9209c",
        "cursor": {
          "ref": "abdbffe4-b85b-4960-85a2-54c76046766c",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "c626b33e-9b3d-461a-a996-839857756d8d"
        },
        "item": {
          "id": "78c3aba4-745f-4b17-b9ad-c5b220f9209c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "1c9d3d6c-fe16-418d-8a57-8f378c678ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24ba3819-68e1-4c70-8277-d9478e8f7839",
        "cursor": {
          "ref": "25f49f26-8e81-457d-8edb-47cf5e3569cb",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "252c17c8-07e3-4ac7-904e-b02adfdbb56e"
        },
        "item": {
          "id": "24ba3819-68e1-4c70-8277-d9478e8f7839",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "21de94be-092a-4180-96d7-26fb68470f4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e792450-8348-4e68-b2ff-c2277d6dcd3c",
        "cursor": {
          "ref": "b142e787-ebaf-47e8-8039-e94f93477ab8",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "b5f01dfd-65e2-48c2-b3b1-ab10019bff70"
        },
        "item": {
          "id": "1e792450-8348-4e68-b2ff-c2277d6dcd3c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "5b52e712-4870-4eba-8df1-9e0a69532e9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c94cf5-d63c-4fa4-ad51-5c6c647ecae8",
        "cursor": {
          "ref": "affcfdd0-d939-4a51-ba33-d822dcc1073c",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "bb1b6bb8-56a2-4e7a-9cd6-1b7f007bf8a9"
        },
        "item": {
          "id": "57c94cf5-d63c-4fa4-ad51-5c6c647ecae8",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "c633c428-0b97-44bf-a7c1-ef2378f3a575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e559e548-4305-4204-be6c-3971d6bb45e6",
        "cursor": {
          "ref": "297a272b-cdd9-45b1-a17b-e79efed385e5",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "d66bd4a6-2e5b-480a-b757-e399d09ee1d0"
        },
        "item": {
          "id": "e559e548-4305-4204-be6c-3971d6bb45e6",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e3c68937-59d3-4c88-8074-e1b1b0f0ee5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e7bedc7-6815-4c2f-931b-432e6d1524e1",
        "cursor": {
          "ref": "4d4af31e-0ceb-412c-9071-a71999f4f4c2",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "d3e34071-c081-4097-b47c-f26762c80275"
        },
        "item": {
          "id": "7e7bedc7-6815-4c2f-931b-432e6d1524e1",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "79dd5709-22a1-4786-99b0-fc14bf574aad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd6ca99-5813-4121-8054-05d769a58914",
        "cursor": {
          "ref": "077c050b-0bd2-4d49-a43f-10d41d88c319",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "53662f89-5f1c-4dee-bd3f-3023267770b6"
        },
        "item": {
          "id": "9dd6ca99-5813-4121-8054-05d769a58914",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "be88b390-b906-41ce-a212-d6354f170adf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33cb876d-1581-48dc-b638-f3bc1c9a7a85",
        "cursor": {
          "ref": "d9ba60a4-fd74-4a47-b3a8-cf3c4258b761",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "7686e4d2-261c-45c3-8b62-28314388ad71"
        },
        "item": {
          "id": "33cb876d-1581-48dc-b638-f3bc1c9a7a85",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "07c57d5b-7040-4388-a574-1915ca040a99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c10e7d-fe46-4716-b841-8bc2ab9e908d",
        "cursor": {
          "ref": "b25b87ed-070e-494b-932e-777559687db2",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "1487b85b-c117-4924-991e-56c77843c78a"
        },
        "item": {
          "id": "c4c10e7d-fe46-4716-b841-8bc2ab9e908d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "cecb8326-1bc3-4a9b-8d13-a38edeff4863",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c16afad-911f-4154-b631-f45a6590a785",
        "cursor": {
          "ref": "a099c5dd-084d-443a-aecc-5b1ec3daebfd",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "6a5f0770-f6fd-4f2f-a47b-7ffc4a65fe9b"
        },
        "item": {
          "id": "9c16afad-911f-4154-b631-f45a6590a785",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "b5b86618-7d60-43e3-958a-d7f74234a774",
          "status": "OK",
          "code": 200,
          "responseTime": 238,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "936e4691-ef0c-406c-bde6-5d7a4b269235",
        "cursor": {
          "ref": "1d339735-a5d4-4af8-b651-3a941820dd86",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "ffb4121a-df0c-439a-875e-00de8ca90f03"
        },
        "item": {
          "id": "936e4691-ef0c-406c-bde6-5d7a4b269235",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a7ec17f6-0038-41b0-8252-03366f653ec6",
          "status": "OK",
          "code": 200,
          "responseTime": 180,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "106e47a1-d353-49ac-a50f-bc8bcf293bbd",
        "cursor": {
          "ref": "76ec8bc2-6884-4d44-95a2-3196dc186980",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "3936ff45-3f1d-42dc-bd16-224e0bc0b17f"
        },
        "item": {
          "id": "106e47a1-d353-49ac-a50f-bc8bcf293bbd",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "3ce34713-864c-4069-b78f-f9646ff0092a",
          "status": "OK",
          "code": 200,
          "responseTime": 193,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "64c9046a-bcea-4088-b7ac-78d763f2b2cc",
        "cursor": {
          "ref": "83fda60b-3ad4-4fbf-a150-af1da4402513",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "e82eb325-0860-4a25-87dd-12c0f14db9c7"
        },
        "item": {
          "id": "64c9046a-bcea-4088-b7ac-78d763f2b2cc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "10f7c523-5942-483b-9fcb-371dfcdbddcd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64c9046a-bcea-4088-b7ac-78d763f2b2cc",
        "cursor": {
          "ref": "83fda60b-3ad4-4fbf-a150-af1da4402513",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "e82eb325-0860-4a25-87dd-12c0f14db9c7"
        },
        "item": {
          "id": "64c9046a-bcea-4088-b7ac-78d763f2b2cc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "10f7c523-5942-483b-9fcb-371dfcdbddcd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b663299a-a9ca-4570-acea-c8bd39421a6d",
        "cursor": {
          "ref": "6e3530a9-99d9-4d13-a62e-1f5421f6da3c",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "7aea7ddd-cd76-4bba-a4d1-4ac44f7e5e29"
        },
        "item": {
          "id": "b663299a-a9ca-4570-acea-c8bd39421a6d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e9efd4bd-57bc-4fe0-98bc-ac92b389b483",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a566e45b-5a4f-4c35-9551-f9a0e60f25a7",
        "cursor": {
          "ref": "60746148-a271-4465-945d-9fbeeb94bdf7",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "f5891c5f-ebeb-43b4-8fa3-607cc9496a49"
        },
        "item": {
          "id": "a566e45b-5a4f-4c35-9551-f9a0e60f25a7",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ef0d1c67-d457-4bf7-a3bf-7ced7d294a4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}